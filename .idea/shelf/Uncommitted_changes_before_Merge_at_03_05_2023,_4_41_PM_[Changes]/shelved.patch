Index: checkout/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.library'\napply plugin: 'kotlin-android'\napply plugin: 'kotlin-android-extensions'\napply plugin: 'kotlin-kapt'\n\nandroid {\n    compileSdkVersion 31\n   // buildToolsVersion \"31.0.3\"\n\n    defaultConfig {\n        minSdkVersion 22\n        targetSdkVersion 31\n        versionCode 1\n        versionName \"1.0\"\n        multiDexEnabled true\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n        consumerProguardFiles 'consumer-rules.pro'\n    }\n\n\n    buildTypes {\n        release {\n            minifyEnabled true\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\n        }\n        buildTypes.each {\n            it.buildConfigField 'String', 'EncryptAPIKEY', EncryptAPIKEY\n        }\n\n\n    }\n\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_8\n        targetCompatibility JavaVersion.VERSION_1_8\n    }\n\n    kotlinOptions {\n        jvmTarget = JavaVersion.VERSION_1_8.toString()\n    }\n}\n\ndependencies {\n    implementation 'com.google.android.material:material:1.6.1'\n    def koin_version = '2.2.0-alpha-1'\n\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\n    implementation(\"androidx.lifecycle:lifecycle-extensions:2.2.0@aar\") {\n        transitive = true\n    }\n    def lifecycle_version = \"2.4.1\"\n    implementation \"androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version\"\n    implementation \"androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version\"\n    implementation \"androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version\"\n    kapt \"androidx.lifecycle:lifecycle-common-java8:$lifecycle_version\"\n\n    implementation \"androidx.fragment:fragment-ktx:1.4.1\"\n\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\n    implementation files('libs/benefitinappsdk-1.0.23.aar')\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version\"\n    implementation 'androidx.appcompat:appcompat:1.4.1'\n    implementation 'androidx.core:core-ktx:1.7.0'\n    api 'com.github.Tap-Payments:LocalisationManager-Android:0.0.1.34'\n    //  implementation 'com.github.Tap-Payments:TapCardInputKit-Android:0.1.0.25'\n    implementation 'com.github.Tap-Payments:TapCardInputKit-Android:0.1.0.36.205'\n    //   api 'com.github.Tap-Payments:TapCardInputKit-Android:0.1.0.25'\n    api 'com.github.Tap-Payments:TapCardInputKit-Android:0.1.0.36.205'\n    implementation \"com.hbb20:ccp:2.5.0\"\n    api 'androidx.activity:activity-ktx:1.4.0'\n    testImplementation 'junit:junit:4.13.2'\n    androidTestImplementation 'androidx.test.ext:junit:1.1.5'\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'\n    implementation 'com.github.bumptech.glide:glide:4.12.0'\n    kapt 'com.github.bumptech.glide:compiler:4.12.0'\n    implementation 'com.github.Tap-Payments:TapCardScannerKit-Android:0.0.1.18.6'\n    implementation 'company.tap:PayCards-Tap-Android:0.1.6.4'\n    api 'company.tap:PayCards-Tap-Android:0.1.6.4'\n    implementation(\"io.coil-kt:coil:1.2.0\")\n    implementation(\"io.coil-kt:coil-svg:1.2.0\")\n    implementation 'com.github.Tap-Payments:TapNFCCardReaderKit-Android:0.0.1.6.1'\n    implementation \"io.reactivex.rxjava2:rxjava:2.2.19\"\n    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'\n    api 'com.github.Tap-Payments:TapNetwrok-Android:0.2.2.25'\n    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.0'\n    api 'com.github.Tap-Payments:CommonDataModelsKit-Android:0.1.5'\n    api 'com.google.code.gson:gson:2.8.9'\n\n    implementation 'com.squareup.retrofit2:retrofit:2.9.0'\n    implementation 'androidx.multidex:multidex:2.0.1'\n    implementation 'androidx.recyclerview:recyclerview:1.2.1'\n    implementation \"androidx.fragment:fragment-ktx:1.5.7\"\n   // implementation 'com.gdacciaro:iosdialog:1.0.3'\n    implementation 'com.github.Tap-Payments:LocalisationManager-Android:0.0.1.34'\n    implementation 'com.koushikdutta.ion:ion:3.1.0'\n    implementation \"com.google.android.gms:play-services-wallet:19.1.0\"\n    implementation project(\":iosdialog\")\n\n    api 'com.github.Tap-Payments:TapUIKit-Android:1.1.1.358.318'\n    implementation 'com.github.2coffees1team:GlideToVectorYou:v2.0.0'\n    implementation 'com.fasterxml.jackson.core:jackson-core:2.11.1'\n    implementation 'com.fasterxml.jackson.core:jackson-databind:2.11.1'\n    implementation 'com.github.Tap-Payments:TapCardValidator-Android:2.1.11'\n//This is BungFender for logs\n    implementation 'com.bugfender.sdk:android:3.+'\n    implementation 'jp.wasabeef:blurry:4.0.1'\n    implementation 'com.github.blongho:worldCountryData:v1.5.4-alpha'\n\n    implementation 'com.squareup.retrofit2:retrofit:2.9.0'\n    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout/build.gradle b/checkout/build.gradle
--- a/checkout/build.gradle	(revision 99170d6c055adc7cce56cf0714329e9e7e92a080)
+++ b/checkout/build.gradle	(date 1683124796942)
@@ -68,6 +68,7 @@
     api 'com.github.Tap-Payments:TapCardInputKit-Android:0.1.0.36.205'
     implementation "com.hbb20:ccp:2.5.0"
     api 'androidx.activity:activity-ktx:1.4.0'
+
     testImplementation 'junit:junit:4.13.2'
     androidTestImplementation 'androidx.test.ext:junit:1.1.5'
     androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
@@ -97,7 +98,7 @@
     implementation "com.google.android.gms:play-services-wallet:19.1.0"
     implementation project(":iosdialog")
 
-    api 'com.github.Tap-Payments:TapUIKit-Android:1.1.1.358.318'
+    api 'com.github.Tap-Payments:TapUIKit-Android:1.1.1.358.322'
     implementation 'com.github.2coffees1team:GlideToVectorYou:v2.0.0'
     implementation 'com.fasterxml.jackson.core:jackson-core:2.11.1'
     implementation 'com.fasterxml.jackson.core:jackson-databind:2.11.1'
Index: checkout/src/main/java/company/tap/checkout/internal/adapter/ItemAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package company.tap.checkout.internal.adapter\n\nimport android.annotation.SuppressLint\nimport android.content.Context\nimport android.graphics.Color\nimport android.graphics.Paint\nimport android.graphics.Typeface\nimport android.text.InputFilter\nimport android.text.InputFilter.AllCaps\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.LinearLayout\nimport android.widget.RelativeLayout\nimport androidx.annotation.NonNull\nimport androidx.recyclerview.widget.RecyclerView\nimport company.tap.checkout.internal.api.enums.AmountModificatorType\nimport company.tap.checkout.internal.utils.CurrencyFormatter\nimport company.tap.checkout.open.data_managers.PaymentDataSource\nimport company.tap.checkout.open.models.ItemsModel\nimport company.tap.checkout.open.models.PaymentItem\nimport company.tap.taplocalizationkit.LocalizationManager\nimport company.tap.tapuilibrary.R\nimport company.tap.tapuilibrary.fontskit.enums.TapFont\nimport company.tap.tapuilibrary.themekit.ThemeManager\nimport company.tap.tapuilibrary.themekit.theme.SeparatorViewTheme\nimport company.tap.tapuilibrary.themekit.theme.TextViewTheme\nimport company.tap.tapuilibrary.uikit.atoms.TapImageView\nimport company.tap.tapuilibrary.uikit.atoms.TapSeparatorView\nimport company.tap.tapuilibrary.uikit.atoms.TapTextView\nimport company.tap.tapuilibrary.uikit.datasource.ItemViewDataSource\nimport company.tap.tapuilibrary.uikit.ktx.setBorderedView\nimport company.tap.tapuilibrary.uikit.views.TapItemListView\nimport company.tap.tapuilibrary.uikit.views.TapListItemView\n\n\n/**\nCopyright (c) 2020    Tap Payments.\nAll rights reserved.\n **/\nclass ItemAdapter :\n    RecyclerView.Adapter<ItemAdapter.ItemHolder>() {\n    private var previousExpandedPosition = -1\n    private var mExpandedPosition = -1\n    private lateinit var itemViewAdapter: TapItemListView\n    private lateinit var context: Context\n    private var arrayModifiedItem : ArrayList<Any> = ArrayList()\n    private var adapterContentItems: List<ItemsModel> = java.util.ArrayList()\n    override fun onCreateViewHolder(@NonNull parent: ViewGroup, viewType: Int): ItemHolder {\n\n\n        val v = LayoutInflater.from(parent.context).inflate(\n            R.layout.item_view_adapter,\n            parent,\n            false\n        )\n        context = parent.context\n        itemViewAdapter = v.findViewById(R.id.amount_item_view)\n        return ItemHolder(v)\n    }\n\n    fun updateAdapterData(adapterContentItems: List<ItemsModel>) {\n        println(\"adapterContentItems val\"+adapterContentItems)\n        this.adapterContentItems = adapterContentItems\n        notifyDataSetChanged()\n\n    }\n    override fun getItemCount() = adapterContentItems.size\n\n\n    class ItemHolder(v: View) : RecyclerView.ViewHolder(v)\n\n    @SuppressLint(\"SetTextI18n\")\n    override fun onBindViewHolder(holder: ItemHolder, position: Int) {\n        initView(holder, position)\n    }\n\n    private fun initView(holder: ItemHolder, position: Int) {\n        val descriptionTextView = holder.itemView.findViewById<TapTextView>(R.id.description_textView)\n        val descText = holder.itemView.findViewById<TapTextView>(R.id.brief_description)\n        val itemSeparator = holder.itemView.findViewById<TapSeparatorView>(R.id.itemseparator)\n        val totalQuantity = holder.itemView.findViewById<TapTextView>(R.id.total_quantity)\n      //  val discount = holder.itemView.findViewById<TapTextView>(R.id.discount_text)\n      //  val quantityRelative = holder.itemView.findViewById<RelativeLayout>(R.id.quantityRelative)\n        val totalAmount = holder.itemView.findViewById<TapTextView>(R.id.total_amount)\n        val mainViewLinear = holder.itemView.findViewById<LinearLayout>(R.id.mainViewLinear)\n        val itemName = holder.itemView.findViewById<TapTextView>(R.id.item_title)\n        itemName.filters = arrayOf<InputFilter>(AllCaps())\n        val isExpanded = position == mExpandedPosition\n        if(adapterContentItems.isNotEmpty()){\n            for (i in adapterContentItems.indices) {\n                descriptionTextView.text = adapterContentItems[position].description\n                descriptionTextView.visibility = if (isExpanded) View.VISIBLE else View.GONE\n                holder.itemView.isActivated = isExpanded\n               // totalQuantity.text = adapterContentItems[position].quantity?.toString()\n               /* itemViewAdapter.setItemViewDataSource(\n                    getItemViewDataSource(null, CurrencyFormatter.currencyFormat(adapterContentItems[position].totalAmount.toString()),adapterContentItems[position].currency ,  CurrencyFormatter.currencyFormat(adapterContentItems[position].totalAmount.toString()), adapterContentItems[position].currency, adapterContentItems[position].quantity.toString())\n                )*/\n\n//replaced PaymentDataSource.getSelectedCurrency with PaymentDataSource.getSelectedCurrencySymbol\n              //  println(\"PaymentDataSource.getSelectedCurrencySymbol()\"+PaymentDataSource.getSelectedCurrencySymbol())\n                PaymentDataSource.getSelectedCurrencySymbol()?.let {\n                    PaymentDataSource.getSelectedCurrencySymbol()?.let { it1 ->\n                        adapterContentItems[position].quantity?.toString()?.let { it2 ->\n                            getItemViewDataSource(adapterContentItems[position]?.name.toString().toUpperCase(), CurrencyFormatter.currencyFormat(adapterContentItems[position].getPlainAmount().toString() ),\n                                it,CurrencyFormatter.currencyFormat(adapterContentItems[position].amount.toString() ),\n                                it1,\n                                it2\n                            )\n                        }\n                    }\n                }?.let {\n                    itemViewAdapter.setItemViewDataSource(\n                        it\n                    )\n                }\n            }\n\n            descText?.text = \"Static name for now\"\n            // This to be handled in ui kit\n            totalAmount.text = PaymentDataSource.getSelectedCurrencySymbol()+CurrencyFormatter.currencyFormat(adapterContentItems[position].amount.toString())+\"X\"+adapterContentItems[position].quantity?.toString()\n\n        }else{\n           // descriptionTextView.text = adapterContentItems[0].description\n            descriptionTextView.visibility = if (isExpanded) View.VISIBLE else View.GONE\n            holder.itemView.isActivated = isExpanded\n        }\n        holder.itemView.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"itemsList.item.backgroundColor\")))\n\n        onItemClickAction(holder, position, isExpanded)\n        showHideDescText(isExpanded, position, descText)\n        setTheme(descriptionTextView, descText, totalQuantity, totalAmount, itemName, itemSeparator, mainViewLinear,null)\n      if(LocalizationManager.getLocale(context).language==\"en\"){\n          setFontsEnglish(itemName, totalAmount, descText, descriptionTextView, totalQuantity)\n      }else setFontsArabic(itemName, totalAmount, descText, descriptionTextView, totalQuantity)\n\n      //  checkItemListPosition(position, discount, totalAmount, itemName)\n        checkItemListPosition(position, totalAmount, itemName)\n    }\n\n    private fun showHideDescText(isExpanded: Boolean, position: Int, descText: TapTextView?) {\n        if (isExpanded) {\n            previousExpandedPosition = position\n           // descText?.text = LocalizationManager.getValue(\"hideDesc\", \"ItemList\")\n            itemViewAdapter.collapseImageView?.visibility= View.VISIBLE\n            itemViewAdapter.expandImageView?.visibility= View.GONE\n        } else {\n           // descText?.text = LocalizationManager.getValue(\"showDesc\", \"ItemList\")\n            itemViewAdapter.expandImageView?.visibility= View.VISIBLE\n            itemViewAdapter.collapseImageView?.visibility= View.GONE\n        }\n    }\n\n    private fun onItemClickAction(holder: ItemHolder, position: Int, isExpanded: Boolean) {\n        holder.itemView.setOnClickListener {\n            itemViewAdapter.visibility = View.VISIBLE\n            mExpandedPosition = if (isExpanded) -1 else position\n            notifyItemChanged(previousExpandedPosition)\n            notifyItemChanged(position)\n        }\n    }\n\n\n    @SuppressLint(\"SetTextI18n\")\n    private fun checkItemListPosition(\n        position: Int,\n       // discount: TapTextView?,\n        totalAmount: TapTextView?,\n        itemName: TapTextView?\n    ) {\n        if(adapterContentItems.isEmpty()) {\n            if (position % 2 == 0) {\n                //discount?.visibility = View.VISIBLE\n               // discount?.text = LocalizationManager.getValue(\"Discount\", \"ItemList\")\n                totalAmount?.paintFlags = totalAmount?.paintFlags?.or(Paint.STRIKE_THRU_TEXT_FLAG)!!\n                itemName?.text = \"ITEM TITLE \" + adapterContentItems[position]\n            } else {\n                //discount?.visibility = View.INVISIBLE\n                totalAmount?.paintFlags = totalAmount?.paintFlags?.and(Paint.STRIKE_THRU_TEXT_FLAG.inv())!!\n                itemName?.text =\n                    \"VERY LOOOONNGGGG ITEM TITLE ITEM TITLE TITLE ITEM TITLETITLE ITEM TITLETITLE ITEM TITLETITLE ITEM TITLETITLE ITEM TITLETITLE ITEM TITLE \" + adapterContentItems[position]\n            }\n        }else\n            for (i in adapterContentItems.indices) {\n                itemName?.text = adapterContentItems[position].name\n                if(adapterContentItems[position].discount?.amnttype?.name == AmountModificatorType.PERCENTAGE.name){\n                 //   discount?.visibility = View.VISIBLE\n                 //  discount?.text = adapterContentItems[i].discount.toString()\n                //    discount?.text = LocalizationManager.getValue(\"Discount\", \"ItemList\")\n                    totalAmount?.paintFlags = totalAmount?.paintFlags?.or(Paint.STRIKE_THRU_TEXT_FLAG)!!\n                    totalAmount.text = adapterContentItems[position].getPlainAmount().toString()\n\n                }else{\n                   // discount?.visibility = View.INVISIBLE\n                    //totalAmount?.paintFlags = totalAmount?.paintFlags?.and(Paint.STRIKE_THRU_TEXT_FLAG.inv())!!\n                  //  totalAmount?.text = \"KWD 4 x 3\"\n                }\n            }\n\n    }\n\n\n    private fun setTheme(\n        descriptionTextView: TapTextView?,\n       // discount: TapTextView?,\n        descText: TapTextView?,\n        totalQuantity: TapTextView?,\n        totalAmount: TapTextView?,\n        itemName: TapTextView?,\n        itemSeparator: TapSeparatorView?,\n        mainViewLinear: LinearLayout?,\n        quantityRelative: RelativeLayout?\n    ) {\n\n        itemViewAdapter.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"itemsList.item.backgroundColor\")))\n        val descriptionTextViewTheme = TextViewTheme()\n        descriptionTextViewTheme.textColor = Color.parseColor(ThemeManager.getValue(\"itemsList.item.descLabelColor\"))\n        descriptionTextViewTheme.backgroundColor = Color.parseColor(ThemeManager.getValue(\"itemsList.item.backgroundColor\"))\n        descriptionTextViewTheme.textSize = ThemeManager.getFontSize(\"itemsList.item.descLabelFont\")\n        descriptionTextViewTheme.font = ThemeManager.getFontName(\"itemsList.item.descLabelFont\")\n        descriptionTextView?.setTheme(descriptionTextViewTheme)\n       // discount?.setTheme(descriptionTextViewTheme)\n        descText?.setTheme(descriptionTextViewTheme)\n\n        mainViewLinear?.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"itemsList.item.backgroundColor\")))\n\n        val totalQuantityTextViewTheme = TextViewTheme()\n        totalQuantityTextViewTheme.textColor =\n            Color.parseColor(ThemeManager.getValue(\"itemsList.item.count.countLabelColor\"))\n        totalQuantityTextViewTheme.textSize =\n            ThemeManager.getFontSize(\"itemsList.item.count.countLabelFont\")\n        totalQuantityTextViewTheme.font =\n            ThemeManager.getFontName(\"itemsList.item.count.countLabelFont\")\n        totalQuantity?.setTheme(totalQuantityTextViewTheme)\n\n\n        val totalAmountTextViewTheme = TextViewTheme()\n        totalAmountTextViewTheme.textColor =\n            Color.parseColor(ThemeManager.getValue(\"itemsList.item.calculatedPriceLabelColor\"))\n        totalAmountTextViewTheme.textSize =\n            ThemeManager.getFontSize(\"itemsList.item.calculatedPriceLabelFont\")\n        totalAmountTextViewTheme.font =\n            ThemeManager.getFontName(\"itemsList.item.calculatedPriceLabelFont\")\n        totalAmount?.setTheme(totalAmountTextViewTheme)\n\n        quantityRelative?.let {\n            setBorderedView(\n                it,\n                50f,\n                0.0f,\n                Color.parseColor(ThemeManager.getValue(\"itemsList.item.count.backgroundColor\")),\n                Color.parseColor(ThemeManager.getValue(\"itemsList.item.count.backgroundColor\")),\n                Color.parseColor(ThemeManager.getValue(\"itemsList.item.count.backgroundColor\"))\n            )\n        }\n\n\n        val itemTitleTextViewTheme = TextViewTheme()\n        itemTitleTextViewTheme.textColor =\n            Color.parseColor(ThemeManager.getValue(\"itemsList.item.titleLabelColor\"))\n        itemTitleTextViewTheme.textSize = ThemeManager.getFontSize(\"itemsList.item.titleLabelFont\")\n        itemTitleTextViewTheme.font = ThemeManager.getFontName(\"itemsList.item.titleLabelFont\")\n        itemName?.setTheme(itemTitleTextViewTheme)\n\n\n        val separatorViewTheme = SeparatorViewTheme()\n        separatorViewTheme.strokeColor = Color.parseColor(ThemeManager.getValue(\"itemsList.separatorColor\"))\n        itemSeparator?.setTheme(separatorViewTheme)\n\n    }\n\n\n    private fun setFontsEnglish(\n        itemName: TapTextView?, totalAmount: TapTextView?,\n       // discount: TapTextView?,\n        descText: TapTextView?,\n        descriptionTextView: TapTextView?, totalQuantity: TapTextView?\n    ) {\n        itemName?.typeface = Typeface.createFromAsset(\n            context?.assets, TapFont.tapFontType(\n                TapFont.RobotoRegular\n            )\n        )\n        totalAmount?.typeface = Typeface.createFromAsset(\n            context.assets, TapFont.tapFontType(\n                TapFont.RobotoRegular\n            )\n        )\n        /*discount?.typeface = Typeface.createFromAsset(\n            context?.assets, TapFont.tapFontType(\n                TapFont.RobotoLight\n            )\n        )*/\n        descText?.typeface = Typeface.createFromAsset(\n            context?.assets, TapFont.tapFontType(\n                TapFont.RobotoLight\n            )\n        )\n        descriptionTextView?.typeface = Typeface.createFromAsset(\n            context?.assets, TapFont.tapFontType(\n                TapFont.RobotoLight\n            )\n        )\n        // itemViewAdapter.setItemViewDataSource(getItemViewDataSource())\n        totalQuantity?.typeface = Typeface.createFromAsset(\n            context?.assets, TapFont.tapFontType(\n                TapFont.RobotoRegular\n            )\n        )\n    }\n\n    private fun setFontsArabic(\n        itemName: TapTextView?, totalAmount: TapTextView?,\n       // discount: TapTextView?,\n        descText: TapTextView?,\n        descriptionTextView: TapTextView?, totalQuantity: TapTextView?\n    ) {\n        itemName?.typeface = Typeface.createFromAsset(\n            context?.assets, TapFont.tapFontType(\n                TapFont.TajawalMedium\n            )\n        )\n        totalAmount?.typeface = Typeface.createFromAsset(\n            context?.assets, TapFont.tapFontType(\n                TapFont.TajawalMedium\n            )\n        )\n       /* discount?.typeface = Typeface.createFromAsset(\n            context?.assets, TapFont.tapFontType(\n                TapFont.TajawalLight\n            )\n        )*/\n        descText?.typeface = Typeface.createFromAsset(\n            context?.assets, TapFont.tapFontType(\n                TapFont.TajawalLight\n            )\n        )\n        descriptionTextView?.typeface = Typeface.createFromAsset(\n            context?.assets, TapFont.tapFontType(\n                TapFont.TajawalLight\n            )\n        )\n        // itemViewAdapter.setItemViewDataSource(getItemViewDataSource())\n        totalQuantity?.typeface = Typeface.createFromAsset(\n            context?.assets, TapFont.tapFontType(\n                TapFont.TajawalMedium\n            )\n        )\n    }\n\n    private fun getItemViewDataSource(\n        itemTitle: String?,\n        itemAmount: String,\n        itemAmountCurr:String, totalAmount: String,\n        totalAmountCurr:String, totalQuantity: String): ItemViewDataSource {\n        return ItemViewDataSource(\n            itemTitle = itemTitle,\n            itemAmount = itemAmount,\n            itemAmountCurr = itemAmountCurr,\n            totalAmount =totalAmount,\n            totalAmountCurr = totalAmountCurr,\n            totalQuantity = totalQuantity\n        )\n    }\n\n\n\n\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout/src/main/java/company/tap/checkout/internal/adapter/ItemAdapter.kt b/checkout/src/main/java/company/tap/checkout/internal/adapter/ItemAdapter.kt
--- a/checkout/src/main/java/company/tap/checkout/internal/adapter/ItemAdapter.kt	(revision 99170d6c055adc7cce56cf0714329e9e7e92a080)
+++ b/checkout/src/main/java/company/tap/checkout/internal/adapter/ItemAdapter.kt	(date 1683124823989)
@@ -7,38 +7,40 @@
 import android.graphics.Typeface
 import android.text.InputFilter
 import android.text.InputFilter.AllCaps
+import android.util.TypedValue
 import android.view.LayoutInflater
 import android.view.View
 import android.view.ViewGroup
+import android.widget.FrameLayout
 import android.widget.LinearLayout
 import android.widget.RelativeLayout
 import androidx.annotation.NonNull
 import androidx.recyclerview.widget.RecyclerView
+import com.google.android.material.bottomsheet.BottomSheetBehavior.STATE_EXPANDED
+import com.google.android.material.bottomsheet.BottomSheetDialog
 import company.tap.checkout.internal.api.enums.AmountModificatorType
 import company.tap.checkout.internal.utils.CurrencyFormatter
+import company.tap.checkout.internal.viewmodels.CheckoutViewModel
 import company.tap.checkout.open.data_managers.PaymentDataSource
 import company.tap.checkout.open.models.ItemsModel
-import company.tap.checkout.open.models.PaymentItem
 import company.tap.taplocalizationkit.LocalizationManager
 import company.tap.tapuilibrary.R
 import company.tap.tapuilibrary.fontskit.enums.TapFont
 import company.tap.tapuilibrary.themekit.ThemeManager
 import company.tap.tapuilibrary.themekit.theme.SeparatorViewTheme
 import company.tap.tapuilibrary.themekit.theme.TextViewTheme
-import company.tap.tapuilibrary.uikit.atoms.TapImageView
 import company.tap.tapuilibrary.uikit.atoms.TapSeparatorView
 import company.tap.tapuilibrary.uikit.atoms.TapTextView
 import company.tap.tapuilibrary.uikit.datasource.ItemViewDataSource
 import company.tap.tapuilibrary.uikit.ktx.setBorderedView
 import company.tap.tapuilibrary.uikit.views.TapItemListView
-import company.tap.tapuilibrary.uikit.views.TapListItemView
 
 
 /**
 Copyright (c) 2020    Tap Payments.
 All rights reserved.
  **/
-class ItemAdapter :
+class ItemAdapter(private var checkoutViewModel: CheckoutViewModel,private var bottomSheetLayout: FrameLayout) :
     RecyclerView.Adapter<ItemAdapter.ItemHolder>() {
     private var previousExpandedPosition = -1
     private var mExpandedPosition = -1
@@ -75,9 +77,11 @@
         initView(holder, position)
     }
 
+    @SuppressLint("SetTextI18n")
     private fun initView(holder: ItemHolder, position: Int) {
         val descriptionTextView = holder.itemView.findViewById<TapTextView>(R.id.description_textView)
-        val descText = holder.itemView.findViewById<TapTextView>(R.id.brief_description)
+        val nameText = holder.itemView.findViewById<TapTextView>(R.id.brief_description)
+
         val itemSeparator = holder.itemView.findViewById<TapSeparatorView>(R.id.itemseparator)
         val totalQuantity = holder.itemView.findViewById<TapTextView>(R.id.total_quantity)
       //  val discount = holder.itemView.findViewById<TapTextView>(R.id.discount_text)
@@ -115,10 +119,10 @@
                     )
                 }
             }
-
-            descText?.text = "Static name for now"
+            nameText.setTextSize(TypedValue.COMPLEX_UNIT_SP, 24F);
+            nameText?.text = adapterContentItems[position].name
             // This to be handled in ui kit
-            totalAmount.text = PaymentDataSource.getSelectedCurrencySymbol()+CurrencyFormatter.currencyFormat(adapterContentItems[position].amount.toString())+"X"+adapterContentItems[position].quantity?.toString()
+            totalAmount.text = PaymentDataSource.getSelectedCurrencySymbol()+ " " + CurrencyFormatter.currencyFormat(adapterContentItems[position].amount.toString())+ " X " +adapterContentItems[position].quantity?.toString()
 
         }else{
            // descriptionTextView.text = adapterContentItems[0].description
@@ -128,13 +132,14 @@
         holder.itemView.setBackgroundColor(Color.parseColor(ThemeManager.getValue("itemsList.item.backgroundColor")))
 
         onItemClickAction(holder, position, isExpanded)
-        showHideDescText(isExpanded, position, descText)
-        setTheme(descriptionTextView, descText, totalQuantity, totalAmount, itemName, itemSeparator, mainViewLinear,null)
-      if(LocalizationManager.getLocale(context).language=="en"){
-          setFontsEnglish(itemName, totalAmount, descText, descriptionTextView, totalQuantity)
-      }else setFontsArabic(itemName, totalAmount, descText, descriptionTextView, totalQuantity)
+        showHideDescText(isExpanded, position, nameText)
+        setTheme(descriptionTextView, nameText, totalQuantity, totalAmount, itemName, itemSeparator, mainViewLinear,null)
+      //  nameText.setTextSize(TypedValue.COMPLEX_UNIT_SP, 24F);
+
+        if(LocalizationManager.getLocale(context).language=="en"){
+          setFontsEnglish(itemName, totalAmount, nameText, descriptionTextView, totalQuantity)
+      }else setFontsArabic(itemName, totalAmount, nameText, descriptionTextView, totalQuantity)
 
-      //  checkItemListPosition(position, discount, totalAmount, itemName)
         checkItemListPosition(position, totalAmount, itemName)
     }
 
@@ -144,6 +149,9 @@
            // descText?.text = LocalizationManager.getValue("hideDesc", "ItemList")
             itemViewAdapter.collapseImageView?.visibility= View.VISIBLE
             itemViewAdapter.expandImageView?.visibility= View.GONE
+            checkoutViewModel.translateViewToNewHeight(bottomSheetLayout.measuredHeight,true)
+
+
         } else {
            // descText?.text = LocalizationManager.getValue("showDesc", "ItemList")
             itemViewAdapter.expandImageView?.visibility= View.VISIBLE
Index: checkout/src/main/java/company/tap/checkout/internal/viewholders/ItemsViewHolder.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package company.tap.checkout.internal.viewholders\n\nimport android.annotation.SuppressLint\nimport android.content.Context\nimport android.graphics.Color\nimport android.graphics.drawable.ShapeDrawable\nimport android.view.LayoutInflater\nimport android.view.MotionEvent\nimport android.view.View\nimport androidx.constraintlayout.widget.ConstraintLayout\nimport androidx.recyclerview.widget.DividerItemDecoration\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport androidx.recyclerview.widget.RecyclerView\nimport company.tap.checkout.R\nimport company.tap.checkout.internal.adapter.CurrencyTypeAdapter\nimport company.tap.checkout.internal.adapter.ItemAdapter\nimport company.tap.checkout.internal.api.models.SupportedCurrencies\n\nimport company.tap.checkout.internal.enums.SectionType\nimport company.tap.checkout.internal.interfaces.OnCurrencyChangedActionListener\nimport company.tap.checkout.internal.utils.CustomUtils\nimport company.tap.checkout.open.models.ItemsModel\nimport company.tap.tapuilibrary.themekit.ThemeManager\nimport company.tap.tapuilibrary.uikit.atoms.TapChipGroup\nimport company.tap.tapuilibrary.uikit.atoms.TapSeparatorView\n\n/**\n *\n * Copyright © 2020 Tap Payments. All rights reserved.\n *\n */\n@SuppressLint(\"ClickableViewAccessibility\")\nclass ItemsViewHolder(private val context: Context, private val onCurrencyChangedActionListener: OnCurrencyChangedActionListener) :\n    TapBaseViewHolder {\n    override val view = LayoutInflater.from(context).inflate(\n        R.layout.itemviewholder_layout,\n        null\n    )\n\n    override val type = SectionType.SELECT\n\n    var itemsdisplayed: Boolean = false\n    private lateinit var supportedCurrecnyList: ArrayList<SupportedCurrencies>\n    private  var supportedItemList: List<ItemsModel>?=null\n     var mainCurrencyChip: TapChipGroup\n     var itemsRecyclerView:RecyclerView\n     var currencyRecyclerView:RecyclerView\n     var headerview:ConstraintLayout\n     var itemSeparatorView: TapSeparatorView\n    private val adapterItems by lazy { ItemAdapter() }\n    private val adapterCurrency by lazy { CurrencyTypeAdapter(onCurrencyChangedActionListener) }\n\n    init {\n        mainCurrencyChip = view.findViewById(R.id.mainCurrencyChip)\n        mainCurrencyChip.groupAction.visibility = View.GONE\n        mainCurrencyChip.groupName.visibility = View.GONE\n\n        itemsRecyclerView = view.findViewById(R.id.itemRecylerView)\n        currencyRecyclerView = mainCurrencyChip.findViewById<View>(R.id.chip_recycler) as RecyclerView\n        headerview = view.findViewById<View>(R.id.header_view) as ConstraintLayout\n        itemSeparatorView = view.findViewById<View>(R.id.item_Separator) as TapSeparatorView\n        headerview.visibility = View.GONE\n        itemsRecyclerViewAction(itemsRecyclerView)\n        setRecyclerViewDivider(currencyRecyclerView)\n        currencyRecyclerView.layoutManager = LinearLayoutManager(context, RecyclerView.HORIZONTAL, false)\n        itemsRecyclerView.layoutManager = LinearLayoutManager(context, RecyclerView.VERTICAL, false)\n\n        // currencyRecyclerView.adapter = adapterCurrency\n        mainCurrencyChip.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"horizontalList.backgroundColor\")))\n        itemsRecyclerView.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"horizontalList.backgroundColor\")))\n        itemSeparatorView.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"itemsList.separatorColor\")))\n        if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains(\"dark\")){\n            itemSeparatorView.visibility = View.GONE\n        }else itemSeparatorView.visibility = View.VISIBLE\n\n\n\n    }\n\n    private fun itemsRecyclerViewAction(itemsRecyclerView: RecyclerView) {\n        itemsRecyclerView.setOnTouchListener { v, event ->\n            when (event.action) {\n                MotionEvent.ACTION_DOWN ->                         // Disallow NestedScrollView to intercept touch events.\n                    v.parent.requestDisallowInterceptTouchEvent(true)\n                MotionEvent.ACTION_UP ->                         // Allow NestedScrollView to intercept touch events.\n                    v.parent.requestDisallowInterceptTouchEvent(false)\n            }\n            // Handle RecyclerView touch events.\n            v.onTouchEvent(event)\n            true\n        }\n    }\n\n    private fun setRecyclerViewDivider(currencyRecyclerView: RecyclerView) {\n        val divider = DividerItemDecoration(context, DividerItemDecoration.HORIZONTAL)\n        divider.setDrawable(ShapeDrawable().apply {\n            intrinsicWidth = 25\n            paint.color = Color.TRANSPARENT\n        }) // note: currently (support version 28.0.0), we can not use tranparent color here, if we use transparent, we still see a small divider line. So if we want to display transparent space, we can set color = background color or we can create a custom ItemDecoration instead of DividerItemDecoration.\n        currencyRecyclerView.addItemDecoration(divider)\n    }\n\n    override fun bindViewComponents() {\n\n    }\n\n    /**\n     * Sets data from API through LayoutManager\n     * @param supportedCurrencyApi represents the supported currency for the Merchant.\n     * @param supportItemListApi represents the supported currency for the Merchant.\n     * */\n    fun setDataFromAPI(\n        supportedCurrencyApi: ArrayList<SupportedCurrencies>,\n        supportItemListApi: List<ItemsModel>?\n    ) {\n        supportedCurrecnyList = supportedCurrencyApi\n        if (supportItemListApi != null) {\n            supportedItemList = supportItemListApi\n        }\n   //    println(\"supportedItemList curr list:$supportedItemList\")\n\n    }\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout/src/main/java/company/tap/checkout/internal/viewholders/ItemsViewHolder.kt b/checkout/src/main/java/company/tap/checkout/internal/viewholders/ItemsViewHolder.kt
--- a/checkout/src/main/java/company/tap/checkout/internal/viewholders/ItemsViewHolder.kt	(revision 99170d6c055adc7cce56cf0714329e9e7e92a080)
+++ b/checkout/src/main/java/company/tap/checkout/internal/viewholders/ItemsViewHolder.kt	(date 1683122162350)
@@ -18,7 +18,6 @@
 
 import company.tap.checkout.internal.enums.SectionType
 import company.tap.checkout.internal.interfaces.OnCurrencyChangedActionListener
-import company.tap.checkout.internal.utils.CustomUtils
 import company.tap.checkout.open.models.ItemsModel
 import company.tap.tapuilibrary.themekit.ThemeManager
 import company.tap.tapuilibrary.uikit.atoms.TapChipGroup
@@ -47,7 +46,7 @@
      var currencyRecyclerView:RecyclerView
      var headerview:ConstraintLayout
      var itemSeparatorView: TapSeparatorView
-    private val adapterItems by lazy { ItemAdapter() }
+  //  private val adapterItems by lazy { ItemAdapter(bottomSheetDialog) }
     private val adapterCurrency by lazy { CurrencyTypeAdapter(onCurrencyChangedActionListener) }
 
     init {
@@ -70,7 +69,7 @@
         itemsRecyclerView.setBackgroundColor(Color.parseColor(ThemeManager.getValue("horizontalList.backgroundColor")))
         itemSeparatorView.setBackgroundColor(Color.parseColor(ThemeManager.getValue("itemsList.separatorColor")))
         if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains("dark")){
-            itemSeparatorView.visibility = View.GONE
+            itemSeparatorView.visibility = View.VISIBLE
         }else itemSeparatorView.visibility = View.VISIBLE
 
 
Index: checkout/src/main/java/company/tap/checkout/internal/viewmodels/CheckoutViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package company.tap.checkout.internal.viewmodels\n\nimport android.annotation.SuppressLint\nimport android.app.Activity\nimport android.content.Context\nimport android.content.Intent\nimport android.content.res.Resources\nimport android.graphics.Color\nimport android.graphics.drawable.ShapeDrawable\nimport android.net.Uri\nimport android.os.Build\nimport android.os.Handler\nimport android.os.Looper\nimport android.text.format.DateFormat\nimport android.util.Log\nimport android.view.View\nimport android.view.ViewGroup\nimport android.view.animation.AnimationUtils\nimport android.widget.FrameLayout\nimport android.widget.LinearLayout\nimport androidx.annotation.Nullable\nimport androidx.annotation.RequiresApi\nimport androidx.annotation.RestrictTo\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.core.view.isNotEmpty\nimport androidx.core.view.isVisible\nimport androidx.fragment.app.FragmentManager\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.ViewModel\nimport androidx.recyclerview.widget.DividerItemDecoration\nimport androidx.transition.Fade\nimport androidx.transition.Scene\nimport androidx.transition.Transition\nimport androidx.transition.TransitionManager\nimport cards.pay.paycardsrecognizer.sdk.FrameManager\nimport cards.pay.paycardsrecognizer.sdk.ui.InlineViewCallback\nimport com.bugfender.sdk.Bugfender\nimport com.bumptech.glide.Glide\nimport com.fasterxml.jackson.databind.ObjectMapper\nimport com.google.android.gms.wallet.PaymentData\nimport com.google.android.material.bottomsheet.BottomSheetBehavior\nimport com.google.android.material.bottomsheet.BottomSheetDialog\nimport com.google.gson.Gson\nimport com.google.gson.JsonObject\nimport company.tap.cardinputwidget.CardBrandSingle\nimport company.tap.cardinputwidget.CardInputUIStatus\nimport company.tap.cardinputwidget.widget.CardInputListener\nimport company.tap.cardscanner.*\nimport company.tap.checkout.R\nimport company.tap.checkout.internal.PaymentDataProvider\nimport company.tap.checkout.internal.adapter.CardTypeAdapterUIKIT\nimport company.tap.checkout.internal.adapter.CurrencyTypeAdapter\nimport company.tap.checkout.internal.adapter.GoPayCardAdapterUIKIT\nimport company.tap.checkout.internal.adapter.ItemAdapter\nimport company.tap.checkout.internal.api.enums.ChargeStatus\nimport company.tap.checkout.internal.api.enums.PaymentType\nimport company.tap.checkout.internal.api.models.*\nimport company.tap.checkout.internal.api.requests.CreateTokenGPayRequest\nimport company.tap.checkout.internal.api.responses.DeleteCardResponse\nimport company.tap.checkout.internal.api.responses.InitResponseModel\nimport company.tap.checkout.internal.api.responses.MerchantData\nimport company.tap.checkout.internal.api.responses.PaymentOptionsResponse\nimport company.tap.checkout.internal.apiresponse.CardViewEvent\nimport company.tap.checkout.internal.apiresponse.CardViewModel\nimport company.tap.checkout.internal.apiresponse.UserRepository\nimport company.tap.checkout.internal.apiresponse.testmodels.GoPaySavedCards\nimport company.tap.checkout.internal.apiresponse.testmodels.TapCardPhoneListDataSource\nimport company.tap.checkout.internal.cache.SharedPrefManager\nimport company.tap.checkout.internal.cache.UserSupportedLocaleForTransactions\nimport company.tap.checkout.internal.enums.PaymentTypeEnum\nimport company.tap.checkout.internal.enums.SectionType\nimport company.tap.checkout.internal.enums.WebViewType\nimport company.tap.checkout.internal.interfaces.*\nimport company.tap.checkout.internal.utils.*\nimport company.tap.checkout.internal.utils.AmountCalculator.calculateExtraFeesAmount\nimport company.tap.checkout.internal.viewholders.*\nimport company.tap.checkout.internal.webview.WebFragment\nimport company.tap.checkout.internal.webview.WebViewContract\nimport company.tap.checkout.open.CheckOutActivity\nimport company.tap.checkout.open.CheckoutFragment\nimport company.tap.checkout.open.controller.SDKSession\nimport company.tap.checkout.open.controller.SDKSession.supportFragmentManager\nimport company.tap.checkout.open.controller.SDKSession.tabAnimatedActionButton\nimport company.tap.checkout.open.controller.SessionManager\nimport company.tap.checkout.open.data_managers.PaymentDataSource\nimport company.tap.checkout.open.enums.CardType\nimport company.tap.checkout.open.enums.TransactionMode\nimport company.tap.checkout.open.models.ItemsModel\nimport company.tap.nfcreader.open.reader.TapEmvCard\nimport company.tap.taplocalizationkit.LocalizationManager\nimport company.tap.tapuilibrary.themekit.ThemeManager\nimport company.tap.tapuilibrary.themekit.theme.SeparatorViewTheme\nimport company.tap.tapuilibrary.uikit.datasource.LoyaltyHeaderDataSource\nimport company.tap.tapuilibrary.uikit.enums.ActionButtonState\nimport company.tap.tapuilibrary.uikit.enums.GoPayLoginMethod\nimport company.tap.tapuilibrary.uikit.fragment.NFCFragment\nimport company.tap.tapuilibrary.uikit.ktx.loadAppThemManagerFromPath\nimport company.tap.tapuilibrary.uikit.ktx.makeLinks\nimport company.tap.tapuilibrary.uikit.ktx.setTopBorders\nimport company.tap.tapuilibrary.uikit.views.TabAnimatedActionButton\nimport kotlinx.android.synthetic.main.amountview_layout.view.*\nimport kotlinx.android.synthetic.main.businessview_layout.view.*\nimport kotlinx.android.synthetic.main.cardviewholder_layout1.view.*\nimport kotlinx.android.synthetic.main.gopaysavedcard_layout.view.*\nimport kotlinx.android.synthetic.main.itemviewholder_layout.view.*\nimport kotlinx.android.synthetic.main.loyalty_view_layout.view.*\nimport kotlinx.android.synthetic.main.otpview_layout.view.*\nimport kotlinx.android.synthetic.main.switch_layout.view.*\nimport mobi.foo.benefitinapp.data.Transaction\nimport mobi.foo.benefitinapp.listener.CheckoutListener\nimport mobi.foo.benefitinapp.utils.BenefitInAppCheckout\nimport org.json.JSONException\nimport org.json.JSONObject\nimport java.math.BigDecimal\nimport kotlin.properties.Delegates\n\n\n/**\n *\n * Copyright © 2020 Tap Payments. All rights reserved.\n *\n */\n@RestrictTo(RestrictTo.Scope.LIBRARY)\nopen class CheckoutViewModel : ViewModel(), BaseLayoutManager, OnCardSelectedActionListener,\n    PaymentCardComplete, onCardNFCCallListener, OnCurrencyChangedActionListener, WebViewContract,\n    TapTextRecognitionCallBack, TapScannerCallback, CheckoutListener {\n    private var savedCardList: MutableList<SavedCard>? = mutableListOf()\n    private var arrayListSavedCardSize = ArrayList<SavedCard>()\n    private var supportedLoyalCards = MutableLiveData<List<LoyaltySupportedCurrency>>()\n    private var paymentOptionsList = MutableLiveData<List<PaymentOption>>()\n    private var goPayCardList = MutableLiveData<List<GoPaySavedCards>>()\n    private var selectedViewToBeDeletedFromCardViewHolder: ViewGroup? = null\n    private var viewToBeBlurCardViewHolder: View? = null\n\n    private var allCurrencies = MutableLiveData<List<SupportedCurrencies>>()\n    private var selectedItemsDel by Delegates.notNull<Int>()\n    private var cardIDToBeDeleted: Int? = 0\n\n    private val isShaking = MutableLiveData<Boolean>()\n    val localCurrencyReturned = MutableLiveData<Boolean>()\n    val powerdByTapAnimationFinished = MutableLiveData<Boolean>()\n\n    private var deleteCard: Boolean = false\n    private var isCardDeletedSuccessfully: Boolean = false\n    private var displayItemsOpen: Boolean = false\n    private var displayOtpIsOpen: Boolean = false\n    private var saveCardSwitchHolder: SwitchViewHolder? = null\n    lateinit var userRepository: UserRepository\n\n    private lateinit var title: String\n    private lateinit var paymentInlineViewHolder: PaymentInlineViewHolder\n    private lateinit var goPaySavedCardHolder: GoPaySavedCardHolder\n    private lateinit var businessViewHolder: BusinessViewHolder\n    private lateinit var amountViewHolder: AmountViewHolder\n    private lateinit var currencyAdapter: CurrencyTypeAdapter\n    private lateinit var goPayAdapter: GoPayCardAdapterUIKIT\n    private lateinit var goPayViewsHolder: GoPayViewsHolder\n    private lateinit var itemsViewHolder: ItemsViewHolder\n    private lateinit var cardViewHolder: CardViewHolder\n    private lateinit var webViewHolder: WebViewHolder\n    private lateinit var asynchronousPaymentViewHolder: AsynchronousPaymentViewHolder\n    private lateinit var loyaltyViewHolder: LoyaltyViewHolder\n\n    private var tabAnimatedActionButtonViewHolder: TabAnimatedActionButtonViewHolder? = null\n    private lateinit var bottomSheetDialog: BottomSheetDialog\n    private lateinit var fragmentManager: FragmentManager\n\n    @SuppressLint(\"StaticFieldLeak\")\n    private lateinit var bottomSheetLayout: FrameLayout\n\n    @Nullable\n    internal lateinit var selectedAmount: String\n\n    @Nullable\n    lateinit var selectedCurrency: String\n\n    companion object {\n        var currencySelectedForCheck: String = \"\"\n    }\n\n    private var fee: BigDecimal? = BigDecimal.ZERO\n    val provider: IPaymentDataProvider = PaymentDataProvider()\n\n    @JvmField\n    var currentCurrency: String = \"\"\n\n    @JvmField\n    var currentCurrencySymbol: String = \"\"\n\n\n    @JvmField\n    var finalCurrencySymbol: String = \"\"\n\n    @JvmField\n    var currentAmount: String = \"\"\n    private lateinit var adapter: CardTypeAdapterUIKIT\n    private lateinit var itemAdapter: ItemAdapter\n    private lateinit var otpViewHolder: OTPViewHolder\n\n    @SuppressLint(\"StaticFieldLeak\")\n    private lateinit var webFrameLayout: FrameLayout\n\n    @SuppressLint(\"StaticFieldLeak\")\n    private lateinit var frameLayout: FrameLayout\n\n    @SuppressLint(\"StaticFieldLeak\")\n    private lateinit var inLineCardLayout: FrameLayout\n\n    @SuppressLint(\"StaticFieldLeak\")\n    private lateinit var headerLayout: LinearLayout\n\n    @SuppressLint(\"StaticFieldLeak\")\n    private lateinit var sdkLayout: LinearLayout\n    private lateinit var checkoutFragment: CheckoutFragment\n    private lateinit var itemList: List<ItemsModel>\n    private lateinit var unModifiedItemList: List<ItemsModel>\n    private lateinit var selectedPaymentOption: PaymentOption\n\n    @SuppressLint(\"StaticFieldLeak\")\n    private lateinit var context: Context\n    private lateinit var cardViewModel: CardViewModel\n    private var otpTypeString: PaymentTypeEnum = PaymentTypeEnum.SAVEDCARD\n    private lateinit var paymentActionType: PaymentType\n    private val nfcFragment = NFCFragment()\n\n\n    //  private val inlineViewFragment = InlineViewFragment()\n    private val inlineCamerFragment = CameraFragment()\n    private var isInlineOpened = false\n\n    @JvmField\n    var isNFCOpened = false\n    private var textRecognitionML: TapTextRecognitionML? = null\n    private lateinit var intent: Intent\n    private lateinit var inlineViewCallback: InlineViewCallback\n    lateinit var tapCardPhoneListDataSource: ArrayList<TapCardPhoneListDataSource>\n    lateinit var paymentOptionsResponse: PaymentOptionsResponse\n    lateinit var initResponseModel: InitResponseModel\n    lateinit var redirectURL: String\n    lateinit var cardId: String\n    var currencyOldRate: BigDecimal? = null\n    var currentCalculatedAmount: BigDecimal? = null\n    var lastSelectedCurrency: String? = null\n    var loyatFlag: Boolean? = false\n\n    @JvmField\n    var isSavedCardSelected: Boolean? = false\n\n    @JvmField\n    var globalChargeResponse: Charge? = null\n\n    @JvmField\n    var selectedTotalAmount: String? = null\n\n    @JvmField\n    var selectedAmountPos: BigDecimal? = null\n\n    @JvmField\n    var selectedCurrencyPos: String? = null\n\n    lateinit var paymentOptionsWorker: java.util.ArrayList<PaymentOption>\n\n\n    val appId: String = \"4530082749\"\n    val merchantId: String = \"00000101\"\n    val seceret: String = \"3l5e0cstdim11skgwoha8x9vx9zo0kxxi4droryjp4eqd\"\n    val countrycode: String = \"1001\"\n    val mcc: String = \"4816\"\n\n    @JvmField\n    var incrementalCount: Int = 0\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun initLayoutManager(\n        bottomSheetDialog: BottomSheetDialog,\n        context: Context,\n        fragmentManager: FragmentManager,\n        sdkLayout: LinearLayout,\n        frameLayout: FrameLayout,\n        webFrameLayout: FrameLayout,\n        inLineCardLayout: FrameLayout,\n        inlineViewCallback: InlineViewCallback,\n        intent: Intent,\n        cardViewModel: CardViewModel,\n        checkoutFragment: CheckoutFragment,\n        headerLayout: LinearLayout\n    ) {\n        this.context = context\n        this.fragmentManager = fragmentManager\n        this.sdkLayout = sdkLayout\n        this.frameLayout = frameLayout\n        this.webFrameLayout = webFrameLayout\n        this.bottomSheetDialog = bottomSheetDialog\n        this.inLineCardLayout = inLineCardLayout\n        this.inlineViewCallback = inlineViewCallback\n        this.intent = intent\n        this.cardViewModel = cardViewModel\n        this.checkoutFragment = checkoutFragment\n        this.headerLayout = headerLayout\n\n        val aScene: Scene? = Scene.getCurrentScene(sdkLayout)\n        aScene?.setEnterAction {\n            AnimationUtils.loadAnimation(context, R.anim.slide_down)\n        }\n        initializeScanner(this)\n        initViewHolders()\n        initAmountAction()\n        initSwitchAction()\n        initOtpActionButton()\n        setAllSeparatorTheme()\n\n\n    }\n\n    init {\n        powerdByTapAnimationFinished.value = false\n    }\n\n    private fun initLoyaltyView() {\n        if (SDKSession.enableLoyalty == true) {\n            /*removeViews(saveCardSwitchHolder)\n            addViews(loyaltyViewHolder,saveCardSwitchHolder)*/\n            removeAllViews()\n            addViews(\n                businessViewHolder,\n                amountViewHolder,\n                cardViewHolder,\n                paymentInlineViewHolder,\n                loyaltyViewHolder,\n                saveCardSwitchHolder\n            )\n            loyaltyViewHolder.view.loyaltyView.constraintLayout?.visibility = View.VISIBLE\n\n        } else\n            loyaltyViewHolder.view.loyaltyView.constraintLayout?.visibility = View.GONE\n    }\n\n    private fun initializeScanner(checkoutViewModel: CheckoutViewModel) {\n        textRecognitionML = TapTextRecognitionML(checkoutViewModel)\n        textRecognitionML?.addTapScannerCallback(checkoutViewModel)\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun initOtpActionButton() {\n\n        otpViewHolder.otpView.otpViewActionButton.setOnClickListener {\n            //Added to hide keyboard if open\n            CustomUtils.hideKeyboardFrom(context as Activity, otpViewHolder.view)\n            when (otpTypeString) {\n                PaymentTypeEnum.GOPAY ->\n                    goPayViewsHolder.onOtpButtonConfirmationClick(otpViewHolder.otpView.otpViewInput1.text.toString())\n\n\n                PaymentTypeEnum.SAVEDCARD -> confirmOTPCode(otpViewHolder.otpView.otpViewInput1.text.toString())\n                else -> {\n\n                    removeViews(\n                        businessViewHolder,\n                        amountViewHolder,\n                        paymentInlineViewHolder,\n                        cardViewHolder,\n                        saveCardSwitchHolder,\n                        otpViewHolder\n                    )\n                    addViews(\n                        businessViewHolder,\n                        amountViewHolder,\n                        cardViewHolder,\n                        paymentInlineViewHolder,\n                        saveCardSwitchHolder\n                    )\n                    saveCardSwitchHolder?.view?.mainSwitch?.switchSaveMobile?.visibility =\n                        View.GONE\n                    val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n                    val nowString: String = LocalizationManager.getValue(\"now\", \"ActionButton\")\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n                        false,\n                        \"en\",\n                        if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                            payString + \" \" + nowString\n                        } else {\n                            payString + \" \" + nowString\n                        },\n                        Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.paymentBackgroundColor\")),\n                        Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.titleLabelColor\")),\n                    )\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = View.VISIBLE\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                        ActionButtonState.IDLE\n                    )\n                    paymentInlineViewHolder.tapMobileInputView.clearNumber()\n\n                }\n            }\n        }\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun confirmOTPCode(otpCode: String) {\n        otpViewHolder.view.otpView.otpViewActionButton.setDisplayMetrics(\n            CustomUtils.getDeviceDisplayMetrics(\n                context as Activity\n            )\n        )\n        otpViewHolder.view.otpView.otpViewActionButton.changeButtonState(ActionButtonState.LOADING)\n        when (PaymentDataSource.getTransactionMode()) {\n            TransactionMode.PURCHASE -> sendChargeOTPCode(otpCode)\n            TransactionMode.AUTHORIZE_CAPTURE -> sendAuthorizeOTPCode(otpCode)\n            else -> sendChargeOTPCode(otpCode)\n        }\n\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun sendAuthorizeOTPCode(otpCode: String) {\n        cardViewModel.processEvent(\n            CardViewEvent.AuthenticateAuthorizeTransaction,\n            this,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            otpCode\n        )\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun sendChargeOTPCode(otpCode: String) {\n        cardViewModel.processEvent(\n            CardViewEvent.AuthenticateChargeTransaction,\n            this,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            otpCode\n        )\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun initViewHolders() {\n        businessViewHolder = BusinessViewHolder(context, this)\n        amountViewHolder = AmountViewHolder(context, this,this)\n        tabAnimatedActionButtonViewHolder = TabAnimatedActionButtonViewHolder(context)\n        cardViewHolder = CardViewHolder(context, this)\n        goPaySavedCardHolder = GoPaySavedCardHolder(context, this, this)\n        saveCardSwitchHolder = SwitchViewHolder(context, this)\n        loyaltyViewHolder = LoyaltyViewHolder(context, this, this)\n\n        headerLayout.let { it1 ->\n            setTopBorders(\n                view = it1,\n                cornerRadius = 35f,\n                strokeWidth = 0.0f,\n                strokeColor = loadAppThemManagerFromPath(AppColorTheme.PoweredByTapBackgroundColor),// stroke color\n                tintColor = loadAppThemManagerFromPath(AppColorTheme.PoweredByTapBackgroundColor),// tint color\n                shadowColor = loadAppThemManagerFromPath(AppColorTheme.PoweredByTapBackgroundColor)\n            )\n\n        }//\n        paymentInlineViewHolder = PaymentInlineViewHolder(\n            context, this,\n            this,\n            this,\n            saveCardSwitchHolder,\n            this,\n            cardViewModel, checkoutFragment, loyaltyViewHolder\n        )\n\n        itemsViewHolder = ItemsViewHolder(context, this)\n        otpViewHolder = OTPViewHolder(context)\n        otpViewHolder.otpView.visibility = View.GONE\n        otpViewHolder.otpView.requestFocus()\n        otpViewHolder.otpView.otpViewInput1.cursorColor =\n            Color.parseColor(ThemeManager.getValue(\"TapOtpView.OtpController.activeBottomColor\"))\n        otpViewHolder.otpView.otpViewInput1.setLineColorInactive(\n            Color.parseColor(\n                ThemeManager.getValue(\n                    \"TapOtpView.OtpController.bottomLineColor\"\n                )\n            )\n        )\n        otpViewHolder.otpView.otpViewInput1.setLineColorActive(\n            Color.parseColor(\n                ThemeManager.getValue(\n                    \"TapOtpView.OtpController.activeBottomColor\"\n                )\n            )\n        )\n        otpViewHolder.otpView.otpViewInput1.isCursorVisible = true\n        goPayViewsHolder = GoPayViewsHolder(context, this, otpViewHolder)\n        asynchronousPaymentViewHolder = AsynchronousPaymentViewHolder(context, this)\n        logicForLoyaltyProgram()\n\n        amountViewHolder.view.amount_section.tapChipPopup.setOnClickListener {\n            amountViewHolder.view.amount_section.tapChipPopup.slideFromLeftToRight()\n            with(SharedPrefManager.getUserSupportedLocaleForTransactions(context)!!) {\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n                    submitNewLocalCurrency(\n                        currencySelected = currency.toString(),\n                        currencyRate = rate?.toBigDecimal()!!,\n                        totalSelectedAmount = amount,\n                        selectedCurrencySymbol = symbol ?: \"\"\n                    )\n                }\n            }\n\n\n        }\n    }\n\n    private fun showCountryFlag(): String? {\n        val currency = SharedPrefManager.getUserSupportedLocaleForTransactions(context)\n        Log.e(\"localNeeded\", currency.toString())\n        if (ThemeManager.currentTheme.contains(\"dark\")) {\n            return currency?.logos?.dark?.png\n        } else {\n            return currency?.logos?.light?.png\n        }\n    }\n\n    private fun initSwitchAction() {\n        saveCardSwitchHolder?.view?.mainSwitch?.mainSwitch?.visibility = View.GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.switchGoPayCheckout?.isChecked = false\n        saveCardSwitchHolder?.view?.cardSwitch?.switchGoPayCheckout?.visibility = View.GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.saveGoPay?.visibility = View.GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.alertGoPaySignUp?.visibility = View.GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.switchSeparator?.visibility = View.GONE\n    }\n\n    private fun initAmountAction() {\n        amountViewHolder.setOnItemsClickListener()\n        amountViewHolder.view.amount_section.mainKDAmountValue.visibility = View.GONE\n    }\n\n\n    override fun displayStartupLayout(enabledSections: ArrayList<SectionType>) {\n        //Todo based on api response logic for switch case\n        when (PaymentDataSource.getTransactionMode()) {\n\n            TransactionMode.TOKENIZE_CARD -> {\n                addViews(\n                    businessViewHolder,\n                    paymentInlineViewHolder,\n                    saveCardSwitchHolder\n                )\n\n            }\n            TransactionMode.SAVE_CARD -> {\n                addViews(\n                    businessViewHolder,\n                    paymentInlineViewHolder,\n                    saveCardSwitchHolder\n                )\n            }\n            else -> {\n\n\n                if (PaymentDataSource.getPaymentDataType() == \"WEB\") {\n                    addViews(\n                        businessViewHolder,\n                        amountViewHolder,\n                        cardViewHolder,\n                        saveCardSwitchHolder\n                    )\n                    cardViewHolder.cardInfoHeaderText?.visibility = View.GONE\n                } else if (PaymentDataSource.getPaymentDataType() == \"CARD\") {\n                    addViews(\n                        businessViewHolder,\n                        paymentInlineViewHolder, saveCardSwitchHolder\n                    )\n                    cardViewHolder.cardInfoHeaderText.visibility = View.VISIBLE\n                } else\n                //Checkimg to be removed once loyalty enabled form api level onluy else will be there\n                    if (SDKSession.enableLoyalty == true) {\n                        addViews(\n                            businessViewHolder,\n                            amountViewHolder,\n                            cardViewHolder,\n                            paymentInlineViewHolder,\n                            loyaltyViewHolder,\n                            saveCardSwitchHolder\n                        )\n                    } else {\n                        addViews(\n                            businessViewHolder,\n                            amountViewHolder,\n                            cardViewHolder,\n                            paymentInlineViewHolder,\n                            saveCardSwitchHolder\n                        )\n                    }\n\n\n            }\n        }\n\n        saveCardSwitchHolder?.view?.mainSwitch?.mainSwitchLinear?.setBackgroundColor(\n            Color.parseColor(\n                ThemeManager.getValue(\n                    \"TapSwitchView.main.backgroundColor\"\n                )\n            )\n        )\n        inLineCardLayout.visibility = View.GONE\n        amountViewHolder.readyToScanVisibility(false)\n        saveCardSwitchHolder?.view?.cardviewSwitch?.cardElevation = 0f\n        SDKSession.activity?.let {\n            CustomUtils.getDeviceDisplayMetrics(\n                it\n            )\n        }?.let { saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setDisplayMetrics(it) }\n\n\n    }\n\n    fun setBottomSheetLayout(bottomSheetLayout: FrameLayout) {\n        this.bottomSheetLayout = bottomSheetLayout\n        bottomSheetLayout.clipToOutline = true\n        bottomSheetLayout.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"horizontalList.backgroundColor\")))\n        // bottomSheetLayout.setBackgroundColor(Color.RED)\n        bottomSheetLayout.let { it1 ->\n            setTopBorders(\n                it1,\n                40f,// corner raduis\n                0.0f,\n                Color.parseColor(ThemeManager.getValue(\"horizontalList.backgroundColor\")),// stroke color\n                Color.parseColor(ThemeManager.getValue(\"horizontalList.backgroundColor\")),// tint color\n                Color.parseColor(ThemeManager.getValue(\"horizontalList.backgroundColor\"))\n            )\n\n\n        }\n    }\n\n    override fun displayGoPayLogin() {\n        saveCardSwitchHolder?.let {\n            removeViews(\n                businessViewHolder, amountViewHolder,\n                cardViewHolder, paymentInlineViewHolder,\n                it, otpViewHolder,\n                goPayViewsHolder\n            )\n        }\n\n        addViews(businessViewHolder, amountViewHolder, goPayViewsHolder)\n        if (goPayViewsHolder.goPayopened) {\n            goPayViewsHolder.goPayLoginInput.inputType = GoPayLoginMethod.PHONE\n            goPayViewsHolder.goPayLoginInput.visibility = View.VISIBLE\n            saveCardSwitchHolder?.view?.cardSwitch?.switchGoPayCheckout?.visibility = View.VISIBLE\n        }\n        //TODO goPayAdapter.updateAdapterData(goPayCardList.value as List<GoPaySavedCards>)\n        amountViewHolder.changeGroupAction(false)\n        goPayViewsHolder.goPayopened = true\n    }\n\n\n    override fun displayGoPay() {\n\n        saveCardSwitchHolder?.let {\n            removeViews(\n                businessViewHolder,\n                amountViewHolder,\n                goPayViewsHolder,\n                cardViewHolder,\n                paymentInlineViewHolder,\n                it,\n                otpViewHolder\n            )\n        }\n\n        saveCardSwitchHolder?.let {\n            addViews(\n                businessViewHolder,\n                amountViewHolder,\n                goPaySavedCardHolder,\n                cardViewHolder,\n                paymentInlineViewHolder,\n                it\n            )\n        }\n\n        cardViewHolder.view.mainChipgroup.groupAction.visibility = View.INVISIBLE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = View.VISIBLE\n        saveCardSwitchHolder?.goPayisLoggedin = true\n        adapter.goPayOpenedfromMain(true)\n        adapter.removeItems()\n    }\n\n    override fun controlCurrency(display: Boolean) {\n        if (display) caseDisplayControlCurrency()\n        else caseNotDisplayControlCurrency()\n\n        displayItemsOpen = !display\n        amountViewHolder.changeGroupAction(!display)\n        // if (this::currentAmount.isInitialized)\n        if (this::selectedAmount.isInitialized && this::selectedCurrency.isInitialized) {\n            if (selectedAmount == currentAmount && selectedCurrency == currentCurrency) {\n                amountViewHolder.view.amount_section.mainKDAmountValue.visibility = View.GONE\n\n\n            } else {\n                amountViewHolder.updateSelectedCurrency(\n                    displayItemsOpen,\n                    selectedAmount, selectedCurrency,\n                    currentAmount, finalCurrencySymbol, currentCurrencySymbol\n                )\n\n            }\n//            if (display) {\n//                if (selectedCurrency != SharedPrefManager.getUserSupportedLocaleForTransactions(\n//                        context\n//                    )?.currency\n//                ) {\n//                    amountViewHolder.view.amount_section?.tapChipPopup?.addFadeInAnimation()\n//                } else {\n//                    amountViewHolder.view.amount_section?.tapChipPopup?.visibility = View.GONE\n//\n//                }\n//            }\n\n        }\n        if (otpViewHolder.otpView.isVisible) {\n            removeViews(otpViewHolder)\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.RESET)\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isClickable = true\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.stateListAnimator = null\n            val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n            val nowString: String = LocalizationManager.getValue(\"now\", \"ActionButton\")\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n                false,\n                \"en\",\n                if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                    payString + \" \" + nowString\n                } else {\n                    payString + \" \" + nowString\n                },\n                Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n                Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n            )\n//            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isActivated = false\n        }\n        if (PaymentDataSource.getPaymentDataType() != null && PaymentDataSource.getPaymentDataType() == \"WEB\") {\n            removeViews(paymentInlineViewHolder)\n        }\n        removeInlineScanner()\n        removeNFCViewFragment()\n\n        /*  Handler().postDelayed({\n              translateViewToNewHeight(bottomSheetLayout.measuredHeight,false)\n          },400)*/\n    }\n\n    override fun reOpenSDKState() {\n        //todo add back to sdk functionality\n\n        removeViews(otpViewHolder, amountViewHolder, paymentInlineViewHolder, saveCardSwitchHolder)\n        doAfterSpecificTime(time = 500L) {\n            with(cardViewHolder.view.mainChipgroup) {\n                mutableListOf<View>(\n                    chipsRecycler,\n                    groupAction,\n                    groupName\n                ).addFadeInAnimationToViews()\n            }\n\n        }\n\n        businessViewHolder.setDataFromAPI(\n            PaymentDataSource.getMerchantData()?.logo,\n            PaymentDataSource.getMerchantData()?.name\n        )\n        addViews(\n            amountViewHolder,\n            paymentInlineViewHolder,\n            saveCardSwitchHolder\n        )\n        amountViewHolder.view.amount_section.itemAmountLayout?.visibility = View.VISIBLE\n        amountViewHolder.view.amount_section.itemPopupLayout?.visibility = View.VISIBLE\n        amountViewHolder.view.amount_section.tapChipAmount?.visibility = View.VISIBLE\n        checkSelectedAmountInitiated()\n        amountViewHolder.changeGroupAction(false)\n        amountViewHolder.setOnItemsClickListener()\n        amountViewHolder.view.amount_section.flagImageView?.visibility = View.VISIBLE\n\n\n        saveCardSwitchHolder?.view?.visibility = View.VISIBLE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.RESET)\n        val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n        val nowString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n            false,\n            \"en\",\n            if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                payString + \" \" + nowString\n            } else {\n                payString + \" \" + nowString\n            },\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n        )\n\n    }\n\n\n    fun addTitlePaymentAndFlag() {\n        addDataToAmountView()\n        amountViewHolder.view.amount_section.tapChipPopup.slidefromRightToLeft()\n        amountViewHolder.view.amount_section.itemPopupLayout.applyGlowingEffect(getCurrencyColors())\n\n    }\n\n    fun addDataToAmountView() {\n        val currencyAlert: String = LocalizationManager.getValue(\"currencyAlert\", \"Common\")\n        amountViewHolder.view.amount_section.popupTextView.text =\n            currencyAlert + \" \" + checkoutFragment.getSimIsoCountryCurrency()\n        Glide.with(context).load(showCountryFlag())\n            .into(amountViewHolder.view.amount_section.flagImageView);\n        amountViewHolder.view.amount_section.tapChipAmount.bringToFront()\n\n    }\n\n    fun removevisibiltyCurrency() {\n        amountViewHolder.view.amount_section.tapChipPopup.visibility = View.GONE\n    }\n\n    fun getCurrencyColors(): Pair<Int, Int> {\n        var pair: Pair<Int, Int>? = null\n        if (ThemeManager.currentTheme.contains(\"dark\")) {\n            /**\n             * dark theme colors\n             */\n            pair = Pair(Color.parseColor(\"#211F1F\"), Color.parseColor(\"#343232\"))\n        } else {\n            /**\n             * light theme colors\n             */\n\n            pair = Pair(Color.parseColor(\"#F4F4F4\"), Color.parseColor(\"#E1E1E1\"))\n        }\n        return pair\n    }\n\n\n    /**\n     * case displaying @TODO:EGP /\n     */\n\n    private fun caseDisplayControlCurrency() {\n        /*  val newHeight = (context as Activity).window?.decorView?.measuredHeight\n          val viewGroupLayoutParams = bottomSheetLayout.layoutParams\n          viewGroupLayoutParams.height = newHeight ?: 0\n          bottomSheetLayout.layoutParams = viewGroupLayoutParams\n    */\n        val originalHeight: Int = sdkLayout.height\n\n        removeViews(\n            //  businessViewHolder,\n            // amountViewHolder,\n            cardViewHolder,\n            paymentInlineViewHolder,\n        )\n        addViews(\n            itemsViewHolder\n        )\n        //replaced original height with bottomSheetLayout height\n        Handler().postDelayed({\n            if (::bottomSheetLayout.isInitialized)\n                translateViewToNewHeight(bottomSheetLayout.measuredHeight, true)\n\n        }, 400)\n\n\n        /**\n         * will be replaced by itemList coming from the API**/\n        if (PaymentDataSource.getItems() != null) {\n            itemsViewHolder.view.itemRecylerView.adapter = itemAdapter\n            itemAdapter.updateAdapterData(itemList)\n        }\n        currencyAdapter.updateAdapterData(allCurrencies.value as List<SupportedCurrencies>)\n\n        frameLayout.visibility = View.VISIBLE\n        itemsViewHolder.itemsdisplayed = true\n\n        removeViews(\n            saveCardSwitchHolder,\n            goPayViewsHolder,\n            otpViewHolder,\n            // itemsViewHolder\n        )\n        //Hide keyboard of any open\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n            CustomUtils.hideKeyboardFrom(\n                paymentInlineViewHolder.view.context,\n                paymentInlineViewHolder.view\n            )\n        }\n    }\n\n    private fun caseNotDisplayControlCurrency() {\n        if (goPayViewsHolder.goPayopened || itemsViewHolder.itemsdisplayed) setActionGoPayOpenedItemsDisplayed()\n        else setActionNotGoPayOpenedNotItemsDisplayed()\n        Handler().postDelayed({\n            if (::bottomSheetLayout.isInitialized)\n                translateViewToNewHeight(bottomSheetLayout.measuredHeight, false)\n        }, 400)\n\n    }\n\n    private fun translateViewToNewHeight(originalHeight: Int, expandHeightBool: Boolean) {\n        val sdkLayoutHeight = sdkLayout.height\n        val bottomSheetLayoutHeight = bottomSheetLayout.height\n        println(\"sdkLayoutHeight>>\" + sdkLayoutHeight)\n        println(\"originalHeight>>\" + originalHeight)\n        val resizeAnimation = ResizeAnimation(\n            bottomSheetLayout,\n            sdkLayoutHeight,\n            originalHeight, expandHeightBool\n        )\n        resizeAnimation.duration = 350\n        bottomSheetLayout.startAnimation(resizeAnimation)\n\n\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun setActionGoPayOpenedItemsDisplayed() {\n        removeViews(\n\n            cardViewHolder,\n            paymentInlineViewHolder,\n            saveCardSwitchHolder,\n            goPayViewsHolder,\n\n            otpViewHolder,\n            itemsViewHolder\n        )\n        if (::webViewHolder.isInitialized) {\n            removeViews(webViewHolder)\n        }\n        addViews(\n            cardViewHolder,\n            paymentInlineViewHolder,\n            saveCardSwitchHolder\n        )\n        paymentInlineViewHolder.resetPaymentCardView()\n        //itemsViewHolder.resetView()\n        //I comment   itemsViewHolder.setItemsRecylerView()\n        //  itemsViewHolder?.view?.itemRecylerView?.adapter = itemAdapter\n        frameLayout.visibility = View.GONE\n    }\n\n    private fun setActionNotGoPayOpenedNotItemsDisplayed() {\n        val originalHeight: Int = sdkLayout.height\n        saveCardSwitchHolder?.let {\n            removeViews(\n                cardViewHolder,\n                paymentInlineViewHolder,\n                it,\n                itemsViewHolder\n            )\n        }\n\n        if (::webViewHolder.isInitialized) removeViews(webViewHolder)\n\n        saveCardSwitchHolder?.let {\n            addViews(\n\n                cardViewHolder,\n                paymentInlineViewHolder,\n                it\n            )\n        }\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.IDLE)\n        // itemsViewHolder.resetView()\n        //  itemsViewHolder.setItemsRecylerView()\n        //   itemsViewHolder.setCurrencyRecylerView()\n        itemsViewHolder.view.mainCurrencyChip.chipsRecycler.adapter = currencyAdapter\n        //  itemsViewHolder.view.itemRecylerView.adapter =itemAdapter\n        frameLayout.visibility = View.GONE\n\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    @SuppressLint(\"SetTextI18n\")\n    override fun displayOTPView(\n        phoneNumber: PhoneNumber?,\n        otpType: String,\n        chargeResponse: Charge?\n    ) {\n\n\n        // amountViewHolder.changeGroupAction(false)\n        amountViewHolder.view.amount_section.itemCountButton.text = LocalizationManager.getValue(\n            \"close\",\n            \"Common\"\n        )\n        // amountViewHolder.view.amount_section.itemAmountLayout?.visibility = View.GONE\n        //  amountViewHolder.view.amount_section.itemPopupLayout?.visibility = View.GONE\n        amountViewHolder.view.amount_section.flagImageView?.visibility = View.GONE\n        amountViewHolder.view.amount_section.popupTextView.text = LocalizationManager.getValue(\n            \"close\",\n            \"Common\"\n        )\n\n\n        //  amountViewHolder.view.amount_section.itemCountButton?.visibility = View.GONE\n\n        displayOtpIsOpen = true\n        displayItemsOpen = false\n        when (otpType) {\n            PaymentTypeEnum.GOPAY.name -> {\n                displayOtpGoPay(phoneNumber)\n            }\n            PaymentTypeEnum.telecom.name -> {\n                displayOtpTelecoms(phoneNumber)\n            }\n            PaymentTypeEnum.SAVEDCARD.name -> {\n                displayOtpCharge(phoneNumber, chargeResponse)\n            }\n            else -> {\n                displayOtpCharge(phoneNumber, chargeResponse)\n            }\n        }\n    }\n\n    private fun displayOtpGoPay(phoneNumber: PhoneNumber?) {\n        // otpTypeString = PaymentTypeEnum.GOPAY //temporray\n        removeViews(\n            cardViewHolder,\n            paymentInlineViewHolder, saveCardSwitchHolder, amountViewHolder\n        )\n        addViews(amountViewHolder, otpViewHolder)\n\n        otpViewHolder.otpView.visibility = View.VISIBLE\n        setOtpPhoneNumber(phoneNumber)\n        otpViewHolder.otpView.changePhone.setOnClickListener {\n            goPayViewsHolder.onChangePhoneClicked()\n        }\n    }\n\n    @SuppressLint(\"SetTextI18n\")\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun displayOtpCharge(phoneNumber: PhoneNumber?, chargeResponse: Charge?) {\n        // otpTypeString = PaymentTypeEnum.GOPAY //temporray\n        println(\"mmmmmmmm\" + amountViewHolder?.originalAmount)\n        /*if(::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n            amountViewHolder.updateSelectedCurrency(\n                false,\n                selectedAmount,\n                selectedCurrency,\n                currentAmount,\n                currentCurrency\n            )\n            println(\"selectedAmount>>>>\" + selectedAmount)\n        }*/\n        removeViews(\n            cardViewHolder,\n            paymentInlineViewHolder, saveCardSwitchHolder, otpViewHolder\n        )\n        paymentInlineViewHolder.paymentInputContainer.applyBluryToView(showOriginalView = true)\n        // bottomSheetDialog.dismissWithAnimation\n        //start counter on open otpview\n        otpViewHolder?.otpView?.startCounter()\n        addViews(otpViewHolder)\n        otpViewHolder.otpView.visibility = View.VISIBLE\n        //Added to hide the Items-Amount button when OTP is opened\n        // amountViewHolder.view.amount_section.itemAmountLayout?.visibility = View.GONE\n        amountViewHolder.view.amount_section.tapChipAmount?.visibility = View.GONE\n        CustomUtils.showKeyboard(context)\n        setOtpPhoneNumber(phoneNumber)\n        otpViewHolder.otpView.changePhone.visibility = View.INVISIBLE\n        otpViewHolder.otpView.timerText.setOnClickListener {\n            resendOTPCode(chargeResponse)\n            otpViewHolder.otpView.restartTimer()\n        }\n        amountViewHolder.view.amount_section.mainKDAmountValue.visibility = View.GONE\n    }\n\n    private fun setOtpPhoneNumber(phoneNumber: PhoneNumber?) {\n\n        var replaced = \"\"\n        var countryCodeReplaced = \"\"\n        countryCodeReplaced = phoneNumber?.countryCode?.replace(\"0\", \"\").toString()\n        if (phoneNumber?.number?.length!! > 7)\n            replaced = (phoneNumber.number.toString()).replaceRange(1, 6, \"••••\")\n        otpViewHolder.otpView.mobileNumberText.text = \"+$countryCodeReplaced $replaced\"\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun resendOTPCode(chargeResponse: Charge?) {\n        if (chargeResponse != null) {\n            if (chargeResponse is Authorize) resendAuthorizeOTPCode(chargeResponse as Authorize?)\n            else resendChargeOTPCode(chargeResponse as Charge?)\n        }\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun resendAuthorizeOTPCode(authorize: Authorize?) {\n        cardViewModel.requestAuthenticateForAuthorizeTransaction(this, authorize)\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun resendChargeOTPCode(charge: Charge?) {\n        if (charge != null) {\n            cardViewModel.requestAuthenticateForChargeTransaction(this, charge)\n        }\n    }\n\n    private fun displayOtpTelecoms(phoneNumber: PhoneNumber?) {\n        otpTypeString = PaymentTypeEnum.telecom\n        removeViews(\n            businessViewHolder,\n            amountViewHolder,\n            paymentInlineViewHolder,\n            cardViewHolder,\n            saveCardSwitchHolder,\n            otpViewHolder\n        )\n        addViews(\n            businessViewHolder,\n            amountViewHolder,\n            cardViewHolder,\n            paymentInlineViewHolder,\n            saveCardSwitchHolder,\n            otpViewHolder\n        )\n        //Added check change listener to handle showing of extra save options\n        saveCardSwitchHolder?.view?.mainSwitch?.switchSaveMobile?.visibility = View.GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = View.GONE\n        saveCardSwitchHolder?.view?.mainSwitch?.switchSaveMobile?.setOnCheckedChangeListener { buttonView, isChecked ->\n            if (isChecked) saveCardSwitchHolder?.view?.cardSwitch?.switchesLayout?.visibility =\n                View.GONE\n        }\n        saveCardSwitchHolder?.setSwitchToggleData(PaymentType.telecom)\n        otpViewHolder.setMobileOtpView()\n        var replaced = \"\"\n        var countryCodeReplaced = \"\"\n        if (phoneNumber?.number?.length!! > 7)\n            replaced = (phoneNumber.number.toString()).replaceRange(1, 6, \"....\")\n        countryCodeReplaced =\n            goPayViewsHolder.goPayLoginInput.countryCodePicker.selectedCountryCode.replace(\n                \"+\",\n                \" \"\n            )\n        otpViewHolder.otpView.mobileNumberTextNormalPay.text = \"+$countryCodeReplaced$replaced\"\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.P)\n    override fun displayRedirect(url: String, authenticate: Charge?) {\n        this.redirectURL = url\n\n        println(\"redirectURL before display>>\" + url)\n        if (::redirectURL.isInitialized && ::fragmentManager.isInitialized) {\n            if (otpViewHolder.otpView.isVisible) {\n                removeViews(\n                    // businessViewHolder,\n                    cardViewHolder,\n                    paymentInlineViewHolder,\n                    otpViewHolder\n                )\n            }\n            // setSlideAnimation()\n            if (PaymentDataSource?.getWebViewType() != null && PaymentDataSource.getWebViewType() == WebViewType.REDIRECT) {\n                businessViewHolder.view.headerView.constraint.visibility = View.GONE\n                businessViewHolder.view.topSeparatorLinear.visibility = View.GONE\n                //Stopped showing closetext as requested\n                // checkoutFragment.closeText.visibility = View.VISIBLE\n                removeViews(\n                    // businessViewHolder,\n                    amountViewHolder,\n                    cardViewHolder,\n                    // saveCardSwitchHolder,\n                    paymentInlineViewHolder,\n                    otpViewHolder,\n                    goPaySavedCardHolder,\n                    goPayViewsHolder\n                )\n\n                /**\n                 * apply Background Drawable to switchView\n                 */\n                saveCardSwitchHolder?.view?.background = getViewShapeDrawable()\n\n\n\n                saveCardSwitchHolder?.view?.mainSwitch?.visibility = View.GONE\n                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                    ActionButtonState.LOADING\n                )\n                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = View.GONE\n                saveCardSwitchHolder?.view?.cardSwitch?.tapLogoImage?.visibility = View.GONE\n\n                Handler(Looper.getMainLooper()).postDelayed({\n\n                    val fragment = WebFragment.newInstance(\n                        redirectURL,\n                        this, cardViewModel, authenticate, this\n                    )\n\n                    fragmentManager.beginTransaction()\n                        .replace(R.id.webFrameLayout, fragment, \"webFragment\")\n                        .addToBackStack(\"webFragment\")\n                        .commit()\n                    //  checkoutFragment.closeText.visibility = View.VISIBLE\n                    webFrameLayout.visibility = View.VISIBLE\n                    println(\"fragment hh\" + Resources.getSystem().displayMetrics.heightPixels)\n                    if (::bottomSheetLayout.isInitialized)\n                        translateHeightRedirect(sdkLayout)\n\n                }, 500)\n\n\n            } else if (PaymentDataSource?.getWebViewType() != null && PaymentDataSource.getWebViewType() == WebViewType.THREE_DS_WEBVIEW) {\n\n                webViewHolder = WebViewHolder(\n                    context,\n                    url,\n                    this,\n                    cardViewModel,\n                    authenticate,\n                    this,\n                    bottomSheetLayout,\n                    sdkLayout,\n                    saveCardSwitchHolder,\n                    paymentInlineViewHolder,\n                    cardViewHolder\n                )\n                removeViews(\n                    //  businessViewHolder,\n                    amountViewHolder,\n                    //  cardViewHolder,\n                    //  saveCardSwitchHolder,\n                    // paymentInlineViewHolder,\n                    otpViewHolder,\n                    goPaySavedCardHolder,\n                    goPayViewsHolder\n                )\n\n                //Added to hide the Items-Amount button when 3ds is opened within\n                addViews(webViewHolder)\n                saveCardSwitchHolder?.view?.mainSwitch?.visibility = View.GONE\n                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                    ActionButtonState.LOADING\n                )\n\n                saveCardSwitchHolder?.view?.cardSwitch?.tapLogoImage?.visibility = View.GONE\n                checkoutFragment.closeText.visibility = View.GONE\n\n\n            }\n\n\n        }\n\n        // removeViews(amountViewHolder, businessViewHolder)\n        // tabAnimatedActionButtonViewHolder?.view?.actionButton?.visibility = View.INVISIBLE\n    }\n\n    private fun translateHeightRedirect(sdkLayout: LinearLayout) {\n        val resizeAnimation = ResizeAnimation(\n            bottomSheetLayout,\n            Resources.getSystem().displayMetrics.heightPixels,\n            sdkLayout.height, true\n        )\n        resizeAnimation.duration = 350\n        bottomSheetLayout.startAnimation(resizeAnimation)\n    }\n\n    override fun displaySaveCardOptions() {\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun setBinLookupData(\n        binLookupResponse: BINLookupResponse,\n        context: Context,\n        cardViewModel: CardViewModel\n    ) {\n        paymentInlineViewHolder = PaymentInlineViewHolder(\n            context,\n            this,\n            this,\n            this,\n            saveCardSwitchHolder,\n            this,\n            cardViewModel,\n            checkoutFragment, loyaltyViewHolder\n        )\n        //  paymentInlineViewHolder.tabLayout.setUnselectedAlphaLevel(1.0f)\n        if (::paymentInlineViewHolder.isInitialized)\n            paymentInlineViewHolder.setCurrentBinData(binLookupResponse)\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun getDatasfromAPIs(\n        merchantData: MerchantData?,\n        paymentOptionsResponse: PaymentOptionsResponse?\n    ) {\n        println(\"if(::businessViewHolder.isInitialized getpay\" + ::businessViewHolder.isInitialized)\n        println(\"merchantData name>>\" + merchantData?.name)\n        println(\"merchantData logo>>\" + merchantData?.logo)\n        if (paymentOptionsResponse != null) {\n            this.paymentOptionsResponse = paymentOptionsResponse\n        }\n        if (::businessViewHolder.isInitialized && PaymentDataSource.getTransactionMode() != TransactionMode.TOKENIZE_CARD) {\n            businessViewHolder.setDataFromAPI(\n                merchantData?.logo,\n                merchantData?.name\n            )\n            // TODO check\n            if (merchantData?.verifiedApplication == true) {\n\n            }\n        }\n        // println(\"PaymentOptionsResponse on get$paymentOptionsResponse\")\n        allCurrencies.value =\n            (paymentOptionsResponse?.supportedCurrencies as List<SupportedCurrencies>).sortedBy { it.orderBy }\n        Log.e(\n            \"supportedCurrencyUser\",\n            SharedPrefManager.getUserLocalCurrency(context).toString()\n        )\n        cacheUserLocalCurrency()\n\n\n\n\n        savedCardList = paymentOptionsResponse?.cards\n        currencyAdapter = CurrencyTypeAdapter(this)\n        if (paymentOptionsResponse.supportedCurrencies != null && ::amountViewHolder.isInitialized) {\n            currentCurrency = paymentOptionsResponse.currency\n            val sortedList: List<SupportedCurrencies> =\n                (paymentOptionsResponse.supportedCurrencies).sortedBy { it.orderBy }\n            for (i in sortedList.indices) {\n\n                if (sortedList[i].currency == currentCurrency) {\n                    currentAmount =\n                        CurrencyFormatter.currencyFormat(sortedList[i].amount.toString())\n                    currentCurrency =\n                        sortedList[i].symbol.toString()\n\n                    currentCurrency =\n                        sortedList[i].currency.toString()\n                    currentCurrencySymbol =\n                        sortedList[i].symbol.toString()\n                    finalCurrencySymbol =\n                        sortedList[i].symbol.toString()\n\n                    currencyAdapter.updateSelectedPosition(i)\n                }\n\n            }\n            /**\n             *Note replacing all currency to be currency symbol as per ali 17jan23\n             * **/\n            amountViewHolder.setDataFromAPI(\n                currentAmount,\n                currentCurrencySymbol,\n                PaymentDataSource.getItems()?.size.toString()\n            )\n        }\n        /**\n         * <<<<<<< This items list is going to come from API response later now for loading the view we are taking the List from\n         * PaymentDatasource.getItems()  >>>>>>>> */\n        if (PaymentDataSource.getItems() != null) {\n            itemList = PaymentDataSource.getItems()!!\n            //  unModifiedItemList = itemList\n            unModifiedItemList = itemList.map { it.copy() }\n        }\n\n\n\n\n        if (::itemsViewHolder.isInitialized) {\n            paymentOptionsResponse?.supportedCurrencies?.let {\n                itemsViewHolder.setDataFromAPI(\n                    it,\n                    PaymentDataSource.getItems()\n                )\n            }\n            //  itemsViewHolder.setItemsRecylerView()\n            //  itemsViewHolder.setCurrencyRecylerView()\n\n\n        }\n\n        merchantData?.name?.let {\n            saveCardSwitchHolder?.setDataFromAPI(\n                it,\n                paymentInlineViewHolder.selectedType\n            )\n        }\n        paymentOptionsList.value = paymentOptionsResponse?.paymentOptions\n        //println(\"paymentOptions value\" + paymentOptionsResponse?.paymentOptions)\n        if (::context.isInitialized)\n            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.N) {\n                val divider = DividerItemDecoration(\n                    context,\n                    DividerItemDecoration.HORIZONTAL\n                )\n                divider.setDrawable(ShapeDrawable().apply {\n                    intrinsicWidth = 10\n                    paint.color = Color.TRANSPARENT\n                }) // note: currently (support version 28.0.0), we can not use tranparent color here, if we use transparent, we still see a small divider line. So if we want to display transparent space, we can set color = background color or we can create a custom ItemDecoration instead of DividerItemDecoration.\n                cardViewHolder.view.mainChipgroup.chipsRecycler.addItemDecoration(divider)\n                initAdaptersAction()\n\n            }\n\n        //PaymentDataSource.setSelectedCurrency(currentCurrency, null)\n        PaymentDataSource.setSelectedCurrency(currentCurrency, currentCurrencySymbol)\n        PaymentDataSource.setSelectedAmount(currentAmount.toBigDecimal())\n\n        if (::loyaltyViewHolder.isInitialized) {\n            val objectMapper = ObjectMapper()\n            val tapLoyaltyModel: TapLoyaltyModel =\n                objectMapper.readValue(\n                    context.resources.openRawResource(R.raw.loyalty),\n                    TapLoyaltyModel::class.java\n                )\n            supportedLoyalCards.value =\n                tapLoyaltyModel.supportedCurrencies as List<LoyaltySupportedCurrency>\n            //println(\"tapLoyaltyModel>>>\" + tapLoyaltyModel.bankLogo)\n            tapLoyaltyModel.bankLogo?.let {\n                tapLoyaltyModel.bankName?.let { it1 ->\n                    loyaltyViewHolder.setDataFromAPI(\n                        it,\n                        it1,\n                        tapLoyaltyModel,\n                        supportedLoyalCards.value as List<LoyaltySupportedCurrency>\n                    )\n                }\n            }\n\n        }\n        val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n        val nowString: String = LocalizationManager.getValue(\"now\", \"ActionButton\")\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n            false,\n            LocalizationManager.getLocale(context).toString(),\n            if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                payString + \" \" + nowString\n            } else {\n                payString + \" \" + nowString\n            },\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n        )\n\n    }\n\n    fun cacheUserLocalCurrency(): Boolean {\n        val suportedCurrencyForUser = allCurrencies.value?.find {\n            it.symbol == SharedPrefManager.getUserLocalCurrency(context)?.symbol\n        }\n        return SharedPrefManager.saveModelLocally(\n            context = context,\n            dataToBeSaved = suportedCurrencyForUser,\n            keyValueToBeSaved = UserSupportedLocaleForTransactions\n        )\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun initAdaptersAction() {\n        adapter = CardTypeAdapterUIKIT(this)\n        goPayAdapter = GoPayCardAdapterUIKIT(this)\n        itemAdapter = ItemAdapter()\n        // adapter?.possiblyShowGooglePayButton()\n        // val arrayList = ArrayList<String>()//Creating an empty arraylist\n        //  arrayList.add(\"Google Pay\")//Adding object in arraylist\n\n\n        //adapter.updateAdapterGooglePay(arrayList)\n        //  goPayAdapter.updateAdapterData(goPayCardList.value as List<GoPaySavedCards>)\n        if (allCurrencies.value?.isNotEmpty() == true) {\n            currencyAdapter.updateAdapterData(allCurrencies.value as List<SupportedCurrencies>)\n        }\n        if (savedCardList?.isNotEmpty() == true) {\n            println(\"savedCardList.value\" + PaymentDataSource.getCardType())\n            if (PaymentDataSource.getCardType() != null && PaymentDataSource.getCardType() != CardType.ALL) {\n                filterSavedCardTypes(savedCardList as List<SavedCard>)\n            } else adapter.updateAdapterDataSavedCard(savedCardList as List<SavedCard>)\n        } else {\n            cardViewHolder.view.mainChipgroup.groupAction?.visibility = View.GONE\n        }\n        //  itemsViewHolder.view.itemRecylerView.adapter = itemAdapter\n        itemsViewHolder.view.mainCurrencyChip.chipsRecycler.adapter = currencyAdapter\n        if (PaymentDataSource.getItems() != null) {\n            PaymentDataSource.getItems()?.let { itemAdapter.updateAdapterData(it) }\n        }\n        cardViewHolder.view.mainChipgroup.chipsRecycler.adapter = adapter\n        cardViewHolder.view.mainChipgroup.chipsRecycler.animation =\n            AnimationUtils.loadAnimation(context, R.anim.fall_down_animation)\n        cardViewHolder.view.mainChipgroup.groupAction?.visibility = View.VISIBLE\n        cardViewHolder.view.mainChipgroup.groupAction?.setOnClickListener {\n            setMainChipGroupActionListener()\n            paymentInlineViewHolder.tapCardInputView?.clear()\n            paymentInlineViewHolder.onFocusChange(\"\")\n            paymentInlineViewHolder.tapCardInputView.setSingleCardInput(\n                CardBrandSingle.Unknown, null\n            )\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n        }\n\n        paymentOptionsWorker =\n            java.util.ArrayList<PaymentOption>(paymentOptionsResponse.paymentOptions)\n\n        filterViewModels(currentCurrency)\n        // filterModels(PaymentDataSource.getCurrency()?.isoCode.toString())\n        //  filterCardTypes(PaymentDataSource.getCurrency()?.isoCode.toString(),paymentOptionsWorker)\n\n        //    goPaySavedCardHolder.view.goPayLoginView.groupAction.setOnClickListener {\n        //       setGoPayLoginViewGroupActionListener()\n        //   }\n        //paymentInlineViewHolder.tabLayout.setOnTouchListener { v, _ ->\n        touchHandlingForCardView()\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    @SuppressLint(\"ClickableViewAccessibility\")\n    private fun touchHandlingForCardView() {\n        saveCardSwitchHolder?.view?.setOnTouchListener { v, _ ->\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n            paymentInlineViewHolder.resetView = true\n            paymentInlineViewHolder.resetTouchView()\n\n            true\n        }\n        cardViewHolder.view.cardLinearLayout.setOnTouchListener { v, _ ->\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n            paymentInlineViewHolder.resetView = true\n            paymentInlineViewHolder.resetTouchView()\n\n            true\n        }\n        amountViewHolder.view.setOnTouchListener { v, _ ->\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n            paymentInlineViewHolder.resetView = true\n            paymentInlineViewHolder.resetTouchView()\n\n            true\n        }\n        paymentInlineViewHolder.tapAlertView?.setOnTouchListener { v, _ ->\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n            paymentInlineViewHolder.resetView = true\n            paymentInlineViewHolder.resetTouchView()\n\n            true\n        }\n        paymentInlineViewHolder.tabLayout.setOnTouchListener { v, _ ->\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n            paymentInlineViewHolder.resetView = true\n            paymentInlineViewHolder.resetTouchView()\n\n            true\n        }\n        businessViewHolder.view.setOnTouchListener { v, _ ->\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n            paymentInlineViewHolder.resetView = true\n            paymentInlineViewHolder.resetTouchView()\n\n            true\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun filterCardTypes(list: ArrayList<PaymentOption>) {\n        var filteredCardList: List<PaymentOption> =\n            list.filter { items -> items.paymentType == PaymentType.CARD }\n\n        // println(\"filteredCardList value \" + filteredCardList.size)\n        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.N) {\n            paymentInlineViewHolder.setDataFromAPI(filteredCardList)\n        }\n    }\n\n    private fun filterSavedCardTypes(savedCardList: List<SavedCard>) {\n        val filteredSavedCardList: List<SavedCard> =\n            savedCardList.filter { items ->\n                items.funding == PaymentDataSource?.getCardType().toString()\n            }\n\n        adapter.updateAdapterDataSavedCard(filteredSavedCardList)\n    }\n\n\n    private fun setMainChipGroupActionListener() {\n        if (cardViewHolder.view.mainChipgroup.groupAction?.text == LocalizationManager.getValue(\n                \"close\",\n                \"Common\"\n            )\n        ) {\n            isShaking.value = false\n            adapter.updateShaking(isShaking.value ?: false)\n            goPayAdapter.updateShaking(isShaking.value ?: false)\n            cardViewHolder.view.mainChipgroup.groupAction?.text =\n                LocalizationManager.getValue(\"edit\", \"Common\")\n        } else {\n            isShaking.value = true\n            adapter.updateShaking(isShaking.value ?: true)\n            goPayAdapter.updateShaking(isShaking.value ?: true)\n            goPayAdapter.updateShaking(false)\n            cardViewHolder.view.mainChipgroup.groupAction?.text =\n                LocalizationManager.getValue(\"close\", \"Common\")\n        }\n    }\n\n    private fun setGoPayLoginViewGroupActionListener() {\n        if (goPaySavedCardHolder.view.goPayLoginView.groupAction?.text == LocalizationManager.getValue(\n                \"close\",\n                \"Common\"\n            )\n        ) {\n            isShaking.value = false\n            adapter.updateShaking(isShaking.value ?: false)\n            goPayAdapter.updateShaking(isShaking.value ?: false)\n            goPaySavedCardHolder.view.goPayLoginView.groupAction?.text =\n                LocalizationManager.getValue(\"edit\", \"Common\")\n            goPayAdapter.updateSignOut(goPayCardList.value as List<GoPaySavedCards>, false)\n\n        } else {\n            isShaking.value = true\n            adapter.updateShaking(isShaking.value ?: true)\n            Log.d(\"isShaking.value\", isShaking.value.toString())\n            goPayAdapter.updateShaking(false)\n            goPaySavedCardHolder.view.goPayLoginView.groupAction?.text =\n                LocalizationManager.getValue(\"close\", \"Common\")\n            goPayAdapter.updateSignOut(goPayCardList.value as List<GoPaySavedCards>, true)\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    @SuppressLint(\"WrongConstant\")\n    override fun didDialogueExecute(response: String, cardTypeDialog: Boolean?) {\n        // println(\"response are$response\")\n        if (response == \"YES\") {\n            if (deleteCard) {\n                selectedViewToBeDeletedFromCardViewHolder?.addLoaderWithBlurryToView(invokeAfterLoad = {\n                    cardViewModel.processEvent(\n                        CardViewEvent.DeleteSaveCardEvent,\n                        this,\n                        null,\n                        null,\n                        null,\n                        null,\n                        PaymentDataSource.getCustomer().identifier,\n                        cardId\n                    )\n                }, viewToBeBLur = viewToBeBlurCardViewHolder)\n\n\n            } else {\n                // println(\"else block is calle are\")\n                removeViews(goPaySavedCardHolder)\n                //  adapter.updateAdapterDataSavedCard(savedCardList.value as List<SavedCard>)\n                goPayViewsHolder.goPayopened = false\n                adapter.goPayOpenedfromMain(true)\n                adapter.updateShaking(false)\n                cardViewHolder.view.mainChipgroup.groupAction.visibility = View.VISIBLE\n            }\n        } else if (response == \"NO\") {\n            adapter.updateShaking(false)\n            deleteCard = false\n\n        } else if (response == \"OK\") {\n            if (cardTypeDialog == true) {\n                paymentInlineViewHolder.tapCardInputView.clear()\n                paymentInlineViewHolder.tabLayout.resetBehaviour()\n                paymentInlineViewHolder.resetPaymentCardView()\n            } else {\n                bottomSheetDialog.dismissWithAnimation\n                bottomSheetDialog.dismiss()\n            }\n        }\n    }\n\n\n    override fun deleteSelectedCardListener(delSelectedCard: DeleteCardResponse) {\n        if (delSelectedCard.deleted) {\n            savedCardList?.removeAt(selectedItemsDel)\n            savedCardList?.let { adapter.updateAdapterDataSavedCard(it) }\n            cardViewHolder.view.mainChipgroup.chipsRecycler.adapter = adapter\n            deleteCard = false\n            adapter.updateShaking(false)\n\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun handleSuccessFailureResponseButton(\n        response: String,\n        authenticate: Authenticate?,\n        chargeResponse: Charge?,\n        tabAnimatedActionButton: TabAnimatedActionButton?,\n        contextSDK: Context?\n    ) {\n        SessionManager.setActiveSession(false)\n        println(\"response val>>\" + response)\n        println(\"tabAnimatedActionButton val>>\" + tabAnimatedActionButton)\n        println(\"save val>>\" + saveCardSwitchHolder)\n        /* if(chargeResponse?.status == null && response == \"tokenized\"){\n             //todo replaced authorized with chargeresponse\n             SDKSession.getListener()?.getStatusSDK(response,chargeResponse)\n         }else{\n             SDKSession.getListener()?.getStatusSDK(response,chargeResponse)\n         }*/\n\n        /*saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setDisplayMetrics(\n            CustomUtils.getDeviceDisplayMetrics(\n                contextSDK as Activity\n            )\n        )*/\n        saveCardSwitchHolder?.view?.mainSwitch?.visibility = View.GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = View.VISIBLE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setDisplayMetrics(\n            CustomUtils.getDeviceDisplayMetrics(\n                context as Activity\n            )\n        )\n\n        //  addViews(saveCardSwitchHolder)\n        /***\n         * This function is  working fine as expected in case when 3ds is false\n         * i.e.  sdkSession.isRequires3DSecure(false) as no loading of url occurs direct response\n         * from the API is available.\n         * WRONG OTP scenario also handled here as similar to old sdk show user error button and\n         * close the sdk.\n         * **/\n\n        // tabAnimatedActionButton?.clearAnimation()\n        if (::webFrameLayout.isInitialized) {\n            if (fragmentManager.findFragmentById(R.id.webFrameLayout) != null)\n                fragmentManager.beginTransaction()\n                    .hide(fragmentManager.findFragmentById(R.id.webFrameLayout)!!)\n                    .commitNow()\n            webFrameLayout.visibility = View.GONE\n            supportFragmentManager?.popBackStack()\n        }\n        if (::webViewHolder.isInitialized) {\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                ActionButtonState.LOADING, 100\n            )\n            removeViews(webViewHolder)\n        }\n        doAfterSpecificTime(250) {\n            if (::bottomSheetLayout.isInitialized) {\n                bottomSheetLayout.resizeAnimation(\n                    startHeight = bottomSheetLayout.measuredHeight,\n                    endHeight = sdkLayout.height,\n                    durationTime = 250, isExpanding = false\n                )\n            }\n        }\n\n\n\n        if (::otpViewHolder.isInitialized)\n            if (otpViewHolder.otpView.isVisible) {\n                removeViews(\n                    businessViewHolder,\n                    amountViewHolder,\n                    cardViewHolder,\n                    paymentInlineViewHolder,\n                    otpViewHolder\n                )\n            }\n        if (saveCardSwitchHolder != null) {\n            // removeAllViews()\n            //   addViews(saveCardSwitchHolder)\n            saveCardSwitchHolder?.view?.visibility = View.VISIBLE\n            saveCardSwitchHolder?.view?.mainSwitch?.visibility = View.GONE\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = View.VISIBLE\n        }\n\n        if (::checkoutFragment.isInitialized)\n            checkoutFragment.closeText.visibility = View.GONE\n        println(\"chargeResponse are>>>>\" + chargeResponse?.status)\n        // println(\"saveCardSwitchHolder are>>>>\"+saveCardSwitchHolder)\n        if (response.contains(\"failure\") && chargeResponse == null) {\n\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(\n                false,\n                Color.MAGENTA\n            )\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n                false,\n                \"en\",\n                null,\n                Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n                Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n            )\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.ERROR)\n        }\n        println(\"chargeResponse to handle\" + chargeResponse?.status)\n        when (chargeResponse?.status) {\n            ChargeStatus.CAPTURED, ChargeStatus.AUTHORIZED, ChargeStatus.VALID, ChargeStatus.IN_PROGRESS -> {\n                doAfterSpecificTime(2000) {\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                        ActionButtonState.SUCCESS\n                    )\n                }\n//                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n//                    true,\n//                    \"en\", \"\",\n//                    loadAppThemManagerFromPath(AppColorTheme.ActionButtonBackgroundColor),\n//                    loadAppThemManagerFromPath(AppColorTheme.ActionButtonValidTitleLabelColor),\n//                )\n\n            }\n            ChargeStatus.CANCELLED, ChargeStatus.TIMEDOUT, ChargeStatus.FAILED, ChargeStatus.DECLINED, ChargeStatus.UNKNOWN,\n            ChargeStatus.RESTRICTED, ChargeStatus.ABANDONED, ChargeStatus.VOID, ChargeStatus.INVALID -> {\n                println(\"CANCELLED 2>>>\" + saveCardSwitchHolder?.view?.cardSwitch?.payButton)\n                Handler().postDelayed({\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                        ActionButtonState.ERROR\n                    )\n                }, 400)\n\n                tabAnimatedActionButton?.changeButtonState(\n                    ActionButtonState.ERROR\n                )\n\n                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n                    false,\n                    \"en\",\n                    \"\",\n                    Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n                    Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n                )\n\n            }\n            else -> {\n\n                if (response == \"tokenized\") {\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                        ActionButtonState.SUCCESS\n                    )\n                } else {\n                    println(\"is this called>>>\")\n                    removeAllViews()\n                    if (ThemeManager.currentTheme != null && chargeResponse != null)\n                        tabAnimatedActionButton?.setInValidBackground(\n                            false,\n                            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\"))\n                        )\n                    else\n                        tabAnimatedActionButton?.changeButtonState(\n                            ActionButtonState.ERROR\n                        )\n\n                    if (::businessViewHolder.isInitialized && saveCardSwitchHolder != null) {\n                        addViews(businessViewHolder, saveCardSwitchHolder)\n                        businessViewHolder.view.headerView.constraint.visibility = View.GONE\n                        businessViewHolder.view.topSeparatorLinear.visibility = View.GONE\n                        saveCardSwitchHolder?.view?.visibility = View.VISIBLE\n                        saveCardSwitchHolder?.view?.mainSwitch?.visibility = View.GONE\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(\n                            false,\n                            Color.RED\n                        )\n\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n                            false,\n                            \"en\",\n                            null,\n                            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n                            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n\n                            )\n\n                        /*tabAnimatedActionButton?.setButtonDataSource(\n                             false,\n                             \"en\",\n                             null,\n                             Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n                             Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n\n                             )*/\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                            ActionButtonState.ERROR\n                        )\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isEnabled = true\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isClickable = true\n                    }\n                }\n            }\n        }\n\n        doAfterSpecificTime(4000) {\n            if (chargeResponse != null)\n                tabAnimatedActionButton?.setButtonDataSource(\n                    true,\n                    \"en\",\n                    null,\n                    loadAppThemManagerFromPath(AppColorTheme.ActionButtonBackgroundColor),\n                    loadAppThemManagerFromPath(AppColorTheme.ActionButtonValidTitleLabelColor),\n                )\n            SDKSession.sessionActive = false\n        }\n        SessionManager.setActiveSession(false)\n        tabAnimatedActionButton?.setOnClickListener {\n            // if(::fragmentManager.isInitialized)\n            tabAnimatedActionButton.changeButtonState(ActionButtonState.LOADING)\n            SDKSession.startSDK(\n                (tabAnimatedActionButton.context as AppCompatActivity).supportFragmentManager,\n                tabAnimatedActionButton.context,\n                tabAnimatedActionButton.context as AppCompatActivity\n            )\n        }\n        //removeAllViews()\n        doAfterSpecificTime(4500) {\n            if (::bottomSheetDialog.isInitialized)\n                bottomSheetDialog.dismiss()\n        }\n\n\n    }\n\n\n    override fun displayAsynchronousPaymentView(chargeResponse: Charge) {\n        if (chargeResponse != null) {\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n            removeViews(\n                // businessViewHolder,\n                amountViewHolder,\n                cardViewHolder,\n                paymentInlineViewHolder,\n                saveCardSwitchHolder\n            )\n            /*  businessViewHolder.setDataFromAPI(\n                  selectedPaymentOption.image,\n                  selectedPaymentOption.brand?.name\n              )*/\n            addViews(asynchronousPaymentViewHolder)\n            Handler().postDelayed({\n                translateViewToNewHeight(bottomSheetLayout.measuredHeight, true)\n            }, 400)\n            asynchronousPaymentViewHolder.setDataFromAPI(chargeResponse)\n        }\n    }\n\n    override fun resetViewHolder() {\n        adapter.resetSelection()\n        unActivateActionButton()\n    }\n\n    private fun removeViews(vararg viewHolders: TapBaseViewHolder?) {\n\n        viewHolders.forEach {\n            Handler(Looper.getMainLooper()).postDelayed(Runnable {\n                //  it?.view?.visibility =View.INVISIBLE\n                if (::context.isInitialized) {\n                    val animation = AnimationUtils.loadAnimation(context, R.anim.fade_out)\n                    it?.view?.startAnimation(animation)\n\n                }\n                Handler().postDelayed({\n                    if (::sdkLayout.isInitialized) {\n                        //it?.view?.visibility = View.INVISIBLE\n                        sdkLayout.removeView(it?.view)\n\n                    }\n                }, 150)\n\n\n            }, 0)\n        }\n\n    }\n\n\n    private fun addViews(vararg viewHolders: TapBaseViewHolder?) {\n\n        viewHolders.forEach {\n            Handler(Looper.getMainLooper()).postDelayed(Runnable {\n                // it?.view?.visibility =View.VISIBLE\n                if (::context.isInitialized) {\n                    val animation = AnimationUtils.loadAnimation(context, R.anim.fade_in)\n                    it?.view?.startAnimation(animation)\n                }\n\n                Handler().postDelayed({\n                    if (::sdkLayout.isInitialized) {\n                        // it?.view?.visibility = View.VISIBLE\n                        sdkLayout.removeView(it?.view)\n                        sdkLayout.addView(it?.view)\n\n                    }\n                }, 200)\n\n\n            }, 0)\n            BottomSheetBehavior.STATE_HALF_EXPANDED\n        }\n\n\n    }\n\n\n     fun unActivateActionButton() {\n        val payNowString: String\n\n        when (PaymentDataSource.getTransactionMode()) {\n            TransactionMode.TOKENIZE_CARD -> payNowString = LocalizationManager.getValue(\n                \"pay\",\n                \"ActionButton\"\n            )\n            //TODO stopped since checkout won't have SAVE_CARD -so not available in Localization\n            /*TransactionMode.SAVE_CARD -> payString = LocalizationManager.getValue(\n                \"savecard\",\n                \"ActionButton\"\n            )*/\n            TransactionMode.SAVE_CARD -> payNowString = \"SAVE CARD\"\n            else -> {\n                val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n                val nowString: String = LocalizationManager.getValue(\"now\", \"ActionButton\")\n                payNowString = payString + \" \" + nowString\n            }\n        }\n\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n            false,\n            LocalizationManager.getLocale(context).toString(),\n            if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                //payString + \" \" + currentCurrencySymbol + \" \" + selectedAmount\n                payNowString\n            } else {\n                // payString + \" \" + currentCurrencySymbol + \" \" + currentAmount\n                payNowString\n            },\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n        )\n\n        // saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.IDLE)\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isActivated = false\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isClickable = false\n    }\n\n\n    fun resetCardSelection() {\n        adapter.resetSelection()\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onCardSelectedAction(isSelected: Boolean, savedCardsModel: Any?) {\n\n        /**\n         * Clear card input text\n         */\n        println(\"focussss\" + paymentInlineViewHolder.tapCardInputView.hasFocus())\n        println(\"isSelected\" + isSelected)\n        paymentInlineViewHolder.tapCardInputView.clear()\n        paymentInlineViewHolder.clearCardInputAction()\n\n        println(\"savedCardsModel\" + savedCardsModel)\n        unActivateActionButton()\n        when (savedCardsModel) {\n            is SavedCard -> {\n                Bugfender.d(\n                    CustomUtils.tagEvent,\n                    \"Saved card selected :\" + savedCardsModel.lastFour + \"&\" + savedCardsModel.id\n                )\n                paymentInlineViewHolder.setDataForSavedCard(\n                    savedCardsModel,\n                    CardInputUIStatus.SavedCard\n                )\n\n                isSavedCardSelected = true\n                Bugfender.d(\n                    CustomUtils.tagEvent,\n                    \"Payment scheme selected: title :\" + savedCardsModel?.brand + \"& ID :\" + savedCardsModel.paymentOptionIdentifier\n                )\n                unActivateActionButton()\n            }\n            else -> {\n                if (savedCardsModel != null) {\n\n                    if ((savedCardsModel as PaymentOption).paymentType == PaymentType.WEB) {\n                        //  paymentInlineViewHolder.view.alpha = 0.95f\n\n                        PaymentDataSource.setWebViewType(WebViewType.REDIRECT)\n                        activateActionButton((savedCardsModel as PaymentOption))\n                        setPayButtonAction(PaymentType.WEB, savedCardsModel)\n                    } else if ((savedCardsModel as PaymentOption).paymentType == PaymentType.GOOGLE_PAY) {\n                        removeViews(amountViewHolder, cardViewHolder, paymentInlineViewHolder)\n                        checkoutFragment.checkOutActivity?.handleGooglePayApiCall()\n                        activateActionButtonForGPay()\n                        //setPayButtonAction(PaymentType.WEB, savedCardsModel)\n                        PaymentDataSource.setWebViewType(WebViewType.REDIRECT)\n                    }\n                    Bugfender.d(\n                        CustomUtils.tagEvent,\n                        \"Payment scheme selected: title :\" + (savedCardsModel as PaymentOption).brand + \"& ID :\" + (savedCardsModel as PaymentOption).id\n                    )\n\n\n                } else\n\n                    displayGoPayLogin()\n            }\n        }\n    }\n\n    private fun activateActionButtonForGPay() {\n        val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isActivated\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n            true,\n            \"en\",\n            \"\",\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.paymentBackgroundColor\")),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.titleLabelColor\")),\n        )\n\n        saveCardSwitchHolder?.view?.cardSwitch?.showOnlyPayButton()\n\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isActivated\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n    }\n\n\n    private fun activateActionButton(\n        paymentOptObject: PaymentOption? = null,\n        cardBrandString: String? = null\n    ) {\n        val payStringButton: String\n\n        when (PaymentDataSource.getTransactionMode()) {\n            TransactionMode.TOKENIZE_CARD -> payStringButton = LocalizationManager.getValue(\n                \"pay\",\n                \"ActionButton\"\n            )\n            //TODO stopped since checkout won't have SAVE_CARD -so not available in Localization\n            /* TransactionMode.SAVE_CARD -> payString = LocalizationManager.getValue(\n                 \"savecard\",\n                 \"ActionButton\"\n             )*/  TransactionMode.SAVE_CARD -> payStringButton = \"SAVE CARD\"\n            else -> {\n                val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n                val nowString: String = LocalizationManager.getValue(\"now\", \"ActionButton\")\n\n                payStringButton = payString + \" \" + nowString\n            }\n        }\n\n\n\n        println(\"cardBrandString before \" + cardBrandString)\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n            logicTogetButtonStyle(paymentOptObject, payStringButton, cardBrandString)\n        }\n\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun logicTogetButtonStyle(\n        paymentOptObject: PaymentOption?,\n        payString: String,\n        cardBrandString: String?\n    ) {\n        println(\"paymentOptObject is\" + paymentOptObject?.buttonStyle?.background?.darkModel?.backgroundColors?.size)\n        var selectedPayOpt: PaymentOption? = null\n\n        if (cardBrandString != null) {\n            selectedPayOpt = logicTogetPayOptions(cardBrandString)\n\n        } else selectedPayOpt = paymentOptObject\n\n        var colorBackGround: String? = null\n        var intColorArray: IntArray? = null\n        if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains(\"dark\")) {\n            if (selectedPayOpt?.buttonStyle?.background?.darkModel?.backgroundColors?.size == 1) {\n                colorBackGround =\n                    selectedPayOpt?.buttonStyle?.background?.darkModel?.backgroundColors?.get(0)\n            }\n            intColorArray = null\n\n        } else {\n            if (selectedPayOpt?.buttonStyle?.background?.lightModel?.backgroundColors?.size == 1) {\n                colorBackGround =\n                    selectedPayOpt?.buttonStyle?.background?.lightModel?.backgroundColors?.get(0)\n                intColorArray = null\n            } else {\n\n                if (selectedPayOpt?.buttonStyle?.background?.lightModel?.backgroundColors?.size == 2) {\n                    val startColor =\n                        selectedPayOpt?.buttonStyle?.background?.lightModel?.backgroundColors?.get(1)\n                            ?.replace(\"0x\", \"#\")\n\n                    val endColor =\n                        selectedPayOpt?.buttonStyle?.background?.lightModel?.backgroundColors?.get(0)\n                            ?.replace(\"0x\", \"#\")\n\n                    intColorArray =\n                        intArrayOf(Color.parseColor(startColor), Color.parseColor(endColor))\n                    colorBackGround = \"0\"\n\n                } else if (paymentOptObject?.buttonStyle?.background?.lightModel?.backgroundColors?.size == 3) {\n                    val startColor =\n                        selectedPayOpt?.buttonStyle?.background?.lightModel?.backgroundColors?.get(2)\n                            ?.replace(\"0x\", \"#\")\n\n                    val middleColor =\n                        selectedPayOpt?.buttonStyle?.background?.lightModel?.backgroundColors?.get(1)\n                            ?.replace(\"0x\", \"#\")\n                    val endColor =\n                        selectedPayOpt?.buttonStyle?.background?.lightModel?.backgroundColors?.get(0)\n                            ?.replace(\"0x\", \"#\")\n\n                    intColorArray = intArrayOf(\n                        Color.parseColor(startColor),\n                        Color.parseColor(middleColor),\n                        Color.parseColor(endColor)\n                    )\n                    colorBackGround = \"0\"\n\n                }\n\n            }\n\n\n        }\n\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n            true,\n            LocalizationManager.getLocale(context).language,\n            payString,\n            if (colorBackGround.equals(\"0\") || colorBackGround == null) 0 else Color.parseColor(\n                colorBackGround\n            ),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.titleLabelColor\")),\n            intColorArray\n        )\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.removeAllViews()\n\n       // Handler().postDelayed({\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.getImageViewUrl(\n                getAssetName(\n                    selectedPayOpt\n                )\n            )\n                ?.let { saveCardSwitchHolder?.view?.cardSwitch?.payButton?.addChildView(it) }\n            saveCardSwitchHolder?.view?.cardSwitch?.showOnlyPayButton()\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isActivated\n        //}, 500)\n\n\n    }\n\n    private fun logicTogetPayOptions(cardBrandString: String?): PaymentOption? {\n        var selectedPayOption: PaymentOption? = null\n\n        for (i in 0 until paymentOptionsResponse.paymentOptions.size) {\n            if (paymentOptionsResponse.paymentOptions[i].brand == cardBrandString?.toUpperCase()) {\n                selectedPayOption = paymentOptionsResponse.paymentOptions[i]\n            }\n        }\n\n        return selectedPayOption\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    @SuppressLint(\"WrongConstant\")\n    private fun onClickRedirect(savedCardsModel: Any) {\n        /**\n         * on Click Redirect for Knet Redirection\n         */\n        amountViewHolder.view.amount_section?.tapChipPopup?.slideFromLeftToRight()\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n\n        doAfterSpecificTime {\n            selectedPaymentOption = savedCardsModel as PaymentOption\n            cardViewModel.processEvent(\n                CardViewEvent.ChargeEvent,\n                this,\n                selectedPaymentOption,\n                null,\n                null,\n                null\n            )\n\n\n\n\n\n\n            if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains(\"dark\")) {\n                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(\n                    backgroundColor = Color.parseColor(\n                        savedCardsModel.buttonStyle?.background?.darkModel?.baseColor\n                    )\n                )\n\n            } else saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(\n                backgroundColor = Color.parseColor(savedCardsModel.buttonStyle?.background?.lightModel?.baseColor)\n            )\n\n            saveCardSwitchHolder?.view?.mainSwitch?.mainTextSave?.visibility = View.INVISIBLE\n\n            //Commented to try the flow of redirect\n            removeViews(\n                //    businessViewHolder,\n                amountViewHolder,\n                cardViewHolder,\n                paymentInlineViewHolder,\n                tabAnimatedActionButtonViewHolder\n            )\n            businessViewHolder.view.headerView.constraint.visibility = View.GONE\n            Handler().postDelayed({\n                if (::bottomSheetLayout.isInitialized)\n                    translateViewToNewHeight(bottomSheetLayout.measuredHeight, true)\n            }, 400)\n\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun onClickCardPayment(savedCardsModel: Any?) {\n        println(\"onClickCardPayment\" + savedCardsModel)\n        amountViewHolder.view.amount_section?.tapChipPopup?.slideFromLeftToRight()\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n        doAfterSpecificTime {\n            savedCardsModel as PaymentOption\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n            if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains(\"dark\")) {\n                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(\n                    backgroundColor = Color.parseColor(\n                        savedCardsModel.buttonStyle?.background?.darkModel?.baseColor\n                    )\n                )\n\n            } else saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(\n                backgroundColor = Color.parseColor(savedCardsModel.buttonStyle?.background?.lightModel?.baseColor)\n            )\n\n            saveCardSwitchHolder?.view?.mainSwitch?.visibility = View.GONE\n\n\n            with(cardViewHolder.view.mainChipgroup) {\n                val viewsToFadeOut = mutableListOf<View>(chipsRecycler, groupAction, groupName)\n                if (paymentInlineViewHolder.cardInputUIStatus == CardInputUIStatus.NormalCard) {\n                    viewsToFadeOut.add(amountViewHolder.view)\n                }\n                doAfterSpecificTime(time = 500L) {\n                    viewsToFadeOut.addFadeOutAnimationToViews(onAnimationEnd = {})\n                    paymentInlineViewHolder.paymentInputContainer.applyBluryToView()\n                }\n\n            }\n\n\n            if (paymentInlineViewHolder.cardInputUIStatus == CardInputUIStatus.SavedCard) {\n                cardViewHolder.view.cardInfoHeaderText.visibility = View.VISIBLE\n                cardViewHolder.view.cardInfoHeaderText.text =\n                    LocalizationManager.getValue(\"savedCardSectionTitle\", \"TapCardInputKit\")\n            }\n\n\n            if (isSavedCardSelected == true) {\n                cardViewModel.processEvent(\n                    CardViewEvent.CreateTokenExistingCardEvent,\n                    this,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    paymentInlineViewHolder.getSavedCardData()\n                )\n\n            } else {\n                cardViewModel.processEvent(\n                    CardViewEvent.CreateTokenEvent,\n                    this,\n\n                    null,\n                    null,\n                    paymentInlineViewHolder.getCard(),\n                    null\n                )\n            }\n\n\n        }\n\n\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onDeleteIconClicked(\n        stopAnimation: Boolean,\n        itemId: Int,\n        cardId: String,\n        maskedCardNumber: String,\n        arrayListSavedCardSize: ArrayList<SavedCard>,\n        selectedViewToBeDeleted: ViewGroup,\n        viewtoBeBlur: View,\n        position: Int\n    ) {\n        this.cardId = cardId\n        selectedViewToBeDeletedFromCardViewHolder = selectedViewToBeDeleted\n        viewToBeBlurCardViewHolder = viewtoBeBlur\n        selectedItemsDel = itemId\n        cardIDToBeDeleted = position\n        if (stopAnimation) {\n            stopDeleteActionAnimation(itemId, maskedCardNumber, arrayListSavedCardSize)\n        } else {\n            cardViewHolder.view.mainChipgroup.groupAction?.text = LocalizationManager.getValue(\n                \"close\",\n                \"Common\"\n            )\n            deleteCard = false\n        }\n\n    }\n\n    private fun stopDeleteActionAnimation(\n        itemId: Int,\n        maskedCardNumber: String,\n        arrayListSavedCardSizes: ArrayList<SavedCard>\n    ) {\n        isShaking.value = false\n        cardViewHolder.view.mainChipgroup.groupAction?.text = LocalizationManager.getValue(\n            \"GatewayHeader\",\n            \"HorizontalHeaders\",\n            \"rightTitle\"\n        )\n        val title: String = LocalizationManager.getValue(\"title\", \"DeleteCard\")\n        val message: String = LocalizationManager.getValue(\n            \"message\",\n            \"DeleteCard\"\n        )\n        CustomUtils.showDialog(\n            \"$title\",\n            \"${message.replace(\"%@\", maskedCardNumber)} \",\n            context,\n            4,\n            this, null, null, false\n        )\n\n        selectedItemsDel = itemId\n        deleteCard = true\n        this.arrayListSavedCardSize = arrayListSavedCardSizes\n\n    }\n\n    override fun onGoPayLogoutClicked(isClicked: Boolean) {\n        if (isClicked) CustomUtils.showDialog(\n            LocalizationManager.getValue(\"goPaySignOut\", \"GoPay\"), LocalizationManager.getValue(\n                \"goPaySaveCards\",\n                \"GoPay\"\n            ), context, 2, this, null, null, false\n        )\n    }\n\n    override fun onEditClicked(isClicked: Boolean) {\n        if (isClicked) {\n            adapter.updateShaking(true)\n            goPayAdapter.updateShaking(true)\n        } else {\n            adapter.updateShaking(false)\n            goPayAdapter.updateShaking(false)\n        }\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onGooglePayClicked(isClicked: Boolean) {\n        println(\"onGooglePayClicked>>>\" + isClicked)\n        checkoutFragment.checkOutActivity?.handleGooglePayApiCall()\n\n    }\n\n\n    override fun onPayCardSwitchAction(\n        isCompleted: Boolean,\n        paymentType: PaymentType,\n        cardBrandString: String?\n    ) {\n        println(\"isCompleted???\" + isCompleted)\n        //todo add validations from api when cvv is valid the only  activate ActionButton\n        if (isCompleted) {\n            businessViewHolder.view?.headerView.constraint.visibility = View.VISIBLE\n            saveCardSwitchHolder?.view?.mainSwitch?.visibility = View.GONE\n            saveCardSwitchHolder?.view?.mainSwitch?.switchSaveMobile?.visibility = View.GONE\n            saveCardSwitchHolder?.setSwitchToggleData(paymentType)\n            loyaltyViewHolder.view.loyaltyView?.constraintLayout?.visibility = View.VISIBLE\n            // loyatFlag = true\n            /**\n             * @TODO:  Will be enabled when coming from API directly\n             */\n            //  initLoyaltyView() // Will be enabled when coming from API directly\n            activateActionButton(cardBrandString = cardBrandString)\n            paymentActionType = paymentType\n        } else {\n//            saveCardSwitchHolder11?.view?.mainSwitch?.visibility = View.GONE\n            saveCardSwitchHolder?.view?.mainSwitch?.switchSaveMobile?.visibility = View.GONE\n            saveCardSwitchHolder?.setSwitchToggleData(paymentType)\n            unActivateActionButton()\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onPayCardCompleteAction(\n        isCompleted: Boolean,\n        paymentType: PaymentType,\n        cardNumber: String?,\n        expiryDate: String?,\n        cvvNumber: String?, holderName: String?, cardBrandString: String?, savedCardsModel: Any?\n\n    ) {\n        println(\"isCompleted aaa\" + isCompleted)\n        println(\"expiryDate aaa\" + expiryDate)\n        if(isCompleted) activateActionButton(cardBrandString = cardBrandString)\n        if (savedCardsModel != null) {\n            setPayButtonAction(paymentType, savedCardsModel)\n        } else {\n            val typedCardModel = logicTogetPayOptions(cardBrandString)\n            setPayButtonAction(paymentType, typedCardModel)\n        }\n\n    }\n\n    override fun onPaymentCardIsLoyaltyCard(isLoyaltyCard: Boolean) {\n        //Todo logic for loyalty card\n    }\n\n    // Override function to open NFC fragment and scan the card via NFC.\n    override fun onClickNFC() {\n\n        removeViews(\n            //businessViewHolder,\n            // amountViewHolder,\n           // cardViewHolder,\n            saveCardSwitchHolder,\n            paymentInlineViewHolder,\n            otpViewHolder,\n            goPaySavedCardHolder,\n            goPayViewsHolder\n        )\n        //  addViews(businessViewHolder, amountViewHolder)\n        frameLayout.visibility = View.VISIBLE\n        fragmentManager\n            .beginTransaction()\n            .replace(R.id.fragment_container_nfc_lib, nfcFragment)\n            .commit()\n        /* fragmentManager.beginTransaction().remove(InlineViewFragment()).replace(\n             R.id.fragment_container_nfc_lib,\n             nfcFragment\n         ).commit()*/\n        isNFCOpened = true\n        checkoutFragment.isNfcOpened = true\n        amountViewHolder.changeGroupAction(false)\n        val bottomSheet: FrameLayout? =\n            bottomSheetDialog.findViewById(com.google.android.material.R.id.design_bottom_sheet)\n        BottomSheetBehavior.from(bottomSheet as View).state = BottomSheetBehavior.STATE_EXPANDED\n       /* Handler().postDelayed({\n            if (::bottomSheetLayout.isInitialized)\n                translateViewToNewHeight(bottomSheetLayout.measuredHeight, true)\n        }, 400)*/\n        checkSelectedAmountInitiated()\n    }\n\n\n    // Override function to open card Scanner and scan the card.\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onClickCardScanner(scannerClicked: Boolean) {\n        //setSlideAnimation()\n        removeViews(\n            //businessViewHolder,\n            // amountViewHolder,\n            cardViewHolder,\n            saveCardSwitchHolder,\n            paymentInlineViewHolder,\n            otpViewHolder,\n            goPaySavedCardHolder,\n            goPayViewsHolder\n        )\n        amountViewHolder.readyToScanVisibility(scannerClicked)\n        // addViews(businessViewHolder, amountViewHolder)\n        inLineCardLayout.visibility = View.VISIBLE\n        FrameManager.getInstance().frameColor = Color.WHITE\n        // Use\n        //  val bottomSheet: FrameLayout? = bottomSheetDialog.findViewById(com.google.android.material.R.id.design_bottom_sheet)\n        //  BottomSheetBehavior.from(bottomSheet as View).state = BottomSheetBehavior.STATE_EXPANDED\n        //   bottomSheetDialog.behavior.state = BottomSheetBehavior.STATE_EXPANDED\n\n        fragmentManager\n            .beginTransaction()\n            .replace(R.id.inline_container, inlineCamerFragment)\n            .commit()\n\n        isInlineOpened = true\n        checkoutFragment.isScannerOpened = true\n\n        amountViewHolder.changeGroupAction(false)\n        val bottomSheet: FrameLayout? =\n            bottomSheetDialog.findViewById(com.google.android.material.R.id.design_bottom_sheet)\n        BottomSheetBehavior.from(bottomSheet as View).state = BottomSheetBehavior.STATE_EXPANDED\n        Handler().postDelayed({\n            if (::bottomSheetLayout.isInitialized)\n                translateViewToNewHeight(bottomSheetLayout.measuredHeight, false)\n        }, 400)\n        checkSelectedAmountInitiated()\n    }\n\n    private fun checkSelectedAmountInitiated() {\n        if (this::selectedAmount.isInitialized && this::selectedCurrency.isInitialized) {\n            amountViewHolder.updateSelectedCurrency(\n                displayItemsOpen,\n                selectedAmount, selectedCurrency,\n                currentAmount, currentCurrency, currentCurrencySymbol\n            )\n        }\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onCurrencyClicked(\n        currencySelected: String,\n        currencyRate: BigDecimal,\n        totalSelectedAmount: BigDecimal,\n        previousSelectedCurrency: String,\n        selectedCurrencySymbol: String\n    ) {\n\n        /**\n         * case currencyClicked @TODO:EGP /\n         */\n\n        currencyOldRate = currencyRate\n        lastSelectedCurrency = previousSelectedCurrency\n        if (::unModifiedItemList.isInitialized)\n            println(\"unModifiedItemList\" + unModifiedItemList)\n        if (::itemList.isInitialized) {\n            for (i in itemList.indices) {\n                itemList[i].amount = unModifiedItemList[i].amount?.times(currencyRate)\n                //itemList[i].totalAmount = currencyOldRate?.div(currencyRate)\n                itemList[i].totalAmount =\n                    unModifiedItemList[i].getPlainAmount()?.times(currencyRate)\n\n\n                println(\"item per unit >>\" + itemList[i].amount)\n\n\n            }\n\n            itemsViewHolder.view.itemRecylerView.adapter = itemAdapter\n            itemAdapter.updateAdapterData(itemList)\n\n        }\n\n        //  itemList[i].amount = (list[i].amount.toLong())\n        //  itemList[i].currency = currencySelected\n\n        selectedAmount = CurrencyFormatter.currencyFormat(totalSelectedAmount.toString())\n        selectedCurrency = currencySelected\n        currencySelectedForCheck = currencySelected\n        selectedTotalAmount = selectedAmount\n        println(\"selectedAmount final>>\" + selectedAmount)\n        println(\"selectedCurrency final>>\" + selectedCurrency.length)\n        println(\"currentAmount final>>\" + currentAmount)\n        println(\"currentCurrency final>>\" + currentCurrency)\n        println(\"selectedCurrencySymbol final>>\" + selectedCurrencySymbol)\n        println(\"currentCurrencySymbol final>>\" + currentCurrencySymbol)\n        if (selectedCurrencySymbol.length == 2) {\n            amountViewHolder.updateSelectedCurrency(\n                displayItemsOpen,\n                selectedAmount, selectedCurrency,\n                currentAmount, currentCurrency, selectedCurrencySymbol\n            )\n            //  PaymentDataSource.setSelectedCurrency(selectedCurrency = selectedCurrency, null) // changed from null to symbol\n            PaymentDataSource.setSelectedCurrency(selectedCurrency, selectedCurrencySymbol)\n            //  PaymentDataSource.setSelectedCurrency(selectedCurrency = selectedCurrencySymbol, selectedCurrencySymbol) //commented\n\n        } else {\n            amountViewHolder.updateSelectedCurrency(\n                displayItemsOpen,\n                selectedAmount, selectedCurrency,\n                currentAmount, finalCurrencySymbol, selectedCurrencySymbol\n            )\n            PaymentDataSource.setSelectedCurrency(selectedCurrency, selectedCurrencySymbol)\n\n        }\n        currentCurrencySymbol = selectedCurrencySymbol\n\n\n        // PaymentDataSource.setSelectedCurrency(selectedCurrency = selectedCurrency)\n        PaymentDataSource.setSelectedAmount(currencyRate)\n        if (paymentInlineViewHolder.tapCardInputView.isNotEmpty()) {\n            paymentInlineViewHolder.tapCardInputView.clear()\n            paymentInlineViewHolder.tapAlertView?.fadeVisibility(View.GONE, 500)\n            paymentInlineViewHolder.acceptedCardText.visibility = View.VISIBLE\n            paymentInlineViewHolder.tabLayout.resetBehaviour()\n        }\n\n        adapter.resetSelection()\n\n        if (::selectedCurrency.isInitialized) {\n            Bugfender.d(CustomUtils.tagEvent, \"Currency changed to : \" + selectedCurrencySymbol)\n            filterViewModels(selectedCurrency)\n        } else {\n            filterViewModels(currentCurrency)\n            //Bugfender.d(\"Currency changed to : \"+currentCurrency ,CustomUtils.tagEvent)\n\n        }\n\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun submitNewLocalCurrency(\n        currencySelected: String,\n        currencyRate: BigDecimal,\n        totalSelectedAmount: BigDecimal,\n        selectedCurrencySymbol: String\n    ) {\n\n\n        currencyOldRate = currencyRate\n        if (::unModifiedItemList.isInitialized)\n            println(\"unModifiedItemList\" + unModifiedItemList)\n        if (::itemList.isInitialized) {\n            for (i in itemList.indices) {\n                itemList[i].amount = unModifiedItemList[i].amount?.times(currencyRate)\n                //itemList[i].totalAmount = currencyOldRate?.div(currencyRate)\n                itemList[i].totalAmount =\n                    unModifiedItemList[i].getPlainAmount()?.times(currencyRate)\n\n\n                println(\"item per unit >>\" + itemList[i].amount)\n\n\n            }\n\n            itemsViewHolder.view.itemRecylerView.adapter = itemAdapter\n            itemAdapter.updateAdapterData(itemList)\n\n        }\n\n        //  itemList[i].amount = (list[i].amount.toLong())\n        //  itemList[i].currency = currencySelected\n\n        selectedAmount = CurrencyFormatter.currencyFormat(totalSelectedAmount.toString())\n        if (currencySelected != null) {\n            selectedCurrency = currencySelected\n        }\n        selectedTotalAmount = selectedAmount\n\n        /**\n         * Why this check present ??!!  :/\n         */\n        if (selectedCurrencySymbol.length == 2) {\n            amountViewHolder.updateSelectedCurrency(\n                displayItemsOpen,\n                selectedAmount,\n                selectedCurrency,\n                currentAmount,\n                currentCurrency,\n                selectedCurrencySymbol,\n                isChangingCurrencyFromOutside = true\n            )\n            //  PaymentDataSource.setSelectedCurrency(selectedCurrency = selectedCurrency, null) // changed from null to symbol\n            PaymentDataSource.setSelectedCurrency(selectedCurrency, selectedCurrencySymbol)\n            //  PaymentDataSource.setSelectedCurrency(selectedCurrency = selectedCurrencySymbol, selectedCurrencySymbol) //commented\n\n        } else {\n            amountViewHolder.updateSelectedCurrency(\n                displayItemsOpen,\n                selectedAmount,\n                selectedCurrency,\n                currentAmount,\n                finalCurrencySymbol,\n                selectedCurrencySymbol,\n                isChangingCurrencyFromOutside = true\n            )\n            PaymentDataSource.setSelectedCurrency(selectedCurrency, selectedCurrencySymbol)\n\n        }\n        currentCurrencySymbol = selectedCurrencySymbol\n\n        PaymentDataSource.setSelectedAmount(currencyRate)\n        if (paymentInlineViewHolder.tapCardInputView.isNotEmpty()) {\n            paymentInlineViewHolder.tapCardInputView.clear()\n            paymentInlineViewHolder.tapAlertView?.fadeVisibility(View.GONE, 500)\n            paymentInlineViewHolder.acceptedCardText.visibility = View.VISIBLE\n            paymentInlineViewHolder.tabLayout.resetBehaviour()\n        }\n\n        adapter.resetSelection()\n\n        if (::selectedCurrency.isInitialized) {\n            Bugfender.d(CustomUtils.tagEvent, \"Currency changed to : \" + selectedCurrencySymbol)\n            filterViewModels(selectedCurrency)\n        } else {\n            filterViewModels(currentCurrency)\n            //Bugfender.d(\"Currency changed to : \"+currentCurrency ,CustomUtils.tagEvent)\n        }\n\n    }\n\n    fun cancelledCall() {\n        println(\"cancelledCall from webview\")\n    }\n\n    @SuppressLint(\"ResourceType\")\n    override fun redirectLoadingFinished(\n        done: Boolean,\n        charge: Charge?,\n        contextSDK: Context?\n    ) {\n        //  checkoutFragment.dismiss()\n        println(\"done val\" + done + \"chargeResponse status\" + PaymentDataSource.getChargeOrAuthorize())\n        println(\"saveCardSwitchHolder val\" + saveCardSwitchHolder)\n        println(\"redirect val\" + charge?.response)\n        println(\"gatewayResponse val\" + charge?.gatewayResponse)\n\n        businessViewHolder = contextSDK?.let { BusinessViewHolder(it, this) }!!\n        // saveCardSwitchHolder = contextSDK.let { SwitchViewHolder(it,this) }\n        removeViews(businessViewHolder)\n        if (::webFrameLayout.isInitialized) {\n            if (fragmentManager.findFragmentById(R.id.webFrameLayout) != null)\n                fragmentManager.beginTransaction()\n                    .hide(fragmentManager.findFragmentById(R.id.webFrameLayout)!!)\n                    .commit()\n            webFrameLayout.visibility = View.GONE\n            sdkLayout.visibility = View.VISIBLE\n            supportFragmentManager?.popBackStack()\n\n        }\n        //  sdkLayout.visibility =View.VISIBLE\n        if (::amountViewHolder.isInitialized && ::cardViewHolder.isInitialized && ::cardViewHolder.isInitialized && ::paymentInlineViewHolder.isInitialized)\n            removeViews(\n                businessViewHolder,\n                amountViewHolder,\n                cardViewHolder,\n                paymentInlineViewHolder\n            )\n\n\n        Handler().postDelayed({\n            // checkoutFragment.dismiss()\n            /*if (::bottomSheetDialog.isInitialized)\n                bottomSheetDialog.dismiss()*/\n\n        }, 3000)\n\n\n    }\n\n    override fun resultObtained(done: Boolean, contextSDK: Context?) {\n\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun setPayButtonAction(paymentTypeEnum: PaymentType, savedCardsModel: Any?) {\n\n        /**\n         * payment from onSelectPaymentOptionActionListener\n         */\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setOnClickListener {\n            when (paymentTypeEnum) {\n                PaymentType.SavedCard -> {\n                    /**\n                     * Note PaymentType savedcard is changed to Card for saved card payments for extra fees and payment options*/\n                    if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                        checkForExtraFees(\n                            selectedAmount,\n                            selectedCurrency,\n                            PaymentType.CARD,\n                            savedCardsModel,\n                            PaymentDataProvider().getSelectedCurrency()\n                        )\n\n                    } else checkForExtraFees(\n                        currentAmount,\n                        currentCurrency,\n                        PaymentType.CARD,\n                        savedCardsModel,\n                        PaymentDataProvider().getSelectedCurrency()\n                    )\n\n                    // setDifferentPaymentsAction(paymentTypeEnum,savedCardsModel)\n                }\n                PaymentType.WEB -> {\n                    PaymentDataSource.setWebViewType(WebViewType.REDIRECT)\n                    if (savedCardsModel != null) {\n                        if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                            checkForExtraFees(\n                                selectedAmount,\n                                selectedCurrency,\n                                paymentTypeEnum,\n                                savedCardsModel,\n                                PaymentDataProvider().getSelectedCurrency()\n                            )\n                        } else checkForExtraFees(\n                            currentAmount,\n                            currentCurrency,\n                            paymentTypeEnum,\n                            savedCardsModel,\n                            PaymentDataProvider().getSelectedCurrency()\n                        )\n                    }\n                }\n                PaymentType.CARD -> {\n                    //activateActionButton()\n                    if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                        checkForExtraFees(\n                            selectedAmount,\n                            selectedCurrency,\n                            paymentTypeEnum,\n                            savedCardsModel,\n                            PaymentDataProvider().getSelectedCurrency()\n                        )\n                    } else checkForExtraFees(\n                        currentAmount,\n                        currentCurrency,\n                        paymentTypeEnum,\n                        savedCardsModel,\n                        PaymentDataProvider().getSelectedCurrency()\n                    )\n\n\n                }\n                PaymentType.telecom -> {\n                    checkForExtraFees(\n                        currentAmount,\n                        currentCurrency,\n                        paymentTypeEnum,\n                        savedCardsModel,\n                        PaymentDataProvider().getSelectedCurrency()\n                    )\n                }\n            }\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun checkForExtraFees(\n        selectedAmount: String,\n        selectedCurrency: String,\n        paymentTypeEnum: PaymentType,\n        savedCardsModel: Any?,\n        amountedCurrency: AmountedCurrency?\n    ) {\n        var extraFees: java.util.ArrayList<ExtraFee>? = null\n        var paymentOption: PaymentOption? = null\n\n\n        if (paymentTypeEnum == PaymentType.WEB) {\n            savedCardsModel as PaymentOption\n            extraFees = savedCardsModel.extraFees\n            fee = calculateExtraFeesAmount(savedCardsModel as PaymentOption, amountedCurrency)\n\n        } else {\n            for (i in paymentOptionsResponse.paymentOptions.indices) {\n                if (paymentOptionsResponse.paymentOptions[i].paymentType == paymentTypeEnum) {\n                    extraFees = paymentOptionsResponse.paymentOptions[i].extraFees\n                    paymentOption = paymentOptionsResponse.paymentOptions[i]\n                }\n            }\n            fee = calculateExtraFeesAmount(paymentOption, amountedCurrency)\n\n        }\n        val totalAmount: String\n        if (selectedTotalAmount != null) {\n            println(\"selectedTotalAmount is\" + selectedTotalAmount)\n            if (selectedAmount.contains(\",\")) {\n                totalAmount = CurrencyFormatter.currencyFormat(\n                    fee?.add(BigDecimal(selectedAmount.replace(\",\", \"\").toDouble())).toString()\n                )\n\n            } else\n                totalAmount = CurrencyFormatter.currencyFormat(\n                    fee?.add(\n                        selectedTotalAmount?.toDouble()?.let { BigDecimal.valueOf(it) }).toString()\n                )\n        } else {\n            totalAmount = CurrencyFormatter.currencyFormat(\n                fee?.add(\n                    amountedCurrency?.amount?.toDouble()?.let { BigDecimal.valueOf(it) }).toString()\n            )\n        }\n\n        if (calculateExtraFeesAmount(\n                extraFees,\n                paymentOptionsResponse.supportedCurrencies,\n                PaymentDataProvider().getSelectedCurrency()\n            )!! > BigDecimal.ZERO\n        ) {\n            showExtraFees(\n                totalAmount.toString(),\n                fee.toString(),\n                paymentTypeEnum,\n                savedCardsModel,\n                selectedCurrency\n            )\n        } else if (savedCardsModel != null) {\n            if (paymentTypeEnum == PaymentType.CARD || paymentTypeEnum == PaymentType.SavedCard) {\n                if (paymentInlineViewHolder.cardInputUIStatus == CardInputUIStatus.SavedCard) {\n                    savedCardsModel as SavedCard\n                    if (savedCardsModel.paymentOptionIdentifier.toInt() == 3 || savedCardsModel.paymentOptionIdentifier.toInt() == 4) {\n                        setDifferentPaymentsAction(PaymentType.SavedCard, savedCardsModel)\n                    }\n\n                } else {\n                    savedCardsModel as PaymentOption\n                    setDifferentPaymentsAction(PaymentType.CARD, savedCardsModel)\n\n                }\n\n            } else setDifferentPaymentsAction(paymentTypeEnum, savedCardsModel)\n        } else setDifferentPaymentsAction(paymentTypeEnum, savedCardsModel)\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun payActionSavedCard(savedCardsModel: SavedCard?) {\n        amountViewHolder.view.amount_section?.tapChipPopup?.slideFromLeftToRight()\n\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n            ActionButtonState.LOADING\n        )\n        val selectdSavedCard = logicTogetPayOptions(savedCardsModel?.brand?.rawValue)\n        if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains(\"dark\")) {\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(\n                backgroundColor = Color.parseColor(\n                    selectdSavedCard?.buttonStyle?.background?.darkModel?.baseColor\n                )\n            )\n\n        } else saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(\n            backgroundColor = Color.parseColor(selectdSavedCard?.buttonStyle?.background?.lightModel?.baseColor)\n        )\n\n        startSavedCardPaymentProcess(savedCardsModel as SavedCard)\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.getImageView(\n            R.drawable.loader,\n            8\n        ) {\n\n\n        }?.let { it1 ->\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.addChildView(\n                it1\n            )\n        }\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun startSavedCardPaymentProcess(savedCard: SavedCard?) {\n        val createTokenSavedCard =\n            CreateTokenSavedCard(savedCard?.id, PaymentDataSource.getCustomer().identifier)\n        cardViewModel.processEvent(\n            CardViewEvent.CreateTokenExistingCardEvent,\n            this,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            createTokenSavedCard\n        )\n    }\n\n    private fun removeAllViews() {\n        if (::businessViewHolder.isInitialized && ::amountViewHolder.isInitialized && ::cardViewHolder.isInitialized && ::paymentInlineViewHolder.isInitialized &&\n            ::goPayViewsHolder.isInitialized && ::otpViewHolder.isInitialized\n        )\n            removeViews(\n                businessViewHolder,\n                amountViewHolder,\n                cardViewHolder,\n                paymentInlineViewHolder,\n                saveCardSwitchHolder,\n                goPayViewsHolder,\n                otpViewHolder,\n                tabAnimatedActionButtonViewHolder\n            )\n\n        if (::webViewHolder.isInitialized) removeViews(webViewHolder)\n    }\n\n    private fun setAllSeparatorTheme() {\n\n        val borderColor: String = ThemeManager.getValue(\"poweredByTap.backgroundColor\")\n        var borderOpacityVal: String? = null\n        var newBorderColor: String? = null\n        borderOpacityVal = borderColor.substring(borderColor.length - 2)\n        newBorderColor = \"#\" + borderOpacityVal + borderColor.substring(0, borderColor.length - 2)\n            .replace(\"#\", \"\")\n\n        sdkLayout.setBackgroundColor(Color.parseColor(newBorderColor))\n        sdkLayout.let { it1 ->\n            setTopBorders(\n                it1,\n                35f,// corner raduis\n                0.0f,\n                Color.parseColor(\n                    newBorderColor\n                ),// stroke color\n                Color.parseColor(\n                    newBorderColor\n                ),// tint color\n                Color.parseColor(\n                    newBorderColor\n                )\n            )\n        }\n        val separatorViewTheme = SeparatorViewTheme()\n        separatorViewTheme.strokeColor =\n            Color.parseColor(ThemeManager.getValue(\"tapSeparationLine.backgroundColor\"))\n        separatorViewTheme.strokeHeight = ThemeManager.getValue(\"tapSeparationLine.height\")\n        businessViewHolder.view.topSeparatorLinear.topSeparator.setTheme(separatorViewTheme)\n\n        if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains(\"dark\")) {\n            amountViewHolder.view.amountView_separator.visibility = View.GONE\n        } else amountViewHolder.view.amountView_separator.visibility = View.VISIBLE\n        amountViewHolder.view.amountView_separator.setTheme(separatorViewTheme)\n        //  cardViewHolder.view.tapSeparatorViewLinear1.separator_1.setTheme(separatorViewTheme)\n        goPaySavedCardHolder.view.tapSeparatorViewLinear.separator_.setTheme(separatorViewTheme)\n        /**\n         * set separator background\n         */\n        businessViewHolder.view.topSeparatorLinear.setBackgroundColor(\n            (Color.parseColor(\n                ThemeManager.getValue(\n                    \"merchantHeaderView.backgroundColor\"\n                )\n            ))\n        )\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onRecognitionSuccess(card: TapCard?) {\n//to be added for unembossed cards\n        /* if (card != null) {\n             if (card.cardNumber != null && card.cardHolder != null && card.expirationDate != null) {\n                onReadSuccess(card)\n             }\n         }*/\n\n        println(\"are you called here!!\")\n\n\n    }\n\n    override fun onRecognitionFailure(error: String?) {\n\n    }\n\n\n    private fun removeInlineScanner() {\n        if (isInlineOpened) {\n            if (fragmentManager.findFragmentById(R.id.inline_container) != null) {\n                fragmentManager.beginTransaction()\n                    .remove(fragmentManager?.findFragmentById(R.id.inline_container)!!)\n                    .commit()\n            }\n            // inlineCamerFragment.onDestroy()\n            isInlineOpened = false\n            checkoutFragment.isScannerOpened = false\n            inLineCardLayout.visibility = View.GONE\n            amountViewHolder.readyToScanVisibility(false)\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                ActionButtonState.RESET\n            )\n\n        }\n\n    }\n\n    fun handleScanFailedResult(error: String?) {\n        println(\"handleScanFailedResult card is\")\n        removeInlineScanner()\n        //  removeViews(amountViewHolder, businessViewHolder)\n        addViews(\n            // businessViewHolder,\n            //  amountViewHolder,\n            cardViewHolder,\n            paymentInlineViewHolder,\n            saveCardSwitchHolder\n        )\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun handleScanSuccessResult(card: TapCard) {\n\n        //  removeViews(amountViewHolder, businessViewHolder)\n        addViews(\n            // businessViewHolder,\n            /// amountViewHolder,\n            cardViewHolder,\n            paymentInlineViewHolder,\n            saveCardSwitchHolder\n        )\n\n        if (card != null && card.cardNumber?.trim() != null && card.cardNumber.trim().length == 6) {\n            callBinLookupApi(card.cardNumber.trim().substring(0, 6))\n        }\n\n\n        Handler().postDelayed({\n            val binLookupResponse: BINLookupResponse? = PaymentDataSource.getBinLookupResponse()\n            if (PaymentDataSource.getCardType() != null && PaymentDataSource.getCardType() == CardType.ALL) {\n                setScannedCardDetails(card)\n\n            } else {\n                if (binLookupResponse != null) {\n                    paymentInlineViewHolder.checkAllowedCardTypes(binLookupResponse)\n                    setScannedCardDetails(card)\n                }\n\n            }\n        }, 300)\n\n\n        // inlineCamerFragment.onDestroy()\n        removeInlineScanner()\n\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun setScannedCardDetails(card: TapCard) {\n        /* if(CardUtils.isValidCardNumber(card.cardNumber)){\n             paymentInlineViewHolder.tapCardInputView.onTouchView()\n         }else {\n             paymentInlineViewHolder.tapCardInputView.onTouchCardField()\n         }*/\n        //paymentInlineViewHolder.tapCardInputView.onTouchCardField()\n        println(\"scanned card holder is${card.cardHolder}\")\n        println(\"scanned card number is${card.cardNumber}\")\n\n        paymentInlineViewHolder.tapCardInputView.setCardNumberMasked(\n            paymentInlineViewHolder.maskCardNumber(\n                card.cardNumber\n            )\n        )\n        val dateParts: List<String>? = card.expirationDate?.split(\"/\")\n        val month = dateParts?.get(0)?.toInt()\n        val year = dateParts?.get(1)?.toInt()\n        if (month != null) {\n            if (year != null) {\n                paymentInlineViewHolder.tapCardInputView.setExpiryDate(month, year)\n            }\n        }\n\n\n        // paymentInlineViewHolder.tapCardInputView.setCardHolderName(card.cardHolder)\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun callBinLookupApi(binLookUpStr: String?) {\n        cardViewModel.processEvent(\n            CardViewEvent.RetreiveBinLookupEvent,\n            CheckoutViewModel(), null, binLookUpStr, null, null\n        )\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun handleNFCScannedResult(emvCard: TapEmvCard) {\n        println(\"emvCard>>\" + emvCard)\n        //   removeViews(amountViewHolder, businessViewHolder)\n        addViews(\n            //   businessViewHolder,\n            //   amountViewHolder,\n           // cardViewHolder,\n            paymentInlineViewHolder,\n            saveCardSwitchHolder\n        )\n        callBinLookupApi(emvCard.cardNumber?.substring(0, 6))\n\n        Handler().postDelayed({\n            val binLookupResponse: BINLookupResponse? = PaymentDataSource.getBinLookupResponse()\n            if (PaymentDataSource.getCardType() != null && PaymentDataSource.getCardType() == CardType.ALL) {\n                setNfcCardDetails(emvCard)\n\n            } else {\n                if (binLookupResponse != null) {\n                    paymentInlineViewHolder.checkAllowedCardTypes(binLookupResponse)\n                    setNfcCardDetails(emvCard)\n                }\n\n            }\n        }, 300)\n\n        removeNFCViewFragment()\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun setNfcCardDetails(emvCard: TapEmvCard) {\n        // auto slide added on scan to prevent overlap\n        paymentInlineViewHolder.hideViewONScanNFC()\n        convertDateString(emvCard)\n        paymentInlineViewHolder.onFocusChange(CardInputListener.FocusField.FOCUS_CVC)\n\n\n    }\n\n    private fun removeNFCViewFragment() {\n        if (isNFCOpened)\n            if (fragmentManager.findFragmentById(R.id.fragment_container_nfc_lib) != null)\n                fragmentManager.beginTransaction()\n                    .remove(fragmentManager.findFragmentById(R.id.fragment_container_nfc_lib)!!)\n                    .commit()\n        isNFCOpened = false\n        checkoutFragment.isNfcOpened = false\n        //  webFrameLayout.visibility = View.GONE\n        frameLayout.visibility = View.GONE\n        cardViewHolder.view.visibility=View.VISIBLE\n    }\n\n\n    private fun convertDateString(emvCard: TapEmvCard) {\n        //  println(\"emvCard.getExpireDate()\"+emvCard.getExpireDate())\n        val dateParts: CharSequence? = DateFormat.format(\"M/y\", emvCard.getExpireDate())\n        println(\"dateparts\" + dateParts?.length)\n        if (dateParts?.contains(\"/\") == true) {\n            if (dateParts.length <= 3) {\n                return\n            } else {\n                if (dateParts.length >= 5 || dateParts.length >= 4) {\n                    val month = (dateParts).substring(0, 1).toInt()\n\n                    val year = (dateParts).substring(2, 4)\n\n                    if (year.contains(\"/\")) {\n                        println(\"retuu>>\" + year)\n                        return\n                    } else {\n                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n                            paymentInlineViewHolder.setNFCCardData(emvCard , month ,year.toInt())\n                        }\n\n\n                    }\n\n                }\n\n            }\n\n\n        }\n\n    }\n\n    private fun filteredByPaymentTypeAndCurrencyAndSortedList(\n        list: java.util.ArrayList<PaymentOption>, paymentType: PaymentType, currency: String\n    ): java.util.ArrayList<PaymentOption> {\n        var currencyFilter: String? = currency.toUpperCase()\n        val filters: java.util.ArrayList<Utils.List.Filter<PaymentOption>> =\n            java.util.ArrayList<Utils.List.Filter<PaymentOption>>()\n\n        /**\n         * if trx currency not included inside supported currencies <i.e Merchant pass transaction currency that he is not allowed for>\n         * set currency to first supported currency\n        </i.e> */\n        var trxCurrencySupported = false\n        for (amountedCurrency in paymentOptionsResponse.supportedCurrencies) {\n            if (amountedCurrency.currency == currencyFilter) {\n                trxCurrencySupported = true\n                break\n            }\n        }\n        if (!trxCurrencySupported) currencyFilter =\n            paymentOptionsResponse.supportedCurrencies[0].currency\n\n\n        if (currencyFilter != null) {\n            this.getCurrenciesFilter<PaymentOption>(currencyFilter)?.let { filters.add(it) }\n        }\n        //  filters.add(getPaymentOptionsFilter(paymentType))\n        //  val filter: CompoundFilter<PaymentOption> = CompoundFilter(filters)\n        //  val filtered: ArrayList<PaymentOption> = Utils.List.filter(list)\n\n        var filtered: ArrayList<PaymentOption> =\n            list.filter { items ->\n                items.paymentType == paymentType && items.getSupportedCurrencies()?.contains(\n                    currencyFilter\n                ) == true\n            } as ArrayList<PaymentOption>\n\n        return list.filter { items ->\n            items.paymentType == paymentType && items.getSupportedCurrencies()?.contains(\n                currencyFilter\n            ) == true\n        } as ArrayList<PaymentOption>\n    }\n\n    private fun <E : CurrenciesSupport?> getCurrenciesFilter(\n        currency: String\n    ): Utils.List.Filter<E>? {\n        return object : Utils.List.Filter<E> {\n            override fun isIncluded(`object`: E): Boolean {\n                return `object`?.getSupportedCurrencies()!!.contains(currency)\n            }\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun filterViewModels(currency: String) {\n        if (paymentOptionsResponse.paymentOptions != null)\n            paymentOptionsWorker =\n                java.util.ArrayList<PaymentOption>(paymentOptionsResponse.paymentOptions)\n        if (paymentOptionsResponse.cards != null) {\n            val savedCardsWorker: java.util.ArrayList<SavedCard> =\n                java.util.ArrayList<SavedCard>(paymentOptionsResponse.cards)\n        }\n        val webPaymentOptions: java.util.ArrayList<PaymentOption> =\n            filteredByPaymentTypeAndCurrencyAndSortedList(\n                paymentOptionsWorker, PaymentType.WEB, currency\n            )\n\n        val cardPaymentOptions: java.util.ArrayList<PaymentOption> =\n            filteredByPaymentTypeAndCurrencyAndSortedList(\n                paymentOptionsWorker, PaymentType.CARD, currency\n            )\n\n        val googlePaymentOptions: java.util.ArrayList<PaymentOption> =\n            filteredByPaymentTypeAndCurrencyAndSortedList(\n                paymentOptionsWorker, PaymentType.GOOGLE_PAY, currency\n            )\n        //  println(\"googlePaymentOptions\"+googlePaymentOptions)\n        val hasWebPaymentOptions = webPaymentOptions.size > 0\n        val hasCardPaymentOptions = cardPaymentOptions.size > 0\n        val hasGooglePaymentOptions = googlePaymentOptions.size > 0\n        // println(\"hasGooglePaymentOptions\"+hasGooglePaymentOptions)\n\n        //Added if else to update showing GooglePay button based on api\n        if (hasGooglePaymentOptions && googlePaymentOptions.isNotEmpty()) {\n            adapter.updateAdapterGooglePay(googlePaymentOptions)\n            PaymentDataSource.setGoogleCardPay(googlePaymentOptions)\n        } else {\n            adapter.updateAdapterGooglePay(googlePaymentOptions)\n            PaymentDataSource.setGoogleCardPay(googlePaymentOptions)\n        }\n        logicToHandlePaymentDataType(webPaymentOptions, cardPaymentOptions)\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun logicToHandlePaymentDataType(\n        webPaymentOptions: ArrayList<PaymentOption>,\n        cardPaymentOptions: ArrayList<PaymentOption>\n\n    ) {\n        // println(\"webPaymentOptions in logic >>>>$webPaymentOptions\")\n        //  println(\"cardPaymentOptions in logic >>>>$cardPaymentOptions\")\n\n        if (PaymentDataSource.getPaymentDataType() != null && PaymentDataSource.getPaymentDataType() == \"WEB\" && PaymentDataSource.getTransactionMode() != TransactionMode.AUTHORIZE_CAPTURE) {\n            adapter.updateAdapterDataSavedCard(ArrayList())\n            adapter.updateAdapterData(webPaymentOptions)\n            saveCardSwitchHolder?.view?.cardSwitch?.showOnlyPayButton()\n        } else if (PaymentDataSource.getPaymentDataType() != null && PaymentDataSource.getPaymentDataType() == \"CARD\") {\n            adapter.updateAdapterData(ArrayList())\n            paymentInlineViewHolder.setDataFromAPI(cardPaymentOptions)\n            saveCardSwitchHolder?.view?.cardSwitch?.showOnlyPayButton()\n        } else {\n            /**\n             * If TransactionMode is AUTHORIZE_CAPTURE then don't show webpayment options\n             * **/\n            if (PaymentDataSource.getTransactionMode() == TransactionMode.AUTHORIZE_CAPTURE) {\n                adapter.updateAdapterData(ArrayList())\n                paymentInlineViewHolder.setDataFromAPI(cardPaymentOptions)\n            } else {\n                adapter.updateAdapterData(webPaymentOptions)\n                if (!cardPaymentOptions.isEmpty()) {\n                    paymentInlineViewHolder.setDataFromAPI(cardPaymentOptions)\n\n\n                } else {\n                    saveCardSwitchHolder?.mainTextSave?.visibility = View.GONE\n                    removeViews(paymentInlineViewHolder)\n                }\n\n            }\n        }\n        if (LocalizationManager.currentLocalized.length() != 0) {\n            title = LocalizationManager.getValue(\"title\", \"ExtraFees\")\n\n        }\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun showExtraFees(\n        totalAmount: String,\n        extraFeesAmount: String,\n        paymentType: PaymentType, savedCardsModel: Any?, selectedCurrency: String\n    ) {\n\n        val extraFeesPart1: String = LocalizationManager.getValue<String>(\n            \"message\",\n            \"ExtraFees\"\n        ).replaceFirst(\"%@\", extraFeesAmount + selectedCurrency)\n        val extraFeesPart2: String = extraFeesPart1.replace(\"%@\", totalAmount + selectedCurrency)\n        // val leftToRight = \"\\u200F\"\n        //  val localizedMessage =\n        // extraFeesPart1 +\" \"+extraFeesAmount+PaymentDataProvider().getSelectedCurrency()?.currency +extraFeesPart2+\" \"+ totalAmount+ PaymentDataProvider().getSelectedCurrency()?.currency\n        //    \"$extraFeesPart1 $extraFeesAmount$selectedCurrency$extraFeesPart2 $totalAmount$selectedCurrency\"\n        CustomUtils.showDialog(\n            title,\n            extraFeesPart2,\n            context,\n            3,\n            this,\n            paymentType,\n            savedCardsModel, true\n        )\n\n\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun dialogueExecuteExtraFees(\n        response: String,\n        paymentType: PaymentType,\n        savedCardsModel: Any?\n    ) {\n        if (response == \"YES\") {\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n            println(\"savedCardsModel>>>>\" + savedCardsModel)\n            if (savedCardsModel != null) {\n                if (paymentType == PaymentType.CARD) {\n                    savedCardsModel as SavedCard\n                    if (savedCardsModel.paymentOptionIdentifier.toInt() == 3 || savedCardsModel.paymentOptionIdentifier.toInt() == 4) {\n                        setDifferentPaymentsAction(PaymentType.SavedCard, savedCardsModel)\n                    }\n                } else setDifferentPaymentsAction(paymentType, savedCardsModel)\n            } else setDifferentPaymentsAction(paymentType, savedCardsModel)\n        } else {\n            fee = BigDecimal.ZERO\n\n            when {\n                paymentType === PaymentType.WEB -> {\n                    // fireWebPaymentExtraFeesUserDecision(ExtraFeesStatus.REFUSE_EXTRA_FEES)\n                    selectedCurrencyPos = null\n                    selectedAmountPos = null\n\n\n                }\n                paymentType === PaymentType.CARD -> {\n                    selectedCurrencyPos = null\n                    selectedAmountPos = null\n//                    fireCardPaymentExtraFeesUserDecision(ExtraFeesStatus.REFUSE_EXTRA_FEES)\n                }\n                paymentType === PaymentType.SavedCard -> {\n                    selectedCurrencyPos = null\n                    selectedAmountPos = null\n                    //  fireSavedCardPaymentExtraFeesUserDecision(ExtraFeesStatus.REFUSE_EXTRA_FEES)\n                }\n            }\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun setDifferentPaymentsAction(\n        paymentType: PaymentType,\n        savedCardsModel: Any?\n    ) {\n        when {\n\n            paymentType === PaymentType.WEB -> {\n                if (savedCardsModel != null) {\n                    PaymentDataSource.setWebViewType(WebViewType.REDIRECT)\n                    //Added to disable click when button loading\n                    amountViewHolder.view.amount_section?.itemAmountLayout?.isEnabled = false\n                    amountViewHolder.view.amount_section?.itemAmountLayout?.isClickable = false\n                    onClickRedirect(savedCardsModel)\n                }\n            }\n            paymentType === PaymentType.CARD -> {\n                println(\"savedCardsModel fro card\" + savedCardsModel)\n                PaymentDataSource.setWebViewType(WebViewType.THREE_DS_WEBVIEW)\n                //Added to disable click when button loading\n                amountViewHolder.view.amount_section?.itemAmountLayout?.isEnabled = false\n                amountViewHolder.view.amount_section?.itemAmountLayout?.isClickable = false\n\n                onClickCardPayment(savedCardsModel)\n\n\n            }\n            paymentType === PaymentType.SavedCard -> {\n                if (isSavedCardSelected == true) {\n                    //Added to disable click when button loading\n                    amountViewHolder.view.amount_section?.itemAmountLayout?.isEnabled = false\n                    amountViewHolder.view.amount_section?.itemAmountLayout?.isClickable = false\n                    payActionSavedCard(savedCardsModel as SavedCard)\n\n                }\n            }\n        }\n    }\n\n    /**\n     * Calculate extra fees amount big decimal.\n     *\n     * @param paymentOption the payment option\n     * @return the big decimal\n     */\n    open fun calculateExtraFeesAmount(\n        paymentOption: PaymentOption?,\n        amountedCurrency: AmountedCurrency?\n    ): BigDecimal? {\n        return if (paymentOption != null) {\n\n            // val amount = PaymentDataProvider().getSelectedCurrency()\n            var extraFees: java.util.ArrayList<ExtraFee>? = paymentOption.extraFees\n            if (extraFees == null) extraFees = java.util.ArrayList()\n            val supportedCurrencies: java.util.ArrayList<SupportedCurrencies>? =\n                PaymentDataProvider().getSupportedCurrencies()\n            calculateExtraFeesAmount(extraFees, supportedCurrencies, amountedCurrency)\n        } else BigDecimal.ZERO\n    }\n\n    fun View.fadeVisibility(visibility: Int, duration: Long = 3000) {\n        val transition: Transition = Fade()\n        transition.duration = duration\n        transition.addTarget(this)\n        TransitionManager.beginDelayedTransition(this.parent as ViewGroup, transition)\n        this.visibility = visibility\n    }\n\n    fun closeAsynchView() {\n        /*   removeViews(businessViewHolder, asynchronousPaymentViewHolder)\n           businessViewHolder.setDataFromAPI(\n               PaymentDataSource.getMerchantData()?.logo,\n               PaymentDataSource.getMerchantData()?.name\n           )\n           addViews(\n               businessViewHolder,\n               amountViewHolder,\n               cardViewHolder,\n               paymentInlineViewHolder,\n               saveCardSwitchHolder\n           )\n           saveCardSwitchHolder?.view?.visibility = View.VISIBLE\n           saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.RESET)\n           val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n           saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n               false,\n               \"en\",\n               if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                   payString+\" \"+currentCurrencySymbol+\" \"+selectedAmount\n               }else{ payString+\" \"+currentCurrencySymbol+\" \"+currentAmount},\n               Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n               Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n           )*/\n        //  Stopped reset view and dismiss it.\n        checkoutFragment?.dismissBottomSheetDialog()\n    }\n\n    fun showOnlyButtonView(\n        status: ChargeStatus,\n        checkOutActivity: CheckOutActivity?,\n        _checkoutFragment: CheckoutFragment\n    ) {\n        println(\"checkoutFragment>>>.\" + _checkoutFragment)\n        println(\"checkOutActivity>>>.\" + checkOutActivity)\n        removeAllViews()\n        addViews(saveCardSwitchHolder)\n        val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n        val nowString: String = LocalizationManager.getValue(\"now\", \"ActionButton\")\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n            false,\n            \"en\",\n            if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                payString + \" \" + nowString\n            } else {\n                payString + \" \" + nowString\n            },\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.paymentBackgroundColor\")),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.titleLabelColor\")),\n        )\n\n\n        when (status) {\n            ChargeStatus.CAPTURED, ChargeStatus.AUTHORIZED, ChargeStatus.VALID, ChargeStatus.IN_PROGRESS -> {\n                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setDisplayMetrics(\n                    CustomUtils.getDeviceDisplayMetrics(\n                        context as Activity\n                    )\n                )\n                Handler().postDelayed({\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                        ActionButtonState.SUCCESS\n                    )\n                }, 500)\n            }\n            ChargeStatus.CANCELLED, ChargeStatus.TIMEDOUT, ChargeStatus.FAILED, ChargeStatus.DECLINED, ChargeStatus.UNKNOWN,\n            ChargeStatus.RESTRICTED, ChargeStatus.ABANDONED, ChargeStatus.VOID, ChargeStatus.INVALID -> {\n                Handler().postDelayed({\n                    tabAnimatedActionButton?.setInValidBackground(\n                        false, Color.YELLOW\n                    )\n                    tabAnimatedActionButton?.changeButtonState(ActionButtonState.LOADING)\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(\n                        false, Color.YELLOW\n                    )\n\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n                        false,\n                        \"en\",\n                        null,\n                        Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n                        Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n\n                        )\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                        ActionButtonState.ERROR\n                    )\n                }, 500)\n                tabAnimatedActionButton?.changeButtonState(ActionButtonState.ERROR)\n            }\n            else -> {\n\n                if (status.equals(\"tokenized\")) {\n                    Handler().postDelayed({\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                            ActionButtonState.SUCCESS\n                        )\n                    }, 500)\n\n                } else {\n                    Handler().postDelayed({\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(\n                            false,\n                            Color.BLUE\n                        )\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n                            false,\n                            \"en\",\n                            null,\n                            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n                            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n\n                            )\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                            ActionButtonState.ERROR\n                        )\n                    }, 500)\n\n                }\n            }\n        }\n        /*   Handler().postDelayed({\n               checkOutActivity?.onBackPressed()\n\n               if (::bottomSheetDialog.isInitialized)\n                   bottomSheetDialog.dismiss()\n               _checkoutFragment.activity?.onBackPressed()\n\n           }, 12000)*/\n    }\n\n\n    /**\n     * handlePaymentSuccess handles the payment token obtained from GooglePay API\n     * **/\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun handlePaymentSuccess(paymentData: PaymentData) {\n        removeViews(\n            //businessViewHolder,\n            amountViewHolder,\n            cardViewHolder,\n            // saveCardSwitchHolder,\n            paymentInlineViewHolder,\n            otpViewHolder,\n            goPaySavedCardHolder,\n            goPayViewsHolder\n        )\n        saveCardSwitchHolder?.view?.cardSwitch?.switchesLayout?.visibility = View.GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = View.VISIBLE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n\n        val paymentInformation = paymentData.toJson() ?: return\n\n        try {\n            // Token will be null if PaymentDataRequest was not constructed using fromJson(String).\n            val paymentMethodData =\n                JSONObject(paymentInformation).getJSONObject(\"paymentMethodData\")\n\n            // If the gateway is set to \"example\", no payment information is returned - instead, the\n            // token will only consist of \"examplePaymentMethodToken\".\n            val tokenizationData = paymentMethodData.getJSONObject(\"tokenizationData\")\n\n            val token = tokenizationData.getString(\"token\")\n            Bugfender.d(CustomUtils.tagEvent, \"Google pay raw token :\" + token)\n            val gson = Gson()\n            val jsonToken = gson.fromJson(token, JsonObject::class.java)\n\n\n            /**\n             * At this stage, Passing the googlePaylaod to Tap Backend TokenAPI call followed by chargeAPI.\n             * ***/\n            val createTokenGPayRequest = CreateTokenGPayRequest(\"googlepay\", jsonToken)\n            CardViewModel().processEvent(\n                CardViewEvent.CreateGoogleTokenEvent,\n                this,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                context,\n                createTokenGPayRequest\n            )\n            // Logging token string.\n            /* Log.e(\"GooglePaymentToken\", paymentMethodData\n                     .getJSONObject(\"tokenizationData\")\n                     .getString(\"token\"))\n    */\n        } catch (e: JSONException) {\n            Log.e(\"handlePaymentSuccess\", \"Error: \" + e.toString())\n        }\n\n    }\n\n    /**\n     * handleError handles the payment response obtained from GooglePay API\n     * **/\n    fun handleError(statusCode: Int) {\n        Log.e(\"loadPaymentData failed\", String.format(\"Error code: %d\", statusCode))\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onReadSuccess(card: TapCard?) {\n        incrementalCount += 1\n\n        println(\"incrementalCount val>>>>>\" + incrementalCount)\n        /*   if (card != null) {\n               if(card.cardNumber!=null)\n              handleScanSuccessResult(card)\n              *//* Log.d(\"checkOutViewModel\", \"onRecognitionSuccess: \" + card.cardNumber)\n            Log.d(\"checkOutViewModel\", \"onRecognitionSuccess: \" + card.expirationDate)\n            Log.d(\"checkOutViewModel\", \"onRecognitionSuccess: \" + card.cardHolder)*//*\n\n        }*/\n        if (card != null && incrementalCount == 3) {\n\n            if (card.cardNumber != null && card.cardHolder != null && card.expirationDate != null) {\n                handleScanSuccessResult(card)\n            }\n            return\n        }\n    }\n\n    override fun onReadFailure(error: String?) {\n        handleScanFailedResult(error)\n    }\n\n    private fun logicForLoyaltyProgram() {\n\n        loyaltyViewHolder.loyaltyView.switchLoyalty?.setOnCheckedChangeListener { buttonView, isChecked ->\n            loyaltyViewHolder.loyaltyView.switchTheme()\n\n            if (isChecked) {\n                loyaltyViewHolder.loyaltyView.linearLayout2?.visibility = View.VISIBLE\n                loyaltyViewHolder.loyaltyView.linearLayout3?.visibility = View.VISIBLE\n\n            } else {\n\n                loyaltyViewHolder.loyaltyView.linearLayout2?.visibility = View.GONE\n                loyaltyViewHolder.loyaltyView.linearLayout3?.visibility = View.GONE\n\n            }\n        }\n\n        loyaltyViewHolder.loyaltyView.setLoyaltyHeaderDataSource(\n            LoyaltyHeaderDataSource(\n                \"ADCB\",\n                \"https://is4-ssl.mzstatic.com/image/thumb/Purple112/v4/05/33/67/05336718-a6f6-8ca1-1ea0-0644f5071ce9/AppIcon-0-0-1x_U007emarketing-0-0-0-5-0-0-sRGB-0-0-0-GLES2_U002c0-512MB-85-220-0-0.png/1200x600wa.png\"\n            )\n        )\n\n        loyaltyViewHolder.loyaltyView.textViewClickable?.makeLinks(\n            Pair(\"(T&C)\", View.OnClickListener {\n                val url = \"https://www.adcb.com/en/tools-resources/adcb-privacy-policy/\"\n                val intent = Intent(Intent.ACTION_VIEW)\n                intent.data = Uri.parse(url)\n                context.startActivity(intent)\n\n            })\n        )\n    }\n\n    fun onButtonClicked() {\n        println(\"onButtonClicked\")\n        BenefitInAppCheckout.newInstance(\n            context as Activity,\n            appId,\n            \"448544\",\n            merchantId,\n            seceret,\n            \"20.0\",\n            \"BH\",\n            \"048\",\n            mcc,\n            \"Tap\",\n            \"Manama\",\n            this\n        )\n    }\n\n\n    override fun onTransactionSuccess(p0: Transaction?) {\n        println(\"transaction is success $p0\")\n\n    }\n\n    override fun onTransactionFail(p0: Transaction?) {\n        println(\"onTransactionFail is  $p0\")\n    }\n\n    fun dismissBottomSheet() {\n        checkoutFragment?.dismissBottomSheetDialog()\n    }\n\n    fun setTitleNormalCard() {\n        cardViewHolder.view.cardInfoHeaderText.text =\n            LocalizationManager.getValue(\"cardSectionTitleOr\", \"TapCardInputKit\")\n    }\n\n    fun getAssetName(paymentOptionOb: PaymentOption?): String {\n        println(\"paymentOptionOb\" + paymentOptionOb)\n        var lang: String = \"en\"\n        var theme: String = \"light\"\n        if (LocalizationManager.getLocale(context).language != null) {\n            lang = LocalizationManager.getLocale(context).language\n        } else lang = \"en\"\n        if (ThemeManager.currentTheme != null && ThemeManager.currentTheme.contains(\"dark\")) {\n            theme = \"dark\"\n        } else theme = \"light\"\n        val assetToLoad: String = paymentOptionOb?.buttonStyle?.titleAssets.toString()\n        println(\"oppp\" + assetToLoad.replace(\"{theme}\", theme).replace(\"{lang}\", lang) + \".png\")\n        return assetToLoad.replace(\"{theme}\", theme).replace(\"{lang}\", lang) + \".png\"\n    }\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout/src/main/java/company/tap/checkout/internal/viewmodels/CheckoutViewModel.kt b/checkout/src/main/java/company/tap/checkout/internal/viewmodels/CheckoutViewModel.kt
--- a/checkout/src/main/java/company/tap/checkout/internal/viewmodels/CheckoutViewModel.kt	(revision 99170d6c055adc7cce56cf0714329e9e7e92a080)
+++ b/checkout/src/main/java/company/tap/checkout/internal/viewmodels/CheckoutViewModel.kt	(date 1683122499287)
@@ -915,7 +915,7 @@
 
     }
 
-    private fun translateViewToNewHeight(originalHeight: Int, expandHeightBool: Boolean) {
+     fun translateViewToNewHeight(originalHeight: Int, expandHeightBool: Boolean) {
         val sdkLayoutHeight = sdkLayout.height
         val bottomSheetLayoutHeight = bottomSheetLayout.height
         println("sdkLayoutHeight>>" + sdkLayoutHeight)
@@ -1477,7 +1477,7 @@
     private fun initAdaptersAction() {
         adapter = CardTypeAdapterUIKIT(this)
         goPayAdapter = GoPayCardAdapterUIKIT(this)
-        itemAdapter = ItemAdapter()
+        itemAdapter = ItemAdapter(this,bottomSheetLayout)
         // adapter?.possiblyShowGooglePayButton()
         // val arrayList = ArrayList<String>()//Creating an empty arraylist
         //  arrayList.add("Google Pay")//Adding object in arraylist
Index: checkout/src/main/java/company/tap/checkout/internal/utils/ViewsExtension.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package company.tap.checkout.internal.utils\n\nimport android.animation.ArgbEvaluator\nimport android.animation.ObjectAnimator\nimport android.animation.ValueAnimator\nimport android.annotation.SuppressLint\nimport android.app.Activity\nimport android.content.Context\nimport android.graphics.BlendMode\nimport android.graphics.BlendModeColorFilter\nimport android.graphics.drawable.*\nimport android.graphics.drawable.shapes.RoundRectShape\nimport android.os.Build\nimport android.os.Handler\nimport android.os.Looper\nimport android.transition.Fade\nimport android.transition.Transition\nimport android.transition.TransitionManager\nimport android.util.DisplayMetrics\nimport android.util.TypedValue\nimport android.view.*\nimport android.view.animation.Animation\nimport android.view.animation.Animation.AnimationListener\nimport android.view.animation.AnimationUtils\nimport android.view.animation.TranslateAnimation\nimport android.webkit.WebChromeClient\nimport android.webkit.WebSettings\nimport android.webkit.WebView\nimport android.widget.FrameLayout\nimport android.widget.ImageView\nimport android.widget.Toast\nimport androidx.annotation.DrawableRes\nimport androidx.core.os.postDelayed\nimport androidx.core.view.ViewCompat\nimport androidx.core.view.isVisible\nimport com.bumptech.glide.Glide\nimport company.tap.checkout.R\nimport company.tap.checkout.internal.cache.SharedPrefManager\nimport company.tap.checkout.open.data_managers.PaymentDataSource\nimport company.tap.tapuilibrary.themekit.ThemeManager\nimport company.tap.tapuilibrary.uikit.ktx.loadAppThemManagerFromPath\nimport jp.wasabeef.blurry.Blurry\nimport kotlinx.android.synthetic.main.amountview_layout.view.*\nimport kotlinx.android.synthetic.main.switch_layout.view.*\nimport java.util.*\n\n\nprivate var targetHeight: Int? = 0\nprivate var animationDelayForResizeAnimation = 2000L\nprivate var topLeftCorner = 16f\nprivate var topRightCorner = 16f\nprivate var bottomRightCorner = 0f\nprivate var bottomLeftCorner = 0f\nconst val progressBarSize = 45\n\nfun View.startPoweredByAnimation(\n    delayTime: Long,\n    poweredByLogo: View?,\n    onAnimationEnd: () -> Unit?\n) {\n    Handler(Looper.getMainLooper()).postDelayed({\n        poweredByLogo?.visibility = View.GONE\n        this.visibility = View.VISIBLE\n        this.addSlideUpAnimation(onAnimationEnd = onAnimationEnd)\n        doAfterSpecificTime(execute = {\n            poweredByLogo?.addFadeInAnimation()\n        })\n    }, delayTime)\n//    val resizeAnimation =\n//        targetHeight?.let {\n//            ResizeAnimation(\n//                this,\n//                it,\n//                0, true\n//            )\n//        }\n\n//    resizeAnimation?.duration = animationDelayForResizeAnimation\n//    resizeAnimation?.setAnimationListener(object : AnimationListener {\n//        override fun onAnimationStart(p0: Animation?) {\n//        }\n//\n//        override fun onAnimationEnd(p0: Animation?) {\n//            onAnimationEnd.invoke()\n//        }\n//\n//        override fun onAnimationRepeat(p0: Animation?) {\n//        }\n//\n//    })\n//    this.startAnimation(resizeAnimation)\n\n\n}\n\nfun Context?.getDimensionsInDp(dimension: Int): Int {\n    return TypedValue.applyDimension(\n        TypedValue.COMPLEX_UNIT_DIP,\n        dimension.toFloat(),\n        this?.resources?.displayMetrics\n    ).toInt()\n\n}\n\nfun doAfterSpecificTime(time: Long = 1000L, execute: () -> Unit) =\n    Handler(Looper.getMainLooper()).postDelayed(time) {\n        execute.invoke()\n    }\n\n\nfun View.setMargins(left: Int, top: Int, right: Int, bottom: Int) {\n    if (this.layoutParams is ViewGroup.MarginLayoutParams) {\n        val p = this.layoutParams as ViewGroup.MarginLayoutParams\n        p.setMargins(left, top, right, bottom)\n        this.requestLayout()\n    }\n}\n\nfun View.applyGlowingEffect(colorPairs: Pair<Int, Int>, durationTime: Long = 1000L) {\n    val backgroundColor = \"BackgroundColor\"\n    val animator: ObjectAnimator =\n        ObjectAnimator.ofInt(\n            this,\n            backgroundColor,\n            colorPairs.first,\n            colorPairs.second\n        ).setDuration(durationTime)\n\n    this.setMargins(0, 0, 0, 0)\n    animator.setEvaluator(ArgbEvaluator())\n    animator.repeatMode = ValueAnimator.REVERSE\n    animator.repeatCount = Animation.INFINITE\n    animator.start()\n\n\n}\n\nfun View.addFadeInAnimation(durationTime: Long = 1000L) {\n    this.visibility = View.VISIBLE\n    val animation = AnimationUtils.loadAnimation(context, R.anim.fade_in)\n    animation.duration = durationTime\n    this.startAnimation(animation)\n}\n\nfun View.addSlideUpAnimation( durationTime: Long = 1000L,onAnimationEnd: () -> Unit?) {\n    val animation = AnimationUtils.loadAnimation(context, R.anim.slide_up)\n    animation.duration = durationTime\n    this.startAnimation(animation)\n    this.animation.setAnimationListener(object : AnimationListener {\n        override fun onAnimationStart(p0: Animation?) {\n        }\n\n        override fun onAnimationEnd(p0: Animation?) {\n            onAnimationEnd.invoke()\n        }\n\n        override fun onAnimationRepeat(p0: Animation?) {\n        }\n\n    })\n}\n\nfun Context.isUserCurrencySameToMainCurrency(): Boolean {\n    val userCurrency = SharedPrefManager.getUserSupportedLocaleForTransactions(this)?.currency\n    val paymentCurrency = PaymentDataSource.getCurrency()?.isoCode\n    return userCurrency.equals(paymentCurrency, ignoreCase = true)\n}\n\nfun View.slidefromRightToLeft() {\n    val animate = TranslateAnimation(\n        if (isRTL()) -this.width.toFloat() else this.width.toFloat(),\n        0f,\n        0f,\n        0f\n    ) // View for animation\n    animate.duration = 1000\n    animate.fillAfter = true\n    this.startAnimation(animate)\n    this.visibility = View.VISIBLE // Change visibility VISIBLE or GONE\n\n}\n\nfun View.slideFromLeftToRight() {\n\n    if (this.isVisible) {\n        val animate =\n            TranslateAnimation(\n                0f,\n                if (isRTL()) -this.width.toFloat() else this.width.toFloat(),\n                0f,\n                0f\n            ) // View for animation\n        animate.duration = 1000\n        animate.fillAfter = false\n        this.startAnimation(animate)\n        this.visibility = View.GONE // Change visibility VISIBLE or GONE\n    }\n\n}\n\nfun View.isRTL() = ViewCompat.getLayoutDirection(this) == ViewCompat.LAYOUT_DIRECTION_RTL\n\n\n\n\nfun MutableList<View>.addFadeInAnimationForViews(durationTime: Long = 1000L) {\n    this.forEachIndexed { index, view ->\n        view.visibility = View.VISIBLE\n        val animation = AnimationUtils.loadAnimation(view.context, R.anim.fade_in)\n        animation.duration = durationTime\n        view.startAnimation(animation)\n    }\n\n}\n\nfun Context.twoThirdHeightView(): Double {\n    return getDeviceSpecs().first.times(2.3) / 3\n}\n\n@SuppressLint(\"SetJavaScriptEnabled\")\nfun WebView.applyConfigurationForWebView(\n    url: String,\n    onProgressWebViewFinishedLoading: () -> Unit\n) {\n    with(this) {\n        settings.javaScriptEnabled = true\n        settings.mixedContentMode = WebSettings.MIXED_CONTENT_ALWAYS_ALLOW\n        settings.loadWithOverviewMode = true\n        isVerticalScrollBarEnabled = true\n        isHorizontalScrollBarEnabled = true\n        setInitialScale(1)\n        settings.defaultZoom = WebSettings.ZoomDensity.FAR;\n        settings.useWideViewPort = true\n        loadUrl(url)\n        setOnKeyListener { _, keyCode, event ->\n            if (event.action == KeyEvent.ACTION_UP && keyCode == KeyEvent.KEYCODE_BACK) {\n                if (this.canGoBack()) {\n                    this.goBack()\n                    /**\n                     * put here listener or delegate thT process cancelled **/\n                    return@setOnKeyListener true\n                }\n                return@setOnKeyListener false\n            }\n            false\n        }\n\n        this.webChromeClient = object : WebChromeClient() {\n            override fun onProgressChanged(view: WebView?, newProgress: Int) {\n                if (newProgress == 100) {\n                    onProgressWebViewFinishedLoading.invoke()\n                }\n\n            }\n        }\n    }\n\n\n}\n\nfun View.resizeAnimation(\n    durationTime: Long = 1000L,\n    startHeight: Int = 1000,\n    endHeight: Int = 1000, isExpanding: Boolean = false\n) {\n    val resizeAnimation = ResizeAnimation(\n        this,\n        endHeight,\n        startHeight, isExpanding\n    )\n    resizeAnimation.duration = durationTime\n    this.startAnimation(resizeAnimation)\n}\n\n\n/**\n * This function return specs of device height && width\n */\nfun Context.getDeviceSpecs(): Pair<Int, Int> {\n    val displayMetrics = DisplayMetrics()\n    (this as Activity).windowManager.defaultDisplay.getMetrics(displayMetrics)\n    val height = displayMetrics.heightPixels\n    val width = displayMetrics.widthPixels\n    val pair: Pair<Int, Int> = Pair(height, width)\n    return pair\n}\n\nfun getViewShapeDrawable(\n    isRoundedCorners: Boolean = false,\n    shapeColor: String = AppColorTheme.MerchantHeaderViewColor\n): Drawable {\n    val shape = when (isRoundedCorners) {\n        true ->\n            ShapeDrawable(\n                RoundRectShape(\n                    floatArrayOf(\n                        topLeftCorner, topLeftCorner,\n                        topRightCorner, topRightCorner,\n                        bottomRightCorner, bottomRightCorner,\n                        bottomLeftCorner, bottomLeftCorner\n                    ),\n                    null, null\n                )\n            )\n        false ->\n            ShapeDrawable()\n    }\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {\n        shape.colorFilter = BlendModeColorFilter(\n            loadAppThemManagerFromPath(shapeColor),\n            BlendMode.SRC_ATOP\n        )\n    }\n\n\n    return shape\n}\n\nfun View.addFadeOutAnimation(durationTime: Long = 500L) {\n    if (this.isVisible) {\n        val animation = AnimationUtils.loadAnimation(context, R.anim.fade_out)\n        animation.duration = durationTime\n        this.startAnimation(animation)\n        this.animation.setAnimationListener(object : AnimationListener {\n            override fun onAnimationStart(p0: Animation?) {\n            }\n\n            override fun onAnimationEnd(p0: Animation?) {\n                this@addFadeOutAnimation.visibility = View.GONE\n            }\n\n            override fun onAnimationRepeat(p0: Animation?) {\n            }\n\n        })\n    }\n}\n\nfun MutableList<View>.addFadeOutAnimationToViews(\n    durationTime: Long = 500L,\n    onAnimationEnd: () -> Unit?\n) {\n    this.forEachIndexed { index, view ->\n//        val animation = AnimationUtils.loadAnimation(view.context, R.anim.fade_out)\n//        animation.duration = durationTime\n//        view.startAnimation(animation)\n        view.visibility = View.GONE\n//        view.animation.setAnimationListener(object : AnimationListener {\n//            override fun onAnimationStart(p0: Animation?) {\n//            }\n//\n//            override fun onAnimationEnd(p0: Animation?) {\n//                view.visibility = View.GONE\n//                onAnimationEnd.invoke()\n//\n//            }\n//\n//            override fun onAnimationRepeat(p0: Animation?) {\n//            }\n//\n//        })\n    }\n\n\n}\n\nfun MutableList<View>.addFadeInAnimationToViews(durationTime: Long = 500L) {\n    this.forEachIndexed { index, view ->\n\n        val animation = AnimationUtils.loadAnimation(view.context, R.anim.fade_in)\n        animation.duration = durationTime\n        view.startAnimation(animation)\n        view.animation.setAnimationListener(object : AnimationListener {\n            override fun onAnimationStart(p0: Animation?) {\n            }\n\n            override fun onAnimationEnd(p0: Animation?) {\n                view.visibility = View.VISIBLE\n\n\n            }\n\n            override fun onAnimationRepeat(p0: Animation?) {\n            }\n\n        })\n    }\n\n\n}\n\n\nfun View.applyBluryToView(\n    radiusNeeded: Int = 8,\n    sampling: Int = 2,\n    animationDuration: Int = 1000,\n    showOriginalView: Boolean = false\n) {\n    Blurry.with(context).radius(radiusNeeded).sampling(sampling).animate(animationDuration)\n        .onto(this as ViewGroup).apply {\n            when (showOriginalView) {\n                true -> this@applyBluryToView.getChildAt(0).visibility = View.VISIBLE\n                false -> this@applyBluryToView.getChildAt(0).visibility = View.GONE\n            }\n\n        }\n\n\n}\n\n\nfun ViewGroup.addLoaderWithBlurryToView(invokeAfterLoad: () -> Unit, viewToBeBLur: View?) {\n\n    @DrawableRes\n    val loaderGif: Int =\n        if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains(\"dark\")) {\n            R.drawable.loader\n        } else if (ThemeManager.currentTheme.isNotEmpty() && !ThemeManager.currentTheme.contains(\n                \"dark\"\n            )\n        ) {\n            R.drawable.output_black_loader_nobg\n        } else R.drawable.loader\n\n\n\n    viewToBeBLur?.applyBluryToView()\n    val progressImage = ImageView(context)\n    val params = FrameLayout.LayoutParams(progressBarSize, progressBarSize)\n    params.gravity = Gravity.CENTER\n    progressImage.layoutParams = params\n    Glide.with(context).asGif().load(loaderGif).into(progressImage)\n    this.addView(progressImage)\n    doAfterSpecificTime(2000) {\n        invokeAfterLoad.invoke()\n    }\n\n}\n\nfun Context.showToast(message: String) {\n    return Toast.makeText(this, message, Toast.LENGTH_SHORT).show()\n}\n\nfun adjustHeightAccToDensity(displayMetrics: Int?) {\n    if (displayMetrics == DisplayMetrics.DENSITY_260 || displayMetrics == DisplayMetrics.DENSITY_280 || displayMetrics == DisplayMetrics.DENSITY_300 || displayMetrics == DisplayMetrics.DENSITY_XHIGH || displayMetrics == DisplayMetrics.DENSITY_340 || displayMetrics == DisplayMetrics.DENSITY_360) {\n        targetHeight = 90\n    } else if (displayMetrics == DisplayMetrics.DENSITY_450 || displayMetrics == DisplayMetrics.DENSITY_420 || displayMetrics == DisplayMetrics.DENSITY_400) {\n        targetHeight = 120\n    } else targetHeight = 140\n}\n\n\nfun createDrawableGradientForBlurry(colorsArrayList: IntArray): GradientDrawable {\n    val gradientDrawable = GradientDrawable(\n        GradientDrawable.Orientation.BL_TR,\n        colorsArrayList\n    )\n    gradientDrawable.gradientRadius = 100f\n    gradientDrawable.cornerRadii = floatArrayOf(\n        topLeftCorner, topLeftCorner,\n        topRightCorner, topRightCorner,\n        bottomRightCorner, bottomRightCorner,\n        bottomLeftCorner, bottomLeftCorner\n    )\n    return gradientDrawable\n}\nfun View.fadeVisibility(visibility: Int, duration: Long = 400) {\n    val transition: Transition = Fade()\n    transition.duration = duration\n    transition.addTarget(this)\n    TransitionManager.beginDelayedTransition(this.parent as ViewGroup, transition)\n    this.visibility = visibility\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout/src/main/java/company/tap/checkout/internal/utils/ViewsExtension.kt b/checkout/src/main/java/company/tap/checkout/internal/utils/ViewsExtension.kt
--- a/checkout/src/main/java/company/tap/checkout/internal/utils/ViewsExtension.kt	(revision 99170d6c055adc7cce56cf0714329e9e7e92a080)
+++ b/checkout/src/main/java/company/tap/checkout/internal/utils/ViewsExtension.kt	(date 1683101218063)
@@ -66,30 +66,6 @@
             poweredByLogo?.addFadeInAnimation()
         })
     }, delayTime)
-//    val resizeAnimation =
-//        targetHeight?.let {
-//            ResizeAnimation(
-//                this,
-//                it,
-//                0, true
-//            )
-//        }
-
-//    resizeAnimation?.duration = animationDelayForResizeAnimation
-//    resizeAnimation?.setAnimationListener(object : AnimationListener {
-//        override fun onAnimationStart(p0: Animation?) {
-//        }
-//
-//        override fun onAnimationEnd(p0: Animation?) {
-//            onAnimationEnd.invoke()
-//        }
-//
-//        override fun onAnimationRepeat(p0: Animation?) {
-//        }
-//
-//    })
-//    this.startAnimation(resizeAnimation)
-
 
 }
 
Index: app/src/main/java/company/tap/checkoutsdk/manager/SettingsManager.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package company.tap.checkoutsdk.manager\n\nimport android.annotation.SuppressLint\nimport android.content.Context\nimport android.content.SharedPreferences\nimport android.preference.PreferenceManager\nimport android.util.Log\nimport com.google.gson.Gson\nimport com.google.gson.reflect.TypeToken\nimport company.tap.checkout.internal.api.enums.AmountModificatorType\nimport company.tap.checkout.internal.api.enums.AuthorizeActionType\nimport company.tap.checkout.internal.api.models.AmountModificator\nimport company.tap.checkout.internal.api.models.PhoneNumber\nimport company.tap.checkout.internal.api.responses.UserLocalCurrencyModel\nimport company.tap.checkout.open.enums.Category\nimport company.tap.checkout.open.enums.SdkMode\nimport company.tap.checkout.open.enums.TransactionMode\nimport company.tap.checkout.open.models.*\nimport company.tap.checkoutsdk.activities.CustomerCreateActivity\nimport company.tap.checkoutsdk.viewmodels.*\nimport java.math.BigDecimal\nimport java.util.*\n\n/**\n * Created by AhlaamK on 9/6/21.\n\nCopyright (c) 2021    Tap Payments.\nAll rights reserved.\n **/\n@SuppressLint(\"StaticFieldLeak\")\nobject SettingsManager {\n    private var pref: SharedPreferences? = null\n    private var context: Context? = null\n    fun setPref(ctx: Context?) {\n        context = ctx\n        if (pref == null) pref = PreferenceManager.getDefaultSharedPreferences(ctx)\n    }\n\n    fun saveCustomer(\n        customerid: String?,\n        name: String,\n        middle: String,\n        last: String,\n        email: String,\n        sdn: String,\n        mobile: String,\n        ctx: Context\n    ) {\n        val preferences = PreferenceManager.getDefaultSharedPreferences(ctx)\n        val gson = Gson()\n        val response = preferences.getString(\"customer\", \"\")\n        var customersList: ArrayList<CustomerViewModel?>? = gson.fromJson(\n            response,\n            object : TypeToken<List<CustomerViewModel?>?>() {}.getType()\n        )\n        if (customersList == null) customersList = ArrayList<CustomerViewModel?>()\n        customersList.add(last.let {\n\n            CustomerViewModel(customerid, name, middle, it, email, sdn, mobile)\n\n        })\n        val data: String = gson.toJson(customersList)\n        writeCustomersToPreferences(data, preferences)\n    }\n\n    fun saveShipping(\n        name: String,\n        description: String,\n        amount: String,\n        ctx: Context\n    ) {\n        val preferences = PreferenceManager.getDefaultSharedPreferences(ctx)\n        val gson = Gson()\n        val response = preferences.getString(\"shipping\", \"\")\n        var shippingList: ArrayList<ShippingViewModel?>? = gson.fromJson(\n            response,\n            object : TypeToken<List<ShippingViewModel?>?>() {}.getType()\n        )\n        if (shippingList == null) shippingList = ArrayList<ShippingViewModel?>()\n        shippingList.add(ShippingViewModel(name, description, amount))\n        val data: String = gson.toJson(shippingList)\n        writeShippingToPreferences(data, preferences)\n    }\n\n    fun editCustomer(\n        oldCustomer: CustomerViewModel?,\n        newCustomer: CustomerViewModel,\n        ctx: Context?\n    ) {\n        val preferences = PreferenceManager.getDefaultSharedPreferences(ctx)\n        val gson = Gson()\n        val response = preferences.getString(\"customer\", \"\")\n        val customersList: ArrayList<CustomerViewModel> = gson.fromJson(\n            response,\n            object : TypeToken<List<CustomerViewModel?>?>() {}.getType()\n        )\n        if (customersList != null) {\n            val customerRef: String? = customersList[0].getRef()\n            customersList.clear()\n            newCustomer.getMiddleName()?.let {\n                CustomerViewModel(\n                    customerRef,\n                    newCustomer.getName(),\n                    it,\n                    newCustomer.getLastName()!!,\n                    newCustomer.getEmail(),\n                    newCustomer.getSdn()!!,\n                    newCustomer.getMobile()\n                )\n            }?.let {\n                customersList.add(\n                    it\n                )\n            }\n            val data: String = gson.toJson(customersList)\n            writeCustomersToPreferences(data, preferences)\n        } else {\n            if (ctx != null) {\n                newCustomer?.getSdn()?.let {\n                    saveCustomer(\n                        newCustomer.getRef(),\n                        newCustomer.getName(),\n                        newCustomer.getMiddleName()!!,\n                        newCustomer.getLastName()!!,\n                        newCustomer.getEmail(),\n                        it,\n                        newCustomer.getMobile(), ctx\n                    )\n                }\n            }\n        }\n    }\n\n\n    fun saveItems(\n        proudctId: String?,\n        itemname: String,\n        description: String,\n        quantity: Int,\n        priceperunit: Double?,\n        totalamount: Double?,\n        itemDiscount: AmountModificator,\n        itemCurrency: String?,\n        itemCategory: Category?,\n        itemVendor: Vendor?,\n        itemFullFillService: String?,\n        itemIsRequireShip: Boolean?,\n        itemCode: String?,\n        accountCode: String?,\n        itemImage: String?,\n        itemReference: ReferenceItem?,\n        itemsDimensions: ItemDimensions?,\n        itemsTags: String?,\n        itemMetaData: MetaData?,\n\n        ctx: Context\n    ) {\n        val preferences = PreferenceManager.getDefaultSharedPreferences(ctx)\n        val gson = Gson()\n        val response = preferences.getString(\"paymentitems\", \"\")\n        var itemsList: ArrayList<PaymentItemViewModel?>? = gson.fromJson(\n            response,\n            object : TypeToken<List<PaymentItemViewModel?>?>() {}.getType()\n        )\n        if (itemsList == null) itemsList = ArrayList<PaymentItemViewModel?>()\n        itemsList.add(\n            totalamount?.let {\n                priceperunit?.let { it1 ->\n                    PaymentItemViewModel(\n                        proudctId,\n                        itemname,\n                        description,\n                        it1,\n                        it,\n                        quantity,\n                        itemDiscount,\n                        itemCurrency,\n                        itemCategory,\n                        itemVendor,\n                        itemFullFillService,\n                        itemIsRequireShip,\n                        itemCode,\n                        accountCode,\n                        itemImage,\n                        itemReference,\n                        itemsDimensions,\n                        itemsTags,\n                        itemMetaData\n                    )\n                }\n            }\n\n        )\n        val data: String = gson.toJson(itemsList)\n        writeItemsToPreferences(data, preferences)\n    }\n\n    fun editItems(\n        oldItems: PaymentItemViewModel?,\n        newItems: PaymentItemViewModel,\n        ctx: Context?\n    ) {\n        val preferences = PreferenceManager.getDefaultSharedPreferences(ctx)\n        val gson = Gson()\n        val response = preferences.getString(\"paymentitems\", \"\")\n        val paymentItemList: ArrayList<PaymentItemViewModel> = gson.fromJson(\n            response,\n            object : TypeToken<List<PaymentItemViewModel?>?>() {}.getType()\n        )\n        if (paymentItemList != null) {\n            val itemsName: String? = paymentItemList[0].getItemsName()\n            paymentItemList.clear()\n            newItems.getItemDescription()?.let {\n                PaymentItemViewModel(\n                    newItems.getProductId(),\n                    newItems.getItemsName(),\n                    it,\n                    newItems.getPricePUnit()?.toDouble()!!,\n                    newItems.getitemTotalPrice()?.toDouble()!!,\n                    newItems.getitemQuantity()?.toInt()!!,\n                    AmountModificator(\n                        newItems.getAmountType()?.getType(),\n                        newItems.getAmountType()?.getNormalizedValue()\n                    ),\n                    newItems.getItemCurrency(),\n                    newItems.getItemCategory(),\n                    newItems.getItemVendor(),\n                    newItems.getItemFullfillmentService(),\n                    newItems.getItemIsRequireShip(),\n                    newItems.getItemCode(),\n                    newItems.getAccountCode(),\n                    newItems.getItemImage(),\n                    newItems.getItemReference(),\n                    newItems.getItemDimens(),\n                    newItems.getItemTags(),\n                    newItems.getItemMetaData()\n                )\n            }?.let { paymentItemList.add(it) }\n            val data: String = gson.toJson(paymentItemList)\n            writeItemsToPreferences(data, preferences)\n        } else {\n            if (ctx != null) {\n\n                newItems.getItemsName()?.let {\n                    newItems.getitemQuantity()?.let { it1 ->\n                        newItems.getPricePUnit()?.let { it2 ->\n                            newItems.getAmountType()?.let { it3 ->\n                                saveItems(\n                                    newItems.getProductId(),\n                                    it,\n                                    newItems.getItemDescription()!!,\n                                    it1,\n                                    it2,\n                                    newItems.getitemTotalPrice(),\n                                    it3,\n                                    newItems.getItemCurrency(),\n                                    newItems.getItemCategory(),\n                                    newItems.getItemVendor(),\n                                    newItems.getItemFullfillmentService(),\n                                    newItems.getItemIsRequireShip(),\n                                    newItems.getItemCode(),\n                                    newItems.getAccountCode(),\n                                    newItems.getItemImage(),\n                                    newItems.getItemReference(),\n                                    newItems.getItemDimens(),\n                                    newItems.getItemTags(),\n                                    newItems.getItemMetaData(),\n                                    ctx\n                                )\n                            }\n                        }\n                    }\n                }\n\n            }\n        }\n    }\n\n    fun editShipping(\n        oldShipping: ShippingViewModel?,\n        newShipping: ShippingViewModel,\n        ctx: Context?\n    ) {\n        val preferences = PreferenceManager.getDefaultSharedPreferences(ctx)\n        val gson = Gson()\n        val response = preferences.getString(\"shipping\", \"\")\n        val shipingList: ArrayList<ShippingViewModel> = gson.fromJson(\n            response,\n            object : TypeToken<List<CustomerViewModel?>?>() {}.type\n        )\n        if (shipingList != null) {\n\n            shipingList.clear()\n            newShipping.getshippingAmount()?.let {\n                ShippingViewModel(\n                    newShipping.getshippingName(),\n                    newShipping.getshippingDecsription()!!,\n                    it\n                )\n            }?.let {\n                shipingList.add(\n                    it\n                )\n            }\n            val data: String = gson.toJson(shipingList)\n            writeShippingToPreferences(data, preferences)\n        } else {\n            if (ctx != null) {\n                saveShipping(\n                    newShipping.getshippingName(),\n                    newShipping.getshippingDecsription()!!,\n                    newShipping.getshippingAmount()!!, ctx\n                )\n\n            }\n        }\n    }\n\n    fun editTaxes(\n        oldTaxes: TaxesViewModel?,\n        newTaxes: TaxesViewModel,\n        ctx: Context?\n    ) {\n        val preferences = PreferenceManager.getDefaultSharedPreferences(ctx)\n        val gson = Gson()\n        val response = preferences.getString(\"shipping\", \"\")\n        val shipingList: ArrayList<ShippingViewModel> = gson.fromJson(\n            response,\n            object : TypeToken<List<CustomerViewModel?>?>() {}.type\n        )\n        if (shipingList != null) {\n\n            shipingList.clear()\n            newTaxes.getTaxesAmount()?.let {\n                ShippingViewModel(\n                    newTaxes.getTaxesName(),\n                    newTaxes.getTaxesDecsription()!!,\n                    it\n                )\n            }?.let {\n                shipingList.add(\n                    it\n                )\n            }\n            val data: String = gson.toJson(shipingList)\n            writeShippingToPreferences(data, preferences)\n        } else {\n            if (ctx != null) {\n                saveShipping(\n                    newTaxes.getTaxesName(),\n                    newTaxes.getTaxesDecsription()!!,\n                    newTaxes.getTaxesAmount()!!, ctx\n                )\n\n            }\n        }\n    }\n\n    private fun writeItemsToPreferences(data: String, preferences: SharedPreferences) {\n        val editor = preferences.edit()\n        editor.putString(\"paymentitems\", data)\n        editor.commit()\n    }\n\n    private fun writeCustomersToPreferences(data: String, preferences: SharedPreferences) {\n        val editor = preferences.edit()\n        editor.putString(\"customer\", data)\n        editor.commit()\n    }\n\n    private fun writeShippingToPreferences(data: String, preferences: SharedPreferences) {\n        val editor = preferences.edit()\n        editor.putString(\"shipping\", data)\n        editor.commit()\n    }\n\n    private fun writeSDKToPreferences(data: String, preferences: SharedPreferences) {\n        val editor = preferences.edit()\n        editor.putString(\"sdkconfig\", data)\n        editor.commit()\n    }\n\n    fun getRegisteredCustomers(ctx: Context?): List<CustomerViewModel> {\n        val preferences = PreferenceManager.getDefaultSharedPreferences(ctx)\n        val gson = Gson()\n        val response = preferences.getString(\"customer\", \"\")\n        val customersList: ArrayList<CustomerViewModel>? = gson.fromJson(\n            response,\n            object : TypeToken<List<CustomerViewModel?>?>() {}.type\n        )\n        return customersList ?: ArrayList<CustomerViewModel>()\n    }\n\n    fun getRegisteredItems(ctx: Context?): List<PaymentItemViewModel> {\n        val preferences = PreferenceManager.getDefaultSharedPreferences(ctx)\n        val gson = Gson()\n        val response = preferences.getString(\"paymentitems\", \"\")\n        val paymentitems: ArrayList<PaymentItemViewModel>? = gson.fromJson(\n            response,\n            object : TypeToken<List<PaymentItemViewModel?>?>() {}.type\n        )\n        return paymentitems ?: ArrayList<PaymentItemViewModel>()\n    }\n\n    fun getAddedShippings(ctx: Context?): List<ShippingViewModel> {\n        val preferences = PreferenceManager.getDefaultSharedPreferences(ctx)\n        val gson = Gson()\n        val response = preferences.getString(\"shipping\", \"\")\n        val shippingList: ArrayList<ShippingViewModel>? = gson.fromJson(\n            response,\n            object : TypeToken<List<ShippingViewModel?>?>() {}.type\n        )\n        return shippingList ?: ArrayList<ShippingViewModel>()\n    }\n\n\n    //////////////////////////////////////   Get Payment Settings ////////////////////////////////\n    fun getCustomer(): TapCustomer? {\n        val customer: TapCustomer\n        val gson = Gson()\n        val response = pref?.getString(\"customer\", \"\")\n        println(\" get customer: $response\")\n        val customersList = gson.fromJson<ArrayList<CustomerViewModel>>(\n            response,\n            object : TypeToken<List<CustomerViewModel?>?>() {}.type\n        )\n\n        // check if customer id is in pref.\n        //  customer =\n        if (!customersList.isNullOrEmpty() && customersList.isNotEmpty()) {\n            //  println(\"preparing data source with customer ref :\" + customersList[0].getRef())\n            //  println(\"preparing data source with isAdd ref :\" + CustomerCreateActivity().isAddressEnabled)\n            if (CustomerCreateActivity().isAddressEnabled == true) {\n                customer = TapCustomer(\n                    customersList[0].getRef(),\n                    customersList[0].getName(),\n                    customersList[0].getMiddleName(),\n                    customersList[0].getLastName(),\n                    customersList[0].getEmail(),\n                    PhoneNumber(customersList[0].getSdn(), customersList[0].getMobile()),\n                    \"meta\", \"nationality\", getCustomerAddress(), \"en\"\n                )\n            } else {\n                customer = TapCustomer(\n                    customersList[0].getRef(),\n                    customersList[0].getName(),\n                    customersList[0].getMiddleName(),\n                    customersList[0].getLastName(),\n                    customersList[0].getEmail(),\n                    PhoneNumber(customersList[0].getSdn(), customersList[0].getMobile()),\n                    \"meta\", \"nationality\", null, \"en\"\n                )\n            }\n\n        } else {\n            //  println(\" paymentResultDataManager.getCustomerRef(context) null\")\n            //65562630\n            if (CustomerCreateActivity().isAddressEnabled == true) {\n                customer = TapCustomer(\n                    \"cus_TS012520211349Za012907577\",\n                    \"ahlaam\",\n                    \"middlename\",\n                    \"lastname\",\n                    \"abcd@gmail.com\",\n                    PhoneNumber(\"00965\", \"66175090\"),\n                    \"description\",\n                    \"nationality\",\n                    getCustomerAddress(),\n                    \"en\"\n                )\n            } else {\n                customer = TapCustomer(\n                    \"cus_TS012520211349Za012907577\", \"ahlaam\", \"middlename\",\n                    \"lastname\", \"abcd@gmail.com\",\n                    PhoneNumber(\"00965\", \"66175090\"), \"description\", \"nationality\", null, \"en\"\n                )\n            }\n\n        }\n        return customer\n        //  65562630\n\n    }\n\n    fun getDynamicPaymentItems(): ArrayList<ItemsModel>? {\n        val paymentitems: ArrayList<ItemsModel> = ArrayList()\n        val gson = Gson()\n        val response = pref?.getString(\"paymentitems\", \"\")\n        // println(\" get customer: $response\")\n        val itemsList = gson.fromJson<ArrayList<PaymentItemViewModel>>(\n            response,\n            object : TypeToken<List<PaymentItemViewModel?>?>() {}.type\n        )\n\n        // check if customer id is in pref.\n        //  customer =\n        if (itemsList != null) {\n            // println(\"preparing data source with itemsList ref :\" + itemsList[0].getItemIsRequireShip())\n\n            ItemsModel(\n                itemsList[0].getProductId(),\n                itemsList[0].getItemsName(),\n                itemsList[0].getPricePUnit()?.let { BigDecimal.valueOf(it) },\n                itemsList[0].getItemCurrency(),\n                itemsList[0].getitemQuantity()?.toDouble()?.let { BigDecimal.valueOf(it) },\n                itemsList[0].getItemCategory(),\n                itemsList[0].getAmountType(),\n                itemsList[0].getItemVendor(),\n                itemsList[0].getItemFullfillmentService(),\n                itemsList[0].getItemIsRequireShip(),\n                itemsList[0].getItemCode(),\n                itemsList[0].getAccountCode(),\n                itemsList[0].getItemDescription(),\n                itemsList[0].getItemImage(),\n                itemsList[0].getItemReference(),\n                itemsList[0].getItemDimens(),\n                itemsList[0].getItemTags(),\n                itemsList[0].getItemMetaData()\n            )\n                .let { paymentitems.add(it) }\n        } else {\n            //  println(\" paymentResultDataManager.itemsList(context) null\")\n            paymentitems.add(\n                ItemsModel(\n                    \"\",\n                    \"Items1\",\n                    BigDecimal.valueOf(5),\n                   getString(\"key_sdk_transaction_currency\", \"KWD\"),\n                    BigDecimal.valueOf(\n                        2\n                    ),\n                    null,\n                    AmountModificator(AmountModificatorType.FIXED, BigDecimal.ZERO),\n                    null,\n                    null,\n                    false,\n                    null,\n                    null,\n                    \"High-quality, durable and stylish backpack, perfect for daily use and outdoor adventures. Made with waterproof material, multiple compartments and comfortable straps\",\n                    null,\n                    null,\n                    null,\n                    null,\n                    null\n                )\n            )\n\n\n        }\n        return paymentitems\n\n\n    }\n\n\n    fun getTaxes(): ArrayList<Tax> {\n        val taxes: ArrayList<Tax> = ArrayList<Tax>()\n        taxes.add(\n            Tax(\n                \"Test tax #1\",\n                \"Test tax #1 description\",\n                AmountModificator(AmountModificatorType.PERCENTAGE, BigDecimal.valueOf(5))\n            )\n        )\n        return taxes\n    }\n\n    fun getShippingList(): ArrayList<Shipping> {\n        val shipping: ArrayList<Shipping> = ArrayList<Shipping>()\n        shipping.add(\n            Shipping(\n                \"Test shipping #1\",\n                \"Test shipping description #1\",\n                BigDecimal.ONE\n            )\n        )\n        return shipping\n    }\n\n    fun getPostURL(): String {\n//        Base URL\n        return \"https://tap.company\"\n    }\n\n    fun getPaymentDescription(): String {\n        return \"Test payment description.\"\n    }\n\n    fun getPaymentMetaData(): HashMap<String, String> {\n        val paymentMetadata = HashMap<String, String>()\n        paymentMetadata[\"metadata_key_1\"] = \"metadata value 1\"\n        return paymentMetadata\n    }\n\n    fun getPaymentReference(): Reference {\n        return Reference(\n            \"acquirer_1\",\n            \"gateway_1\",\n            \"payment_1\",\n            \"track_1\",\n            \"transaction_1\",\n            \"order_1\"\n        )\n    }\n\n    fun getCustomerAddress(): AddressModel {\n        return AddressModel(\n            \"Office\",\n            \"Tap Payments\",\n            \"Block 2\",\n            \"Opp. Terrace Mall\",\n            \"Lane 4\",\n            \"Mall no\",\n            \"Salem Al Mubarak\",\n            \"8 Mall\",\n            \"6th floor\",\n            \"Kuwait\",\n            \"Hawally\",\n            \"Salmiyah --Block\",\n            \"Salmiya\",\n            \"30003\",\n            \"23232\",\n            \"en\"\n        )\n    }\n\n    fun getPaymentStatementDescriptor(): String {\n        return \"Test payment statement descriptor.\"\n    }\n\n    fun getReceipt(): Receipt {\n        return Receipt(true, true)\n    }\n\n    fun getAuthorizeAction(): AuthorizeAction {\n        return AuthorizeAction(AuthorizeActionType.VOID, 10)\n    }\n\n    fun getDestination(): Destinations {\n        val destinations: ArrayList<Destination> = ArrayList<Destination>()\n        destinations.add(\n            Destination(\n                \"\",  /// destination unique identifier\n                BigDecimal(10),  // Amount to be transferred to the destination account\n                \"kwd\",  //currency code (three digit ISO format)\n                \"please deduct 10 kd for this account\",  //Description about the transfer\n                \"\" //Merchant reference number to the destination\n            )\n        )\n        return Destinations(\n            BigDecimal(10),  // total amount, transferred to the destination account\n            // TapCurrency(\"kwd\"),  // transfer currency code\n            \"kwd\",  // transfer currency code\n            1,  //number of destinations trabsfer involved\n            destinations\n        ) //List of destinations object\n    }\n    ////////////////////////////////////////////////// Specific Settings ////////////////////////////\n    /**\n     * Session Data Source\n     */\n    fun getSDKOperationMode(key: String?): SdkMode {\n        val op_mode = pref!!.getString(key, SdkMode.SAND_BOX.name)\n        return if (op_mode == SdkMode.SAND_BOX.name) SdkMode.SAND_BOX else SdkMode.PRODUCTION\n    }\n\n\n    /**\n     * get Transaction mode\n     * @param key\n     * @return\n     */\n    fun getTransactionsMode(key: String): TransactionMode {\n        val trx_mode = pref?.getString(key, TransactionMode.PURCHASE.name)\n        //println(\"trx_mode are\" + trx_mode)\n        if (trx_mode.equals(\n                TransactionMode.PURCHASE.name,\n                ignoreCase = true\n            )\n        ) return TransactionMode.PURCHASE\n        if (trx_mode.equals(\n                TransactionMode.AUTHORIZE_CAPTURE.name,\n                ignoreCase = true\n            )\n        ) return TransactionMode.AUTHORIZE_CAPTURE\n        if (trx_mode.equals(\n                TransactionMode.TOKENIZE_CARD.name,\n                ignoreCase = true\n            )\n        ) return TransactionMode.TOKENIZE_CARD\n        return if (trx_mode.equals(\n                TransactionMode.SAVE_CARD.name,\n                ignoreCase = true\n            )\n        ) return TransactionMode.SAVE_CARD\n        else TransactionMode.PURCHASE\n    }\n\n    /**\n     * get Transaction mode\n     * @param key\n     * @return\n     */\n    fun getSDKLanguage(key: String): String? {\n        val language = pref?.getString(key, \"en\")\n\n        if (language.equals(\n                \"en\",\n                ignoreCase = true\n            )\n        ) return \"en\"\n        if (language.equals(\n                \"ar\",\n                ignoreCase = true\n            )\n        ) return \"ar\"\n        else return \"en\"\n    }\n\n    /**\n     * get transaction currency\n     * @param key\n     * @return\n     */\n    fun getTransactionCurrency(key: String?): TapCurrency {\n        val trx_curr = pref!!.getString(key, \"kwd\")\n        Log.d(\"Settings Manager\", \"trx_curr :\" + trx_curr!!.trim { it <= ' ' })\n        return if (trx_curr != null && !\"\".equals(\n                trx_curr.trim { it <= ' ' },\n                ignoreCase = true\n            )\n        ) TapCurrency(trx_curr) else TapCurrency(\"kwd\")\n    }\n\n    //////////////////////////////////////////////////  General ////////////////////////////////\n    /**\n     * Get Font name saved in session or return default\n     * @param key\n     * @param defaultFont\n     * @return\n     */\n    fun getFont(key: String?, defaultFont: String?): String? {\n        //  println(\"pref: \" + pref!!.getString(key, defaultFont))\n        return pref!!.getString(key, defaultFont)\n    }\n\n\n    /**\n     *\n     * @param key\n     * @return\n     */\n    fun getBoolean(key: String?, defaultValue: Boolean): Boolean? {\n        return pref?.getBoolean(key, defaultValue)\n    }\n\n    /**\n     *\n     * @param key\n     * @param defaultValue\n     * @return\n     */\n    @SuppressLint(\"StaticFieldLeak\")\n    fun getString(key: String?, defaultValue: String?): String? {\n        return pref?.getString(key, defaultValue)\n    }\n\n    fun getInt(key: String?, defaultValue: Int): Int? {\n        return pref?.getInt(key, defaultValue)\n    }\n\n\n    //Set topup object\n\n    fun getTopUp(): TopUp? {\n        return TopUp(\n            null,\n            \"wal_7nTwK44211030uxtI115c6T710\",\n            null,\n            null,\n            BigDecimal.valueOf(30),\n            \"kwd\",\n            null,\n            null,\n            null,\n            TopUpApplication(BigDecimal.valueOf(40), \"kwd\"),\n            null,\n            TopupPost(\"wwww.google.com\"),\n            null\n        )\n    }\n\n    fun getDynamicShipping(): ArrayList<Shipping>? {\n        val shipping: Shipping\n        val gson = Gson()\n        val response = pref?.getString(\"shipping\", \"\")\n        // println(\" get shipping: $response\")\n        val shippingLists = gson.fromJson<ArrayList<ShippingViewModel>>(\n            response,\n            object : TypeToken<List<ShippingViewModel?>?>() {}.type\n        )\n        val shippingList: ArrayList<Shipping> = ArrayList<Shipping>()\n        // println(\" get shippingLists: $shippingLists\")\n        if (shippingLists != null)\n        //  println(\"preparing data source with shipping ref :\" + shippingLists[0].getshippingName())\n            if (shippingLists != null) {\n\n                shippingLists[0].getshippingDecsription()?.let {\n                    shippingLists[0].getshippingAmount()?.toBigDecimal()?.let { it1 ->\n                        Shipping(\n                            shippingLists[0].getshippingName(),\n                            it,\n                            it1\n                        )\n                    }\n                }?.let {\n                    shippingList.add(\n                        it\n                    )\n                }\n\n                return shippingList\n\n\n            } else {\n\n                shippingList.add(\n                    Shipping(\n                        \"Test shipping #1\",\n                        \"Test shipping description #1\",\n                        BigDecimal.ONE\n                    )\n                )\n            }\n        return shippingList\n\n    }\n\n    fun getAddedTaxes(ctx: Context?): List<TaxesViewModel> {\n        val preferences = PreferenceManager.getDefaultSharedPreferences(ctx)\n        val gson = Gson()\n        val response = preferences.getString(\"taxes\", \"\")\n        val taxesList: ArrayList<TaxesViewModel>? = gson.fromJson(\n            response,\n            object : TypeToken<List<TaxesViewModel?>?>() {}.type\n        )\n        return taxesList ?: ArrayList<TaxesViewModel>()\n    }\n\n    fun getDynamicTaxes(): ArrayList<Tax>? {\n        val tax: Tax\n        val gson = Gson()\n        val response = pref?.getString(\"taxes\", \"\")\n        // println(\" get shipping: $response\")\n        val taxesLists = gson.fromJson<ArrayList<TaxesViewModel>>(\n            response,\n            object : TypeToken<List<TaxesViewModel?>?>() {}.type\n        )\n        val taxList: ArrayList<Tax> = ArrayList<Tax>()\n        // println(\" get taxesLists: $taxesLists\")\n        if (taxesLists != null)\n            println(\"preparing data source with taxesLists ref :\" + taxesLists[0].getTaxesName())\n        if (taxesLists != null) {\n\n            taxesLists[0].getTaxesDecsription()?.let {\n                taxesLists[0].getTaxesAmount()?.toBigDecimal()?.let { it1 ->\n                    Tax(\n                        taxesLists[0].getTaxesName(),\n                        it,\n                        AmountModificator(AmountModificatorType.FIXED, it1)\n                    )\n                }\n            }?.let {\n                taxList.add(\n                    it\n                )\n            }\n\n            return taxList\n\n\n        } else {\n\n            taxList.add(\n                Tax(\n                    \"Test Taxes #1\",\n                    \"TestTaxes #1\",\n                    AmountModificator(AmountModificatorType.FIXED, BigDecimal.ONE)\n                )\n            )\n        }\n        return taxList\n\n    }\n\n    //Set topup object\n\n    fun getShippingObject(): ShippingObject? {\n        return ShippingObject(\n            BigDecimal(1),\n            \"KWD\",\n            Description(\"test\"),\n            \"resource receipt\",\n            getCustomerAddress(),\n            Provider(\"prov_FFSFAGGAHAAJAJ\", \"ARAMEX\")\n        )\n    }\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/company/tap/checkoutsdk/manager/SettingsManager.kt b/app/src/main/java/company/tap/checkoutsdk/manager/SettingsManager.kt
--- a/app/src/main/java/company/tap/checkoutsdk/manager/SettingsManager.kt	(revision 99170d6c055adc7cce56cf0714329e9e7e92a080)
+++ b/app/src/main/java/company/tap/checkoutsdk/manager/SettingsManager.kt	(date 1683118226414)
@@ -523,7 +523,7 @@
             paymentitems.add(
                 ItemsModel(
                     "",
-                    "Items1",
+                    "Items",
                     BigDecimal.valueOf(5),
                    getString("key_sdk_transaction_currency", "KWD"),
                     BigDecimal.valueOf(
@@ -546,6 +546,7 @@
             )
 
 
+
         }
         return paymentitems
 
Index: checkout/src/main/java/company/tap/checkout/open/CheckoutFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package company.tap.checkout.open\n\n\nimport android.annotation.SuppressLint\nimport android.app.Activity\nimport android.app.Dialog\nimport android.content.Context\nimport android.content.res.Resources\nimport android.graphics.*\nimport android.os.Build\nimport android.os.Bundle\nimport android.os.Handler\nimport android.util.Log\nimport android.view.*\nimport android.widget.FrameLayout\nimport android.widget.ImageView\nimport android.widget.LinearLayout\nimport android.widget.RelativeLayout\nimport androidx.annotation.RequiresApi\nimport androidx.cardview.widget.CardView\nimport androidx.core.view.setPadding\nimport androidx.core.widget.NestedScrollView\nimport androidx.fragment.app.Fragment\nimport androidx.fragment.app.viewModels\nimport cards.pay.paycardsrecognizer.sdk.Card\nimport cards.pay.paycardsrecognizer.sdk.ui.InlineViewCallback\nimport com.bumptech.glide.Glide\nimport com.google.android.material.bottomsheet.BottomSheetBehavior\nimport company.tap.checkout.R\nimport company.tap.checkout.internal.api.enums.ChargeStatus\nimport company.tap.checkout.internal.apiresponse.CardViewModel\nimport company.tap.checkout.internal.apiresponse.CardViewState\nimport company.tap.checkout.internal.apiresponse.Resource\nimport company.tap.checkout.internal.apiresponse.UserRepository\nimport company.tap.checkout.internal.cache.SharedPrefManager\nimport company.tap.checkout.internal.enums.SectionType\nimport company.tap.checkout.internal.utils.*\nimport company.tap.checkout.internal.utils.Constants.PoweredByLayoutAnimationDelay\nimport company.tap.checkout.internal.viewmodels.CheckoutViewModel\nimport company.tap.checkout.open.controller.SDKSession\nimport company.tap.checkout.open.controller.SDKSession.sessionDelegate\nimport company.tap.checkout.open.controller.SDKSession.tabAnimatedActionButton\nimport company.tap.checkout.open.data_managers.PaymentDataSource\nimport company.tap.taplocalizationkit.LocalizationManager\nimport company.tap.tapuilibrary.themekit.ThemeManager\nimport company.tap.tapuilibrary.uikit.atoms.TapImageView\nimport company.tap.tapuilibrary.uikit.atoms.TapTextView\nimport company.tap.tapuilibrary.uikit.enums.ActionButtonState\nimport company.tap.tapuilibrary.uikit.interfaces.TapBottomDialogInterface\nimport company.tap.tapuilibrary.uikit.ktx.setTopBorders\nimport company.tap.tapuilibrary.uikit.views.TapBottomSheetDialog\nimport company.tap.tapuilibrary.uikit.views.TapBrandView\nimport org.json.JSONObject\nimport java.util.*\n\n\n/**\n * A simple [Fragment] subclass.\n// * Use the [CheckoutFragment.newInstance] factory method to\n * create an instance of this fragment.\n */\n\n\nclass CheckoutFragment : TapBottomSheetDialog(), TapBottomDialogInterface, InlineViewCallback {\n\n    private var _Context: Context? = null\n\n    @JvmField\n    var viewModel: CheckoutViewModel? = null\n\n    lateinit var userRepository: UserRepository\n\n    var _activity: Activity? = null\n    var checkOutActivity: CheckOutActivity? = null\n    lateinit var closeText: TapTextView\n    lateinit var closeImage: TapImageView\n    var hideAllView = false\n    lateinit var status: ChargeStatus\n    private var _resetFragment: Boolean = true\n    var newColorVal: String? = null\n\n    @JvmField\n    var scrollView: NestedScrollView? = null\n\n    @JvmField\n    var isNfcOpened: Boolean = false\n\n    @JvmField\n    var isScannerOpened: Boolean = false\n\n\n    private var inLineCardLayout: FrameLayout? = null\n    private var relativeLL: RelativeLayout? = null\n    private var mainCardLayout: CardView? = null\n    private var topHeaderView: TapBrandView? = null\n    private var displayMetrics: Int? = 0\n    var originalHeight: Int? = 0\n\n    @JvmField\n    var countryCode: String? = null\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        _activity = activity?.parent\n        this._Context = context\n\n\n    }\n\n\n    override fun onDestroy() {\n        super.onDestroy()\n        Glide.with(this).pauseRequests()\n        resetTabAnimatedButton()\n\n    }\n\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        dialog?.window?.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE)\n        return inflater.inflate(R.layout.fragment_checkouttaps, container, false)\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        val viewModel: CheckoutViewModel by viewModels()\n        val cardViewModel: CardViewModel by viewModels()\n        userRepository = UserRepository(requireContext(), viewModel)\n        userRepository.getUserIpAddress()\n        this.viewModel = viewModel\n        _Context?.let { cardViewModel.getContext(it) }\n        backgroundColor = (Color.parseColor(ThemeManager.getValue(\"tapBottomSheet.dimmedColor\")))\n\n        bottomSheetDialog.behavior.isDraggable = true\n        bottomSheetDialog.behavior.maxHeight = context?.getDeviceSpecs()?.first ?: 1000\n\n        val checkoutLayout: LinearLayout? = view.findViewById(R.id.fragment_all)\n        val frameLayout: FrameLayout? = view.findViewById(R.id.fragment_container_nfc_lib)\n        val webFrameLayout: FrameLayout? = view.findViewById(R.id.webFrameLayout)\n        webFrameLayout?.layoutParams = LinearLayout.LayoutParams(\n            LinearLayout.LayoutParams.MATCH_PARENT,\n            Resources.getSystem().displayMetrics.heightPixels\n        )\n        inLineCardLayout = view.findViewById(R.id.inline_container)\n        val headerLayout: LinearLayout? = view.findViewById(R.id.headerLayout)\n        initViews(view)\n\n        topHeaderView = context?.let { TapBrandView(it) }\n        topHeaderView?.visibility = View.GONE\n\n        topHeaderView?.poweredByImage?.setImageResource(R.drawable.powered_by_tap)\n        topHeaderView?.poweredByImage?.scaleType = ImageView.ScaleType.CENTER_CROP\n        topHeaderView?.poweredByImage?.layoutParams?.width = context.getDimensionsInDp(120)\n        topHeaderView?.poweredByImage?.layoutParams?.height = context.getDimensionsInDp(22)\n\n        displayMetrics = CustomUtils.getDeviceDisplayMetrics(context as Activity)\n        val heightscreen: Int = Resources.getSystem().displayMetrics.heightPixels\n        if (LocalizationManager.currentLocalized.length() != 0)\n            closeText.text = LocalizationManager.getValue(\"close\", \"Common\")\n\n        if (SDKSession.showCloseImage == true) {\n\n            if (!hideAllView) {\n                Handler().postDelayed({\n                    closeImage.visibility = View.GONE\n\n                }, 3000)\n            }\n\n        } else {\n            if (!hideAllView) {\n                Handler().postDelayed({\n                    closeText.visibility = View.GONE\n\n                }, 3000)\n            }\n\n        }\n\n        //LocalizationManager.loadTapLocale(resources, R.raw.lang)\n        sessionDelegate?.sessionHasStarted()\n\n        bottomSheetLayout?.let {\n            viewModel.setBottomSheetLayout(it)\n        }\n\n        viewModel.localCurrencyReturned.observe(this, androidx.lifecycle.Observer {\n            with(viewModel) {\n                /**\n                 * check if data cached and different currency present\n                 * should put : @for check !isUserCurrencySameToMainCurrency()\n                 */\n                if (cacheUserLocalCurrency() && !requireActivity().isUserCurrencySameToMainCurrency()) {\n                    viewModel.powerdByTapAnimationFinished.observe(this@CheckoutFragment) {\n                        if (it == true) {\n                            doAfterSpecificTime {\n                                viewModel.addTitlePaymentAndFlag()\n                            }\n                        } else {\n                            viewModel.removevisibiltyCurrency()\n                        }\n                    }\n                } else {\n                    viewModel.removevisibiltyCurrency()\n                }\n            }\n\n        })\n\n        if (checkoutLayout != null) {\n            context?.let {\n                if (frameLayout != null) {\n                    webFrameLayout?.let { it1 ->\n                        if (inLineCardLayout != null) {\n                            activity?.intent?.let { it2 ->\n                                if (headerLayout != null) {\n                                    viewModel.initLayoutManager(\n                                        bottomSheetDialog,\n                                        it,\n                                        childFragmentManager,\n                                        checkoutLayout,\n                                        frameLayout,\n                                        it1,\n                                        inLineCardLayout!!,\n                                        this,\n                                        it2,\n                                        cardViewModel, this, headerLayout\n                                    )\n                                }\n                            }\n\n                        }\n                    }\n                }\n            }\n\n            val borderColor: String =\n                ThemeManager.getValue<String>(\"poweredByTap.backgroundColor\").toString()\n            var borderOpacityVal: String? = null\n            //Workaround since we don't have direct method for extraction\n            borderOpacityVal = borderColor.substring(borderColor.length - 2)\n            newColorVal = \"#\" + borderOpacityVal + borderColor.substring(0, borderColor.length - 2)\n                .replace(\"#\", \"\")\n            Log.e(\"color\", newColorVal.toString())\n            enableSections()\n            originalHeight = checkoutLayout.measuredHeight\n\n\n            topHeaderView?.backgroundHeader?.setBackgroundDrawable(\n                createDrawableGradientForBlurry(\n                    intArrayOf(\n                        Color.parseColor(newColorVal),\n                        Color.parseColor(context?.getString(R.color.black_blur_12)),\n                        Color.parseColor(newColorVal)\n                    )\n                )\n            )\n            checkoutLayout.addView(topHeaderView, 0)\n        }\n        topHeaderView?.visibility = View.GONE\n\n        adjustHeightAccToDensity(displayMetrics)\n        topHeaderView?.startPoweredByAnimation(\n            delayTime = PoweredByLayoutAnimationDelay,\n            topHeaderView?.poweredByImage, onAnimationEnd = {\n                poweredByTapAnimationEnds(viewModel)\n            }\n        )\n        inLineCardLayout?.minimumHeight = heightscreen - checkoutLayout?.height!!\n        dialog?.window?.attributes?.windowAnimations = R.style.DialogAnimation\n\n        bottomSheetDialog.setOnShowListener {\n            bottomSheetDialog.behavior.setState(BottomSheetBehavior.STATE_EXPANDED)\n\n        }\n\n\n\n        scrollView?.let {\n            setTopBorders(\n                it,\n                strokeColor = Color.parseColor(\n                    newColorVal\n                ),\n                tintColor = Color.parseColor(\n                    newColorVal\n                ),// tint color\n                shadowColor = Color.parseColor(\n                    newColorVal\n                )\n            )\n        }\n\n\n        /*   relativeLL.let { it1 ->\n               if (it1 != null) {\n                   setTopBorders(\n                       it1,\n                       35f,// corner raduis\n                       0.0f,\n                       Color.parseColor(\n                           newColorVal\n                       ),// stroke color\n                       Color.parseColor(newColorVal),// tint color\n                       Color.parseColor(newColorVal)\n                   )\n               }\n           }*/\n        /*  mainCardLayout.let { card ->\n              if (card != null) {\n                  setTopBorders(\n                      card,\n                      35f,// corner raduis\n                      0.0f,\n                      Color.parseColor(newColorVal),// stroke color\n                      Color.parseColor(newColorVal),// tint color\n                      Color.parseColor(newColorVal)\n                  )\n              }\n          }\n  */\n        closeText.setOnClickListener {\n            bottomSheetDialog.dismissWithAnimation\n            bottomSheetDialog.hide()\n            bottomSheetDialog.dismiss()\n            viewModel.incrementalCount = 0\n            resetTabAnimatedButton()\n\n\n        }\n        closeImage.setOnClickListener {\n            bottomSheetDialog.window?.attributes?.windowAnimations = R.style.DialogAnimation\n            bottomSheetDialog.hide()\n            resetTabAnimatedButton()\n            viewModel.incrementalCount = 0\n\n        }\n    }\n\n    private fun poweredByTapAnimationEnds(viewModel: CheckoutViewModel) {\n        viewModel.powerdByTapAnimationFinished.value = true\n    }\n\n    /**\n     * Logic to obtain ISO country code **/\n    fun getSimIsoCountryCurrency(): String? {\n        return SharedPrefManager.getUserSupportedLocaleForTransactions(requireContext())?.symbol\n\n    }\n\n    private fun initViews(view: View) {\n        bottomSheetLayout = bottomSheetDialog.findViewById(R.id.design_bottom_sheet)\n        closeText = view.findViewById(R.id.closeText)\n        closeImage = view.findViewById(R.id.closeImage)\n        scrollView = view.findViewById(R.id.scrollView)\n        relativeLL = view.findViewById(R.id.relativeLL)\n        mainCardLayout = view.findViewById(R.id.mainCardLayout)\n        /**Added to init the lib of getting dynamic flags*/\n        //        World.init(context)\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onAttach(context: Context) {\n        super.onAttach(context)\n        LocalizationManager.setLocale(context, PaymentDataSource.getSDKLocale())\n\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun enableSections(): ArrayList<SectionType> {\n        val enabledSections = ArrayList<SectionType>()\n        enabledSections.add(SectionType.BUSINESS)\n        enabledSections.add(SectionType.AMOUNT_ITEMS)\n        enabledSections.add(SectionType.FRAGMENT)\n        enabledSections.add(SectionType.ActionButton)\n\n        println(\"_resetFragment>>\" + _resetFragment)\n        println(\"hideAllView>>\" + hideAllView)\n        if (_resetFragment) {\n            if (hideAllView) {\n                if (::status.isInitialized)\n                    viewModel?.showOnlyButtonView(\n                        status,\n                        checkOutActivity,\n                        this\n                    )\n\n            } else {\n\n                viewModel?.displayStartupLayout(enabledSections)\n                viewModel?.getDatasfromAPIs(\n                    PaymentDataSource.getMerchantData(),\n                    PaymentDataSource.getPaymentOptionsResponse()\n                )\n\n            }\n        } else {\n            if (::status.isInitialized)\n                viewModel?.showOnlyButtonView(status, checkOutActivity, this)\n        }\n\n        setBottomSheetInterface(this)\n\n        return enabledSections\n    }\n\n\n    companion object {\n        // TODO: Rename and change types and number of parameters\n        const val RESET_FRAG = \"resetFragment\"\n\n        @JvmStatic\n        fun newInstance(context: Context, activity: Activity?, resetFragment: Boolean) =\n            CheckoutFragment().apply {\n                arguments = Bundle().apply {}\n                _Context = context\n                _activity = activity\n                _resetFragment = resetFragment\n                requireArguments().putBoolean(RESET_FRAG, resetFragment)\n            }\n    }\n\n    override fun onScanCardFailed(e: Exception?) {\n        println(\"onScanCardFailed\")\n        // _viewModel?.handleScanFailedResult()\n    }\n\n    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {\n        return super.onCreateDialog(savedInstanceState)\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onScanCardFinished(card: Card?, cardImage: ByteArray?) {\n        if (card != null) {\n            println(\"scanned card is$card\")\n            //  _viewModel?.handleScanSuccessResult(card)\n\n        }\n    }\n\n\n    private fun consumeResponse(response: Resource<CardViewState>) {\n        println(\"response value is\" + response.data?.configResponseModel)\n        when (response) {\n            is Resource.Loading -> concatText(\"Loading\")\n            is Resource.Finished -> renderView(response.data)\n            is Error -> response.message?.let { concatText(it) }\n            is Resource.Success -> renderView(response.data)\n\n        }\n    }\n\n    private fun renderView(data: CardViewState?) {\n\n    }\n\n\n    @SuppressLint(\"SetTextI18n\")\n    private fun concatText(newText: String) {\n        println(\"newText respoonse$newText\")\n\n    }\n\n\n    override fun onDetach() {\n        super.onDetach()\n        if (view == null) {\n            return\n        }\n        if (isNfcOpened) {\n        } else {\n            checkOutActivity?.onBackPressed()\n        }\n\n        if (isScannerOpened) {\n\n        } else {\n            //_viewModel?.incrementalCount =0\n            checkOutActivity?.onBackPressed()\n        }\n\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun resetTabAnimatedButton() {\n        checkOutActivity?.displayMetrics?.let { tabAnimatedActionButton?.setDisplayMetrics(it) }\n        SDKSession.sessionActive = false\n        tabAnimatedActionButton?.changeButtonState(ActionButtonState.RESET)\n        if (checkOutActivity?.isGooglePayClicked == false) {\n            checkOutActivity?.overridePendingTransition(0, R.anim.slide_down_exit)\n            checkOutActivity?.finishAfterTransition()\n        }\n        //  checkOutActivity?.finish()\n\n        val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n        val nowString: String = LocalizationManager.getValue(\"now\", \"ActionButton\")\n        tabAnimatedActionButton?.setButtonDataSource(\n            true,\n            context?.let { LocalizationManager.getLocale(it).language },\n            payString + \" \" + nowString,\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.paymentBackgroundColor\")),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.titleLabelColor\")),\n        )\n        /*  tabAnimatedActionButton?.setOnClickListener {\n              requireActivity().supportFragmentManager.let { it1 -> SDKSession.contextSDK?.let { it2 ->\n                  SDKSession.startSDK(it1,\n                      it2,SDKSession.contextSDK as Activity)\n              } }\n          }*/\n        tabAnimatedActionButton?.isClickable = true\n        tabAnimatedActionButton?.isEnabled = true\n    }\n\n\n    fun dismissBottomSheetDialog() {\n        //bottomSheetDialog.window?.attributes?.windowAnimations = R.style.DialogAnimation\n        ThemeManager.currentTheme = \"\"\n        LocalizationManager.currentLocalized = JSONObject()\n        bottomSheetDialog.dismissWithAnimation\n        bottomSheetDialog.hide()\n        bottomSheetDialog.dismiss()\n        resetTabAnimatedButton()\n        sessionDelegate?.sessionCancelled()\n\n    }\n\n\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout/src/main/java/company/tap/checkout/open/CheckoutFragment.kt b/checkout/src/main/java/company/tap/checkout/open/CheckoutFragment.kt
--- a/checkout/src/main/java/company/tap/checkout/open/CheckoutFragment.kt	(revision 99170d6c055adc7cce56cf0714329e9e7e92a080)
+++ b/checkout/src/main/java/company/tap/checkout/open/CheckoutFragment.kt	(date 1683113164053)
@@ -151,10 +151,10 @@
         topHeaderView = context?.let { TapBrandView(it) }
         topHeaderView?.visibility = View.GONE
 
-        topHeaderView?.poweredByImage?.setImageResource(R.drawable.powered_by_tap)
-        topHeaderView?.poweredByImage?.scaleType = ImageView.ScaleType.CENTER_CROP
-        topHeaderView?.poweredByImage?.layoutParams?.width = context.getDimensionsInDp(120)
-        topHeaderView?.poweredByImage?.layoutParams?.height = context.getDimensionsInDp(22)
+//        topHeaderView?.poweredByImage?.setImageResource(R.drawable.powered_by_tap)
+//        topHeaderView?.poweredByImage?.scaleType = ImageView.ScaleType.CENTER_CROP
+//        topHeaderView?.poweredByImage?.layoutParams?.width = context.getDimensionsInDp(120)
+//        topHeaderView?.poweredByImage?.layoutParams?.height = context.getDimensionsInDp(22)
 
         displayMetrics = CustomUtils.getDeviceDisplayMetrics(context as Activity)
         val heightscreen: Int = Resources.getSystem().displayMetrics.heightPixels
@@ -262,6 +262,10 @@
         }
         topHeaderView?.visibility = View.GONE
 
+
+        inLineCardLayout?.minimumHeight = heightscreen - checkoutLayout?.height!!
+        dialog?.window?.attributes?.windowAnimations = R.style.DialogAnimation
+
         adjustHeightAccToDensity(displayMetrics)
         topHeaderView?.startPoweredByAnimation(
             delayTime = PoweredByLayoutAnimationDelay,
@@ -269,9 +273,6 @@
                 poweredByTapAnimationEnds(viewModel)
             }
         )
-        inLineCardLayout?.minimumHeight = heightscreen - checkoutLayout?.height!!
-        dialog?.window?.attributes?.windowAnimations = R.style.DialogAnimation
-
         bottomSheetDialog.setOnShowListener {
             bottomSheetDialog.behavior.setState(BottomSheetBehavior.STATE_EXPANDED)
 
Index: checkout/src/main/res/values/dimens.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout/src/main/res/values/dimens.xml b/checkout/src/main/res/values/dimens.xml
new file mode 100644
--- /dev/null	(date 1683124359362)
+++ b/checkout/src/main/res/values/dimens.xml	(date 1683124359362)
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <dimen name="defaultTextSize">24</dimen>
+    <dimen name="defaultTextSizes">24</dimen>
+</resources>
\ No newline at end of file
Index: checkout/src/main/res/drawable/light_dropdown.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout/src/main/res/drawable/light_dropdown.xml b/checkout/src/main/res/drawable/light_dropdown.xml
new file mode 100644
--- /dev/null	(date 1683102875005)
+++ b/checkout/src/main/res/drawable/light_dropdown.xml	(date 1683102875005)
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="6dp"
+    android:height="3dp"
+    android:viewportWidth="8"
+    android:viewportHeight="4">
+  <path
+      android:pathData="M6.6621,0.3262C6.53,0.3293 6.4046,0.3845 6.3131,0.4798L4,2.793L1.6868,0.4798C1.6402,0.4318 1.5845,0.3937 1.5229,0.3676C1.4612,0.3416 1.395,0.3281 1.3281,0.3281C1.2286,0.3282 1.1314,0.3579 1.0488,0.4135C0.9663,0.4691 0.9023,0.548 0.8649,0.6402C0.8275,0.7325 0.8184,0.8337 0.8389,0.9311C0.8594,1.0285 0.9084,1.1175 0.9798,1.1869L3.6465,3.8535C3.7403,3.9473 3.8674,3.9999 4,3.9999C4.1326,3.9999 4.2597,3.9473 4.3535,3.8535L7.0202,1.1869C7.0929,1.1171 7.1428,1.027 7.1634,0.9283C7.184,0.8296 7.1743,0.7271 7.1356,0.634C7.0969,0.541 7.031,0.4618 6.9465,0.4069C6.862,0.3519 6.7628,0.3238 6.6621,0.3262Z"
+      android:fillColor="#626262"/>
+</vector>
Index: checkout/src/main/java/company/tap/checkout/internal/viewholders/AmountViewHolder.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package company.tap.checkout.internal.viewholders\n\nimport android.annotation.SuppressLint\nimport android.content.Context\nimport android.graphics.Color\nimport android.util.Log\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.widget.LinearLayout\nimport com.bumptech.glide.Glide\nimport company.tap.checkout.R\nimport company.tap.checkout.internal.cache.SharedPrefManager\nimport company.tap.checkout.internal.enums.SectionType\nimport company.tap.checkout.internal.interfaces.AmountInterface\nimport company.tap.checkout.internal.interfaces.BaseLayoutManager\nimport company.tap.checkout.internal.utils.*\nimport company.tap.checkout.internal.viewmodels.CheckoutViewModel\nimport company.tap.taplocalizationkit.LocalizationManager\nimport company.tap.tapuilibrary.themekit.ThemeManager\nimport company.tap.tapuilibrary.themekit.theme.TextViewTheme\nimport company.tap.tapuilibrary.uikit.atoms.TapChip\nimport company.tap.tapuilibrary.uikit.atoms.TapTextView\nimport company.tap.tapuilibrary.uikit.datasource.AmountViewDataSource\nimport kotlinx.android.synthetic.main.amountview_layout.view.*\n\n\n/**\n *\n * Copyright © 2020 Tap Payments. All rights reserved.\n *\n */\nclass AmountViewHolder(\n    context: Context,\n    private val baseLayoutManager: BaseLayoutManager? = null,\n    private var checkoutViewModel: CheckoutViewModel\n) :\n    TapBaseViewHolder,\n    AmountInterface {\n\n\n    override val view: View = LayoutInflater.from(context).inflate(R.layout.amountview_layout, null)\n\n    override val type = SectionType.AMOUNT_ITEMS\n\n    private var itemCountt: String? = null\n    var originalAmount: String? = null\n    private var isOpenedList: Boolean = true\n    private var transactionCurrency: String? = null\n    private var scannerLinearView: LinearLayout = view.findViewById(R.id.scannerLinearView)\n    private var CustomCardViewStyle: TapChip = view.findViewById(R.id.CustomCardViewStyle)\n    private var readyToScanText: TapTextView = view.findViewById(R.id.cardscan_ready)\n    var scannerClicked: Boolean? = false\n\n    init {\n        bindViewComponents()\n    }\n\n    override fun bindViewComponents() {\n        view.amount_section.setAmountViewDataSource(getAmountDataSourceFromAPIs())\n        scanTextTheme()\n    }\n\n    private fun scanTextTheme() {\n        val readyToScanTextViewTheme = TextViewTheme()\n        readyToScanTextViewTheme.textColor =\n            Color.parseColor(ThemeManager.getValue(\"Hints.Default.textColor\"))\n        readyToScanTextViewTheme.textSize =\n            ThemeManager.getFontSize(\"Hints.Default.textFont\")\n        readyToScanTextViewTheme.font =\n            ThemeManager.getFontName(\"Hints.Default.textFont\")\n        readyToScanText.setTheme(readyToScanTextViewTheme)\n        scannerLinearView.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"Hints.Default.backgroundColor\")))\n        CustomCardViewStyle.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"Hints.Default.backgroundColor\")))\n    }\n\n    fun readyToScanVisibility(scannerClicked: Boolean) {\n        if (scannerClicked) {\n            scannerLinearView.visibility = View.VISIBLE\n            readyToScanText.text = LocalizationManager.getValue(\"Default\", \"Hints\", \"scan\")\n        } else {\n            scannerLinearView.visibility = View.GONE\n        }\n    }\n\n    private fun getAmountDataSourceFromAPIs(): AmountViewDataSource {\n        if (itemCountt?.equals(\"1\") == true) {\n            return AmountViewDataSource(\n                selectedCurr = originalAmount,\n                selectedCurrText = transactionCurrency,\n                itemCount = itemCountt + \"  \" + LocalizationManager.getValue(\"item\", \"Common\")\n            )\n        } else {\n            var items: String = \"\"\n            if (LocalizationManager.currentLocalized.length() != 0) {\n                items = LocalizationManager.getValue(\"items\", \"Common\")\n            }\n            return AmountViewDataSource(\n                selectedCurr = originalAmount,\n                selectedCurrText = transactionCurrency,\n                itemCount = itemCountt + \"  \" + items\n            )\n        }\n    }\n\n    private fun changeDataSource(amountViewDataSource: AmountViewDataSource) {\n        view.amount_section.setAmountViewDataSource(amountViewDataSource)\n    }\n\n    override fun changeGroupAction(isOpen: Boolean) {\n        isOpenedList = isOpen\n        if (isOpen) {\n            /**\n             * Second time opening The Items Currencies after choosing one Currency\n             */\n            if (itemCountt?.contentEquals(\"1\") == true) {\n                changeDataSource(\n                    AmountViewDataSource(\n                        selectedCurr = originalAmount,\n                        selectedCurrText = transactionCurrency,\n                        itemCount = itemCountt + \"  \" + LocalizationManager.getValue(\n                            \"item\",\n                            \"Common\"\n                        )\n                    )\n                )\n            } else changeDataSource(\n                AmountViewDataSource(\n                    selectedCurr = originalAmount,\n                    selectedCurrText = transactionCurrency,\n                    itemCount = itemCountt + \"  \" + LocalizationManager.getValue(\"items\", \"Common\")\n                )\n            )\n            view.amount_section.itemAmountText.visibility = View.VISIBLE\n            view.amount_section.viewSeparator.visibility = View.VISIBLE\n            view.amount_section.amountImageView.visibility = View.VISIBLE\n            /**\n             * if same currency selected as Currency of user , not show local prompt\n             */\n            if (CheckoutViewModel.currencySelectedForCheck != SharedPrefManager.getUserSupportedLocaleForTransactions(view.amount_section.context)?.currency\n            )\n                doAfterSpecificTime(500) {\n                   checkoutViewModel.addDataToAmountView()\n                    view.amount_section?.tapChipPopup?.addFadeInAnimation()\n                }\n        } else {\n            /**\n             * opening The Items Currencies to choose from\n             */\n\n            changeDataSource(\n                AmountViewDataSource(\n                    selectedCurr = originalAmount,\n                    selectedCurrText = transactionCurrency,\n                    itemCount = LocalizationManager.getValue<String?>(\"close\", \"Common\")\n                )\n            )\n            view.amount_section.itemCountButton.text =\n                LocalizationManager.getValue(\"close\", \"Common\")\n\n            view.amount_section.itemAmountText.visibility = View.GONE\n            view.amount_section.viewSeparator.visibility = View.GONE\n            view.amount_section.amountImageView.visibility = View.GONE\n            view.amount_section?.tapChipPopup?.addFadeOutAnimation()\n\n\n        }\n    }\n\n\n    private fun showCountryFlag(): String? {\n        val currency = SharedPrefManager.getUserSupportedLocaleForTransactions(context = this.view.context)\n        Log.e(\"localNeeded\", currency.toString())\n        if (ThemeManager.currentTheme.contains(\"dark\")) {\n            return currency?.logos?.dark?.png\n        } else {\n            return currency?.logos?.light?.png\n        }\n    }\n    @SuppressLint(\"ClickableViewAccessibility\")\n    fun setOnItemsClickListener() {\n        /* view.amount_section.itemAmountLayout.setOnClickListener {\n             //onItemsClickListener()\n             baseLayoutManager?.controlCurrency(isOpenedList)\n         }*/\n\n        /*view.amount_section.itemAmountLayout.setOnTouchListener(object : View.OnTouchListener {\n            override fun onTouch(v: View?, event: MotionEvent?): Boolean {\n                baseLayoutManager?.controlCurrency(isOpenedList)\n                return false\n            }\n        })*/\n        view.amount_section.tapChipAmount.setOnTouchListener { v, event ->\n            baseLayoutManager?.controlCurrency(isOpenedList)\n\n\n            false\n        }\n\n        /**Adding to get back to sdk when clicked closed ***/\n//        view.amount_section.itemPopupLayout.setOnTouchListener(object : View.OnTouchListener {\n//            override fun onTouch(v: View?, event: MotionEvent?): Boolean {\n//                baseLayoutManager?.reOpenSDKState()\n//                return false\n//            }\n//        })\n    }\n\n    fun updateSelectedCurrency(\n        isOpen: Boolean,\n        selectedAmount: String,\n        selectedCurrency: String,\n        currentAmount: String,\n        currentCurrency: String,\n        selectedCurrencySymbol: String? = null,\n        isChangingCurrencyFromOutside: Boolean? = false\n    ) {\n\n\n        isOpenedList = isOpen\n        //  if (selectedCurrency == get)\n        if (selectedAmount == currentAmount && selectedCurrency == currentCurrency) {\n            view.amount_section.mainKDAmountValue.visibility = View.GONE\n        } else {\n            view.amount_section.mainKDAmountValue.visibility = View.VISIBLE\n        }\n        if (isOpen) {\n            if (selectedCurrencySymbol?.isNotBlank() == true || selectedCurrencySymbol?.isNotEmpty() == true) {\n                /**\n                 * here changed all symbols  to needed symbol currency\n                 */\n                if (itemCountt?.equals(\"1\") == true) {\n                    changeDataSource(\n                        AmountViewDataSource(\n                            selectedCurr = selectedAmount,\n                            selectedCurrText = selectedCurrencySymbol,\n                            currentCurr = currentAmount,\n                            currentCurrText = currentCurrency,\n                            itemCount = itemCountt + \"  \" + LocalizationManager.getValue(\n                                \"item\",\n                                \"Common\"\n                            )\n                        )\n                    )\n                } else {\n                    changeDataSource(\n                        AmountViewDataSource(\n                            selectedCurr = selectedAmount,\n                            selectedCurrText = selectedCurrencySymbol,\n                            currentCurr = currentAmount,\n                            currentCurrText = currentCurrency,\n                            itemCount = itemCountt + \"  \" + LocalizationManager.getValue(\n                                \"items\",\n                                \"Common\"\n                            )\n                        )\n                    )\n                }\n\n            } else {\n                if (itemCountt?.equals(\"1\") == true) {\n                    changeDataSource(\n                        AmountViewDataSource(\n                            selectedCurr = selectedAmount,\n                            selectedCurrText = selectedCurrency,\n                            currentCurr = currentAmount,\n                            currentCurrText = currentCurrency,\n                            itemCount = itemCountt + \"  \" + LocalizationManager.getValue(\n                                \"item\",\n                                \"Common\"\n                            )\n                        )\n                    )\n                } else {\n                    changeDataSource(\n                        AmountViewDataSource(\n                            selectedCurr = selectedAmount,\n                            selectedCurrText = selectedCurrency,\n                            currentCurr = currentAmount,\n                            currentCurrText = currentCurrency,\n                            itemCount = itemCountt + \"  \" + LocalizationManager.getValue(\n                                \"items\",\n                                \"Common\"\n                            )\n                        )\n                    )\n                }\n            }\n\n\n        } else {\n            if (selectedCurrencySymbol?.isNotBlank() == true || selectedCurrencySymbol?.isNotEmpty() == true) {\n                changeDataSource(\n                    AmountViewDataSource(\n                        selectedCurr = selectedAmount,\n                        selectedCurrText = selectedCurrencySymbol,\n                        currentCurr = currentAmount,\n                        currentCurrText = currentCurrency,\n                        itemCount = if (isChangingCurrencyFromOutside == true) itemCountt + \"  \" + LocalizationManager.getValue(\n                            \"items\",\n                            \"Common\"\n                        ) else LocalizationManager.getValue(\"confirm\", \"Common\")\n                    )\n                )\n            } else\n                changeDataSource(\n                    AmountViewDataSource(\n                        selectedCurr = selectedAmount,\n                        selectedCurrText = selectedCurrency,\n                        currentCurr = currentAmount,\n                        currentCurrText = currentCurrency,\n                        itemCount = LocalizationManager.getValue(\"confirm\", \"Common\")\n                    )\n                )\n        }\n\n    }\n\n\n    /**\n     * Sets data from API through LayoutManager\n     * @param transactionCurrencyApi represents the currency which by default.\n     * @param itemCountApi represents the itemsCount for the Merchant.\n     * @param originalAmountApi represents the default amount from API.\n     * */\n    fun setDataFromAPI(\n        originalAmountApi: String,\n        transactionCurrencyApi: String,\n        itemCountApi: String\n    ) {\n        // println(\"transactionCurrencyApi\" + transactionCurrencyApi)\n        itemCountt = itemCountApi\n        originalAmount = CurrencyFormatter.currencyFormat(originalAmountApi)\n        transactionCurrency = transactionCurrencyApi\n        bindViewComponents()\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout/src/main/java/company/tap/checkout/internal/viewholders/AmountViewHolder.kt b/checkout/src/main/java/company/tap/checkout/internal/viewholders/AmountViewHolder.kt
--- a/checkout/src/main/java/company/tap/checkout/internal/viewholders/AmountViewHolder.kt	(revision 99170d6c055adc7cce56cf0714329e9e7e92a080)
+++ b/checkout/src/main/java/company/tap/checkout/internal/viewholders/AmountViewHolder.kt	(date 1683113407557)
@@ -3,10 +3,16 @@
 import android.annotation.SuppressLint
 import android.content.Context
 import android.graphics.Color
+import android.graphics.Typeface
+import android.os.Build
+import android.provider.CalendarContract.Colors
 import android.util.Log
 import android.view.LayoutInflater
 import android.view.View
 import android.widget.LinearLayout
+import androidx.annotation.DrawableRes
+import androidx.constraintlayout.widget.ConstraintLayout
+import androidx.core.view.marginTop
 import com.bumptech.glide.Glide
 import company.tap.checkout.R
 import company.tap.checkout.internal.cache.SharedPrefManager
@@ -18,9 +24,11 @@
 import company.tap.taplocalizationkit.LocalizationManager
 import company.tap.tapuilibrary.themekit.ThemeManager
 import company.tap.tapuilibrary.themekit.theme.TextViewTheme
+import company.tap.tapuilibrary.uikit.adapters.context
 import company.tap.tapuilibrary.uikit.atoms.TapChip
 import company.tap.tapuilibrary.uikit.atoms.TapTextView
 import company.tap.tapuilibrary.uikit.datasource.AmountViewDataSource
+import company.tap.tapuilibrary.uikit.ktx.setBorderedView
 import kotlinx.android.synthetic.main.amountview_layout.view.*
 
 
@@ -55,8 +63,47 @@
         bindViewComponents()
     }
 
+    @DrawableRes
+    val dropDownIcon: Int =
+        if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains("dark")){
+            R.drawable.dark_dropwdonw
+        } else if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains("light")) {
+            R.drawable.light_dropdown
+        }else R.drawable.light_dropdown
+
     override fun bindViewComponents() {
         view.amount_section.setAmountViewDataSource(getAmountDataSourceFromAPIs())
+        view.amount_section.tapChipAmount.layoutParams.width = view.context.getDimensionsInDp(97)
+        view.amount_section.tapChipAmount.layoutParams.height = view.context.getDimensionsInDp(24)
+        view.amount_section.tapChipPopup.layoutParams.width = view.context.getDimensionsInDp(97)
+        view.amount_section.tapChipPopup.layoutParams.height = view.context.getDimensionsInDp(24)
+
+        view.amount_section.amountImageView.setImageResource(dropDownIcon)
+
+        view.amount_section.findViewById<ConstraintLayout>(R.id.constraint).layoutParams.height = view.context.getDimensionsInDp(75)
+
+
+
+        setBorderedView(
+            view.amount_section.tapChipPopup,
+            ThemeManager.getValue<Float>("amountSectionView.itemsNumberButtonCorner").toFloat() +5,// corner raduis
+            0.0f,
+            Color.parseColor(ThemeManager.getValue("amountSectionView.itemsNumberButtonBackgroundColor")),
+            Color.parseColor(ThemeManager.getValue("amountSectionView.itemsNumberButtonBackgroundColor")),
+            Color.parseColor(ThemeManager.getValue("amountSectionView.itemsNumberButtonBorder.color"))
+        )
+
+        setBorderedView(
+            view.amount_section.tapChipAmount,
+            ThemeManager.getValue<Float>("amountSectionView.itemsNumberButtonCorner").toFloat() +5,// corner raduis
+            0.0f,
+            Color.parseColor(ThemeManager.getValue("amountSectionView.itemsNumberButtonBackgroundColor")),
+            Color.parseColor(ThemeManager.getValue("amountSectionView.itemsNumberButtonBackgroundColor")),
+            Color.parseColor(ThemeManager.getValue("amountSectionView.itemsNumberButtonBorder.color"))
+        )
+
+
+
         scanTextTheme()
     }
 
@@ -107,6 +154,8 @@
     }
 
     override fun changeGroupAction(isOpen: Boolean) {
+
+
         isOpenedList = isOpen
         if (isOpen) {
             /**
@@ -167,15 +216,6 @@
     }
 
 
-    private fun showCountryFlag(): String? {
-        val currency = SharedPrefManager.getUserSupportedLocaleForTransactions(context = this.view.context)
-        Log.e("localNeeded", currency.toString())
-        if (ThemeManager.currentTheme.contains("dark")) {
-            return currency?.logos?.dark?.png
-        } else {
-            return currency?.logos?.light?.png
-        }
-    }
     @SuppressLint("ClickableViewAccessibility")
     fun setOnItemsClickListener() {
         /* view.amount_section.itemAmountLayout.setOnClickListener {
@@ -192,7 +232,6 @@
         view.amount_section.tapChipAmount.setOnTouchListener { v, event ->
             baseLayoutManager?.controlCurrency(isOpenedList)
 
-
             false
         }
 
Index: checkout/src/main/res/drawable/dark_dropwdonw.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout/src/main/res/drawable/dark_dropwdonw.xml b/checkout/src/main/res/drawable/dark_dropwdonw.xml
new file mode 100644
--- /dev/null	(date 1683102897032)
+++ b/checkout/src/main/res/drawable/dark_dropwdonw.xml	(date 1683102897032)
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="6dp"
+    android:height="3dp"
+    android:viewportWidth="8"
+    android:viewportHeight="4">
+  <path
+      android:pathData="M6.6621,0.3262C6.53,0.3293 6.4046,0.3845 6.3131,0.4798L4,2.793L1.6868,0.4798C1.6402,0.4318 1.5845,0.3937 1.5229,0.3676C1.4612,0.3416 1.395,0.3281 1.3281,0.3281C1.2286,0.3282 1.1314,0.3579 1.0488,0.4135C0.9663,0.4691 0.9023,0.548 0.8649,0.6402C0.8275,0.7325 0.8184,0.8337 0.8389,0.9311C0.8594,1.0285 0.9084,1.1175 0.9798,1.1869L3.6465,3.8535C3.7403,3.9473 3.8674,3.9999 4,3.9999C4.1326,3.9999 4.2597,3.9473 4.3535,3.8535L7.0202,1.1869C7.0929,1.1171 7.1428,1.027 7.1634,0.9283C7.184,0.8296 7.1743,0.7271 7.1356,0.634C7.0969,0.541 7.031,0.4618 6.9465,0.4069C6.862,0.3519 6.7628,0.3238 6.6621,0.3262Z"
+      android:fillColor="#C1C1C1"/>
+</vector>
