Index: checkout/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.library'\napply plugin: 'kotlin-android'\napply plugin: 'kotlin-android-extensions'\napply plugin: 'kotlin-kapt'\n\nandroid {\n    compileSdkVersion 31\n   // buildToolsVersion \"31.0.3\"\n\n    defaultConfig {\n        minSdkVersion 22\n        targetSdkVersion 31\n        versionCode 1\n        versionName \"1.0\"\n        multiDexEnabled true\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n        consumerProguardFiles 'consumer-rules.pro'\n    }\n\n\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\n        }\n        buildTypes.each {\n            it.buildConfigField 'String', 'EncryptAPIKEY', EncryptAPIKEY\n        }\n\n\n    }\n\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_8\n        targetCompatibility JavaVersion.VERSION_1_8\n    }\n\n    kotlinOptions {\n        jvmTarget = JavaVersion.VERSION_1_8.toString()\n    }\n}\n\ndependencies {\n    implementation 'com.google.android.material:material:1.6.1'\n    def koin_version = '2.2.0-alpha-1'\n\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\n    implementation(\"androidx.lifecycle:lifecycle-extensions:2.2.0@aar\") {\n        transitive = true\n    }\n    def lifecycle_version = \"2.4.1\"\n    implementation \"androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version\"\n    implementation \"androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version\"\n    implementation \"androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version\"\n    kapt \"androidx.lifecycle:lifecycle-common-java8:$lifecycle_version\"\n\n    implementation \"androidx.fragment:fragment-ktx:1.4.1\"\n\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\n    implementation files('libs/benefitinappsdk-1.0.23.aar')\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version\"\n    implementation 'androidx.appcompat:appcompat:1.4.1'\n    implementation 'androidx.core:core-ktx:1.7.0'\n    api 'com.github.Tap-Payments:LocalisationManager-Android:0.0.1.34'\n    //  implementation 'com.github.Tap-Payments:TapCardInputKit-Android:0.1.0.25'\n    implementation 'com.github.Tap-Payments:TapCardInputKit-Android:0.1.0.36.205'\n    //   api 'com.github.Tap-Payments:TapCardInputKit-Android:0.1.0.25'\n    api 'com.github.Tap-Payments:TapCardInputKit-Android:0.1.0.36.205'\n    implementation \"com.hbb20:ccp:2.5.0\"\n    api 'androidx.activity:activity-ktx:1.4.0'\n    testImplementation 'junit:junit:4.13.2'\n    androidTestImplementation 'androidx.test.ext:junit:1.1.5'\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'\n    implementation 'com.github.bumptech.glide:glide:4.12.0'\n    kapt 'com.github.bumptech.glide:compiler:4.12.0'\n    implementation 'com.github.Tap-Payments:TapCardScannerKit-Android:0.0.1.18.6'\n    implementation 'company.tap:PayCards-Tap-Android:0.1.6.4'\n    api 'company.tap:PayCards-Tap-Android:0.1.6.4'\n    implementation(\"io.coil-kt:coil:1.2.0\")\n    implementation(\"io.coil-kt:coil-svg:1.2.0\")\n    implementation 'com.github.Tap-Payments:TapNFCCardReaderKit-Android:0.0.1.6.1'\n    implementation \"io.reactivex.rxjava2:rxjava:2.2.19\"\n    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'\n    api 'com.github.Tap-Payments:TapNetwrok-Android:0.2.2.25'\n    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.0'\n    api 'com.github.Tap-Payments:CommonDataModelsKit-Android:0.1.5'\n    api 'com.google.code.gson:gson:2.8.9'\n\n    implementation 'com.squareup.retrofit2:retrofit:2.9.0'\n    implementation 'androidx.multidex:multidex:2.0.1'\n    implementation 'androidx.recyclerview:recyclerview:1.2.1'\n    implementation \"androidx.fragment:fragment-ktx:1.5.7\"\n   // implementation 'com.gdacciaro:iosdialog:1.0.3'\n    implementation 'com.github.Tap-Payments:LocalisationManager-Android:0.0.1.34'\n    implementation 'com.koushikdutta.ion:ion:3.1.0'\n    implementation \"com.google.android.gms:play-services-wallet:19.1.0\"\n    implementation project(\":iosdialog\")\n\n    api 'com.github.Tap-Payments:TapUIKit-Android:1.1.1.358.311'\n    implementation 'com.github.2coffees1team:GlideToVectorYou:v2.0.0'\n    implementation 'com.fasterxml.jackson.core:jackson-core:2.11.1'\n    implementation 'com.fasterxml.jackson.core:jackson-databind:2.11.1'\n    implementation 'com.github.Tap-Payments:TapCardValidator-Android:2.1.11'\n//This is BungFender for logs\n    implementation 'com.bugfender.sdk:android:3.+'\n    implementation 'jp.wasabeef:blurry:4.0.1'\n    implementation 'com.github.blongho:worldCountryData:v1.5.4-alpha'\n\n    implementation 'com.squareup.retrofit2:retrofit:2.9.0'\n    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout/build.gradle b/checkout/build.gradle
--- a/checkout/build.gradle	(revision 3331e219140f89d49a639011cde8027b9db6f5f8)
+++ b/checkout/build.gradle	(date 1682951800346)
@@ -20,7 +20,7 @@
 
     buildTypes {
         release {
-            minifyEnabled false
+            minifyEnabled true
             proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
         }
         buildTypes.each {
Index: .idea/deploymentTargetDropDown.xml
===================================================================
diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
deleted file mode 100644
--- a/.idea/deploymentTargetDropDown.xml	(revision 3331e219140f89d49a639011cde8027b9db6f5f8)
+++ /dev/null	(revision 3331e219140f89d49a639011cde8027b9db6f5f8)
@@ -1,17 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="deploymentTargetDropDown">
-    <runningDeviceTargetSelectedWithDropDown>
-      <Target>
-        <type value="RUNNING_DEVICE_TARGET" />
-        <deviceKey>
-          <Key>
-            <type value="VIRTUAL_DEVICE_PATH" />
-            <value value="$USER_HOME$/.android/avd/Pixel_3a_XL_API_31.avd" />
-          </Key>
-        </deviceKey>
-      </Target>
-    </runningDeviceTargetSelectedWithDropDown>
-    <timeTargetWasSelectedWithDropDown value="2023-05-01T12:21:45.555128Z" />
-  </component>
-</project>
\ No newline at end of file
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.application'\napply plugin: 'kotlin-android'\napply plugin: 'kotlin-android-extensions'\napply plugin: 'com.google.gms.google-services'\napply plugin: 'com.google.firebase.crashlytics'\napply plugin: 'com.github.dcendents.android-maven'\n\nandroid {\n    compileSdkVersion 31\n    // buildToolsVersion \"29.0.3\"\n    defaultConfig {\n        applicationId \"company.tap.checkoutsdk\"\n        minSdkVersion 22\n        targetSdkVersion 31\n        versionCode 50\n        versionName \"1.0.2.22\"\n        multiDexEnabled true\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n        consumerProguardFiles 'proguard-rules.pro'\n    }\n\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\n        }\n    }\n\n\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_8\n        targetCompatibility JavaVersion.VERSION_1_8\n    }\n    kotlinOptions {\n        jvmTarget = JavaVersion.VERSION_1_8.toString()\n    }\n}\n\ndependencies {\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version\"\n    implementation 'androidx.core:core-ktx:1.7.0'\n    implementation project(\":checkout\")\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'\n    testImplementation 'junit:junit:4.13.2'\n\n    androidTestImplementation 'androidx.test.ext:junit:1.1.5'\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'\n\n    androidTestImplementation 'androidx.test.ext:junit:1.1.5'\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'\n\n    implementation 'com.koushikdutta.ion:ion:3.1.0'\n\n    implementation 'com.github.Tap-Payments:TapCardInputKit-Android:0.1.0.36.205'\n    api 'com.github.Tap-Payments:TapCardInputKit-Android:0.1.0.36.205'\n    implementation 'company.tap:PayCards-Tap-Android:0.1.6.4'\n    api 'company.tap:PayCards-Tap-Android:0.1.6.4'\n\n    // implementation 'com.google.firebase:firebase-analytics:18.0.0'\n    implementation 'androidx.multidex:multidex:2.0.1'\n    implementation \"androidx.fragment:fragment-ktx:1.4.1\"\n    implementation \"com.github.Tap-Payments:TapGLKit-Android:1.18\"\n    implementation 'com.github.Tap-Payments:LocalisationManager-Android:0.0.1.34'\n    implementation 'androidx.appcompat:appcompat:1.3.1'\n    implementation 'com.google.android.material:material:1.4.0'\n    implementation 'androidx.preference:preference-ktx:1.2.0'\n    implementation 'com.github.2coffees1team:GlideToVectorYou:v2.0.0'\n    // implementation files('libs/benefitinappsdk-1.0.23.aar')\n\n    // Import the BoM for the Firebase platform\n    implementation platform('com.google.firebase:firebase-bom:30.3.1')\n\n    // Declare the dependencies for the Crashlytics and Analytics libraries\n    // When using the BoM, you don't specify versions in Firebase library dependencies\n    implementation 'com.google.firebase:firebase-crashlytics'\n    implementation 'com.google.firebase:firebase-analytics'\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle b/app/build.gradle
--- a/app/build.gradle	(revision 3331e219140f89d49a639011cde8027b9db6f5f8)
+++ b/app/build.gradle	(date 1682949974817)
@@ -18,10 +18,22 @@
         testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
         consumerProguardFiles 'proguard-rules.pro'
     }
+    signingConfigs {
+        config {
+            keyAlias 'key0'
+            keyPassword 'testtest'
+            storeFile file('<<KEYSTORE-PATH>>.keystore')
+            storePassword 'testtest'
+        }
+    }
 
     buildTypes {
         release {
-            minifyEnabled false
+            debuggable true
+            minifyEnabled true //Important step
+            shrinkResources true
+            signingConfig signingConfigs.debug
+
             proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
         }
     }
Index: app/release/output-metadata.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/release/output-metadata.json b/app/release/output-metadata.json
new file mode 100644
--- /dev/null	(date 1682951929829)
+++ b/app/release/output-metadata.json	(date 1682951929829)
@@ -0,0 +1,18 @@
+{
+  "version": 2,
+  "artifactType": {
+    "type": "APK",
+    "kind": "Directory"
+  },
+  "applicationId": "company.tap.checkoutsdk",
+  "variantName": "processReleaseResources",
+  "elements": [
+    {
+      "type": "SINGLE",
+      "filters": [],
+      "versionCode": 50,
+      "versionName": "1.0.2.22",
+      "outputFile": "app-release.apk"
+    }
+  ]
+}
\ No newline at end of file
Index: checkout/src/main/java/company/tap/checkout/open/CheckoutFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package company.tap.checkout.open\n\n\nimport android.annotation.SuppressLint\nimport android.app.Activity\nimport android.app.Dialog\nimport android.content.Context\nimport android.content.res.Resources\nimport android.graphics.*\nimport android.os.Build\nimport android.os.Bundle\nimport android.os.Handler\nimport android.util.Log\nimport android.view.*\nimport android.widget.FrameLayout\nimport android.widget.LinearLayout\nimport android.widget.RelativeLayout\nimport androidx.annotation.RequiresApi\nimport androidx.cardview.widget.CardView\nimport androidx.core.widget.NestedScrollView\nimport androidx.fragment.app.Fragment\nimport androidx.fragment.app.viewModels\nimport cards.pay.paycardsrecognizer.sdk.Card\nimport cards.pay.paycardsrecognizer.sdk.ui.InlineViewCallback\nimport com.blongho.country_data.World\nimport com.bumptech.glide.Glide\nimport com.google.android.material.bottomsheet.BottomSheetBehavior\nimport company.tap.checkout.R\nimport company.tap.checkout.internal.api.enums.ChargeStatus\nimport company.tap.checkout.internal.apiresponse.CardViewModel\nimport company.tap.checkout.internal.apiresponse.CardViewState\nimport company.tap.checkout.internal.apiresponse.Resource\nimport company.tap.checkout.internal.apiresponse.UserRepository\nimport company.tap.checkout.internal.cache.SharedPrefManager\nimport company.tap.checkout.internal.enums.SectionType\nimport company.tap.checkout.internal.utils.*\nimport company.tap.checkout.internal.utils.Constants.PoweredByLayoutAnimationDelay\nimport company.tap.checkout.internal.viewmodels.CheckoutViewModel\nimport company.tap.checkout.open.controller.SDKSession\nimport company.tap.checkout.open.controller.SDKSession.sessionDelegate\nimport company.tap.checkout.open.controller.SDKSession.tabAnimatedActionButton\nimport company.tap.checkout.open.data_managers.PaymentDataSource\nimport company.tap.taplocalizationkit.LocalizationManager\nimport company.tap.tapuilibrary.themekit.ThemeManager\nimport company.tap.tapuilibrary.uikit.atoms.TapImageView\nimport company.tap.tapuilibrary.uikit.atoms.TapTextView\nimport company.tap.tapuilibrary.uikit.enums.ActionButtonState\nimport company.tap.tapuilibrary.uikit.interfaces.TapBottomDialogInterface\nimport company.tap.tapuilibrary.uikit.ktx.setTopBorders\nimport company.tap.tapuilibrary.uikit.views.TapBottomSheetDialog\nimport company.tap.tapuilibrary.uikit.views.TapBrandView\nimport org.json.JSONObject\nimport java.util.*\nimport kotlin.collections.ArrayList\n\n\n/**\n * A simple [Fragment] subclass.\n// * Use the [CheckoutFragment.newInstance] factory method to\n * create an instance of this fragment.\n */\n\n\nclass CheckoutFragment : TapBottomSheetDialog(), TapBottomDialogInterface, InlineViewCallback {\n\n    private var _Context: Context? = null\n\n    @JvmField\n    var viewModel: CheckoutViewModel? = null\n\n    lateinit var userRepository: UserRepository\n\n    var _activity: Activity? = null\n    var checkOutActivity: CheckOutActivity? = null\n    lateinit var closeText: TapTextView\n    lateinit var closeImage: TapImageView\n    var hideAllView = false\n    lateinit var status: ChargeStatus\n    private var _resetFragment: Boolean = true\n    var newColorVal: String? = null\n\n    @JvmField\n    var scrollView: NestedScrollView? = null\n\n    @JvmField\n    var isNfcOpened: Boolean = false\n\n    @JvmField\n    var isScannerOpened: Boolean = false\n\n\n    private var inLineCardLayout: FrameLayout? = null\n    private var relativeLL: RelativeLayout? = null\n    private var mainCardLayout: CardView? = null\n    private var topHeaderView: TapBrandView? = null\n    private var displayMetrics: Int? = 0\n    var originalHeight: Int? = 0\n\n    @JvmField\n    var countryCode: String? = null\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        _activity = activity?.parent\n        this._Context = context\n\n\n    }\n\n\n    override fun onDestroy() {\n        super.onDestroy()\n        Glide.with(this).pauseRequests()\n        resetTabAnimatedButton()\n\n    }\n\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        dialog?.window?.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE)\n        return inflater.inflate(R.layout.fragment_checkouttaps, container, false)\n    }\n\n    @SuppressLint(\"ResourceAsColor\", \"UseCompatLoadingForColorStateLists\")\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        val viewModel: CheckoutViewModel by viewModels()\n        val cardViewModel: CardViewModel by viewModels()\n        userRepository = UserRepository(requireContext(), viewModel)\n        userRepository.getUserIpAddress()\n        this.viewModel = viewModel\n        _Context?.let { cardViewModel.getContext(it) }\n        backgroundColor = (Color.parseColor(ThemeManager.getValue(\"tapBottomSheet.dimmedColor\")))\n\n        bottomSheetDialog.behavior.isDraggable = true\n        bottomSheetDialog.behavior.maxHeight = context?.getDeviceSpecs()?.first ?: 1000\n\n        val checkoutLayout: LinearLayout? = view.findViewById(R.id.fragment_all)\n        val frameLayout: FrameLayout? = view.findViewById(R.id.fragment_container_nfc_lib)\n        val webFrameLayout: FrameLayout? = view.findViewById(R.id.webFrameLayout)\n        webFrameLayout?.layoutParams = LinearLayout.LayoutParams(\n            LinearLayout.LayoutParams.MATCH_PARENT,\n            Resources.getSystem().displayMetrics.heightPixels\n        )\n        inLineCardLayout = view.findViewById(R.id.inline_container)\n        val headerLayout: LinearLayout? = view.findViewById(R.id.headerLayout)\n        initViews(view)\n\n        topHeaderView = context?.let { TapBrandView(it) }\n        topHeaderView?.visibility = View.GONE\n\n        displayMetrics = CustomUtils.getDeviceDisplayMetrics(context as Activity)\n        val heightscreen: Int = Resources.getSystem().displayMetrics.heightPixels\n        if (LocalizationManager.currentLocalized.length() != 0)\n            closeText.text = LocalizationManager.getValue(\"close\", \"Common\")\n\n        if (SDKSession.showCloseImage == true) {\n\n            if (!hideAllView) {\n                Handler().postDelayed({\n                    closeImage.visibility = View.GONE\n\n                }, 3000)\n            }\n\n        } else {\n            if (!hideAllView) {\n                Handler().postDelayed({\n                    closeText.visibility = View.GONE\n\n                }, 3000)\n            }\n\n        }\n\n        //LocalizationManager.loadTapLocale(resources, R.raw.lang)\n        sessionDelegate?.sessionHasStarted()\n\n        bottomSheetLayout?.let {\n            viewModel.setBottomSheetLayout(it)\n        }\n\n        viewModel.localCurrencyReturned.observe(this, androidx.lifecycle.Observer {\n            with(viewModel) {\n                /**\n                 * check if data cached and different currency present\n                 * should put : @for check !isUserCurrencySameToMainCurrency()\n                 */\n                if (cacheUserLocalCurrency() && !requireActivity().isUserCurrencySameToMainCurrency()) {\n                        viewModel.powerdByTapAnimationFinished.observe(this@CheckoutFragment) {\n                            if (it == true) {\n                                doAfterSpecificTime {\n                                    viewModel.addTitlePaymentAndFlag()\n                                }\n                            }else {\n                                viewModel.removevisibiltyCurrency()\n                            }\n                        }\n                } else {\n                    viewModel.removevisibiltyCurrency()\n                }\n            }\n\n        })\n\n        if (checkoutLayout != null) {\n            context?.let {\n                if (frameLayout != null) {\n                    webFrameLayout?.let { it1 ->\n                        if (inLineCardLayout != null) {\n                            activity?.intent?.let { it2 ->\n                                if (headerLayout != null) {\n                                    viewModel.initLayoutManager(\n                                        bottomSheetDialog,\n                                        it,\n                                        childFragmentManager,\n                                        checkoutLayout,\n                                        frameLayout,\n                                        it1,\n                                        inLineCardLayout!!,\n                                        this,\n                                        it2,\n                                        cardViewModel, this, headerLayout\n                                    )\n                                }\n                            }\n\n                        }\n                    }\n                }\n            }\n\n            val borderColor: String =\n                ThemeManager.getValue<String>(\"poweredByTap.backgroundColor\").toString()\n            var borderOpacityVal: String? = null\n            //Workaround since we don't have direct method for extraction\n            borderOpacityVal = borderColor.substring(borderColor.length - 2)\n            newColorVal = \"#\" + borderOpacityVal + borderColor.substring(0, borderColor.length - 2)\n                .replace(\"#\", \"\")\n            Log.e(\"color\", newColorVal.toString())\n            enableSections()\n            originalHeight = checkoutLayout.measuredHeight\n\n\n            topHeaderView?.backgroundHeader?.setBackgroundDrawable(\n                createDrawableGradientForBlurry(\n                    intArrayOf(\n                        Color.parseColor(newColorVal),\n                        Color.parseColor(context?.getString(R.color.black_blur_12)),\n                        Color.parseColor(newColorVal)\n                    )\n                )\n            )\n            checkoutLayout.addView(topHeaderView, 0)\n        }\n        inLineCardLayout?.minimumHeight = heightscreen - checkoutLayout?.height!!\n        dialog?.window?.attributes?.windowAnimations = R.style.DialogAnimation\n\n        bottomSheetDialog.setOnShowListener {\n            bottomSheetDialog.behavior.setState(BottomSheetBehavior.STATE_EXPANDED)\n\n        }\n\n\n\n        scrollView?.let {\n            setTopBorders(\n                it,\n                strokeColor = Color.parseColor(\n                    newColorVal\n                ),\n                tintColor = Color.parseColor(\n                    newColorVal\n                ),// tint color\n                shadowColor = Color.parseColor(\n                    newColorVal\n                )\n            )\n        }\n\n\n        relativeLL.let { it1 ->\n            if (it1 != null) {\n                setTopBorders(\n                    it1,\n                    35f,// corner raduis\n                    0.0f,\n                    Color.parseColor(\n                        newColorVal\n                    ),// stroke color\n                    Color.parseColor(newColorVal),// tint color\n                    Color.parseColor(newColorVal)\n                )\n            }\n        }\n        mainCardLayout.let { card ->\n            if (card != null) {\n                setTopBorders(\n                    card,\n                    35f,// corner raduis\n                    0.0f,\n                    Color.parseColor(newColorVal),// stroke color\n                    Color.parseColor(newColorVal),// tint color\n                    Color.parseColor(newColorVal)\n                )\n            }\n        }\n\n        closeText.setOnClickListener {\n            bottomSheetDialog.dismissWithAnimation\n            bottomSheetDialog.hide()\n            bottomSheetDialog.dismiss()\n            viewModel.incrementalCount = 0\n            resetTabAnimatedButton()\n\n\n        }\n        closeImage.setOnClickListener {\n            bottomSheetDialog.window?.attributes?.windowAnimations = R.style.DialogAnimation\n            bottomSheetDialog.hide()\n            resetTabAnimatedButton()\n            viewModel.incrementalCount = 0\n\n        }\n\n        adjustHeightAccToDensity(displayMetrics)\n        topHeaderView?.startPoweredByAnimation(\n            delayTime = PoweredByLayoutAnimationDelay,\n            topHeaderView?.poweredByImage, onAnimationEnd = {\n                poweredByTapAnimationEnds(viewModel)\n            }\n        )\n     //   topHeaderView?.outerConstraint?.applyBluryToView()\n\n\n    }\n\n    private fun poweredByTapAnimationEnds(viewModel: CheckoutViewModel) {\n        viewModel.powerdByTapAnimationFinished.value = true\n    }\n\n    /**\n     * Logic to obtain ISO country code **/\n    fun getSimIsoCountryCurrency(): String? {\n        return SharedPrefManager.getUserSupportedLocaleForTransactions(requireContext())?.symbol\n\n    }\n\n    private fun initViews(view: View) {\n        bottomSheetLayout = bottomSheetDialog.findViewById(R.id.design_bottom_sheet)\n        closeText = view.findViewById(R.id.closeText)\n        closeImage = view.findViewById(R.id.closeImage)\n        scrollView = view.findViewById(R.id.scrollView)\n        relativeLL = view.findViewById(R.id.relativeLL)\n        mainCardLayout = view.findViewById(R.id.mainCardLayout)\n        /**Added to init the lib of getting dynamic flags*/\n        World.init(context)\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onAttach(context: Context) {\n        super.onAttach(context)\n        LocalizationManager.setLocale(context, PaymentDataSource.getSDKLocale())\n\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun enableSections(): ArrayList<SectionType> {\n        val enabledSections = ArrayList<SectionType>()\n        enabledSections.add(SectionType.BUSINESS)\n        enabledSections.add(SectionType.AMOUNT_ITEMS)\n        enabledSections.add(SectionType.FRAGMENT)\n        enabledSections.add(SectionType.ActionButton)\n\n        println(\"_resetFragment>>\" + _resetFragment)\n        println(\"hideAllView>>\" + hideAllView)\n        if (_resetFragment) {\n            if (hideAllView) {\n                if (::status.isInitialized)\n                    viewModel?.showOnlyButtonView(\n                        status,\n                        checkOutActivity,\n                        this\n                    )\n\n            } else {\n\n                viewModel?.displayStartupLayout(enabledSections)\n                viewModel?.getDatasfromAPIs(\n                    PaymentDataSource.getMerchantData(),\n                    PaymentDataSource.getPaymentOptionsResponse()\n                )\n\n            }\n        } else {\n            if (::status.isInitialized)\n                viewModel?.showOnlyButtonView(status, checkOutActivity, this)\n        }\n\n        setBottomSheetInterface(this)\n\n        return enabledSections\n    }\n\n\n    companion object {\n        // TODO: Rename and change types and number of parameters\n        const val RESET_FRAG = \"resetFragment\"\n\n        @JvmStatic\n        fun newInstance(context: Context, activity: Activity?, resetFragment: Boolean) =\n            CheckoutFragment().apply {\n                arguments = Bundle().apply {}\n                _Context = context\n                _activity = activity\n                _resetFragment = resetFragment\n                requireArguments().putBoolean(RESET_FRAG, resetFragment)\n            }\n    }\n\n    override fun onScanCardFailed(e: Exception?) {\n        println(\"onScanCardFailed\")\n        // _viewModel?.handleScanFailedResult()\n    }\n\n    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {\n        return super.onCreateDialog(savedInstanceState)\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onScanCardFinished(card: Card?, cardImage: ByteArray?) {\n        if (card != null) {\n            println(\"scanned card is$card\")\n            //  _viewModel?.handleScanSuccessResult(card)\n\n        }\n    }\n\n\n    private fun consumeResponse(response: Resource<CardViewState>) {\n        println(\"response value is\" + response.data?.configResponseModel)\n        when (response) {\n            is Resource.Loading -> concatText(\"Loading\")\n            is Resource.Finished -> renderView(response.data)\n            is Error -> response.message?.let { concatText(it) }\n            is Resource.Success -> renderView(response.data)\n\n        }\n    }\n\n    private fun renderView(data: CardViewState?) {\n\n    }\n\n\n    @SuppressLint(\"SetTextI18n\")\n    private fun concatText(newText: String) {\n        println(\"newText respoonse$newText\")\n\n    }\n\n\n    override fun onDetach() {\n        super.onDetach()\n        if (view == null) {\n            return\n        }\n        if (isNfcOpened) {\n        } else {\n            checkOutActivity?.onBackPressed()\n        }\n\n        if (isScannerOpened) {\n\n        } else {\n            //_viewModel?.incrementalCount =0\n            checkOutActivity?.onBackPressed()\n        }\n\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun resetTabAnimatedButton() {\n        checkOutActivity?.displayMetrics?.let { tabAnimatedActionButton?.setDisplayMetrics(it) }\n        SDKSession.sessionActive = false\n        tabAnimatedActionButton?.changeButtonState(ActionButtonState.RESET)\n        if (checkOutActivity?.isGooglePayClicked == false) {\n            checkOutActivity?.overridePendingTransition(0, R.anim.slide_down_exit)\n            checkOutActivity?.finishAfterTransition()\n        }\n        //  checkOutActivity?.finish()\n\n        val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n        val nowString: String = LocalizationManager.getValue(\"now\", \"ActionButton\")\n        tabAnimatedActionButton?.setButtonDataSource(\n            true,\n            context?.let { LocalizationManager.getLocale(it).language },\n            payString + \" \" + nowString,\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.paymentBackgroundColor\")),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.titleLabelColor\")),\n        )\n        /*  tabAnimatedActionButton?.setOnClickListener {\n              requireActivity().supportFragmentManager.let { it1 -> SDKSession.contextSDK?.let { it2 ->\n                  SDKSession.startSDK(it1,\n                      it2,SDKSession.contextSDK as Activity)\n              } }\n          }*/\n        tabAnimatedActionButton?.isClickable = true\n        tabAnimatedActionButton?.isEnabled = true\n    }\n\n\n    fun dismissBottomSheetDialog() {\n        //bottomSheetDialog.window?.attributes?.windowAnimations = R.style.DialogAnimation\n        ThemeManager.currentTheme = \"\"\n        LocalizationManager.currentLocalized = JSONObject()\n        bottomSheetDialog.dismissWithAnimation\n        bottomSheetDialog.hide()\n        bottomSheetDialog.dismiss()\n        resetTabAnimatedButton()\n        sessionDelegate?.sessionCancelled()\n\n    }\n\n\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout/src/main/java/company/tap/checkout/open/CheckoutFragment.kt b/checkout/src/main/java/company/tap/checkout/open/CheckoutFragment.kt
--- a/checkout/src/main/java/company/tap/checkout/open/CheckoutFragment.kt	(revision 3331e219140f89d49a639011cde8027b9db6f5f8)
+++ b/checkout/src/main/java/company/tap/checkout/open/CheckoutFragment.kt	(date 1682950543592)
@@ -357,7 +357,7 @@
         relativeLL = view.findViewById(R.id.relativeLL)
         mainCardLayout = view.findViewById(R.id.mainCardLayout)
         /**Added to init the lib of getting dynamic flags*/
-        World.init(context)
+//        World.init(context)
     }
 
 
Index: iosdialog/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.library'\n\next {\n    bintrayRepo = 'iOSDialog'\n    bintrayName = 'iOSDialog'\n\n    publishedGroupId = 'com.gdacciaro'\n    libraryName = 'iosdialog'\n    artifact = 'iosdialog'\n\n    libraryDescription = 'iOS UIAlertView on Android'\n\n    siteUrl = 'https://github.com/MagicDog707/iOSDialog'\n    gitUrl = 'https://github.com/MagicDog707/iOSDialog.git'\n\n    libraryVersion = '1.0.3'\n\n    developerId = 'gdacciaro'\n    developerName = 'Gennaro Daniele Acciaro'\n    developerEmail = 'acciarogennaro@gmail.com'\n\n    licenseName = 'The Apache Software License, Version 2.0'\n    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'\n    allLicenses = [\"Apache-2.0\"]\n}\n\nandroid {\n    compileSdkVersion 33\n\n\n    defaultConfig {\n        minSdkVersion 15\n        targetSdkVersion 33\n        versionCode 1\n        versionName '1.0.3'\n\n        testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\"\n\n    }\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n        }\n    }\n}\n\n\n   apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/installv1.gradle'\n   apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/bintrayv1.gradle'\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/iosdialog/build.gradle b/iosdialog/build.gradle
--- a/iosdialog/build.gradle	(revision 3331e219140f89d49a639011cde8027b9db6f5f8)
+++ b/iosdialog/build.gradle	(date 1682950543596)
@@ -39,7 +39,7 @@
     }
     buildTypes {
         release {
-            minifyEnabled false
+            minifyEnabled true
             proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
         }
     }
