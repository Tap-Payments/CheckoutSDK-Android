Index: tapuilibraryy/src/main/java/company/tap/tapuilibraryy/uikit/views/TabAnimatedActionButton.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package company.tap.tapuilibraryy.uikit.views\n\nimport android.content.Context\nimport android.content.res.ColorStateList\nimport android.graphics.Color\nimport android.graphics.Typeface\nimport android.graphics.drawable.GradientDrawable\nimport android.util.AttributeSet\nimport android.util.DisplayMetrics\nimport android.view.Gravity\nimport android.view.View\nimport android.widget.ImageView\nimport android.widget.LinearLayout\nimport android.widget.TextView\nimport android.widget.Toast\nimport androidx.annotation.DrawableRes\nimport androidx.cardview.widget.CardView\nimport androidx.core.view.setMargins\nimport com.bumptech.glide.Glide\nimport company.tap.taplocalizationkit.LocalizationManager\nimport company.tap.tapuilibraryy.R\nimport company.tap.tapuilibraryy.fontskit.enums.TapFont\nimport company.tap.tapuilibraryy.themekit.ThemeManager\nimport company.tap.tapuilibraryy.uikit.animation.MorphingAnimation\nimport company.tap.tapuilibraryy.uikit.animation.MorphingAnimation.AnimationTarget.*\nimport company.tap.tapuilibraryy.uikit.datasource.ActionButtonDataSource\nimport company.tap.tapuilibraryy.uikit.datasource.AnimationDataSource\nimport company.tap.tapuilibraryy.uikit.enums.ActionButtonState\nimport company.tap.tapuilibraryy.uikit.enums.ActionButtonState.*\nimport company.tap.tapuilibraryy.uikit.interfaces.TabAnimatedButtonListener\nimport company.tap.tapuilibraryy.uikit.interfaces.TapActionButtonInterface\nimport company.tap.tapuilibraryy.uikit.ktx.setImage\nimport company.tap.tapuilibraryy.uikit.utils.MetricsUtil\n\n\n/**\n *\n * Created on 6/24/20\n * Copyright Â© 2020 Tap Payments. All rights reserved.\n *\n */\nclass TabAnimatedActionButton : CardView, MorphingAnimation.OnAnimationEndListener,\n    TapLoadingView.OnProgressCompletedListener {\n\n    private lateinit var morphingAnimation: MorphingAnimation\n    private  var tabAnimatedButtonListener: TabAnimatedButtonListener?=null\n\n    private lateinit var state: ActionButtonState\n    private var dataSource: ActionButtonDataSource? = null\n    private var backgroundDrawable: GradientDrawable = GradientDrawable()\n    private var actionButtonInterface: TapActionButtonInterface? = null\n    private var displayMetrics: Int? = null\n    private var currentSelectedTheme: String? = null\n    private var tapLoadingView: TapLoadingView? = null\n    private val textView by lazy { TextView(context) }\n    private var counter = 0\n    private lateinit var animationDataSource: AnimationDataSource\n    private var maxCorners = MetricsUtil.convertDpToPixel(MAX_CORNERS, context)\n\n    @DrawableRes\n    val loaderGif: Int =\n        if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains(\"dark\")) {\n            R.drawable.loader_black\n        } else if (ThemeManager.currentTheme.isNotEmpty() && !ThemeManager.currentTheme.contains(\"dark\")) {\n            R.drawable.loader\n        } else R.drawable.loader\n\n    @DrawableRes\n    val loaderSuccessGif: Int =\n        if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains(\"dark\")) {\n            R.drawable.success_black\n        } else if (ThemeManager.currentTheme.isNotEmpty() && !ThemeManager.currentTheme.contains(\"dark\")) {\n            R.drawable.success_white\n        } else R.drawable.success_white\n\n    @DrawableRes\n    val loaderErrorGif: Int =\n        if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains(\"dark\")) {\n            R.drawable.error_gif_black\n        } else if (ThemeManager.currentTheme.isNotEmpty() && !ThemeManager.currentTheme.contains(\"dark\")) {\n            R.drawable.error_gif_white\n        } else R.drawable.error_gif_white\n\n    constructor(context: Context) : super(context) {\n        init()\n    }\n\n    constructor(context: Context, attrs: AttributeSet?) : super(context, attrs) {\n        init()\n    }\n\n    constructor(context: Context, attrs: AttributeSet?, defStyleAttr: Int) : super(\n        context,\n        attrs,\n        defStyleAttr\n    ) {\n        init()\n    }\n\n    private fun init() {\n        morphingAnimation = MorphingAnimation(this)\n        morphingAnimation.setAnimationEndListener(this)\n        initActionButtonDataSourceValid()\n        this@TabAnimatedActionButton.isClickable = true\n        this@TabAnimatedActionButton.isEnabled = true\n\n\n    }\n\n    fun setTabAnimatedInterface(tabAnimatedButtonListener: TabAnimatedButtonListener) {\n        this.tabAnimatedButtonListener = tabAnimatedButtonListener\n    }\n\n\n    private fun initActionButtonDataSourceValid(\n        backgroundColor: Int? = null,\n        textColor: Int? = null,\n        buttonText: String? = null,\n        backgroundColorArray: IntArray? = null\n    ) {\n        val btnText: String\n        val _textColor: Int\n        val btnBackground: Int\n        if (buttonText == null) {\n            if (LocalizationManager.currentLocalized.length() != 0)\n                btnText = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n            else btnText = context.getString(R.string.payText)\n        } else {\n            btnText = buttonText\n        }\n        if (textColor == null) {\n            if (ThemeManager.currentTheme.isNotEmpty())\n                _textColor =\n                    Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.titleLabelColor\"))\n            else _textColor = R.color.ValidBtntitleLabelColor\n        } else {\n            _textColor = textColor\n        }\n        if (backgroundColor == null) {\n            if (ThemeManager.currentTheme.isNotEmpty())\n                btnBackground =\n                    Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.paymentBackgroundColor\"))\n            //  else btnBackground = Color.parseColor(R.color.ValidBtnColor.toString())\n            else btnBackground = R.color.ValidBtnColor\n        } else {\n            btnBackground = backgroundColor\n        }\n        dataSource = ActionButtonDataSource(\n            text = btnText,\n            textSize = 16f,\n            textColor = _textColor,\n            cornerRadius = 100f,\n            successImageResources = loaderSuccessGif,\n            errorImageResources = loaderErrorGif,\n            backgroundColor = btnBackground,\n            backgroundArrayInt = backgroundColorArray\n        )\n\n    }\n\n    private fun initActionButtonDataSourceInValid(\n        backgroundColor: Int? = null,\n        textColor: Int? = null,\n        buttonText: String? = null\n    ) {\n        val btnText: String\n        val _textColor: Int\n        val btnBackground: Int\n        if (buttonText == null) {\n            if (LocalizationManager.currentLocalized.length() != 0)\n                btnText = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n            else btnText = context.getString(R.string.payText)\n        } else {\n            btnText = buttonText\n        }\n        if (textColor == null) {\n            if (ThemeManager.currentTheme.isNotEmpty())\n                _textColor =\n                    Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\"))\n            else _textColor = R.color.ValidBtntitleLabelColor\n        } else {\n            _textColor = textColor\n        }\n        if (backgroundColor == null) {\n            if (ThemeManager.currentTheme.isNotEmpty())\n                btnBackground =\n                    Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\"))\n            else btnBackground = R.color.InvalidBtnColor\n        } else {\n            btnBackground = backgroundColor\n        }\n        dataSource = ActionButtonDataSource(\n            text = btnText,\n            textSize = 16f,\n            textColor = _textColor,\n            cornerRadius = MetricsUtil.convertDpToPixel(100f,context),\n            successImageResources = loaderSuccessGif,\n            errorImageResources = loaderErrorGif,\n            backgroundColor = btnBackground\n        )\n\n    }\n\n\n    /**\n     * public setter for action button interface\n     *\n     * @param actionButtonInterface\n     */\n    fun setButtonInterface(actionButtonInterface: TapActionButtonInterface) {\n        this.actionButtonInterface = actionButtonInterface\n    }\n\n    fun setDisplayMetricsTheme(displayMetrics: Int, themeString: String) {\n        this.displayMetrics = displayMetrics\n        this.currentSelectedTheme = themeString\n    }\n\n    fun setButtonDataSource(\n        isValid: Boolean = false,\n        lang: String? = null,\n        buttonText: String? = null,\n        backgroundColor: Int,\n        textColor: Int? = null,\n        backgroundColorArray: IntArray? = null\n    ) {\n        if (isValid) {\n            initValidBackground(backgroundColor, backgroundColorArray)\n            initActionButtonDataSourceValid(\n                backgroundColor,\n                textColor,\n                buttonText,\n                backgroundColorArray\n            )\n        } else {\n            initInvalidBackground(backgroundColor)\n            initActionButtonDataSourceInValid(backgroundColor, textColor, buttonText)\n        }\n        removeAllViews()\n        addView(getTextView(lang ?: \"en\"))\n    }\n\n    fun setInValidBackground(isValid: Boolean = false, backgroundColor: Int) {\n        dataSource?.backgroundColor = backgroundColor\n        backgroundDrawable.color = ColorStateList.valueOf(backgroundColor)\n\n        elevation = 0F\n\n    }\n\n    fun addTapLoadingView() {\n        tapLoadingView = TapLoadingView(context, null)\n        tapLoadingView?.setOnProgressCompleteListener(this)\n        addChildView(tapLoadingView!!)\n    }\n\n    fun changeButtonState(state: ActionButtonState, loopCount: Int = 0) {\n        this.state = state\n        when (state) {\n            SUCCESS -> {\n                addTapLoadingView()\n                startStateAnimation()\n                addChildView(getImageView(loaderSuccessGif, loopCount) {})\n            }\n            ERROR -> {\n                addTapLoadingView()\n                startStateAnimation()\n                addChildView(getImageView(loaderErrorGif, loopCount) {})\n            }\n            LOADING -> {\n                addTapLoadingView()\n                startStateAnimation()\n                addChildView(getImageView(loaderGif, loopCount) {\n                    morphingAnimation.end(animationDataSource, WIDTH, HEIGHT, CORNERS)\n\n                })\n            }\n            IDLE -> {\n                removeAllViews()\n                val params = LinearLayout.LayoutParams(\n                    LinearLayout.LayoutParams.MATCH_PARENT,\n                    120\n                )\n                params.setMargins(60, 40, 60, 60)\n                params.gravity = Gravity.CENTER\n                this.layoutParams = params\n                init()\n            }\n            RESET -> {\n                removeView(getImageView(loaderSuccessGif, 0) {})\n                removeView(getImageView(loaderErrorGif, 0) {})\n                addChildView(getTextView(LocalizationManager.getLocale(context).language))\n                if (displayMetrics == DisplayMetrics.DENSITY_450 || displayMetrics == DisplayMetrics.DENSITY_420 || displayMetrics == DisplayMetrics.DENSITY_400 || displayMetrics == DisplayMetrics.DENSITY_440 || displayMetrics == DisplayMetrics.DENSITY_XXHIGH ) {\n\n                    val params = LinearLayout.LayoutParams(\n                        LinearLayout.LayoutParams.MATCH_PARENT,\n                        100\n                    )\n                    params.setMargins(60, 40, 60, 60)\n                    params.gravity = Gravity.CENTER\n                    this.layoutParams = params\n                    init()\n\n\n                } else if (displayMetrics == DisplayMetrics.DENSITY_280 || displayMetrics == DisplayMetrics.DENSITY_260 || displayMetrics == DisplayMetrics.DENSITY_300 || displayMetrics == DisplayMetrics.DENSITY_XHIGH || displayMetrics == DisplayMetrics.DENSITY_340 || displayMetrics == DisplayMetrics.DENSITY_360) {\n\n                    val params = LinearLayout.LayoutParams(\n                        LinearLayout.LayoutParams.MATCH_PARENT,\n                        80\n                    )\n                    params.setMargins(50, 40, 50, 40)\n                    params.gravity = Gravity.CENTER\n                    this.layoutParams = params\n                    init()\n\n\n                } else if (displayMetrics == DisplayMetrics.DENSITY_560 || displayMetrics == DisplayMetrics.DENSITY_600) {\n\n                    val params = LinearLayout.LayoutParams(\n                        LinearLayout.LayoutParams.MATCH_PARENT,\n                        130\n                    )\n                    params.setMargins(40, 40, 40, 60)\n                    params.gravity = Gravity.CENTER\n                    this.layoutParams = params\n                    init()\n\n\n                }\n                morphingAnimation.setAnimationEndListener(this)\n                this.isClickable = true\n                this.isEnabled = true\n            }\n            else -> {\n                morphingAnimation.setAnimationEndListener(this)\n                init()\n            }\n\n        }\n    }\n\n\n    /**\n     * setup the initValidBackground background drawable color and corner radius from datasource\n     */\n\n    private fun initValidBackground(backgroundColor: Int, backgroundColorArray: IntArray? = null) {\n\n        if (backgroundColorArray != null) {\n            backgroundDrawable.colors = backgroundColorArray\n            backgroundDrawable.gradientType = GradientDrawable.LINEAR_GRADIENT\n            backgroundDrawable = GradientDrawable(\n                GradientDrawable.Orientation.RIGHT_LEFT, backgroundColorArray,\n            )\n        } else {\n            dataSource?.cornerRadius?.let {\n                backgroundDrawable.cornerRadius = it\n            }\n            backgroundDrawable.color =\n                ColorStateList.valueOf(backgroundColor) ?: ColorStateList.valueOf(\n                    Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.paymentBackgroundColor\"))\n                )\n            background = backgroundDrawable\n            elevation = 0F\n        }\n    }\n\n    /**\n     * setup the initInvalidBackground background drawable color and corner radius from datasource\n     */\n    private fun initInvalidBackground(backgroundColor: Int? = null) {\n        dataSource?.cornerRadius?.let {\n            backgroundDrawable.cornerRadius = it\n        }\n        backgroundDrawable.color =\n            ColorStateList.valueOf(Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")))\n        // backgroundDrawable.color = backgroundColor?.let { ColorStateList.valueOf(it) } ?: ColorStateList.valueOf(Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")))\n\n        background = backgroundDrawable\n        elevation = 0F\n    }\n\n    private fun getTextView(lang: String): TextView {\n        if (lang == \"en\") setFontEnglish(textView)\n        else setFontArabic(textView)\n\n\n        dataSource?.text?.let {\n            textView.text = it\n        }\n        dataSource?.textSize?.let {\n            textView.textSize = it\n        }\n        dataSource?.textColor?.let {\n            textView.setTextColor(it)\n        }\n        textView.gravity = Gravity.CENTER\n        return textView\n    }\n\n    private fun setFontEnglish(textView: TextView) {\n        textView.typeface = Typeface.createFromAsset(\n            context?.assets, TapFont.tapFontType(\n                TapFont.RobotoRegular\n            )\n        )\n    }\n\n    private fun setFontArabic(textView: TextView) {\n        textView.typeface = Typeface.createFromAsset(\n            context?.assets, TapFont.tapFontType(\n                TapFont.TajawalLight\n            )\n        )\n    }\n\n    fun getImageView(\n        @DrawableRes imageRes: Int,\n        gifLoopCount: Int,\n        actionAfterAnimationDone: () -> Unit\n    ): ImageView {\n        val image = ImageView(context)\n        val params = LinearLayout.LayoutParams(\n            LinearLayout.LayoutParams.MATCH_PARENT,\n            LinearLayout.LayoutParams.MATCH_PARENT\n        )\n        params.setMargins(20)\n        image.layoutParams = params\n\n        return image.setImage(context, image, imageRes, gifLoopCount, actionAfterAnimationDone)\n    }\n\n\n    fun getImageViewUrl(imageRes: String): ImageView {\n        val image = ImageView(context)\n        val params = LinearLayout.LayoutParams(\n            LinearLayout.LayoutParams.MATCH_PARENT,\n            LinearLayout.LayoutParams.MATCH_PARENT\n        )\n        params.setMargins(20)\n        image.layoutParams = params\n\n        Glide.with(context)\n            .load(imageRes)\n            .into(image)\n        return image\n    }\n\n    private fun startStateAnimation() {\n\n        if (displayMetrics == DisplayMetrics.DENSITY_450 || displayMetrics == DisplayMetrics.DENSITY_420 || displayMetrics == DisplayMetrics.DENSITY_400 || displayMetrics == DisplayMetrics.DENSITY_440 || displayMetrics == DisplayMetrics.DENSITY_XXHIGH ) {\n            animationDataSource =\n                AnimationDataSource(\n                    fromHeight = height,\n                    toHeight = 70,\n                    fromWidth = width,\n                    toWidth = 70 + 40,\n                    fromCorners = dataSource?.cornerRadius,\n                    toCorners = maxCorners,\n                    fromColor = dataSource?.backgroundColor,\n                    toColor = dataSource?.errorColor,\n                    duration = MAX_DURATION,\n                    background = backgroundDrawable\n                )\n        } else if (displayMetrics == DisplayMetrics.DENSITY_260 || displayMetrics == DisplayMetrics.DENSITY_280 || displayMetrics == DisplayMetrics.DENSITY_300 || displayMetrics == DisplayMetrics.DENSITY_XHIGH || displayMetrics == DisplayMetrics.DENSITY_340 || displayMetrics == DisplayMetrics.DENSITY_360) {\n            animationDataSource =\n                AnimationDataSource(\n                    fromHeight = height,\n                    toHeight = 40,\n                    fromWidth = width,\n                    toWidth = 40 + 40,\n                    fromCorners = dataSource?.cornerRadius,\n                    toCorners = maxCorners,\n                    fromColor = dataSource?.backgroundColor,\n                    toColor = dataSource?.errorColor,\n                    duration = MAX_DURATION,\n                    background = backgroundDrawable\n                )\n        } else if (displayMetrics == DisplayMetrics.DENSITY_560 || displayMetrics == DisplayMetrics.DENSITY_600) {\n            animationDataSource =\n                AnimationDataSource(\n                    fromHeight = height,\n                    toHeight = 100,\n                    fromWidth = width,\n                    toWidth = 100 + 40,\n                    fromCorners = dataSource?.cornerRadius,\n                    toCorners = maxCorners,\n                    fromColor = dataSource?.backgroundColor,\n                    toColor = dataSource?.errorColor,\n                    duration = MAX_DURATION,\n                    background = backgroundDrawable\n                )\n\n        }\n        morphingAnimation.start(animationDataSource, WIDTH, HEIGHT, CORNERS)\n    }\n\n\n    /**\n     * accept any view to be added inside the action button\n     *\n     * @param view the child view\n     */\n    fun addChildView(view: View) {\n//        AnimationEngine.applyTransition(this)\n        removeAllViews()\n        addView(view)\n    }\n\n    override fun onMorphAnimationEnd() {\n        tapLoadingView?.completeProgress()\n        tabAnimatedButtonListener?.onTabAnimatedEnded()\n\n    }\n\n    override fun onMorphAnimationReverted() {\n        println(\"onMorphAnimationReverted is called\" + counter)\n        counter += 1\n        //  if(counter<=1) {\n        when (state) {\n            ERROR -> {\n                /* dataSource?.errorImageResources?.let {\n                addChildView(getImageView(it,1) {})\n            }\n            dataSource?.errorColor?.let {\n//                    AnimationEngine.applyTransition(this)\n                backgroundDrawable.color = ColorStateList.valueOf(it)\n            }*/\n                morphingAnimation.setAnimationEndListener(this)\n                this@TabAnimatedActionButton.isEnabled = true\n                this@TabAnimatedActionButton.isClickable = true\n                clearAnimation()\n                changeButtonState(RESET)\n\n                //   morphingAnimation.end(animationDataSource, WIDTH, HEIGHT, CORNERS)\n            }\n            SUCCESS -> {\n                morphingAnimation.setAnimationEndListener(this)\n                this@TabAnimatedActionButton.isEnabled = true\n                this@TabAnimatedActionButton.isClickable = true\n                clearAnimation()\n                changeButtonState(RESET)\n            } /*dataSource?.successImageResources?.let {\n\n                    addChildView(getImageView(it, 1) {})\n                }*/\n\n            else -> {\n                morphingAnimation.setAnimationEndListener(this)\n                this@TabAnimatedActionButton.isEnabled = true\n                this@TabAnimatedActionButton.isClickable = true\n                clearAnimation()\n                changeButtonState(RESET)\n\n            }\n\n        }\n        /* } else {\n             morphingAnimation.setAnimationEndListener(this)\n             this@TabAnimatedActionButton.isEnabled = true\n             changeButtonState(RESET)\n            // init()\n         }*/\n        clearAnimation()\n        clearFocus()\n        cleanupLayoutState(getImageView(loaderErrorGif, 0) {})\n        cleanupLayoutState(getTextView(LocalizationManager.getLocale(context).language))\n        cleanupLayoutState(getImageView(loaderSuccessGif, 0) {})\n\n        getImageView(loaderErrorGif, 0) {}.clearAnimation();//This Line Added\n        getImageView(loaderSuccessGif, 0) {}.clearAnimation();//This Line Added\n        getTextView(LocalizationManager.getLocale(context).language).clearAnimation();//This Line Added\n    }\n\n    override fun onMorphAnimationStarted() {\n        tabAnimatedButtonListener?.onTabAnimatedStarted()\n\n    }\n\n    override fun onProgressCompleted() {\n        when (state) {\n            ERROR -> {\n                dataSource?.errorImageResources?.let {\n                    addChildView(getImageView(it, 1) {})\n                }\n                dataSource?.errorColor?.let {\n//                    AnimationEngine.applyTransition(this)\n                    backgroundDrawable.color = ColorStateList.valueOf(it)\n                }\n                // initActionButtonDataSource()\n                morphingAnimation.end(animationDataSource, WIDTH, HEIGHT, CORNERS)\n            }\n            SUCCESS -> dataSource?.successImageResources?.let {\n                addChildView(getImageView(it, 1) {})\n                morphingAnimation.end(animationDataSource, WIDTH, HEIGHT, CORNERS)\n            }\n\n            else -> morphingAnimation.end(animationDataSource, WIDTH, HEIGHT, CORNERS)\n        }\n    }\n\n    /**\n     * Constants values\n     */\n    companion object {\n        const val MAX_CORNERS = 100f\n        const val MAX_RADIUS = 40\n        const val MAX_DURATION = 2000\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tapuilibraryy/src/main/java/company/tap/tapuilibraryy/uikit/views/TabAnimatedActionButton.kt b/tapuilibraryy/src/main/java/company/tap/tapuilibraryy/uikit/views/TabAnimatedActionButton.kt
--- a/tapuilibraryy/src/main/java/company/tap/tapuilibraryy/uikit/views/TabAnimatedActionButton.kt	(revision adc07d83a4666333e9fa077651da178d95311d6e)
+++ b/tapuilibraryy/src/main/java/company/tap/tapuilibraryy/uikit/views/TabAnimatedActionButton.kt	(date 1685264955844)
@@ -447,7 +447,7 @@
     }
 
     private fun startStateAnimation() {
-
+        Toast.makeText(this.context,displayMetrics.toString(),Toast.LENGTH_SHORT).show()
         if (displayMetrics == DisplayMetrics.DENSITY_450 || displayMetrics == DisplayMetrics.DENSITY_420 || displayMetrics == DisplayMetrics.DENSITY_400 || displayMetrics == DisplayMetrics.DENSITY_440 || displayMetrics == DisplayMetrics.DENSITY_XXHIGH ) {
             animationDataSource =
                 AnimationDataSource(
Index: checkout/src/main/java/company/tap/checkout/internal/webview/WebFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package company.tap.checkout.internal.webview\n\n/**\n * Created by OlaMonir on 7/27/20.\nCopyright (c) 2020    Tap Payments.\nAll rights reserved.\n **/\nimport android.annotation.SuppressLint\nimport android.app.Activity\nimport android.content.res.ColorStateList\nimport android.graphics.Color\nimport android.os.Bundle\nimport android.text.TextUtils\nimport android.util.DisplayMetrics\nimport android.util.Log\nimport android.view.KeyEvent\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.view.animation.AnimationUtils\nimport android.webkit.WebChromeClient\nimport android.webkit.WebSettings\nimport android.webkit.WebView\nimport android.widget.FrameLayout\nimport android.widget.LinearLayout\nimport android.widget.ProgressBar\nimport android.widget.RelativeLayout\nimport androidx.annotation.DrawableRes\nimport androidx.fragment.app.DialogFragment\nimport company.tap.checkout.R\nimport company.tap.checkout.internal.api.models.Charge\nimport company.tap.checkout.internal.apiresponse.CardViewModel\nimport company.tap.checkout.internal.utils.CustomUtils\nimport company.tap.checkout.internal.utils.showToast\nimport company.tap.checkout.internal.utils.twoThirdHeightView\nimport company.tap.checkout.internal.viewholders.SwitchViewHolder\nimport company.tap.checkout.internal.viewmodels.CheckoutViewModel\nimport company.tap.checkout.open.controller.SDKSession.contextSDK\nimport company.tap.checkout.open.data_managers.PaymentDataSource\nimport company.tap.tapuilibraryy.themekit.ThemeManager\nimport company.tap.tapuilibraryy.uikit.ktx.setBorderedView\nimport company.tap.tapuilibraryy.uikit.ktx.setTopBorders\nimport kotlinx.android.synthetic.main.fragment_web.*\nimport kotlinx.android.synthetic.main.fragment_web.web_view\nimport kotlinx.android.synthetic.main.switch_layout.view.*\nimport kotlinx.android.synthetic.main.web_view_layout.*\nimport kotlin.math.roundToInt\n\n\nclass WebFragment(\n    private val webViewContract: WebViewContract?,\n    private val cardViewModel: CardViewModel?,\n    private val checkoutViewModel: CheckoutViewModel,\n    private val isFirstTimeLoading: Boolean,\n    private val onLoadedWebView: () -> Unit\n) : DialogFragment(),\n    CustomWebViewClientContract {\n\n\n\n    private var webViewUrl: String? = null\n    private var chargeResponse: Charge? = null\n    val progressBar by lazy { view?.findViewById<ProgressBar>(R.id.progressBar) }\n    private var displayMetrics: Int? = 0\n    private var isFirstTimeLoadingInWeb = this.isFirstTimeLoading\n\n    @DrawableRes\n    val loaderGif: Int =\n        if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains(\"dark\")) R.drawable.reduced_loader_white else R.drawable.loader_black\n\n    override fun getTheme(): Int = R.style.DialogTheme\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        return inflater.inflate(R.layout.fragment_web, container, false)\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        progressBar?.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"merchantHeaderView.backgroundColor\")))\n        progressBar?.progressDrawable?.setColorFilter(\n            Color.RED, android.graphics.PorterDuff.Mode.SRC_IN\n        );\n        progressBar?.progressTintList = ColorStateList.valueOf(Color.RED);\n\n        webViewUrl = arguments?.getString(KEY_URL)\n        chargeResponse = arguments?.getSerializable(CHARGE) as Charge?\n        progressBar?.max = 100\n        progressBar?.progress = 10\n        displayMetrics = CustomUtils.getDeviceDisplayMetrics(context as Activity)\n        if (TextUtils.isEmpty(webViewUrl)) {\n            throw IllegalArgumentException(\"Empty URL passed to WebViewFragment!\")\n        }\n        if (displayMetrics == DisplayMetrics.DENSITY_400 || displayMetrics == DisplayMetrics.DENSITY_XXHIGH || displayMetrics == DisplayMetrics.DENSITY_450 || displayMetrics == DisplayMetrics.DENSITY_440) {\n            progressBar?.indeterminateDrawable =\n                (context as Activity).resources.getDrawable(loaderGif)\n        } else progressBar?.indeterminateDrawable =\n            (context as Activity).resources.getDrawable(loaderGif)\n\n        progressBar?.visibility = View.VISIBLE\n        web_view?.visibility = View.GONE\n        webViewUrl?.let { setUpWebView(it) }\n\n    }\n\n\n    @SuppressLint(\"SetJavaScriptEnabled\")\n    private fun setUpWebView(mUrl: String) {\n        web_view.settings.javaScriptEnabled = true\n        web_view.webChromeClient = WebChromeClient()\n        web_view.isVerticalScrollBarEnabled = true\n        web_view.isHorizontalScrollBarEnabled = true\n        web_view.settings.loadWithOverviewMode = true\n        web_view.settings.layoutAlgorithm = WebSettings.LayoutAlgorithm.NORMAL\n        web_view.settings.useWideViewPort = true\n        web_view.settings.domStorageEnabled = true\n        web_view.settings.mixedContentMode = WebSettings.MIXED_CONTENT_ALWAYS_ALLOW\n        web_view.webViewClient =\n            cardViewModel?.let { TapCustomWebViewClient(this, it, checkoutViewModel) }!!\n        //  web_view.webViewClient = cardViewModel?.let { TapCustomWebViewClient2(this, it) }!!\n\n\n        webViewUrl?.let { web_view.loadUrl(it) }\n\n        web_view.setOnKeyListener { _, keyCode, event ->\n            if (event.action == KeyEvent.ACTION_UP && keyCode == KeyEvent.KEYCODE_BACK) {\n\n                //if (web_view.canGoBack()) {\n                web_view.goBack()\n                CheckoutViewModel().cancelledCall()\n                /**\n                 * put here listener or delegate thT process cancelled **/\n                return@setOnKeyListener true\n                //  }\n                return@setOnKeyListener false\n            }\n            false\n        }\n\n\n\n        web_view.webChromeClient = object : WebChromeClient() {\n            /*\n                    public void onProgressChanged (WebView view, int newProgress)\n                        Tell the host application the current progress of loading a page.\n\n                    Parameters\n                        view : The WebView that initiated the callback.\n                        newProgress : Current page loading progress, represented by an integer\n                            between 0 and 100.\n                */\n            override fun onProgressChanged(view: WebView?, newProgress: Int) {\n                // Update the progress bar with page loading progress\n                progressBar?.progress = newProgress\n                if (newProgress == 100) {\n                    if (isFirstTimeLoadingInWeb) {\n                        onLoadedWebView.invoke()\n                        isFirstTimeLoadingInWeb = false\n                    }\n                    progressBar?.visibility = View.INVISIBLE\n                    web_view.visibility = View.VISIBLE\n                    if (isGooglePlayWebView){\n                        web_view.layoutParams = RelativeLayout.LayoutParams(\n                            RelativeLayout.LayoutParams.MATCH_PARENT,\n                            context?.twoThirdHeightView()?.roundToInt()!!\n                        )\n                    }\n\n                }\n            }\n\n\n            override fun onCloseWindow(window: WebView?) {\n                super.onCloseWindow(window)\n                Log.e(\"webview\", \"Window trying to close\");\n\n            }\n\n        }\n    }\n\n\n    override fun showLoading(showLoading: Boolean) {\n        // show tap loading until we receive success or failed\n//        if(showLoading) progressBar?.progress = 100\n//        else progressBar?.visibility = View.GONE\n    }\n\n    /**\n     * change action button status with success or failed\n    if success == true show success gif of action button\n    if success == false show error gif of action button\n     */\n    override fun submitResponseStatus(success: Boolean) {\n        /*  val intent = Intent(activity, CheckoutFragment::class.java)\n          startActivity(intent)*/\n        //    webViewContract?.redirectLoadingFinished(success, chargeResponse, contextSDK)\n    }\n\n    override fun getRedirectedURL(url: String) {\n        println(\"url are>>\" + PaymentDataSource.getChargeOrAuthorize())\n        println(\"url are>>\" + url)\n\n        // webViewContract.redirectLoadingFinished(url.contains(\"https://www.google.com/search?\"))\n        if (url.contains(\"gosellsdk://return_url\")) {\n            // webViewContract?.resultObtained(true, contextSDK)\n\n            webViewContract?.redirectLoadingFinished(\n                url.contains(\"gosellsdk://return_url\"), chargeResponse,\n                contextSDK\n            )\n        } else {\n\n//            webViewContract.directLoadingFinished(true)\n        }\n    }\n\n\n    companion object {\n        const val KEY_URL = \"key:url\"\n        const val CHARGE = \"charge_response\"\n        var isGooglePlayWebView = false\n\n        fun newInstance(\n            url: String,\n            webViewContract: WebViewContract,\n            cardViewModel: CardViewModel,\n            chargeResponse: Charge?,\n            checkoutViewModel: CheckoutViewModel,\n            isFirstTimeLoading: Boolean,\n            onLoadedWebView: () -> Unit\n        ): WebFragment {\n            val fragment = WebFragment(\n                webViewContract,\n                cardViewModel,\n                checkoutViewModel,\n                isFirstTimeLoading,\n                onLoadedWebView\n            )\n            val args = Bundle()\n            args.putString(KEY_URL, url)\n            args.putSerializable(CHARGE, chargeResponse)\n            fragment.arguments = args\n            println(\"fragment is\" + fragment)\n            return fragment\n        }\n    }\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout/src/main/java/company/tap/checkout/internal/webview/WebFragment.kt b/checkout/src/main/java/company/tap/checkout/internal/webview/WebFragment.kt
--- a/checkout/src/main/java/company/tap/checkout/internal/webview/WebFragment.kt	(revision adc07d83a4666333e9fa077651da178d95311d6e)
+++ b/checkout/src/main/java/company/tap/checkout/internal/webview/WebFragment.kt	(date 1685263664345)
@@ -31,6 +31,7 @@
 import company.tap.checkout.internal.api.models.Charge
 import company.tap.checkout.internal.apiresponse.CardViewModel
 import company.tap.checkout.internal.utils.CustomUtils
+import company.tap.checkout.internal.utils.getDeviceSpecs
 import company.tap.checkout.internal.utils.showToast
 import company.tap.checkout.internal.utils.twoThirdHeightView
 import company.tap.checkout.internal.viewholders.SwitchViewHolder
@@ -166,6 +167,11 @@
                             RelativeLayout.LayoutParams.MATCH_PARENT,
                             context?.twoThirdHeightView()?.roundToInt()!!
                         )
+                    }else{
+                        web_view.layoutParams = RelativeLayout.LayoutParams(
+                            RelativeLayout.LayoutParams.MATCH_PARENT,
+                            context?.getDeviceSpecs()?.first!!
+                        )
                     }
 
                 }
