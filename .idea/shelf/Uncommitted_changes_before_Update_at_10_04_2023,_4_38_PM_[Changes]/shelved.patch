Index: checkout/src/main/java/company/tap/checkout/internal/viewmodels/CheckoutViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package company.tap.checkout.internal.viewmodels\n\nimport android.annotation.SuppressLint\nimport android.app.Activity\nimport android.content.Context\nimport android.content.Intent\nimport android.content.res.Resources\nimport android.graphics.Color\nimport android.graphics.drawable.ShapeDrawable\nimport android.net.Uri\nimport android.os.Build\nimport android.os.Handler\nimport android.os.Looper\nimport android.text.format.DateFormat\nimport android.util.Log\nimport android.view.View\nimport android.view.ViewGroup\nimport android.view.ViewOutlineProvider\nimport android.view.animation.AnimationUtils\nimport android.widget.FrameLayout\nimport android.widget.LinearLayout\nimport androidx.annotation.Nullable\nimport androidx.annotation.RequiresApi\nimport androidx.annotation.RestrictTo\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.coordinatorlayout.widget.CoordinatorLayout\nimport androidx.core.view.isNotEmpty\nimport androidx.core.view.isVisible\nimport androidx.fragment.app.Fragment\nimport androidx.fragment.app.FragmentManager\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.ViewModel\nimport androidx.recyclerview.widget.DividerItemDecoration\nimport androidx.transition.*\nimport cards.pay.paycardsrecognizer.sdk.FrameManager\nimport cards.pay.paycardsrecognizer.sdk.ui.InlineViewCallback\nimport com.bugfender.sdk.Bugfender\nimport com.fasterxml.jackson.databind.ObjectMapper\nimport com.google.android.gms.wallet.PaymentData\nimport com.google.android.material.bottomsheet.BottomSheetBehavior\nimport com.google.android.material.bottomsheet.BottomSheetDialog\nimport com.google.gson.Gson\nimport com.google.gson.JsonObject\nimport company.tap.cardinputwidget.CardBrandSingle\nimport company.tap.cardinputwidget.CardInputUIStatus\nimport company.tap.cardinputwidget.widget.CardInputListener\nimport company.tap.cardscanner.*\nimport company.tap.checkout.R\nimport company.tap.checkout.internal.PaymentDataProvider\nimport company.tap.checkout.internal.adapter.CardTypeAdapterUIKIT\nimport company.tap.checkout.internal.adapter.CurrencyTypeAdapter\nimport company.tap.checkout.internal.adapter.GoPayCardAdapterUIKIT\nimport company.tap.checkout.internal.adapter.ItemAdapter\nimport company.tap.checkout.internal.api.enums.ChargeStatus\nimport company.tap.checkout.internal.api.enums.PaymentType\nimport company.tap.checkout.internal.api.models.*\nimport company.tap.checkout.internal.api.requests.CreateTokenGPayRequest\nimport company.tap.checkout.internal.api.responses.DeleteCardResponse\nimport company.tap.checkout.internal.api.responses.InitResponseModel\nimport company.tap.checkout.internal.api.responses.MerchantData\nimport company.tap.checkout.internal.api.responses.PaymentOptionsResponse\nimport company.tap.checkout.internal.apiresponse.CardViewEvent\nimport company.tap.checkout.internal.apiresponse.CardViewModel\nimport company.tap.checkout.internal.apiresponse.testmodels.GoPaySavedCards\nimport company.tap.checkout.internal.apiresponse.testmodels.TapCardPhoneListDataSource\nimport company.tap.checkout.internal.enums.PaymentTypeEnum\nimport company.tap.checkout.internal.enums.SectionType\nimport company.tap.checkout.internal.enums.WebViewType\nimport company.tap.checkout.internal.interfaces.*\nimport company.tap.checkout.internal.utils.AmountCalculator.calculateExtraFeesAmount\nimport company.tap.checkout.internal.utils.CurrencyFormatter\nimport company.tap.checkout.internal.utils.CustomUtils\nimport company.tap.checkout.internal.utils.ResizeAnimation\nimport company.tap.checkout.internal.utils.Utils\nimport company.tap.checkout.internal.viewholders.*\nimport company.tap.checkout.internal.webview.WebFragment\nimport company.tap.checkout.internal.webview.WebViewContract\nimport company.tap.checkout.open.CheckOutActivity\nimport company.tap.checkout.open.CheckoutFragment\nimport company.tap.checkout.open.controller.SDKSession\nimport company.tap.checkout.open.controller.SDKSession.supportFragmentManager\nimport company.tap.checkout.open.controller.SDKSession.tabAnimatedActionButton\nimport company.tap.checkout.open.controller.SessionManager\nimport company.tap.checkout.open.data_managers.PaymentDataSource\nimport company.tap.checkout.open.enums.CardType\nimport company.tap.checkout.open.enums.TransactionMode\nimport company.tap.checkout.open.models.ItemsModel\nimport company.tap.nfcreader.open.reader.TapEmvCard\nimport company.tap.taplocalizationkit.LocalizationManager\nimport company.tap.tapuilibrary.themekit.ThemeManager\nimport company.tap.tapuilibrary.themekit.theme.SeparatorViewTheme\nimport company.tap.tapuilibrary.uikit.datasource.LoyaltyHeaderDataSource\nimport company.tap.tapuilibrary.uikit.enums.ActionButtonState\nimport company.tap.tapuilibrary.uikit.enums.GoPayLoginMethod\nimport company.tap.tapuilibrary.uikit.fragment.NFCFragment\nimport company.tap.tapuilibrary.uikit.ktx.makeLinks\nimport company.tap.tapuilibrary.uikit.ktx.setTopBorders\nimport company.tap.tapuilibrary.uikit.views.TabAnimatedActionButton\nimport kotlinx.android.synthetic.main.amountview_layout.view.*\nimport kotlinx.android.synthetic.main.businessview_layout.view.*\nimport kotlinx.android.synthetic.main.cardviewholder_layout1.view.*\nimport kotlinx.android.synthetic.main.fragment_web.*\nimport kotlinx.android.synthetic.main.gopaysavedcard_layout.view.*\nimport kotlinx.android.synthetic.main.itemviewholder_layout.view.*\nimport kotlinx.android.synthetic.main.loyalty_view_layout.view.*\nimport kotlinx.android.synthetic.main.otpview_layout.view.*\nimport kotlinx.android.synthetic.main.switch_layout.view.*\nimport mobi.foo.benefitinapp.data.Transaction\nimport mobi.foo.benefitinapp.listener.CheckoutListener\nimport mobi.foo.benefitinapp.utils.BenefitInAppCheckout\nimport org.json.JSONException\nimport org.json.JSONObject\nimport java.math.BigDecimal\nimport kotlin.properties.Delegates\n\n\n/**\n *\n * Copyright Â© 2020 Tap Payments. All rights reserved.\n *\n */\n@RestrictTo(RestrictTo.Scope.LIBRARY)\nopen class CheckoutViewModel : ViewModel(), BaseLayoutManager, OnCardSelectedActionListener,\n    PaymentCardComplete, onCardNFCCallListener, OnCurrencyChangedActionListener, WebViewContract,\n    TapTextRecognitionCallBack, TapScannerCallback, CheckoutListener {\n    private var savedCardList = MutableLiveData<List<SavedCard>>()\n    private var arrayListSavedCardSize = ArrayList<SavedCard>()\n    private var supportedLoyalCards = MutableLiveData<List<LoyaltySupportedCurrency>>()\n    private var paymentOptionsList = MutableLiveData<List<PaymentOption>>()\n    private var goPayCardList = MutableLiveData<List<GoPaySavedCards>>()\n\n    private var allCurrencies = MutableLiveData<List<SupportedCurrencies>>()\n    private var selectedItemsDel by Delegates.notNull<Int>()\n    private val isShaking = MutableLiveData<Boolean>()\n    private var deleteCard: Boolean = false\n    private var displayItemsOpen: Boolean = false\n    private var displayOtpIsOpen: Boolean = false\n    private var saveCardSwitchHolder: SwitchViewHolder? = null\n\n    private lateinit var  title :String\n    private lateinit var paymentInlineViewHolder: PaymentInlineViewHolder\n    private lateinit var goPaySavedCardHolder: GoPaySavedCardHolder\n    private lateinit var businessViewHolder: BusinessViewHolder\n    private lateinit var amountViewHolder: AmountViewHolder\n    private lateinit var currencyAdapter: CurrencyTypeAdapter\n    private lateinit var goPayAdapter: GoPayCardAdapterUIKIT\n    private lateinit var goPayViewsHolder: GoPayViewsHolder\n    private lateinit var itemsViewHolder: ItemsViewHolder\n    private lateinit var cardViewHolder: CardViewHolder\n    private lateinit var webViewHolder: WebViewHolder\n    private lateinit var asynchronousPaymentViewHolder: AsynchronousPaymentViewHolder\n    private lateinit var loyaltyViewHolder: LoyaltyViewHolder\n\n    private var tabAnimatedActionButtonViewHolder: TabAnimatedActionButtonViewHolder? = null\n    private lateinit var bottomSheetDialog: BottomSheetDialog\n    private lateinit var fragmentManager: FragmentManager\n\n    @SuppressLint(\"StaticFieldLeak\")\n    private lateinit var bottomSheetLayout: FrameLayout\n\n    @Nullable\n    internal lateinit var selectedAmount: String\n\n    @Nullable\n    private lateinit var selectedCurrency: String\n    private var fee: BigDecimal? = BigDecimal.ZERO\n    val provider: IPaymentDataProvider = PaymentDataProvider()\n    @JvmField\n    var currentCurrency: String = \"\"\n\n    @JvmField\n    var currentCurrencySymbol: String = \"\"\n\n\n\n    @JvmField\n    var currentAmount: String = \"\"\n    private lateinit var adapter: CardTypeAdapterUIKIT\n    private lateinit var itemAdapter: ItemAdapter\n    private lateinit var otpViewHolder: OTPViewHolder\n\n    @SuppressLint(\"StaticFieldLeak\")\n    private lateinit var webFrameLayout: FrameLayout\n\n    @SuppressLint(\"StaticFieldLeak\")\n    private lateinit var frameLayout: FrameLayout\n\n    @SuppressLint(\"StaticFieldLeak\")\n    private lateinit var inLineCardLayout: FrameLayout\n    private lateinit var headerLayout: LinearLayout\n\n    @SuppressLint(\"StaticFieldLeak\")\n    private lateinit var sdkLayout: LinearLayout\n    private lateinit var checkoutFragment: CheckoutFragment\n    private lateinit var itemList: List<ItemsModel>\n    private lateinit var unModifiedItemList: List<ItemsModel>\n    private lateinit var selectedPaymentOption: PaymentOption\n\n    @SuppressLint(\"StaticFieldLeak\")\n    private lateinit var context: Context\n    private lateinit var cardViewModel: CardViewModel\n    private var otpTypeString: PaymentTypeEnum = PaymentTypeEnum.SAVEDCARD\n    private lateinit var paymentActionType: PaymentType\n    private val nfcFragment = NFCFragment()\n\n\n    //  private val inlineViewFragment = InlineViewFragment()\n    private val inlineCamerFragment = CameraFragment()\n    private var isInlineOpened = false\n\n    @JvmField\n    var isNFCOpened = false\n    private var textRecognitionML: TapTextRecognitionML? = null\n    private lateinit var intent: Intent\n    private lateinit var inlineViewCallback: InlineViewCallback\n    lateinit var tapCardPhoneListDataSource: ArrayList<TapCardPhoneListDataSource>\n    lateinit var paymentOptionsResponse: PaymentOptionsResponse\n    lateinit var initResponseModel: InitResponseModel\n    lateinit var redirectURL: String\n    lateinit var cardId: String\n    var currencyOldRate: BigDecimal? = null\n    var currentCalculatedAmount: BigDecimal? = null\n    var lastSelectedCurrency: String? = null\n    var loyatFlag: Boolean? = false\n   @JvmField var isSavedCardSelected: Boolean? = false\n\n    @JvmField var globalChargeResponse: Charge? =null\n\n    @JvmField\n    var selectedTotalAmount: String? = null\n\n    @JvmField\n    var selectedAmountPos: BigDecimal? = null\n\n    @JvmField\n    var selectedCurrencyPos: String? = null\n\n    @JvmField\n    var binLookupResponse1: BINLookupResponse? = null\n    lateinit var paymentOptionsWorker: java.util.ArrayList<PaymentOption>\n\n    private val googlePayButton: View? = null\n\n    val appId: String = \"4530082749\"\n    val merchantId: String = \"00000101\"\n    val seceret: String = \"3l5e0cstdim11skgwoha8x9vx9zo0kxxi4droryjp4eqd\"\n    val countrycode: String = \"1001\"\n    val mcc: String = \"4816\"\n    @JvmField\n    var incrementalCount:Int = 0\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun initLayoutManager(\n        bottomSheetDialog: BottomSheetDialog,\n        context: Context,\n        fragmentManager: FragmentManager,\n        sdkLayout: LinearLayout,\n        frameLayout: FrameLayout,\n        webFrameLayout: FrameLayout,\n        inLineCardLayout: FrameLayout,\n        inlineViewCallback: InlineViewCallback,\n        intent: Intent,\n        cardViewModel: CardViewModel,\n        checkoutFragment: CheckoutFragment,\n        headerLayout: LinearLayout\n    ) {\n        this.context = context\n        this.fragmentManager = fragmentManager\n        this.sdkLayout = sdkLayout\n        this.frameLayout = frameLayout\n        this.webFrameLayout = webFrameLayout\n        this.bottomSheetDialog = bottomSheetDialog\n        this.inLineCardLayout = inLineCardLayout\n        this.inlineViewCallback = inlineViewCallback\n        this.intent = intent\n        this.cardViewModel = cardViewModel\n        this.checkoutFragment = checkoutFragment\n        this.headerLayout = headerLayout\n\n        val aScene: Scene? = Scene.getCurrentScene(sdkLayout)\n        aScene?.setEnterAction {\n            AnimationUtils.loadAnimation(context, R.anim.slide_down)\n        }\n\n        initializeScanner(this)\n        initViewHolders()\n        initAmountAction()\n        initSwitchAction()\n        initOtpActionButton()\n        setAllSeparatorTheme()\n        //sdkLayout.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"tapBottomSheet.dimmedColor\")))\n      //  sdkLayout.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"horizontalList.backgroundColor\")))\n       // bottomSheetLayout.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"horizontalList.backgroundColor\")))\n       // frameLayout.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"horizontalList.backgroundColor\")))\n\n      //  sdkLayout.outlineProvider = ViewOutlineProvider.BACKGROUND\n       // sdkLayout.clipToOutline = true\n\n\n        //  initLoyaltyView()\n      //  checkoutFragment.enableSections()\n\n    }\n\n    private fun initLoyaltyView() {\n        if (SDKSession.enableLoyalty == true) {\n            /*removeViews(saveCardSwitchHolder)\n            addViews(loyaltyViewHolder,saveCardSwitchHolder)*/\n            removeAllViews()\n            addViews(\n                businessViewHolder,\n                amountViewHolder,\n                cardViewHolder,\n                paymentInlineViewHolder,\n                loyaltyViewHolder,\n                saveCardSwitchHolder\n            )\n            loyaltyViewHolder.view.loyaltyView.constraintLayout?.visibility = View.VISIBLE\n\n        } else\n            loyaltyViewHolder.view.loyaltyView.constraintLayout?.visibility = View.GONE\n    }\n\n    private fun initializeScanner(checkoutViewModel: CheckoutViewModel) {\n        textRecognitionML = TapTextRecognitionML(checkoutViewModel)\n        textRecognitionML?.addTapScannerCallback(checkoutViewModel)\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun initOtpActionButton() {\n        otpViewHolder.otpView.otpViewActionButton.setOnClickListener {\n            //Added to hide keyboard if open\n            CustomUtils.hideKeyboardFrom(context as Activity,otpViewHolder.view)\n            when (otpTypeString) {\n                PaymentTypeEnum.GOPAY ->\n                    goPayViewsHolder.onOtpButtonConfirmationClick(otpViewHolder.otpView.otpViewInput1.text.toString())\n\n\n                PaymentTypeEnum.SAVEDCARD -> confirmOTPCode(otpViewHolder.otpView.otpViewInput1.text.toString())\n                else -> {\n\n                    removeViews(\n                        businessViewHolder,\n                        amountViewHolder,\n                        paymentInlineViewHolder,\n                        cardViewHolder,\n                        saveCardSwitchHolder,\n                        otpViewHolder\n                    )\n                    addViews(\n                        businessViewHolder,\n                        amountViewHolder,\n                        cardViewHolder,\n                        paymentInlineViewHolder,\n                        saveCardSwitchHolder\n                    )\n                    saveCardSwitchHolder?.view?.mainSwitch?.switchSaveMobile?.visibility =\n                        View.GONE\n                    val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n                        false,\n                        \"en\",\n                        if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                            payString+\" \"+currentCurrencySymbol+\" \"+selectedAmount\n                        }else{ payString+\" \"+currentCurrencySymbol+\" \"+currentAmount},\n                        Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.paymentBackgroundColor\")),\n                        Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.titleLabelColor\")),\n                    )\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = View.VISIBLE\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                        ActionButtonState.IDLE\n                    )\n                    paymentInlineViewHolder.tapMobileInputView.clearNumber()\n\n                }\n            }\n        }\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun confirmOTPCode(otpCode: String) {\n        otpViewHolder.view.otpView.otpViewActionButton.setDisplayMetrics(\n            CustomUtils.getDeviceDisplayMetrics(\n                context as Activity\n            )\n        )\n        otpViewHolder.view.otpView.otpViewActionButton.changeButtonState(ActionButtonState.LOADING)\n        when (PaymentDataSource.getTransactionMode()) {\n            TransactionMode.PURCHASE -> sendChargeOTPCode(otpCode)\n            TransactionMode.AUTHORIZE_CAPTURE -> sendAuthorizeOTPCode(otpCode)\n            else -> sendChargeOTPCode(otpCode)\n        }\n\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun sendAuthorizeOTPCode(otpCode: String) {\n        cardViewModel.processEvent(\n            CardViewEvent.AuthenticateAuthorizeTransaction,\n            this,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            otpCode\n        )\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun sendChargeOTPCode(otpCode: String) {\n        cardViewModel.processEvent(\n            CardViewEvent.AuthenticateChargeTransaction,\n            this,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            otpCode\n        )\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun initViewHolders() {\n        businessViewHolder = BusinessViewHolder(context, this)\n        amountViewHolder = AmountViewHolder(context, this)\n        tabAnimatedActionButtonViewHolder = TabAnimatedActionButtonViewHolder(context)\n        cardViewHolder = CardViewHolder(context, this)\n        goPaySavedCardHolder = GoPaySavedCardHolder(context, this, this)\n        saveCardSwitchHolder = SwitchViewHolder(context, this)\n        loyaltyViewHolder = LoyaltyViewHolder(context, this, this)\n\n         headerLayout.let { it1 ->\n            setTopBorders(\n                it1,\n                35f,// corner raduis\n                0.0f,\n                Color.parseColor(ThemeManager.getValue(\"horizontalList.backgroundColor\")),// stroke color\n                Color.parseColor(ThemeManager.getValue(\"horizontalList.backgroundColor\")),// tint color\n                Color.parseColor(ThemeManager.getValue(\"horizontalList.backgroundColor\"))\n            )\n        }//\n        paymentInlineViewHolder = PaymentInlineViewHolder(\n            context, this,\n            this,\n            this,\n            saveCardSwitchHolder,\n            this,\n            cardViewModel, checkoutFragment, loyaltyViewHolder\n        )\n\n        itemsViewHolder = ItemsViewHolder(context, this)\n        otpViewHolder = OTPViewHolder(context)\n        otpViewHolder.otpView.visibility = View.GONE\n        otpViewHolder.otpView.requestFocus()\n        otpViewHolder.otpView.otpViewInput1.cursorColor =\n            Color.parseColor(ThemeManager.getValue(\"TapOtpView.OtpController.activeBottomColor\"))\n        otpViewHolder.otpView.otpViewInput1.setLineColorInactive(\n            Color.parseColor(\n                ThemeManager.getValue(\n                    \"TapOtpView.OtpController.bottomLineColor\"\n                )\n            )\n        )\n        otpViewHolder.otpView.otpViewInput1.setLineColorActive(\n            Color.parseColor(\n                ThemeManager.getValue(\n                    \"TapOtpView.OtpController.activeBottomColor\"\n                )\n            )\n        )\n        otpViewHolder.otpView.otpViewInput1.isCursorVisible = true\n        goPayViewsHolder = GoPayViewsHolder(context, this, otpViewHolder)\n        asynchronousPaymentViewHolder = AsynchronousPaymentViewHolder(context, this)\n        // nfcViewHolder = NFCViewHolder(context as Activity, context, this, fragmentManager)\n        logicForLoyaltyProgram()\n    }\n\n    private fun initSwitchAction() {\n        saveCardSwitchHolder?.view?.mainSwitch?.mainSwitch?.visibility = View.GONE\n        //By Default switchGoPayCheckout will be hidden , will appear only when goPayLoggedin\n        saveCardSwitchHolder?.view?.cardSwitch?.switchGoPayCheckout?.isChecked = false\n        saveCardSwitchHolder?.view?.cardSwitch?.switchGoPayCheckout?.visibility = View.GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.saveGoPay?.visibility = View.GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.alertGoPaySignUp?.visibility = View.GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.switchSeparator?.visibility = View.GONE\n        // saveCardSwitchHolder?.view?.mainSwitch?.mainSwitch?.visibility = View.VISIBLE\n        //   saveCardSwitchHolder?.view?.mainSwitch?.mainSwitchLinear?.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"TapSwitchView.main.backgroundColor\")))\n    }\n\n    private fun initAmountAction() {\n        amountViewHolder.setOnItemsClickListener()\n        amountViewHolder.view.amount_section.mainKDAmountValue.visibility = View.GONE\n    }\n\n\n    override fun displayStartupLayout(enabledSections: ArrayList<SectionType>) {\n        //Todo based on api response logic for switch case\n        when (PaymentDataSource.getTransactionMode()) {\n\n            TransactionMode.TOKENIZE_CARD -> {\n                addViews(\n                    businessViewHolder,\n                    paymentInlineViewHolder,\n                    saveCardSwitchHolder\n                )\n\n            }\n            TransactionMode.SAVE_CARD -> {\n                addViews(\n                    businessViewHolder,\n                    paymentInlineViewHolder,\n                    saveCardSwitchHolder\n                )\n            }\n            else -> {\n\n\n                if (PaymentDataSource.getPaymentDataType() == \"WEB\") {\n                    addViews(\n                        businessViewHolder,\n                        amountViewHolder,\n                        cardViewHolder,\n                        saveCardSwitchHolder\n                    )\n                    cardViewHolder.cardInfoHeaderText?.visibility = View.GONE\n                } else  if (PaymentDataSource.getPaymentDataType() == \"CARD\") {\n                    addViews(\n                        businessViewHolder,\n                        paymentInlineViewHolder,saveCardSwitchHolder\n                    )\n                    cardViewHolder.cardInfoHeaderText.visibility = View.VISIBLE\n                }else\n                //Checkimg to be removed once loyalty enabled form api level onluy else will be there\n                    if (SDKSession.enableLoyalty == true) {\n                        addViews(\n                            businessViewHolder,\n                            amountViewHolder,\n                            cardViewHolder,\n                            paymentInlineViewHolder,\n                            loyaltyViewHolder,\n                            saveCardSwitchHolder\n                        )\n                    } else {\n                        addViews(\n                            businessViewHolder,\n                            amountViewHolder,\n                            cardViewHolder,\n                            paymentInlineViewHolder,\n                            saveCardSwitchHolder\n                        )\n                    }\n\n\n            }\n        }\n\n        saveCardSwitchHolder?.view?.mainSwitch?.mainSwitchLinear?.setBackgroundColor(\n            Color.parseColor(\n                ThemeManager.getValue(\n                    \"TapSwitchView.main.backgroundColor\"\n                )\n            )\n        )\n        inLineCardLayout.visibility = View.GONE\n        amountViewHolder.readyToScanVisibility(false)\n        saveCardSwitchHolder?.view?.cardviewSwitch?.cardElevation = 0f\n        SDKSession.activity?.let {\n            CustomUtils.getDeviceDisplayMetrics(\n                it\n            )\n        }?.let { saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setDisplayMetrics(it) }\n\n\n\n    }\n\n    fun setBottomSheetLayout(bottomSheetLayout: FrameLayout) {\n        this.bottomSheetLayout = bottomSheetLayout\n        bottomSheetLayout.clipToOutline = true\n        bottomSheetLayout.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"horizontalList.backgroundColor\")))\n        // bottomSheetLayout.setBackgroundColor(Color.RED)\n        bottomSheetLayout.let { it1 ->\n            setTopBorders(\n                it1,\n                40f,// corner raduis\n                0.0f,\n                Color.parseColor(ThemeManager.getValue(\"horizontalList.backgroundColor\")),// stroke color\n                Color.parseColor(ThemeManager.getValue(\"horizontalList.backgroundColor\")),// tint color\n                Color.parseColor(ThemeManager.getValue(\"horizontalList.backgroundColor\"))\n            )\n\n\n        }\n    }\n\n    override fun displayGoPayLogin() {\n        setSlideAnimation()\n        saveCardSwitchHolder?.let {\n            removeViews(\n                businessViewHolder, amountViewHolder,\n                cardViewHolder, paymentInlineViewHolder,\n                it, otpViewHolder,\n                goPayViewsHolder\n            )\n        }\n\n        addViews(businessViewHolder, amountViewHolder, goPayViewsHolder)\n        if (goPayViewsHolder.goPayopened) {\n            goPayViewsHolder.goPayLoginInput.inputType = GoPayLoginMethod.PHONE\n            goPayViewsHolder.goPayLoginInput.visibility = View.VISIBLE\n            saveCardSwitchHolder?.view?.cardSwitch?.switchGoPayCheckout?.visibility = View.VISIBLE\n        }\n        //TODO goPayAdapter.updateAdapterData(goPayCardList.value as List<GoPaySavedCards>)\n        amountViewHolder.changeGroupAction(false)\n        goPayViewsHolder.goPayopened = true\n    }\n\n    private fun setSlideAnimation() {\n        if (this::bottomSheetLayout.isInitialized) {\n            // AnimationUtils.loadAnimation(bottomSheetLayout.context,R.anim.slide_down)\n            // AnimationEngine.applyTransition(bottomSheetLayout, AnimationEngine.Type.SLIDE, 1200)\n\n        /*    val fadeIn = AlphaAnimation(0f, 1f)\n            fadeIn.interpolator = DecelerateInterpolator() //add this\n            fadeIn.duration = 1000\n\n            val fadeOut = AlphaAnimation(1f, 0f)\n            fadeOut.interpolator = AccelerateInterpolator() //and this\n            fadeOut.startOffset = 1000\n            fadeOut.duration = 1000\n\n            val animation = AnimationSet(false) //change to false\n            animation.addAnimation(fadeIn)\n       //     animation.addAnimation(fadeOut)\n            this.bottomSheetLayout.animation = animation*/\n        }\n    }\n\n    override fun displayGoPay() {\n        setSlideAnimation()\n        saveCardSwitchHolder?.let {\n            removeViews(\n                businessViewHolder,\n                amountViewHolder,\n                goPayViewsHolder,\n                cardViewHolder,\n                paymentInlineViewHolder,\n                it,\n                otpViewHolder\n            )\n        }\n\n        saveCardSwitchHolder?.let {\n            addViews(\n                businessViewHolder,\n                amountViewHolder,\n                goPaySavedCardHolder,\n                cardViewHolder,\n                paymentInlineViewHolder,\n                it\n            )\n        }\n\n        cardViewHolder.view.mainChipgroup.groupAction.visibility = View.INVISIBLE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = View.VISIBLE\n        saveCardSwitchHolder?.goPayisLoggedin = true\n        adapter.goPayOpenedfromMain(true)\n        adapter.removeItems()\n    }\n\n    override fun controlCurrency(display: Boolean) {\n        if (display) caseDisplayControlCurrency()\n        else caseNotDisplayControlCurrency()\n\n        displayItemsOpen = !display\n        amountViewHolder.changeGroupAction(!display)\n        // if (this::currentAmount.isInitialized)\n        if (this::selectedAmount.isInitialized && this::selectedCurrency.isInitialized) {\n            if (selectedAmount == currentAmount && selectedCurrency == currentCurrency) {\n                amountViewHolder.view.amount_section.mainKDAmountValue.visibility = View.GONE\n\n            } else {\n                amountViewHolder.updateSelectedCurrency(\n                    displayItemsOpen,\n                    selectedAmount, selectedCurrency,\n                    currentAmount, currentCurrency, currentCurrencySymbol\n                )\n\n            }\n        }\n        if (otpViewHolder.otpView.isVisible) {\n            removeViews(otpViewHolder)\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.RESET)\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isClickable = true\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.stateListAnimator = null\n            val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n                false,\n                \"en\",\n                if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                    payString+\" \"+currentCurrencySymbol+\" \"+selectedAmount\n                }else{ payString+\" \"+currentCurrencySymbol+\" \"+currentAmount},\n                Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n                Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n            )\n//            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isActivated = false\n        }\n        if (PaymentDataSource.getPaymentDataType() != null && PaymentDataSource.getPaymentDataType() == \"WEB\") {\n            removeViews(paymentInlineViewHolder)\n        }\n        removeInlineScanner()\n        removeNFCViewFragment()\n        setSlideAnimation()\n      /*  Handler().postDelayed({\n            translateViewToNewHeight(bottomSheetLayout.measuredHeight,false)\n        },400)*/\n    }\n\n\n    private fun caseDisplayControlCurrency() {\n      /*  val newHeight = (context as Activity).window?.decorView?.measuredHeight\n        val viewGroupLayoutParams = bottomSheetLayout.layoutParams\n        viewGroupLayoutParams.height = newHeight ?: 0\n        bottomSheetLayout.layoutParams = viewGroupLayoutParams\n*/\n        val originalHeight :Int = sdkLayout.height\n\n        removeViews(\n                //  businessViewHolder,\n                // amountViewHolder,\n                cardViewHolder,\n                paymentInlineViewHolder,\n                )\n        addViews(\n            itemsViewHolder\n        )\n        //replaced original height with bottomSheetLayout height\n        Handler().postDelayed({\n            translateViewToNewHeight(bottomSheetLayout.measuredHeight,true)\n\n        },400)\n\n        // removeAllViews()\n\n\n\n\n        // checkoutFragment?.isFullscreen =true\n\n        /**\n         * will be replaced by itemList coming from the API**/\n        if (PaymentDataSource.getItems() != null) {\n            itemsViewHolder.view.itemRecylerView.adapter = itemAdapter\n            itemAdapter.updateAdapterData(itemList)\n        }\n        currencyAdapter.updateAdapterData(allCurrencies.value as List<SupportedCurrencies>)\n\n        frameLayout.visibility = View.VISIBLE\n        itemsViewHolder.itemsdisplayed = true\n\n        removeViews(\n            saveCardSwitchHolder,\n            goPayViewsHolder,\n            otpViewHolder,\n           // itemsViewHolder\n        )\n        //Hide keyboard of any open\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n            CustomUtils.hideKeyboardFrom(paymentInlineViewHolder.view.context, paymentInlineViewHolder.view)\n        }\n    }\n\n    private fun caseNotDisplayControlCurrency() {\n        if (goPayViewsHolder.goPayopened || itemsViewHolder.itemsdisplayed) setActionGoPayOpenedItemsDisplayed()\n        else setActionNotGoPayOpenedNotItemsDisplayed()\n        Handler().postDelayed({\n            translateViewToNewHeight(bottomSheetLayout.measuredHeight,false)\n        },400)\n\n    }\n\n    private fun translateViewToNewHeight(originalHeight: Int, expandHeightBool :Boolean) {\n        val sdkLayoutHeight = sdkLayout.height\n        val bottomSheetLayoutHeight = bottomSheetLayout.height\n        println(\"sdkLayoutHeight>>\"+sdkLayoutHeight)\n        println(\"originalHeight>>\"+originalHeight)\n        val resizeAnimation = ResizeAnimation(\n            bottomSheetLayout,\n            sdkLayoutHeight ,\n            originalHeight , expandHeightBool\n        )\n        resizeAnimation.duration = 350\n        bottomSheetLayout.startAnimation(resizeAnimation)\n\n\n    }\n\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun setActionGoPayOpenedItemsDisplayed() {\n        removeViews(\n\n            cardViewHolder,\n            paymentInlineViewHolder,\n            saveCardSwitchHolder,\n            goPayViewsHolder,\n\n            otpViewHolder,\n            itemsViewHolder\n        )\n        if(:: webViewHolder.isInitialized){\n            removeViews( webViewHolder)\n        }\n        addViews(\n            cardViewHolder,\n            paymentInlineViewHolder,\n            saveCardSwitchHolder\n        )\n        paymentInlineViewHolder.resetPaymentCardView()\n        //itemsViewHolder.resetView()\n        //I comment   itemsViewHolder.setItemsRecylerView()\n        //  itemsViewHolder?.view?.itemRecylerView?.adapter = itemAdapter\n        frameLayout.visibility = View.GONE\n    }\n\n    private fun setActionNotGoPayOpenedNotItemsDisplayed() {\n        val originalHeight:Int = sdkLayout.height\n        saveCardSwitchHolder?.let {\n            removeViews(\n                cardViewHolder,\n                paymentInlineViewHolder,\n                it,\n                itemsViewHolder\n            )\n        }\n\n        if(::webViewHolder.isInitialized) removeViews(webViewHolder)\n\n        saveCardSwitchHolder?.let {\n            addViews(\n\n                cardViewHolder,\n                paymentInlineViewHolder,\n                it\n            )\n        }\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.IDLE)\n        // itemsViewHolder.resetView()\n        //  itemsViewHolder.setItemsRecylerView()\n        //   itemsViewHolder.setCurrencyRecylerView()\n        itemsViewHolder.view.mainCurrencyChip.chipsRecycler.adapter = currencyAdapter\n        //  itemsViewHolder.view.itemRecylerView.adapter =itemAdapter\n        frameLayout.visibility = View.GONE\n      /*  Handler().postDelayed({\n            translateViewToNewHeight(bottomSheetLayout.measuredHeight,false)\n        },400)*/\n\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    @SuppressLint(\"SetTextI18n\")\n    override fun displayOTPView(\n        phoneNumber: PhoneNumber?,\n        otpType: String,\n        chargeResponse: Charge?\n    ) {\n        setSlideAnimation()\n\n       // amountViewHolder.changeGroupAction(false)\n        amountViewHolder.view.amount_section.itemCountButton.text = LocalizationManager.getValue(\n            \"close\",\n            \"Common\"\n        )\n\n\n        displayOtpIsOpen = true\n        displayItemsOpen = false\n        when (otpType) {\n            PaymentTypeEnum.GOPAY.name -> {\n                displayOtpGoPay(phoneNumber)\n            }\n            PaymentTypeEnum.telecom.name -> {\n                displayOtpTelecoms(phoneNumber)\n            }\n            PaymentTypeEnum.SAVEDCARD.name -> {\n                displayOtpCharge(phoneNumber, chargeResponse)\n            }\n            else -> {\n                displayOtpCharge(phoneNumber, chargeResponse)\n            }\n        }\n    }\n\n    private fun displayOtpGoPay(phoneNumber: PhoneNumber?) {\n        // otpTypeString = PaymentTypeEnum.GOPAY //temporray\n        removeViews(\n            cardViewHolder,\n            paymentInlineViewHolder, saveCardSwitchHolder, amountViewHolder\n        )\n        addViews(amountViewHolder, otpViewHolder)\n\n        otpViewHolder.otpView.visibility = View.VISIBLE\n        setOtpPhoneNumber(phoneNumber)\n        otpViewHolder.otpView.changePhone.setOnClickListener {\n            goPayViewsHolder.onChangePhoneClicked()\n        }\n    }\n\n    @SuppressLint(\"SetTextI18n\")\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun displayOtpCharge(phoneNumber: PhoneNumber?, chargeResponse: Charge?) {\n        // otpTypeString = PaymentTypeEnum.GOPAY //temporray\n        println(\"mmmmmmmm\" + amountViewHolder?.originalAmount)\n        /*if(::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n            amountViewHolder.updateSelectedCurrency(\n                false,\n                selectedAmount,\n                selectedCurrency,\n                currentAmount,\n                currentCurrency\n            )\n            println(\"selectedAmount>>>>\" + selectedAmount)\n        }*/\n        removeViews(\n            cardViewHolder,\n            paymentInlineViewHolder, saveCardSwitchHolder, otpViewHolder\n        )\n        // bottomSheetDialog.dismissWithAnimation\n        //start counter on open otpview\n        otpViewHolder?.otpView?.startCounter()\n        addViews( otpViewHolder)\n        otpViewHolder.otpView.visibility = View.VISIBLE\n        //Added to hide the Items-Amount button when OTP is opened\n        amountViewHolder.view.amount_section?.itemAmountLayout?.visibility = View.GONE\n        CustomUtils.showKeyboard(context)\n        setOtpPhoneNumber(phoneNumber)\n        otpViewHolder.otpView.changePhone.visibility = View.INVISIBLE\n        otpViewHolder.otpView.timerText.setOnClickListener {\n            resendOTPCode(chargeResponse)\n            otpViewHolder.otpView.restartTimer()\n        }\n        amountViewHolder.view.amount_section.mainKDAmountValue.visibility = View.GONE\n    }\n\n    private fun setOtpPhoneNumber(phoneNumber: PhoneNumber?) {\n\n        var replaced = \"\"\n        var countryCodeReplaced = \"\"\n        countryCodeReplaced = phoneNumber?.countryCode?.replace(\"0\", \"\").toString()\n        if (phoneNumber?.number?.length!! > 7)\n            replaced = (phoneNumber.number.toString()).replaceRange(1, 6, \"â¢â¢â¢â¢\")\n        otpViewHolder.otpView.mobileNumberText.text = \"+$countryCodeReplaced $replaced\"\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun resendOTPCode(chargeResponse: Charge?) {\n        if (chargeResponse != null) {\n            if (chargeResponse is Authorize) resendAuthorizeOTPCode(chargeResponse as Authorize?)\n            else resendChargeOTPCode(chargeResponse as Charge?)\n        }\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun resendAuthorizeOTPCode(authorize: Authorize?) {\n        cardViewModel.requestAuthenticateForAuthorizeTransaction(this, authorize)\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun resendChargeOTPCode(charge: Charge?) {\n        if (charge != null) {\n            cardViewModel.requestAuthenticateForChargeTransaction(this, charge)\n        }\n    }\n\n    private fun displayOtpTelecoms(phoneNumber: PhoneNumber?) {\n        otpTypeString = PaymentTypeEnum.telecom\n        removeViews(\n            businessViewHolder,\n            amountViewHolder,\n            paymentInlineViewHolder,\n            cardViewHolder,\n            saveCardSwitchHolder,\n            otpViewHolder\n        )\n        addViews(\n            businessViewHolder,\n            amountViewHolder,\n            cardViewHolder,\n            paymentInlineViewHolder,\n            saveCardSwitchHolder,\n            otpViewHolder\n        )\n        //Added check change listener to handle showing of extra save options\n        saveCardSwitchHolder?.view?.mainSwitch?.switchSaveMobile?.visibility = View.GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = View.GONE\n        saveCardSwitchHolder?.view?.mainSwitch?.switchSaveMobile?.setOnCheckedChangeListener { buttonView, isChecked ->\n            if (isChecked) saveCardSwitchHolder?.view?.cardSwitch?.switchesLayout?.visibility =\n                View.GONE\n        }\n        saveCardSwitchHolder?.setSwitchToggleData(PaymentType.telecom)\n        otpViewHolder.setMobileOtpView()\n        var replaced = \"\"\n        var countryCodeReplaced = \"\"\n        if (phoneNumber?.number?.length!! > 7)\n            replaced = (phoneNumber.number.toString()).replaceRange(1, 6, \"....\")\n        countryCodeReplaced =\n            goPayViewsHolder.goPayLoginInput.countryCodePicker.selectedCountryCode.replace(\n                \"+\",\n                \" \"\n            )\n        otpViewHolder.otpView.mobileNumberTextNormalPay.text = \"+$countryCodeReplaced$replaced\"\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.P)\n    override fun displayRedirect(url: String, authenticate: Charge?) {\n        this.redirectURL = url\n\n        println(\"redirectURL before display>>\"+url)\n        if (::redirectURL.isInitialized && ::fragmentManager.isInitialized) {\n            if (otpViewHolder.otpView.isVisible) {\n                removeViews(\n                    // businessViewHolder,\n                    cardViewHolder,\n                    paymentInlineViewHolder,\n                    otpViewHolder\n                )\n            }\n           // setSlideAnimation()\n            if(PaymentDataSource?.getWebViewType()!=null && PaymentDataSource.getWebViewType() ==WebViewType.REDIRECT){\n                businessViewHolder.view.headerView.constraint.visibility = View.GONE\n                businessViewHolder.view.topSeparatorLinear.visibility = View.GONE\n                //Stopped showing closetext as requested\n               // checkoutFragment.closeText.visibility = View.VISIBLE\n                removeViews(\n                    //businessViewHolder,\n                    amountViewHolder,\n                    cardViewHolder,\n                   // saveCardSwitchHolder,\n                    paymentInlineViewHolder,\n                    otpViewHolder,\n                    goPaySavedCardHolder,\n                    goPayViewsHolder\n                )\n\n                saveCardSwitchHolder?.view?.mainSwitch?.visibility = View.GONE\n                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility= View.GONE\n\n                saveCardSwitchHolder?.view?.cardSwitch?.tapLogoImage?.visibility = View.GONE\n\n                Handler(Looper.getMainLooper()).postDelayed({\n\n                    val fragment = WebFragment.newInstance(\n                        redirectURL,\n                        this, cardViewModel, authenticate,this\n                    )\n\n                    fragmentManager.beginTransaction().replace(R.id.webFrameLayout, fragment,\"webFragment\").addToBackStack(\"webFragment\")\n                        .commit()\n                    //  checkoutFragment.closeText.visibility = View.VISIBLE\n                    webFrameLayout.visibility = View.VISIBLE\n                    println(\"fragment hh\"+Resources.getSystem().getDisplayMetrics().heightPixels)\n                    translateHeightRedirect(sdkLayout)\n\n                }, 500)\n                Handler(Looper.getMainLooper()).postDelayed({\n\n                   // saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = View.INVISIBLE\n                 // removeViews(saveCardSwitchHolder)\n\n                }, 700)\n\n\n            }else   if(PaymentDataSource?.getWebViewType()!=null && PaymentDataSource.getWebViewType() ==WebViewType.THREE_DS_WEBVIEW){\n\n                  webViewHolder = WebViewHolder(context, fragmentManager,url,this,cardViewModel,authenticate,this)\n                removeViews(\n                    //  businessViewHolder,\n                    //   amountViewHolder,\n                    cardViewHolder,\n                  //  saveCardSwitchHolder,\n                    paymentInlineViewHolder,\n                    otpViewHolder,\n                    goPaySavedCardHolder,\n                    goPayViewsHolder\n                )\n\n                //Added to hide the Items-Amount button when 3ds is opened within\n                amountViewHolder?.view?.amount_section?.itemAmountLayout?.visibility = View.GONE\n                addViews(webViewHolder)\n                saveCardSwitchHolder?.view?.mainSwitch?.visibility = View.GONE\n                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility= View.GONE\n\n                saveCardSwitchHolder?.view?.cardSwitch?.tapLogoImage?.visibility = View.GONE\n                 Handler(Looper.getMainLooper()).postDelayed({\n                   //  webFrameLayout.visibility = View.VISIBLE\n\n           }, 1800)\n\n                checkoutFragment?.closeText?.visibility= View.GONE\n                //Stopped showing cancel button and poweredby for 3ds\n             /*    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n              true,\n              LocalizationManager.getLocale(context).toString(),LocalizationManager.getValue(\"deleteSavedCardButtonCancel\", \"SavedCardTitle\"),\n                     Color.parseColor(ThemeManager.getValue(\"actionButton.Cancel.backgroundColor\")),\n                     Color.parseColor(ThemeManager.getValue(\"actionButton.Cancel.titleLabelColor\")))\n\n                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.let {\n                    setBorderedView(\n                        it,\n                        100.0f,\n                        2.0f,\n                        Color.parseColor(ThemeManager.getValue(\"actionButton.Cancel.borderColor\")),\n                        Color.parseColor(ThemeManager.getValue(\"actionButton.Cancel.backgroundColor\")),\n                        Color.parseColor(ThemeManager.getValue(\"actionButton.Cancel.backgroundColor\"))\n                    )\n                }\n          saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.RESET)\n\n          saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setOnClickListener {\n              this.dismissBottomSheet()\n\n          }*/\n            }\n\n\n\n\n        }\n\n       // removeViews(amountViewHolder, businessViewHolder)\n        // tabAnimatedActionButtonViewHolder?.view?.actionButton?.visibility = View.INVISIBLE\n    }\n\n    private fun translateHeightRedirect(sdkLayout: LinearLayout){\n        val resizeAnimation = ResizeAnimation(\n            bottomSheetLayout,\n            Resources.getSystem().getDisplayMetrics().heightPixels,\n            sdkLayout.height , true\n        )\n        resizeAnimation.duration = 350\n        bottomSheetLayout.startAnimation(resizeAnimation)\n    }\n\n    override fun displaySaveCardOptions() {\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun setBinLookupData(\n        binLookupResponse: BINLookupResponse,\n        context: Context,\n        cardViewModel: CardViewModel\n    ) {\n        paymentInlineViewHolder = PaymentInlineViewHolder(\n            context,\n            this,\n            this,\n            this,\n            saveCardSwitchHolder,\n            this,\n            cardViewModel,\n            checkoutFragment, loyaltyViewHolder\n        )\n        //  paymentInlineViewHolder.tabLayout.setUnselectedAlphaLevel(1.0f)\n        if (::paymentInlineViewHolder.isInitialized)\n            paymentInlineViewHolder.setCurrentBinData(binLookupResponse)\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun getDatasfromAPIs(\n        merchantData: MerchantData?,\n        paymentOptionsResponse: PaymentOptionsResponse?\n    ) {\n          println(\"if(::businessViewHolder.isInitialized getpay\" + ::businessViewHolder.isInitialized)\n         println(\"merchantData name>>\" + merchantData?.name)\n          println(\"merchantData logo>>\" + merchantData?.logo)\n        if (paymentOptionsResponse != null) {\n            this.paymentOptionsResponse = paymentOptionsResponse\n        }\n        if (::businessViewHolder.isInitialized && PaymentDataSource.getTransactionMode() != TransactionMode.TOKENIZE_CARD) {\n            businessViewHolder.setDataFromAPI(\n                merchantData?.logo,\n                merchantData?.name\n            )\n           // TODO check\n                    if (merchantData?.verifiedApplication == true) {\n\n                    }\n        }\n        // println(\"PaymentOptionsResponse on get$paymentOptionsResponse\")\n        allCurrencies.value = paymentOptionsResponse?.supportedCurrencies\n        savedCardList.value = paymentOptionsResponse?.cards\n        currencyAdapter = CurrencyTypeAdapter(this)\n\n      //  println(\"savedCardList on get\" + savedCardList.value)\n      //  println(\"paymentOptionsResponse?.supportedCurrencie on get\" + paymentOptionsResponse?.supportedCurrencies)\n        if (paymentOptionsResponse?.supportedCurrencies != null && ::amountViewHolder.isInitialized) {\n            currentCurrency = paymentOptionsResponse.currency\n            for (i in paymentOptionsResponse.supportedCurrencies.indices) {\n\n                if (paymentOptionsResponse.supportedCurrencies[i].currency == currentCurrency) {\n                    println(\"current amount value>>\" + paymentOptionsResponse.supportedCurrencies[i].amount)\n                    //println(\"current currency value>>\" + paymentOptionsResponse.supportedCurrencies[i].symbol)\n                    currentAmount =\n                        CurrencyFormatter.currencyFormat(paymentOptionsResponse.supportedCurrencies[i].amount.toString())\n                    currentCurrency =\n                        paymentOptionsResponse.supportedCurrencies[i].symbol.toString()\n                  //  println(\"currentCurrency currency value>>\" + currentCurrency)\n\n                   /* if (currentCurrency.length == 2) {\n                        currentCurrency =\n                            paymentOptionsResponse.supportedCurrencies[i].currency.toString()\n                    } else {\n                        currentCurrency =\n                            paymentOptionsResponse.supportedCurrencies[i].symbol.toString()\n                        currentCurrencySymbol =\n                            paymentOptionsResponse.supportedCurrencies[i].symbol.toString()\n                    }*/\n                    currentCurrency =\n                        paymentOptionsResponse.supportedCurrencies[i].currency.toString()\n                    currentCurrencySymbol =\n                        paymentOptionsResponse.supportedCurrencies[i].symbol.toString()\n                    currencyAdapter.updateSelectedPosition(i)\n                }\n\n            }\n            /**\n           *Note replacing all currency to be currency symbol as per ali 17jan23\n            * **/\n            amountViewHolder.setDataFromAPI(\n                currentAmount,\n                currentCurrencySymbol,\n                PaymentDataSource.getItems()?.size.toString()\n            )\n        }\n        /**\n         * <<<<<<< This items list is going to come from API response later now for loading the view we are taking the List from\n         * PaymentDatasource.getItems()  >>>>>>>> */\n        if (PaymentDataSource.getItems() != null) {\n            itemList = PaymentDataSource.getItems()!!\n            //  unModifiedItemList = itemList\n            unModifiedItemList = itemList.map { it.copy() }\n        }\n\n\n\n\n        if (::itemsViewHolder.isInitialized) {\n            paymentOptionsResponse?.supportedCurrencies?.let {\n                itemsViewHolder.setDataFromAPI(\n                    it,\n                    PaymentDataSource.getItems()\n                )\n            }\n            //  itemsViewHolder.setItemsRecylerView()\n            //  itemsViewHolder.setCurrencyRecylerView()\n\n\n        }\n\n        merchantData?.name?.let {\n            saveCardSwitchHolder?.setDataFromAPI(\n                it,\n                paymentInlineViewHolder.selectedType\n            )\n        }\n        paymentOptionsList.value = paymentOptionsResponse?.paymentOptions\n        //println(\"paymentOptions value\" + paymentOptionsResponse?.paymentOptions)\n        if (::context.isInitialized)\n            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.N) {\n                val divider = DividerItemDecoration(\n                    context,\n                    DividerItemDecoration.HORIZONTAL\n                )\n                divider.setDrawable(ShapeDrawable().apply {\n                    intrinsicWidth = 10\n                    paint.color = Color.TRANSPARENT\n                }) // note: currently (support version 28.0.0), we can not use tranparent color here, if we use transparent, we still see a small divider line. So if we want to display transparent space, we can set color = background color or we can create a custom ItemDecoration instead of DividerItemDecoration.\n                cardViewHolder.view.mainChipgroup.chipsRecycler.addItemDecoration(divider)\n                initAdaptersAction()\n\n            }\n\n        //PaymentDataSource.setSelectedCurrency(currentCurrency, null)\n        PaymentDataSource.setSelectedCurrency(currentCurrency, currentCurrencySymbol)\n        PaymentDataSource.setSelectedAmount(currentAmount.toBigDecimal())\n\n        if (::loyaltyViewHolder.isInitialized) {\n            val objectMapper = ObjectMapper()\n            val tapLoyaltyModel: TapLoyaltyModel =\n                objectMapper.readValue(\n                    context.resources.openRawResource(R.raw.loyalty),\n                    TapLoyaltyModel::class.java\n                )\n            supportedLoyalCards.value =\n                tapLoyaltyModel.supportedCurrencies as List<LoyaltySupportedCurrency>\n            //println(\"tapLoyaltyModel>>>\" + tapLoyaltyModel.bankLogo)\n            tapLoyaltyModel.bankLogo?.let {\n                tapLoyaltyModel.bankName?.let { it1 ->\n                    loyaltyViewHolder.setDataFromAPI(\n                        it,\n                        it1,\n                        tapLoyaltyModel,\n                        supportedLoyalCards.value as List<LoyaltySupportedCurrency>\n                    )\n                }\n            }\n\n        }\n        val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n            false,\n            LocalizationManager.getLocale(context).toString(),\n            if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                payString+\" \"+currentCurrencySymbol+\" \"+selectedAmount\n            }else{ payString+\" \"+currentCurrencySymbol+\" \"+currentAmount},\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n        )\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun initAdaptersAction() {\n        adapter = CardTypeAdapterUIKIT(this)\n        goPayAdapter = GoPayCardAdapterUIKIT(this)\n        itemAdapter = ItemAdapter()\n        // adapter?.possiblyShowGooglePayButton()\n        // val arrayList = ArrayList<String>()//Creating an empty arraylist\n        //  arrayList.add(\"Google Pay\")//Adding object in arraylist\n\n\n        //adapter.updateAdapterGooglePay(arrayList)\n        //  goPayAdapter.updateAdapterData(goPayCardList.value as List<GoPaySavedCards>)\n        if (allCurrencies.value?.isNotEmpty() == true) {\n            currencyAdapter.updateAdapterData(allCurrencies.value as List<SupportedCurrencies>)\n        }\n        if (savedCardList.value?.isNotEmpty() == true) {\n            println(\"savedCardList.value\" + PaymentDataSource.getCardType())\n            if (PaymentDataSource.getCardType() != null && PaymentDataSource.getCardType() != CardType.ALL) {\n                filterSavedCardTypes(savedCardList.value as List<SavedCard>)\n            } else adapter.updateAdapterDataSavedCard(savedCardList.value as List<SavedCard>)\n        } else {\n            cardViewHolder.view.mainChipgroup.groupAction?.visibility = View.GONE\n        }\n        //  itemsViewHolder.view.itemRecylerView.adapter = itemAdapter\n        itemsViewHolder.view.mainCurrencyChip.chipsRecycler.adapter = currencyAdapter\n        if (PaymentDataSource.getItems() != null) {\n            PaymentDataSource.getItems()?.let { itemAdapter.updateAdapterData(it) }\n        }\n        cardViewHolder.view.mainChipgroup.chipsRecycler.adapter = adapter\n        // goPaySavedCardHolder.view.goPayLoginView.chipsRecycler.adapter = goPayAdapter\n        cardViewHolder.view.mainChipgroup.groupAction?.visibility = View.VISIBLE\n        cardViewHolder.view.mainChipgroup.groupAction?.setOnClickListener {\n            setMainChipGroupActionListener()\n            paymentInlineViewHolder.tapCardInputView?.clear()\n            paymentInlineViewHolder.onFocusChange(\"\")\n            paymentInlineViewHolder.tapCardInputView.setSingleCardInput(\n                CardBrandSingle.Unknown, null\n            )\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n        }\n\n        // filterCardTypes(paymentOptionsList.value as ArrayList<PaymentOption>)\n        paymentOptionsWorker =\n            java.util.ArrayList<PaymentOption>(paymentOptionsResponse.paymentOptions)\n\n        // filterViewModels(PaymentDataSource.getCurrency()?.isoCode.toString())\n        filterViewModels(currentCurrency)\n        // filterModels(PaymentDataSource.getCurrency()?.isoCode.toString())\n        //  filterCardTypes(PaymentDataSource.getCurrency()?.isoCode.toString(),paymentOptionsWorker)\n\n        //    goPaySavedCardHolder.view.goPayLoginView.groupAction.setOnClickListener {\n        //       setGoPayLoginViewGroupActionListener()\n        //   }\n        //paymentInlineViewHolder.tabLayout.setOnTouchListener { v, _ ->\n        touchHandlingForCardView()\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    @SuppressLint(\"ClickableViewAccessibility\")\n    private fun touchHandlingForCardView() {\n        saveCardSwitchHolder?.view?.setOnTouchListener { v, _ ->\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n            paymentInlineViewHolder.resetView = true\n            paymentInlineViewHolder.resetTouchView()\n            //  paymentInlineViewHolder.onFocusChange(\"\")\n\n            true\n        }\n        cardViewHolder.view.cardLinearLayout.setOnTouchListener { v, _ ->\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n            paymentInlineViewHolder.resetView = true\n            paymentInlineViewHolder.resetTouchView()\n\n            true\n        }\n        amountViewHolder.view.setOnTouchListener { v, _ ->\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n            paymentInlineViewHolder.resetView = true\n            paymentInlineViewHolder.resetTouchView()\n\n            true\n        }\n        paymentInlineViewHolder.tapAlertView?.setOnTouchListener { v, _ ->\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n            paymentInlineViewHolder.resetView = true\n            paymentInlineViewHolder.resetTouchView()\n\n            true\n        }\n        paymentInlineViewHolder.tabLayout.setOnTouchListener { v, _ ->\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n            paymentInlineViewHolder.resetView = true\n            paymentInlineViewHolder.resetTouchView()\n\n            true\n        }\n        businessViewHolder.view.setOnTouchListener { v, _ ->\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n            paymentInlineViewHolder.resetView = true\n            paymentInlineViewHolder.resetTouchView()\n\n            true\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n     fun filterCardTypes(list: ArrayList<PaymentOption>) {\n        var filteredCardList: List<PaymentOption> =\n            list.filter { items -> items.paymentType == PaymentType.CARD }\n\n       // println(\"filteredCardList value \" + filteredCardList.size)\n        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.N) {\n            paymentInlineViewHolder.setDataFromAPI(filteredCardList)\n        }\n    }\n\n    private fun filterSavedCardTypes(savedCardList: List<SavedCard>) {\n        val filteredSavedCardList: List<SavedCard> =\n            savedCardList.filter { items ->\n                items.funding == PaymentDataSource?.getCardType().toString()\n            }\n\n        adapter.updateAdapterDataSavedCard(filteredSavedCardList)\n    }\n\n\n    private fun setMainChipGroupActionListener() {\n        if (cardViewHolder.view.mainChipgroup.groupAction?.text == LocalizationManager.getValue(\n                \"close\",\n                \"Common\"\n            )\n        ) {\n            isShaking.value = false\n            adapter.updateShaking(isShaking.value ?: false)\n            goPayAdapter.updateShaking(isShaking.value ?: false)\n            cardViewHolder.view.mainChipgroup.groupAction?.text =\n                LocalizationManager.getValue(\"edit\", \"Common\")\n        } else {\n            isShaking.value = true\n            adapter.updateShaking(isShaking.value ?: true)\n            goPayAdapter.updateShaking(isShaking.value ?: true)\n            goPayAdapter.updateShaking(false)\n            cardViewHolder.view.mainChipgroup.groupAction?.text =\n                LocalizationManager.getValue(\"close\", \"Common\")\n        }\n    }\n\n    private fun setGoPayLoginViewGroupActionListener() {\n        if (goPaySavedCardHolder.view.goPayLoginView.groupAction?.text == LocalizationManager.getValue(\n                \"close\",\n                \"Common\"\n            )\n        ) {\n            isShaking.value = false\n            adapter.updateShaking(isShaking.value ?: false)\n            goPayAdapter.updateShaking(isShaking.value ?: false)\n            goPaySavedCardHolder.view.goPayLoginView.groupAction?.text =\n                LocalizationManager.getValue(\"edit\", \"Common\")\n            goPayAdapter.updateSignOut(goPayCardList.value as List<GoPaySavedCards>, false)\n\n        } else {\n            isShaking.value = true\n            adapter.updateShaking(isShaking.value ?: true)\n            Log.d(\"isShaking.value\", isShaking.value.toString())\n            goPayAdapter.updateShaking(false)\n            goPaySavedCardHolder.view.goPayLoginView.groupAction?.text =\n                LocalizationManager.getValue(\"close\", \"Common\")\n            goPayAdapter.updateSignOut(goPayCardList.value as List<GoPaySavedCards>, true)\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    @SuppressLint(\"WrongConstant\")\n    override fun didDialogueExecute(response: String, cardTypeDialog: Boolean?) {\n       // println(\"response are$response\")\n        if (response == \"YES\") {\n            if (deleteCard) {\n                //saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n                cardViewModel.processEvent(\n                    CardViewEvent.DeleteSaveCardEvent,\n                    this,\n                    null,\n                    null,\n                    null,\n                    null,\n                    PaymentDataSource.getCustomer().identifier,\n                    cardId\n                )\n\n            } else {\n               // println(\"else block is calle are\")\n                removeViews(goPaySavedCardHolder)\n                //  adapter.updateAdapterDataSavedCard(savedCardList.value as List<SavedCard>)\n                goPayViewsHolder.goPayopened = false\n                adapter.goPayOpenedfromMain(true)\n                adapter.updateShaking(false)\n                cardViewHolder.view.mainChipgroup.groupAction.visibility = View.VISIBLE\n            }\n        } else if (response == \"NO\") {\n            adapter.updateShaking(false)\n            deleteCard = false\n\n        } else if (response == \"OK\") {\n            if (cardTypeDialog == true) {\n                paymentInlineViewHolder.tapCardInputView.clear()\n                paymentInlineViewHolder.tabLayout.resetBehaviour()\n                paymentInlineViewHolder.resetPaymentCardView()\n            } else {\n                bottomSheetDialog.dismissWithAnimation\n                bottomSheetDialog.dismiss()\n            }\n        }\n    }\n\n\n    override fun deleteSelectedCardListener(delSelectedCard: DeleteCardResponse) {\n        println(\"delSelectedCard value is\" + delSelectedCard.deleted)\n      //  println(\"selectedItemsDel value is\" +selectedItemsDel)\n        if (delSelectedCard.deleted) {\n            adapter.deleteSelectedCard(selectedItemsDel)\n            adapter.updateAdapterDataSavedCard(arrayListSavedCardSize)\n            adapter.updateShaking(false)\n            deleteCard = false\n            //saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.SUCCESS)\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun handleSuccessFailureResponseButton(\n        response: String,\n        authenticate: Authenticate?,\n        chargeResponse: Charge?,\n        tabAnimatedActionButton: TabAnimatedActionButton?,\n        contextSDK: Context?\n    ) {\n        SessionManager.setActiveSession(false)\n        println(\"response val>>\"+response)\n        println(\"tabAnimatedActionButton val>>\"+tabAnimatedActionButton)\n        println(\"save val>>\"+saveCardSwitchHolder)\n        /* if(chargeResponse?.status == null && response == \"tokenized\"){\n             //todo replaced authorized with chargeresponse\n             SDKSession.getListener()?.getStatusSDK(response,chargeResponse)\n         }else{\n             SDKSession.getListener()?.getStatusSDK(response,chargeResponse)\n         }*/\n\n        /*saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setDisplayMetrics(\n            CustomUtils.getDeviceDisplayMetrics(\n                contextSDK as Activity\n            )\n        )*/\n        saveCardSwitchHolder?.view?.mainSwitch?.visibility = View.INVISIBLE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = View.VISIBLE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setDisplayMetrics(\n            CustomUtils.getDeviceDisplayMetrics(\n                context as Activity\n            )\n        )\n      //  addViews(saveCardSwitchHolder)\n        /***\n         * This function is  working fine as expected in case when 3ds is false\n         * i.e.  sdkSession.isRequires3DSecure(false) as no loading of url occurs direct response\n         * from the API is available.\n         * WRONG OTP scenario also handled here as similar to old sdk show user error button and\n         * close the sdk.\n         * **/\n\n\n       // tabAnimatedActionButton?.clearAnimation()\n        if (::webFrameLayout.isInitialized) {\n            if (fragmentManager.findFragmentById(R.id.webFrameLayout) != null)\n                fragmentManager.beginTransaction()\n                    .hide(fragmentManager.findFragmentById(R.id.webFrameLayout)!!)\n                    .commitNow()\n            webFrameLayout.visibility = View.GONE\n            supportFragmentManager?.popBackStack()\n        }\n        if(::webViewHolder.isInitialized)\n            removeViews(webViewHolder)\n            //removeAllViews()\n        Handler().postDelayed({\n            if(::bottomSheetLayout.isInitialized)\n            translateViewToNewHeight(bottomSheetLayout.measuredHeight,false)\n        },300)\n\n        if (::otpViewHolder.isInitialized)\n            if (otpViewHolder.otpView.isVisible) {\n                removeViews(\n                    businessViewHolder,\n                    amountViewHolder,\n                    cardViewHolder,\n                    paymentInlineViewHolder,\n                    otpViewHolder\n                )\n            }\n        if (saveCardSwitchHolder != null) {\n           // removeAllViews()\n         //   addViews(saveCardSwitchHolder)\n             saveCardSwitchHolder?.view?.visibility = View.VISIBLE\n            saveCardSwitchHolder?.view?.mainSwitch?.visibility = View.INVISIBLE\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = View.VISIBLE\n        }\n\n        if(::checkoutFragment.isInitialized)\n          checkoutFragment.closeText.visibility =View.GONE\n        println(\"chargeResponse are>>>>\"+chargeResponse?.status)\n       // println(\"saveCardSwitchHolder are>>>>\"+saveCardSwitchHolder)\n        if(response.contains(\"failure\") && chargeResponse==null){\n\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(false,Color.MAGENTA)\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n                false,\n                \"en\",\n                null,\n                Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n                Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n            )\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.ERROR)\n        }\n        println(\"chargeResponse to handle\"+chargeResponse?.status)\n        when (chargeResponse?.status) {\n            ChargeStatus.CAPTURED, ChargeStatus.AUTHORIZED, ChargeStatus.VALID, ChargeStatus.IN_PROGRESS -> {\n                tabAnimatedActionButton?.changeButtonState(ActionButtonState.SUCCESS)\n                Handler().postDelayed({\n                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                    ActionButtonState.SUCCESS\n                )\n                }, 400)\n                tabAnimatedActionButton?.changeButtonState(ActionButtonState.SUCCESS)\n\n                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n                    true,\n                    \"en\",\"\",\n                    Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.paymentBackgroundColor\")),\n                    Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.titleLabelColor\"))\n                )\n\n            }\n            ChargeStatus.CANCELLED, ChargeStatus.TIMEDOUT, ChargeStatus.FAILED, ChargeStatus.DECLINED, ChargeStatus.UNKNOWN,\n            ChargeStatus.RESTRICTED, ChargeStatus.ABANDONED, ChargeStatus.VOID, ChargeStatus.INVALID -> {\n                println(\"CANCELLED 2>>>\"+saveCardSwitchHolder?.view?.cardSwitch?.payButton)\n                Handler().postDelayed({\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                        ActionButtonState.ERROR\n                    )\n                }, 400)\n\n                tabAnimatedActionButton?.changeButtonState(\n                    ActionButtonState.ERROR\n                )\n\n                 saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n                       false,\n                       \"en\",\n                       \"\",\n                       Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n                       Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n                   )\n\n            }\n            else -> {\n\n                if (response == \"tokenized\") {\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                        ActionButtonState.SUCCESS\n                    )\n                } else {\n                    println(\"is this called>>>\")\n                    removeAllViews()\n                    if(ThemeManager.currentTheme!=null&& chargeResponse!=null)\n                    tabAnimatedActionButton?.setInValidBackground(false, Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")))\nelse\n                    tabAnimatedActionButton?.changeButtonState(\n                        ActionButtonState.ERROR\n                    )\n\n                    if (::businessViewHolder.isInitialized && saveCardSwitchHolder != null) {\n                        addViews(businessViewHolder, saveCardSwitchHolder)\n                        businessViewHolder.view.headerView.constraint.visibility = View.GONE\n                        businessViewHolder.view.topSeparatorLinear.visibility = View.GONE\n                        saveCardSwitchHolder?.view?.visibility = View.VISIBLE\n                        saveCardSwitchHolder?.view?.mainSwitch?.visibility = View.GONE\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(false,Color.RED)\n\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n                            false,\n                            \"en\",\n                            null,\n                            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n                            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n\n                            )\n\n                       /*tabAnimatedActionButton?.setButtonDataSource(\n                            false,\n                            \"en\",\n                            null,\n                            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n                            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n\n                            )*/\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                            ActionButtonState.ERROR\n                        )\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isEnabled = true\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isClickable = true\n                    }\n                }\n            }\n        }\n        Handler().postDelayed({\n           // tabAnimatedActionButton?.onMorphAnimationReverted()\n           // tabAnimatedActionButton?.clearAnimation()\n            if(chargeResponse!=null)\n            tabAnimatedActionButton?.setButtonDataSource(\n                true,\n                \"en\",\n                null,\n                Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.paymentBackgroundColor\")),\n                Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.titleLabelColor\")),\n            )\n            SDKSession.sessionActive = false\n\n        }, 4000)\n        SessionManager.setActiveSession(false)\n        tabAnimatedActionButton?.setOnClickListener {\n            // if(::fragmentManager.isInitialized)\n            tabAnimatedActionButton.changeButtonState(ActionButtonState.LOADING)\n            SDKSession.startSDK(\n                (tabAnimatedActionButton.context as AppCompatActivity).supportFragmentManager,\n                tabAnimatedActionButton.context,\n                tabAnimatedActionButton.context as AppCompatActivity\n            )\n        }\n        //removeAllViews()\n      Handler().postDelayed({\n           if (::bottomSheetDialog.isInitialized)\n                bottomSheetDialog.dismiss()\n\n        }, 5000)\n\n\n    }\n\n\n    override fun displayAsynchronousPaymentView(chargeResponse: Charge) {\n        if (chargeResponse != null) {\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n            removeViews(\n               // businessViewHolder,\n                amountViewHolder,\n                cardViewHolder,\n                paymentInlineViewHolder,\n                saveCardSwitchHolder\n            )\n          /*  businessViewHolder.setDataFromAPI(\n                selectedPaymentOption.image,\n                selectedPaymentOption.brand?.name\n            )*/\n            addViews(asynchronousPaymentViewHolder)\n            Handler().postDelayed({\n                translateViewToNewHeight(bottomSheetLayout.measuredHeight,true)\n            },400)\n            asynchronousPaymentViewHolder.setDataFromAPI(chargeResponse)\n        }\n    }\n\n    override fun resetViewHolder() {\n        adapter.resetSelection()\n        unActivateActionButton()\n    }\n\n    private fun removeViews(vararg viewHolders: TapBaseViewHolder?) {\n\n        viewHolders.forEach {\n            Handler(Looper.getMainLooper()).postDelayed(Runnable {\n              //  it?.view?.visibility =View.INVISIBLE\n                if (::context.isInitialized) {\n                    val animation = AnimationUtils.loadAnimation(context, R.anim.fade_out)\n                    it?.view?.startAnimation(animation)\n\n                }\n                Handler().postDelayed({\n                if (::sdkLayout.isInitialized) {\n                    //it?.view?.visibility = View.INVISIBLE\n                    sdkLayout.removeView(it?.view)\n\n                }\n                }, 150)\n\n\n            }, 0)\n\n        }\n\n    }\n\n\n    private fun addViews(vararg viewHolders: TapBaseViewHolder?) {\n\n        viewHolders.forEach {\n            Handler(Looper.getMainLooper()).postDelayed(Runnable {\n               // it?.view?.visibility =View.VISIBLE\n                if (::context.isInitialized) {\n\n\n                   val animation = AnimationUtils.loadAnimation(context, R.anim.fade_in)\n                    it?.view?.startAnimation(animation)\n\n                }\n\n                Handler().postDelayed({\n                if (::sdkLayout.isInitialized) {\n                   // it?.view?.visibility = View.VISIBLE\n                    sdkLayout.removeView(it?.view)\n                    sdkLayout.addView(it?.view)\n\n                }\n                }, 200)\n\n\n\n\n\n            }, 0)\n            BottomSheetBehavior.STATE_HALF_EXPANDED\n        }\n\n\n\n    }\n\n\n    private fun unActivateActionButton() {\n        val payString: String\n\n        when (PaymentDataSource.getTransactionMode()) {\n            TransactionMode.TOKENIZE_CARD -> payString = LocalizationManager.getValue(\n                \"pay\",\n                \"ActionButton\"\n            )\n            //TODO stopped since checkout won't have SAVE_CARD -so not available in Localization\n            /*TransactionMode.SAVE_CARD -> payString = LocalizationManager.getValue(\n                \"savecard\",\n                \"ActionButton\"\n            )*/\n            TransactionMode.SAVE_CARD -> payString = \"SAVE CARD\"\n            else -> payString = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n        }\n\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n            false,\n            LocalizationManager.getLocale(context).toString(),\n            if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                payString+\" \"+currentCurrencySymbol+\" \"+selectedAmount\n            }else{ payString+\" \"+currentCurrencySymbol+\" \"+currentAmount},\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n        )\n\n        // saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.IDLE)\n           saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isActivated = false\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isClickable = false\n    }\n\n\n    fun resetCardSelection() {\n        adapter.resetSelection()\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onCardSelectedAction(isSelected: Boolean, savedCardsModel: Any?) {\n\n       // cardViewHolder.view.alpha = 0.95f\n        /**\n         * Clear card input text\n         */\n        println(\"focussss\"+paymentInlineViewHolder.tapCardInputView.hasFocus())\n        println(\"isSelected\"+isSelected)\n       // paymentInlineViewHolder.resetPaymentCardView()\n        paymentInlineViewHolder.tapCardInputView.clear()\n        paymentInlineViewHolder.clearCardInputAction()\n       /* if (paymentInlineViewHolder.tapCardInputView.hasFocus()) {\n            paymentInlineViewHolder.tapCardInputView.clear()\n           // paymentInlineViewHolder.clearCardInputAction()\n            //paymentInlineViewHolder.onFocusChange(\"\")\n           // CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n        }*/\n        println(\"savedCardsModel\" + savedCardsModel)\n        unActivateActionButton()\n        when (savedCardsModel) {\n            is SavedCard -> {\n                    Bugfender.d(CustomUtils.tagEvent,\"Saved card selected :\"+savedCardsModel.lastFour+\"&\"+savedCardsModel.id )\n              //  paymentInlineViewHolder.view.alpha = 1f\n              paymentInlineViewHolder.setDataForSavedCard(\n                    savedCardsModel,\n                    CardInputUIStatus.SavedCard\n                )\n                setPayButtonAction(PaymentType.SavedCard, savedCardsModel)\n                isSavedCardSelected = true\n                Bugfender.d(CustomUtils.tagEvent,\"Payment scheme selected: title :\"+savedCardsModel?.brand+\"& ID :\"+savedCardsModel.paymentOptionIdentifier )\n            }\n            else -> {\n                if (savedCardsModel != null) {\n                    println(\"paymentType\"+(savedCardsModel as PaymentOption).paymentType)\n                    if ((savedCardsModel as PaymentOption).paymentType == PaymentType.WEB) {\n                      //  paymentInlineViewHolder.view.alpha = 0.95f\n\n                        PaymentDataSource.setWebViewType(WebViewType.REDIRECT)\n                        activateActionButton()\n                        setPayButtonAction(PaymentType.WEB, savedCardsModel)\n                    } else if ((savedCardsModel as PaymentOption).paymentType == PaymentType.GOOGLE_PAY) {\n                        removeViews(amountViewHolder,cardViewHolder,paymentInlineViewHolder)\n                        checkoutFragment.checkOutActivity?.handleGooglePayApiCall()\n                        activateActionButtonForGPay()\n                        //setPayButtonAction(PaymentType.WEB, savedCardsModel)\n                        PaymentDataSource.setWebViewType(WebViewType.REDIRECT)\n                    }\n                    Bugfender.d(CustomUtils.tagEvent,\"Payment scheme selected: title :\"+(savedCardsModel as PaymentOption).brand+\"& ID :\"+(savedCardsModel as PaymentOption).id )\n\n\n                } else\n\n                    displayGoPayLogin()\n            }\n        }\n    }\n\n    private fun activateActionButtonForGPay() {\n       val payString:String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isActivated\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n            true,\n            \"en\",\n           \"\",\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.paymentBackgroundColor\")),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.titleLabelColor\")),\n        )\n\n        saveCardSwitchHolder?.view?.cardSwitch?.showOnlyPayButton()\n\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isActivated\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n    }\n\n\n    private fun activateActionButton() {\n        val payString: String\n        when (PaymentDataSource.getTransactionMode()) {\n            TransactionMode.TOKENIZE_CARD -> payString = LocalizationManager.getValue(\n                \"pay\",\n                \"ActionButton\"\n            )\n            //TODO stopped since checkout won't have SAVE_CARD -so not available in Localization\n           /* TransactionMode.SAVE_CARD -> payString = LocalizationManager.getValue(\n                \"savecard\",\n                \"ActionButton\"\n            )*/  TransactionMode.SAVE_CARD -> payString = \"SAVE CARD\"\n            else -> payString = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n        }\n\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n            true,\n            \"en\",\n            if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                payString+\" \"+currentCurrencySymbol+\" \"+selectedAmount\n            }else{ payString+\" \"+currentCurrencySymbol+\" \"+currentAmount},\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.paymentBackgroundColor\")),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.titleLabelColor\")),\n        )\n\n        saveCardSwitchHolder?.view?.cardSwitch?.showOnlyPayButton()\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isActivated\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    @SuppressLint(\"WrongConstant\")\n    private fun onClickRedirect(savedCardsModel: Any) {\n        selectedPaymentOption = savedCardsModel as PaymentOption\n        cardViewModel.processEvent(\n            CardViewEvent.ChargeEvent,\n            this,\n            selectedPaymentOption,\n            null,\n            null,\n            null\n        )\n\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n        saveCardSwitchHolder?.view?.mainSwitch?.mainTextSave?.visibility = View.INVISIBLE\n\n        //Commented to try the flow of redirect\n       removeViews(\n            //    businessViewHolder,\n             amountViewHolder,\n            cardViewHolder,\n            paymentInlineViewHolder,\n            tabAnimatedActionButtonViewHolder\n        )\n        businessViewHolder.view.headerView.constraint.visibility= View.GONE\n  Handler().postDelayed({\n         translateViewToNewHeight(bottomSheetLayout.measuredHeight,true)\n        },400)\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun onClickCardPayment() {\n        println(\"onClickCardPayment\")\n        println(\"paymentInlineViewHolder val\"+paymentInlineViewHolder.getCard())\n        if(isSavedCardSelected == true){\n            cardViewModel.processEvent(\n                CardViewEvent.CreateTokenExistingCardEvent,\n                this,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                paymentInlineViewHolder.getSavedCardData()\n            )\n\n        }else {\n            cardViewModel.processEvent(\n                CardViewEvent.CreateTokenEvent,\n                this,\n\n                null,\n                null,\n                paymentInlineViewHolder.getCard(),\n                null\n            )\n        }\n\n        setSlideAnimation()\n\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n        saveCardSwitchHolder?.view?.mainSwitch?.visibility = View.GONE\n\n        removeViews(\n          //  businessViewHolder,\n         //   amountViewHolder,\n            cardViewHolder,\n            paymentInlineViewHolder,\n            tabAnimatedActionButtonViewHolder\n        )\n\n\n    }\n\n    private fun changeBottomSheetTransition() {\n        bottomSheetLayout.let { layout ->\n            layout.post {\n                TransitionManager.beginDelayedTransition(layout)\n            }\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onDeleteIconClicked(\n        stopAnimation: Boolean,\n        itemId: Int,\n        cardId: String,\n        maskedCardNumber: String,\n        arrayListSavedCardSize: ArrayList<SavedCard>\n    ) {\n        this.cardId = cardId\n        if (stopAnimation) {\n            stopDeleteActionAnimation(itemId, maskedCardNumber,arrayListSavedCardSize)\n        } else {\n            cardViewHolder.view.mainChipgroup.groupAction?.text = LocalizationManager.getValue(\n                \"close\",\n                \"Common\"\n            )\n            deleteCard = false\n        }\n\n    }\n\n    private fun stopDeleteActionAnimation(\n        itemId: Int,\n        maskedCardNumber: String,\n        arrayListSavedCardSizes: ArrayList<SavedCard>\n    ) {\n        isShaking.value = false\n        cardViewHolder.view.mainChipgroup.groupAction?.text = LocalizationManager.getValue(\n            \"GatewayHeader\",\n            \"HorizontalHeaders\",\n            \"rightTitle\"\n        )\n        val title: String = LocalizationManager.getValue(\"title\", \"DeleteCard\")\n        val message: String = LocalizationManager.getValue(\n            \"message\",\n            \"DeleteCard\"\n        )\n        CustomUtils.showDialog(\n            \"$title\",\n            \"${message.replace(\"%@\",maskedCardNumber)} \",\n            context,\n            4,\n            this, null, null, false\n        )\n\n        selectedItemsDel = itemId\n        deleteCard = true\n        this.arrayListSavedCardSize = arrayListSavedCardSizes\n\n    }\n\n    override fun onGoPayLogoutClicked(isClicked: Boolean) {\n        if (isClicked) CustomUtils.showDialog(\n            LocalizationManager.getValue(\"goPaySignOut\", \"GoPay\"), LocalizationManager.getValue(\n                \"goPaySaveCards\",\n                \"GoPay\"\n            ), context, 2, this, null, null, false\n        )\n    }\n\n    override fun onEditClicked(isClicked: Boolean) {\n        if (isClicked) {\n            adapter.updateShaking(true)\n            goPayAdapter.updateShaking(true)\n        } else {\n            adapter.updateShaking(false)\n            goPayAdapter.updateShaking(false)\n        }\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onGooglePayClicked(isClicked: Boolean) {\n        println(\"onGooglePayClicked>>>\" + isClicked)\n        checkoutFragment.checkOutActivity?.handleGooglePayApiCall()\n\n    }\n\n\n    override fun onPayCardSwitchAction(isCompleted: Boolean, paymentType: PaymentType) {\n        println(\"isCompleted???\" + isCompleted)\n        //todo add validations from api when cvv is valid the only  activate ActionButton\n        if (isCompleted) {\n            businessViewHolder.view?.headerView.constraint.visibility = View.VISIBLE\n            saveCardSwitchHolder?.view?.mainSwitch?.visibility = View.GONE\n            saveCardSwitchHolder?.view?.mainSwitch?.switchSaveMobile?.visibility = View.GONE\n            saveCardSwitchHolder?.setSwitchToggleData(paymentType)\n            loyaltyViewHolder.view.loyaltyView?.constraintLayout?.visibility = View.VISIBLE\n            // loyatFlag = true\n            //  initLoyaltyView() // Will be enabled when coming from API directly\n            activateActionButton()\n            paymentActionType = paymentType\n        } else {\n//            saveCardSwitchHolder11?.view?.mainSwitch?.visibility = View.GONE\n            saveCardSwitchHolder?.view?.mainSwitch?.switchSaveMobile?.visibility = View.GONE\n            saveCardSwitchHolder?.setSwitchToggleData(paymentType)\n            unActivateActionButton()\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onPayCardCompleteAction(\n        isCompleted: Boolean,\n        paymentType: PaymentType,\n        cardNumber: String,\n        expiryDate: String,\n        cvvNumber: String,holderName:String?\n    ) {\n        activateActionButton()\n        setPayButtonAction(paymentType, null)\n\n    }\n\n    override fun onPaymentCardIsLoyaltyCard(isLoyaltyCard: Boolean) {\n        //Todo logic for loyalty card\n    }\n\n    // Override function to open NFC fragment and scan the card via NFC.\n    override fun onClickNFC() {\n        setSlideAnimation()\n        removeViews(\n            //businessViewHolder,\n            // amountViewHolder,\n            cardViewHolder,\n            saveCardSwitchHolder,\n            paymentInlineViewHolder,\n            otpViewHolder,\n            goPaySavedCardHolder,\n            goPayViewsHolder\n        )\n        //  addViews(businessViewHolder, amountViewHolder)\n        frameLayout.visibility = View.VISIBLE\n        fragmentManager\n            .beginTransaction()\n            .replace(R.id.fragment_container_nfc_lib, nfcFragment)\n            .commit()\n        /* fragmentManager.beginTransaction().remove(InlineViewFragment()).replace(\n             R.id.fragment_container_nfc_lib,\n             nfcFragment\n         ).commit()*/\n        isNFCOpened = true\n        checkoutFragment.isNfcOpened = true\n        amountViewHolder.changeGroupAction(false)\n        val bottomSheet: FrameLayout? =\n            bottomSheetDialog.findViewById(com.google.android.material.R.id.design_bottom_sheet)\n        BottomSheetBehavior.from(bottomSheet as View).state = BottomSheetBehavior.STATE_EXPANDED\n        Handler().postDelayed({\n            translateViewToNewHeight(bottomSheetLayout.measuredHeight,false)\n        },400)\n        checkSelectedAmountInitiated()\n    }\n\n\n    // Override function to open card Scanner and scan the card.\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onClickCardScanner(scannerClicked: Boolean) {\n         //setSlideAnimation()\n        removeViews(\n            //businessViewHolder,\n            // amountViewHolder,\n            cardViewHolder,\n            saveCardSwitchHolder,\n            paymentInlineViewHolder,\n            otpViewHolder,\n            goPaySavedCardHolder,\n            goPayViewsHolder\n        )\n        amountViewHolder.readyToScanVisibility(scannerClicked)\n        // addViews(businessViewHolder, amountViewHolder)\n        inLineCardLayout.visibility = View.VISIBLE\n        FrameManager.getInstance().frameColor = Color.WHITE\n        // Use\n        //  val bottomSheet: FrameLayout? = bottomSheetDialog.findViewById(com.google.android.material.R.id.design_bottom_sheet)\n        //  BottomSheetBehavior.from(bottomSheet as View).state = BottomSheetBehavior.STATE_EXPANDED\n        //   bottomSheetDialog.behavior.state = BottomSheetBehavior.STATE_EXPANDED\n\n        fragmentManager\n            .beginTransaction()\n            .replace(R.id.inline_container, inlineCamerFragment)\n            .commit()\n\n        isInlineOpened = true\n        checkoutFragment.isScannerOpened = true\n\n        amountViewHolder.changeGroupAction(false)\n        val bottomSheet: FrameLayout? =\n            bottomSheetDialog.findViewById(com.google.android.material.R.id.design_bottom_sheet)\n        BottomSheetBehavior.from(bottomSheet as View).state = BottomSheetBehavior.STATE_EXPANDED\n        Handler().postDelayed({\n            translateViewToNewHeight(bottomSheetLayout.measuredHeight,false)\n        },400)\n        checkSelectedAmountInitiated()\n    }\n\n    private fun checkSelectedAmountInitiated() {\n        if (this::selectedAmount.isInitialized && this::selectedCurrency.isInitialized) {\n            amountViewHolder.updateSelectedCurrency(\n                displayItemsOpen,\n                selectedAmount, selectedCurrency,\n                currentAmount, currentCurrency, currentCurrencySymbol\n            )\n        }\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onCurrencyClicked(\n        currencySelected: String,\n        currencyRate: BigDecimal,\n        totalSelectedAmount: BigDecimal,\n        previousSelectedCurrency: String,\n        selectedCurrencySymbol: String\n    ) {\n\n        currencyOldRate = currencyRate\n        lastSelectedCurrency = previousSelectedCurrency\n        if (::unModifiedItemList.isInitialized)\n            println(\"unModifiedItemList\" + unModifiedItemList)\n        if (::itemList.isInitialized) {\n            for (i in itemList.indices) {\n                itemList[i].amount = unModifiedItemList[i].amount?.times(currencyRate)\n                //itemList[i].totalAmount = currencyOldRate?.div(currencyRate)\n                itemList[i].totalAmount =\n                    unModifiedItemList[i].getPlainAmount()?.times(currencyRate)\n\n                // if( currencySelected !=\"KWD\" && lastSelectedCurrency !=\"KWD\"){\n                /*   if( currencySelected !=PaymentDataSource.getCurrency()?.isoCode && lastSelectedCurrency !=PaymentDataSource.getCurrency()?.isoCode){\n                     //   itemList[i].amountPerUnit = currencyOldRate?.div(currencyRate)!!\n                        itemList[i].amountPerUnit = unModifiedItemList[i].amountPerUnit.times(currencyRate)\n                            //itemList[i].totalAmount = currencyOldRate?.div(currencyRate)\n                       itemList[i].totalAmount =  unModifiedItemList[i].totalAmount?.times(currencyRate)\n\n\n\n                 //  }  else if(currencySelected == PaymentDataSource.getSelectedCurrency()){\n                   }  else if(currencySelected == PaymentDataSource.getCurrency()?.isoCode){\n                       // currentCalculatedAmount = itemList[i].amountPerUnit\n                       // itemList[i].amountPerUnit = (currencyOldRate?.div(currencyRate)!!)\n                        itemList[i].amountPerUnit = unModifiedItemList[i].amountPerUnit.div(currencyRate)\n                       itemList[i].totalAmount = unModifiedItemList[i].totalAmount?.div(currencyRate)\n\n\n                   }*/\n                println(\"item per unit >>\" + itemList[i].amount)\n\n\n            }\n\n            itemsViewHolder.view.itemRecylerView.adapter = itemAdapter\n            itemAdapter.updateAdapterData(itemList)\n\n        }\n\n        //  itemList[i].amount = (list[i].amount.toLong())\n        //  itemList[i].currency = currencySelected\n\n        selectedAmount = CurrencyFormatter.currencyFormat(totalSelectedAmount.toString())\n        selectedCurrency = currencySelected\n        selectedTotalAmount = selectedAmount\n        println(\"selectedAmount final>>\" + selectedAmount)\n        println(\"selectedCurrency final>>\" + selectedCurrency.length)\n        println(\"currentAmount final>>\" + currentAmount)\n        println(\"currentCurrency final>>\" + currentCurrency)\n        println(\"selectedCurrencySymbol final>>\" + selectedCurrencySymbol)\n        if (selectedCurrencySymbol.length == 2) {\n            amountViewHolder.updateSelectedCurrency(\n                displayItemsOpen,\n                selectedAmount, selectedCurrency,\n                currentAmount, currentCurrency,selectedCurrencySymbol\n            )\n          //  PaymentDataSource.setSelectedCurrency(selectedCurrency = selectedCurrency, null) // changed from null to symbol\n            PaymentDataSource.setSelectedCurrency(selectedCurrency, selectedCurrencySymbol)\n          //  PaymentDataSource.setSelectedCurrency(selectedCurrency = selectedCurrencySymbol, selectedCurrencySymbol) //commented\n\n        } else {\n            amountViewHolder.updateSelectedCurrency(\n                displayItemsOpen,\n                selectedAmount, selectedCurrency,\n                currentAmount, currentCurrency, selectedCurrencySymbol\n            )\n            PaymentDataSource.setSelectedCurrency(selectedCurrency, selectedCurrencySymbol)\n\n        }\n        currentCurrencySymbol = selectedCurrencySymbol\n\n\n        // PaymentDataSource.setSelectedCurrency(selectedCurrency = selectedCurrency)\n        PaymentDataSource.setSelectedAmount(currencyRate)\n        if (paymentInlineViewHolder.tapCardInputView.isNotEmpty()) {\n            paymentInlineViewHolder.tapCardInputView.clear()\n            paymentInlineViewHolder.tapAlertView?.visibility = View.GONE\n            paymentInlineViewHolder.acceptedCardText.visibility = View.VISIBLE\n            paymentInlineViewHolder.tabLayout.resetBehaviour()\n        }\n\n        adapter.resetSelection()\n\n        if (::selectedCurrency.isInitialized) {\n            Bugfender.d(CustomUtils.tagEvent,\"Currency changed to : \"+selectedCurrencySymbol )\n            filterViewModels(selectedCurrency)\n        } else {\n            filterViewModels(currentCurrency)\n            //Bugfender.d(\"Currency changed to : \"+currentCurrency ,CustomUtils.tagEvent)\n\n        }\n\n    }\n\n    fun cancelledCall(){\n        println(\"cancelledCall from webview\")\n    }\n\n    @SuppressLint(\"ResourceType\")\n    override fun redirectLoadingFinished(\n        done: Boolean,\n        charge: Charge?,\n        contextSDK: Context?\n    ) {\n      //  checkoutFragment.dismiss()\n        println(\"done val\" + done + \"chargeResponse status\" + PaymentDataSource.getChargeOrAuthorize())\n        println(\"saveCardSwitchHolder val\" + saveCardSwitchHolder)\n        println(\"redirect val\" + charge?.response)\n        println(\"gatewayResponse val\" + charge?.gatewayResponse)\n\n        businessViewHolder = contextSDK?.let { BusinessViewHolder(it,this) }!!\n       // saveCardSwitchHolder = contextSDK.let { SwitchViewHolder(it,this) }\n       removeViews(businessViewHolder)\n        if (::webFrameLayout.isInitialized) {\n            if (fragmentManager.findFragmentById(R.id.webFrameLayout) != null)\n                fragmentManager.beginTransaction()\n                    .hide(fragmentManager.findFragmentById(R.id.webFrameLayout)!!)\n                    .commit()\n            webFrameLayout.visibility = View.GONE\n            sdkLayout.visibility = View.VISIBLE\n            supportFragmentManager?.popBackStack()\n\n        }\n      //  sdkLayout.visibility =View.VISIBLE\n        if(::amountViewHolder.isInitialized&& ::cardViewHolder.isInitialized &&:: cardViewHolder. isInitialized && ::paymentInlineViewHolder.isInitialized)\n        removeViews(businessViewHolder,amountViewHolder,cardViewHolder,paymentInlineViewHolder)\n\n       /* if(::webViewHolder.isInitialized)removeViews(webViewHolder)\n         addViews(businessViewHolder,saveCardSwitchHolder)\n        businessViewHolder.view.headerView.constraint.visibility = View.GONE\n        businessViewHolder.view.topSeparatorLinear.visibility = View.GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.switchesLayout?.visibility= View.GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility= View.VISIBLE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setDisplayMetrics(CustomUtils.getDeviceDisplayMetrics(contextSDK as Activity))*/\n            // removeAllViews()\n       /* saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n            ActionButtonState.ERROR\n        )\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n            false,\n            \"en\",\n            null,\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n        )\n\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n            ActionButtonState.ERROR\n        )*/\n       // checkoutFragment.closeText.visibility =View.GONE\n     /*   val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n        if(chargeResponse?.status== ChargeStatus.CAPTURED||chargeResponse?.status ==ChargeStatus.INITIATED){\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n            true,\"en\",\"\",\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.paymentBackgroundColor\")),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.titleLabelColor\")))\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.SUCCESS)\n        }else {\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n                false,\n                \"en\",\n                null,\n                Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n                Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n            )\n\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                ActionButtonState.ERROR\n            )\n        }*/\n    /*  if (::bottomSheetDialog.isInitialized)\n            bottomSheetDialog.dismiss()*/\n\n        Handler().postDelayed({\n           // checkoutFragment.dismiss()\n            /*if (::bottomSheetDialog.isInitialized)\n                bottomSheetDialog.dismiss()*/\n\n        }, 3000)\n\n\n    }\n\n    override fun resultObtained(done: Boolean, contextSDK: Context?) {\n\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun setPayButtonAction(paymentTypeEnum: PaymentType, savedCardsModel: Any?) {\n\n        /**\n         * payment from onSelectPaymentOptionActionListener\n         */\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setOnClickListener {\n            when (paymentTypeEnum) {\n                PaymentType.SavedCard -> {\n                    /**\n                     * Note PaymentType savedcard is changed to Card for saved card payments for extra fees and payment options*/\n                    if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                        checkForExtraFees(\n                            selectedAmount,\n                            selectedCurrency,\n                            PaymentType.CARD,\n                            savedCardsModel,\n                            PaymentDataProvider().getSelectedCurrency()\n                        )\n\n                    } else checkForExtraFees(\n                        currentAmount,\n                        currentCurrency,\n                        PaymentType.CARD,\n                        savedCardsModel,\n                        PaymentDataProvider().getSelectedCurrency()\n                    )\n\n                    // setDifferentPaymentsAction(paymentTypeEnum,savedCardsModel)\n                }\n                PaymentType.WEB -> {\n                    PaymentDataSource.setWebViewType(WebViewType.REDIRECT)\n                    if (savedCardsModel != null) {\n                        if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                            checkForExtraFees(\n                                selectedAmount,\n                                selectedCurrency,\n                                paymentTypeEnum,\n                                savedCardsModel,\n                                PaymentDataProvider().getSelectedCurrency()\n                            )\n                        } else checkForExtraFees(\n                            currentAmount,\n                            currentCurrency,\n                            paymentTypeEnum,\n                            savedCardsModel,\n                            PaymentDataProvider().getSelectedCurrency()\n                        )\n                    }\n                }\n                PaymentType.CARD -> {\n                    //activateActionButton()\n                    if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                        checkForExtraFees(\n                            selectedAmount,\n                            selectedCurrency,\n                            paymentTypeEnum,\n                            savedCardsModel,\n                            PaymentDataProvider().getSelectedCurrency()\n                        )\n                    } else checkForExtraFees(\n                        currentAmount,\n                        currentCurrency,\n                        paymentTypeEnum,\n                        savedCardsModel,\n                        PaymentDataProvider().getSelectedCurrency()\n                    )\n\n\n                }\n                PaymentType.telecom -> {\n                    checkForExtraFees(\n                        currentAmount,\n                        currentCurrency,\n                        paymentTypeEnum,\n                        savedCardsModel,\n                        PaymentDataProvider().getSelectedCurrency()\n                    )\n                }\n            }\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun checkForExtraFees(\n        selectedAmount: String,\n        selectedCurrency: String,\n        paymentTypeEnum: PaymentType,\n        savedCardsModel: Any?,\n        amountedCurrency: AmountedCurrency?\n    ) {\n        var extraFees: java.util.ArrayList<ExtraFee>? = null\n        var paymentOption: PaymentOption? = null\n\n\n        if (paymentTypeEnum == PaymentType.WEB) {\n            savedCardsModel as PaymentOption\n            extraFees = savedCardsModel.extraFees\n            fee = calculateExtraFeesAmount(savedCardsModel as PaymentOption, amountedCurrency)\n\n        } else {\n            for (i in paymentOptionsResponse.paymentOptions.indices) {\n                if (paymentOptionsResponse.paymentOptions[i].paymentType == paymentTypeEnum) {\n                    extraFees = paymentOptionsResponse.paymentOptions[i].extraFees\n                    paymentOption = paymentOptionsResponse.paymentOptions[i]\n                }\n            }\n            fee = calculateExtraFeesAmount(paymentOption, amountedCurrency)\n\n        }\n        val totalAmount: String\n        if (selectedTotalAmount != null) {\n            println(\"selectedTotalAmount is\"+selectedTotalAmount)\n            if(selectedAmount.contains(\",\")){\n                totalAmount = CurrencyFormatter.currencyFormat(\n                    fee?.add(BigDecimal(selectedAmount.replace(\",\",\"\").toDouble())).toString())\n\n            }else\n            totalAmount = CurrencyFormatter.currencyFormat(\n                fee?.add(\n                    selectedTotalAmount?.toDouble()?.let { BigDecimal.valueOf(it) }).toString()\n            )\n        } else {\n            totalAmount = CurrencyFormatter.currencyFormat(\n                fee?.add(\n                    amountedCurrency?.amount?.toDouble()?.let { BigDecimal.valueOf(it) }).toString()\n            )\n        }\n\n        if (calculateExtraFeesAmount(\n                extraFees,\n                paymentOptionsResponse.supportedCurrencies,\n                PaymentDataProvider().getSelectedCurrency()\n            )!! > BigDecimal.ZERO\n        ) {\n            showExtraFees(\n                totalAmount.toString(),\n                fee.toString(),\n                paymentTypeEnum,\n                savedCardsModel,\n                selectedCurrency\n            )\n        } else if (savedCardsModel != null) {\n            if (paymentTypeEnum == PaymentType.CARD || paymentTypeEnum == PaymentType.SavedCard) {\n                savedCardsModel as SavedCard\n                if (savedCardsModel.paymentOptionIdentifier.toInt() == 3 || savedCardsModel.paymentOptionIdentifier.toInt() == 4) {\n                    setDifferentPaymentsAction(PaymentType.SavedCard, savedCardsModel)\n                }\n\n            } else setDifferentPaymentsAction(paymentTypeEnum, savedCardsModel)\n        } else setDifferentPaymentsAction(paymentTypeEnum, savedCardsModel)\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun payActionSavedCard(savedCardsModel: SavedCard?) {\n        println(\"payActionSavedCard\" + savedCardsModel)\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n            ActionButtonState.LOADING\n        )\n        startSavedCardPaymentProcess(savedCardsModel as SavedCard)\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.getImageView(\n            R.drawable.loader,\n            8\n        ) {\n\n\n        }?.let { it1 ->\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.addChildView(\n                it1\n            )\n        }\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun startSavedCardPaymentProcess(savedCard: SavedCard?) {\n        val createTokenSavedCard =\n            CreateTokenSavedCard(savedCard?.id, PaymentDataSource.getCustomer().identifier)\n        cardViewModel.processEvent(\n            CardViewEvent.CreateTokenExistingCardEvent,\n            this,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            createTokenSavedCard\n        )\n    }\n\n\n//    override fun onStateChanged(state: ActionButtonState) {}\n\n    private fun removeAllViews() {\n        if (::businessViewHolder.isInitialized && ::amountViewHolder.isInitialized && ::cardViewHolder.isInitialized && ::paymentInlineViewHolder.isInitialized &&\n            ::goPayViewsHolder.isInitialized && ::otpViewHolder.isInitialized\n        )\n            removeViews(\n                businessViewHolder,\n                amountViewHolder,\n                cardViewHolder,\n                paymentInlineViewHolder,\n                saveCardSwitchHolder,\n                goPayViewsHolder,\n                otpViewHolder,\n                tabAnimatedActionButtonViewHolder\n            )\n\n        if(::webViewHolder.isInitialized) removeViews(webViewHolder)\n    }\n\n    private fun setAllSeparatorTheme() {\n\n        val borderColor: String = ThemeManager.getValue(\"poweredByTap.backgroundColor\")\n        var borderOpacityVal: String? = null\n        var newBorderColor: String? = null\n        borderOpacityVal = borderColor.substring(borderColor.length - 2)\n        newBorderColor = \"#\" + borderOpacityVal + borderColor.substring(0, borderColor.length - 2).replace(\"#\", \"\")\n\n        sdkLayout.setBackgroundColor(Color.parseColor(newBorderColor))\n        sdkLayout.let { it1 ->\n            setTopBorders(\n                it1,\n                35f,// corner raduis\n                0.0f,\n                Color.parseColor(\n                    newBorderColor\n                ),// stroke color\n                Color.parseColor(\n                    newBorderColor\n                ),// tint color\n                Color.parseColor(\n                    newBorderColor\n                )\n            )\n        }\n        val separatorViewTheme = SeparatorViewTheme()\n        separatorViewTheme.strokeColor =\n            Color.parseColor(ThemeManager.getValue(\"tapSeparationLine.backgroundColor\"))\n        separatorViewTheme.strokeHeight = ThemeManager.getValue(\"tapSeparationLine.height\")\n        businessViewHolder.view.topSeparatorLinear.topSeparator.setTheme(separatorViewTheme)\n\n        if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains(\"dark\")){\n            amountViewHolder.view.amountView_separator.visibility =View.GONE\n        }else  amountViewHolder.view.amountView_separator.visibility =View.VISIBLE\n        amountViewHolder.view.amountView_separator.setTheme(separatorViewTheme)\n      //  cardViewHolder.view.tapSeparatorViewLinear1.separator_1.setTheme(separatorViewTheme)\n        goPaySavedCardHolder.view.tapSeparatorViewLinear.separator_.setTheme(separatorViewTheme)\n        /**\n         * set separator background\n         */\n        businessViewHolder.view.topSeparatorLinear.setBackgroundColor(\n            (Color.parseColor(\n                ThemeManager.getValue(\n                    \"merchantHeaderView.backgroundColor\"\n                )\n            ))\n        )\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onRecognitionSuccess(card: TapCard?) {\n//to be added for unembossed cards\n        /* if (card != null) {\n             if (card.cardNumber != null && card.cardHolder != null && card.expirationDate != null) {\n                onReadSuccess(card)\n             }\n         }*/\n\n        println(\"are you called here!!\")\n\n\n    }\n\n    override fun onRecognitionFailure(error: String?) {\n\n    }\n\n\n    private fun removeInlineScanner() {\n        if (isInlineOpened) {\n            if (fragmentManager.findFragmentById(R.id.inline_container) != null) {\n                fragmentManager.beginTransaction()\n                    .remove(fragmentManager?.findFragmentById(R.id.inline_container)!!)\n                    .commit()\n            }\n            // inlineCamerFragment.onDestroy()\n            isInlineOpened = false\n            checkoutFragment.isScannerOpened = false\n            inLineCardLayout.visibility = View.GONE\n            amountViewHolder.readyToScanVisibility(false)\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                ActionButtonState.RESET\n            )\n\n        }\n\n    }\n\n    fun handleScanFailedResult(error: String?) {\n        println(\"handleScanFailedResult card is\")\n        removeInlineScanner()\n        //  removeViews(amountViewHolder, businessViewHolder)\n        addViews(\n            // businessViewHolder,\n            //  amountViewHolder,\n            cardViewHolder,\n            paymentInlineViewHolder,\n            saveCardSwitchHolder\n        )\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun handleScanSuccessResult(card: TapCard) {\n\n        //  removeViews(amountViewHolder, businessViewHolder)\n        addViews(\n            // businessViewHolder,\n            /// amountViewHolder,\n            cardViewHolder,\n            paymentInlineViewHolder,\n            saveCardSwitchHolder\n        )\n\n        if (card != null && card.cardNumber?.trim() != null && card.cardNumber.trim().length == 6) {\n            callBinLookupApi(card.cardNumber.trim().substring(0, 6))\n        }\n\n\n        Handler().postDelayed({\n            val binLookupResponse: BINLookupResponse? = PaymentDataSource.getBinLookupResponse()\n            if (PaymentDataSource.getCardType() != null && PaymentDataSource.getCardType() == CardType.ALL) {\n                setScannedCardDetails(card)\n\n            } else {\n                if (binLookupResponse != null) {\n                    paymentInlineViewHolder.checkAllowedCardTypes(binLookupResponse)\n                    setScannedCardDetails(card)\n                }\n\n            }\n        }, 300)\n\n\n\n        // inlineCamerFragment.onDestroy()\n        removeInlineScanner()\n\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun setScannedCardDetails(card: TapCard) {\n       /* if(CardUtils.isValidCardNumber(card.cardNumber)){\n            paymentInlineViewHolder.tapCardInputView.onTouchView()\n        }else {\n            paymentInlineViewHolder.tapCardInputView.onTouchCardField()\n        }*/\n        //paymentInlineViewHolder.tapCardInputView.onTouchCardField()\n        println(\"scanned card holder is${card.cardHolder}\")\n        println(\"scanned card number is${card.cardNumber}\")\n\n        paymentInlineViewHolder.tapCardInputView.setCardNumberMasked(paymentInlineViewHolder.maskCardNumber(card.cardNumber))\n            val dateParts: List<String>? = card.expirationDate?.split(\"/\")\n            val month = dateParts?.get(0)?.toInt()\n            val year = dateParts?.get(1)?.toInt()\n            if (month != null) {\n                if (year != null) {\n                    paymentInlineViewHolder.tapCardInputView.setExpiryDate(month, year)\n                }\n            }\n\n\n       // paymentInlineViewHolder.tapCardInputView.setCardHolderName(card.cardHolder)\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun callBinLookupApi(binLookUpStr: String?) {\n        cardViewModel.processEvent(\n            CardViewEvent.RetreiveBinLookupEvent,\n            CheckoutViewModel(),  null, binLookUpStr, null, null\n        )\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun handleNFCScannedResult(emvCard: TapEmvCard) {\n        println(\"emvCard>>\" + emvCard)\n        //   removeViews(amountViewHolder, businessViewHolder)\n        addViews(\n            //   businessViewHolder,\n            //   amountViewHolder,\n            cardViewHolder,\n            paymentInlineViewHolder,\n            saveCardSwitchHolder\n        )\n\n        callBinLookupApi(emvCard.cardNumber?.substring(0, 6))\n\n        Handler().postDelayed({\n            val binLookupResponse: BINLookupResponse? = PaymentDataSource.getBinLookupResponse()\n            if (PaymentDataSource.getCardType() != null && PaymentDataSource.getCardType() == CardType.ALL) {\n                setNfcCardDetails(emvCard)\n\n            } else {\n                if (binLookupResponse != null) {\n                    paymentInlineViewHolder.checkAllowedCardTypes(binLookupResponse)\n                    setNfcCardDetails(emvCard)\n                }\n\n            }\n        }, 300)\n\n        removeNFCViewFragment()\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun setNfcCardDetails(emvCard: TapEmvCard) {\n        // auto slide added on scan to prevent overlap\n        paymentInlineViewHolder.hideViewONScanNFC()\n        println(\"maskCardNumber\"+paymentInlineViewHolder.maskCardNumber(emvCard.cardNumber))\n        paymentInlineViewHolder.tapCardInputView.setCardNumber(emvCard.cardNumber,false)\n        convertDateString(emvCard)\n        paymentInlineViewHolder.onFocusChange(CardInputListener.FocusField.FOCUS_CVC)\n\n\n    }\n\n    private fun removeNFCViewFragment() {\n        if (isNFCOpened)\n            if (fragmentManager.findFragmentById(R.id.fragment_container_nfc_lib) != null)\n                fragmentManager.beginTransaction()\n                    .remove(fragmentManager.findFragmentById(R.id.fragment_container_nfc_lib)!!)\n                    .commit()\n        isNFCOpened = false\n        checkoutFragment.isNfcOpened = false\n        //  webFrameLayout.visibility = View.GONE\n        frameLayout.visibility = View.GONE\n\n    }\n\n\n    private fun convertDateString(emvCard: TapEmvCard) {\n        //  println(\"emvCard.getExpireDate()\"+emvCard.getExpireDate())\n        val dateParts: CharSequence? = DateFormat.format(\"M/y\", emvCard.getExpireDate())\n        println(\"dateparts\" + dateParts?.length)\n        if (dateParts?.contains(\"/\") == true) {\n            if (dateParts.length <= 3) {\n                return\n            } else {\n                if (dateParts.length >= 5 || dateParts.length >= 4) {\n                    val month = (dateParts).substring(0, 1).toInt()\n\n                    val year = (dateParts).substring(2, 4)\n\n                    if (year.contains(\"/\")) {\n                        println(\"retuu>>\" + year)\n                        return\n                    } else {\n                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n                            paymentInlineViewHolder.tapCardInputView.setExpiryDate(month, year.toInt())\n                        }\n                        // paymentInlineViewHolder.tapCardInputVie\n\n                    }\n\n                }\n\n            }\n\n\n        }\n    }\n\n    private fun filteredByPaymentTypeAndCurrencyAndSortedList(\n        list: java.util.ArrayList<PaymentOption>, paymentType: PaymentType, currency: String\n    ): java.util.ArrayList<PaymentOption> {\n        var currencyFilter: String? = currency.toUpperCase()\n        val filters: java.util.ArrayList<Utils.List.Filter<PaymentOption>> =\n            java.util.ArrayList<Utils.List.Filter<PaymentOption>>()\n\n        /**\n         * if trx currency not included inside supported currencies <i.e Merchant pass transaction currency that he is not allowed for>\n         * set currency to first supported currency\n        </i.e> */\n        var trxCurrencySupported = false\n        for (amountedCurrency in paymentOptionsResponse.supportedCurrencies) {\n            if (amountedCurrency.currency == currencyFilter) {\n                trxCurrencySupported = true\n                break\n            }\n        }\n        if (!trxCurrencySupported) currencyFilter =\n            paymentOptionsResponse.supportedCurrencies[0].currency\n\n\n        if (currencyFilter != null) {\n            this.getCurrenciesFilter<PaymentOption>(currencyFilter)?.let { filters.add(it) }\n        }\n        //  filters.add(getPaymentOptionsFilter(paymentType))\n        //  val filter: CompoundFilter<PaymentOption> = CompoundFilter(filters)\n        //  val filtered: ArrayList<PaymentOption> = Utils.List.filter(list)\n\n        var filtered: ArrayList<PaymentOption> =\n            list.filter { items ->\n                items.paymentType == paymentType && items.getSupportedCurrencies()?.contains(\n                    currencyFilter\n                ) == true\n            } as ArrayList<PaymentOption>\n\n        return list.filter { items ->\n            items.paymentType == paymentType && items.getSupportedCurrencies()?.contains(\n                currencyFilter\n            ) == true\n        } as ArrayList<PaymentOption>\n    }\n\n    private fun <E : CurrenciesSupport?> getCurrenciesFilter(\n        currency: String\n    ): Utils.List.Filter<E>? {\n        return object : Utils.List.Filter<E> {\n            override fun isIncluded(`object`: E): Boolean {\n                return `object`?.getSupportedCurrencies()!!.contains(currency)\n            }\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun filterViewModels(currency: String) {\n        if (paymentOptionsResponse.paymentOptions != null)\n            paymentOptionsWorker =\n                java.util.ArrayList<PaymentOption>(paymentOptionsResponse.paymentOptions)\n        if (paymentOptionsResponse.cards != null) {\n            val savedCardsWorker: java.util.ArrayList<SavedCard> =\n                java.util.ArrayList<SavedCard>(paymentOptionsResponse.cards)\n        }\n        val webPaymentOptions: java.util.ArrayList<PaymentOption> =\n            filteredByPaymentTypeAndCurrencyAndSortedList(\n                paymentOptionsWorker, PaymentType.WEB, currency\n            )\n\n        val cardPaymentOptions: java.util.ArrayList<PaymentOption> =\n            filteredByPaymentTypeAndCurrencyAndSortedList(\n                paymentOptionsWorker, PaymentType.CARD, currency\n            )\n\n        val googlePaymentOptions: java.util.ArrayList<PaymentOption> =\n            filteredByPaymentTypeAndCurrencyAndSortedList(\n                paymentOptionsWorker, PaymentType.GOOGLE_PAY, currency\n            )\n      //  println(\"googlePaymentOptions\"+googlePaymentOptions)\n        val hasWebPaymentOptions = webPaymentOptions.size > 0\n        val hasCardPaymentOptions = cardPaymentOptions.size > 0\n        val hasGooglePaymentOptions = googlePaymentOptions.size > 0\n       // println(\"hasGooglePaymentOptions\"+hasGooglePaymentOptions)\n\n        //Added if else to update showing GooglePay button based on api\n        if (hasGooglePaymentOptions && googlePaymentOptions.isNotEmpty()) {\n            adapter.updateAdapterGooglePay(googlePaymentOptions)\n            PaymentDataSource.setGoogleCardPay(googlePaymentOptions)\n        }else {\n            adapter.updateAdapterGooglePay(googlePaymentOptions)\n        PaymentDataSource.setGoogleCardPay(googlePaymentOptions)\n        }\n        logicToHandlePaymentDataType(webPaymentOptions, cardPaymentOptions)\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun logicToHandlePaymentDataType(\n        webPaymentOptions: ArrayList<PaymentOption>,\n        cardPaymentOptions: ArrayList<PaymentOption>\n\n    ) {\n        // println(\"webPaymentOptions in logic >>>>$webPaymentOptions\")\n        //  println(\"cardPaymentOptions in logic >>>>$cardPaymentOptions\")\n\n        if (PaymentDataSource.getPaymentDataType() != null && PaymentDataSource.getPaymentDataType() == \"WEB\" && PaymentDataSource.getTransactionMode() != TransactionMode.AUTHORIZE_CAPTURE) {\n            adapter.updateAdapterDataSavedCard(ArrayList())\n            adapter.updateAdapterData(webPaymentOptions)\n            saveCardSwitchHolder?.view?.cardSwitch?.showOnlyPayButton()\n        } else if (PaymentDataSource.getPaymentDataType() != null && PaymentDataSource.getPaymentDataType() == \"CARD\") {\n            adapter.updateAdapterData(ArrayList())\n            paymentInlineViewHolder.setDataFromAPI(cardPaymentOptions)\n            saveCardSwitchHolder?.view?.cardSwitch?.showOnlyPayButton()\n        } else {\n            /**\n             * If TransactionMode is AUTHORIZE_CAPTURE then don't show webpayment options\n             * **/\n            if (PaymentDataSource.getTransactionMode() == TransactionMode.AUTHORIZE_CAPTURE) {\n                adapter.updateAdapterData(ArrayList())\n                paymentInlineViewHolder.setDataFromAPI(cardPaymentOptions)\n            } else {\n                adapter.updateAdapterData(webPaymentOptions)\n                if (!cardPaymentOptions.isEmpty()) {\n                    paymentInlineViewHolder.setDataFromAPI(cardPaymentOptions)\n\n\n                } else {\n                    saveCardSwitchHolder?.mainTextSave?.visibility = View.GONE\n                    removeViews(paymentInlineViewHolder)\n                }\n\n            }\n        }\n        if(LocalizationManager.currentLocalized.length()!=0){\n            title=   LocalizationManager.getValue(\"title\", \"ExtraFees\")\n\n        }\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun showExtraFees(\n        totalAmount: String,\n        extraFeesAmount: String,\n        paymentType: PaymentType, savedCardsModel: Any?, selectedCurrency: String\n    ) {\n\n        val extraFeesPart1: String = LocalizationManager.getValue<String>(\n            \"message\",\n            \"ExtraFees\"\n        ).replaceFirst(\"%@\",extraFeesAmount+selectedCurrency)\n        val extraFeesPart2: String = extraFeesPart1.replace(\"%@\",totalAmount+selectedCurrency)\n        // val leftToRight = \"\\u200F\"\n      //  val localizedMessage =\n            // extraFeesPart1 +\" \"+extraFeesAmount+PaymentDataProvider().getSelectedCurrency()?.currency +extraFeesPart2+\" \"+ totalAmount+ PaymentDataProvider().getSelectedCurrency()?.currency\n        //    \"$extraFeesPart1 $extraFeesAmount$selectedCurrency$extraFeesPart2 $totalAmount$selectedCurrency\"\n        CustomUtils.showDialog(\n            title,\n            extraFeesPart2,\n            context,\n            3,\n            this,\n            paymentType,\n            savedCardsModel, true\n        )\n\n\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun dialogueExecuteExtraFees(\n        response: String,\n        paymentType: PaymentType,\n        savedCardsModel: Any?\n    ) {\n        if (response == \"YES\") {\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n            println(\"savedCardsModel>>>>\" + savedCardsModel)\n            if (savedCardsModel != null) {\n                if (paymentType == PaymentType.CARD) {\n                    savedCardsModel as SavedCard\n                    if (savedCardsModel.paymentOptionIdentifier.toInt() == 3 || savedCardsModel.paymentOptionIdentifier.toInt() == 4) {\n                        setDifferentPaymentsAction(PaymentType.SavedCard, savedCardsModel)\n                    }\n                } else setDifferentPaymentsAction(paymentType, savedCardsModel)\n            } else setDifferentPaymentsAction(paymentType, savedCardsModel)\n        } else {\n            fee = BigDecimal.ZERO\n\n            when {\n                paymentType === PaymentType.WEB -> {\n                    // fireWebPaymentExtraFeesUserDecision(ExtraFeesStatus.REFUSE_EXTRA_FEES)\n                    selectedCurrencyPos = null\n                    selectedAmountPos = null\n\n\n                }\n                paymentType === PaymentType.CARD -> {\n                    selectedCurrencyPos = null\n                    selectedAmountPos = null\n//                    fireCardPaymentExtraFeesUserDecision(ExtraFeesStatus.REFUSE_EXTRA_FEES)\n                }\n                paymentType === PaymentType.SavedCard -> {\n                    selectedCurrencyPos = null\n                    selectedAmountPos = null\n                    //  fireSavedCardPaymentExtraFeesUserDecision(ExtraFeesStatus.REFUSE_EXTRA_FEES)\n                }\n            }\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun setDifferentPaymentsAction(\n        paymentType: PaymentType,\n        savedCardsModel: Any?\n    ) {\n        when {\n\n            paymentType === PaymentType.WEB -> {\n                if (savedCardsModel != null) {\n                    PaymentDataSource.setWebViewType(WebViewType.REDIRECT)\n                    //Added to disable click when button loading\n                    amountViewHolder.view.amount_section?.itemAmountLayout?.isEnabled = false\n                    amountViewHolder.view.amount_section?.itemAmountLayout?.isClickable = false\n                    onClickRedirect(savedCardsModel)\n                }\n            }\n            paymentType === PaymentType.CARD -> {\n               /* paymentInlineViewHolder.view.alpha = 0.9f\n                if (::context.isInitialized) {\n                    val animation = AnimationUtils.loadAnimation(context, R.anim.fade_out)\n                    paymentInlineViewHolder.view.startAnimation(animation)\n\n                }*/\n                PaymentDataSource.setWebViewType(WebViewType.THREE_DS_WEBVIEW)\n                //Added to disable click when button loading\n                amountViewHolder.view.amount_section?.itemAmountLayout?.isEnabled = false\n                amountViewHolder.view.amount_section?.itemAmountLayout?.isClickable = false\n\n                Handler().postDelayed({\n                onClickCardPayment()\n                 }, 1000)\n\n            }\n            paymentType === PaymentType.SavedCard -> {\n                if(isSavedCardSelected== true){\n                    //Added to disable click when button loading\n                    amountViewHolder.view.amount_section?.itemAmountLayout?.isEnabled = false\n                    amountViewHolder.view.amount_section?.itemAmountLayout?.isClickable = false\n                    payActionSavedCard(savedCardsModel as SavedCard)\n\n                }\n            }\n        }\n    }\n\n    /**\n     * Calculate extra fees amount big decimal.\n     *\n     * @param paymentOption the payment option\n     * @return the big decimal\n     */\n    open fun calculateExtraFeesAmount(\n        paymentOption: PaymentOption?,\n        amountedCurrency: AmountedCurrency?\n    ): BigDecimal? {\n        return if (paymentOption != null) {\n\n            // val amount = PaymentDataProvider().getSelectedCurrency()\n            var extraFees: java.util.ArrayList<ExtraFee>? = paymentOption.extraFees\n            if (extraFees == null) extraFees = java.util.ArrayList()\n            val supportedCurrencies: java.util.ArrayList<SupportedCurrencies>? =\n                PaymentDataProvider().getSupportedCurrencies()\n            calculateExtraFeesAmount(extraFees, supportedCurrencies, amountedCurrency)\n        } else BigDecimal.ZERO\n    }\n\n    fun View.fadeVisibility(visibility: Int, duration: Long = 3000) {\n        val transition: Transition = Fade()\n        transition.duration = duration\n        transition.addTarget(this)\n        TransitionManager.beginDelayedTransition(this.parent as ViewGroup, transition)\n        this.visibility = visibility\n    }\n\n    fun closeAsynchView() {\n     /*   removeViews(businessViewHolder, asynchronousPaymentViewHolder)\n        businessViewHolder.setDataFromAPI(\n            PaymentDataSource.getMerchantData()?.logo,\n            PaymentDataSource.getMerchantData()?.name\n        )\n        addViews(\n            businessViewHolder,\n            amountViewHolder,\n            cardViewHolder,\n            paymentInlineViewHolder,\n            saveCardSwitchHolder\n        )\n        saveCardSwitchHolder?.view?.visibility = View.VISIBLE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.RESET)\n        val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n            false,\n            \"en\",\n            if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                payString+\" \"+currentCurrencySymbol+\" \"+selectedAmount\n            }else{ payString+\" \"+currentCurrencySymbol+\" \"+currentAmount},\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n        )*/\n      //  Stopped reset view and dismiss it.\n        checkoutFragment?.dismissBottomSheetDialog()\n    }\n\n    fun showOnlyButtonView(\n        status: ChargeStatus,\n        checkOutActivity: CheckOutActivity?,\n        _checkoutFragment: CheckoutFragment\n    ) {\n        println(\"checkoutFragment>>>.\" + _checkoutFragment)\n        println(\"checkOutActivity>>>.\" + checkOutActivity)\n        removeAllViews()\n        addViews(saveCardSwitchHolder)\n        val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n            false,\n            \"en\",\n            if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                payString+\" \"+currentCurrencySymbol+\" \"+selectedAmount\n            }else{ payString+\" \"+currentCurrencySymbol+\" \"+currentAmount},\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.paymentBackgroundColor\")),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.titleLabelColor\")),\n        )\n\n\n        when (status) {\n            ChargeStatus.CAPTURED, ChargeStatus.AUTHORIZED, ChargeStatus.VALID, ChargeStatus.IN_PROGRESS -> {\n                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setDisplayMetrics(\n                    CustomUtils.getDeviceDisplayMetrics(\n                        context as Activity\n                    )\n                )\n                Handler().postDelayed({\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                        ActionButtonState.SUCCESS\n                    )\n                }, 500)\n            }\n            ChargeStatus.CANCELLED, ChargeStatus.TIMEDOUT, ChargeStatus.FAILED, ChargeStatus.DECLINED, ChargeStatus.UNKNOWN,\n            ChargeStatus.RESTRICTED, ChargeStatus.ABANDONED, ChargeStatus.VOID, ChargeStatus.INVALID -> {\n                Handler().postDelayed({\n                    tabAnimatedActionButton?.setInValidBackground(\n                        false,Color.YELLOW\n                    )\n                    tabAnimatedActionButton?.changeButtonState(ActionButtonState.LOADING)\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(\n                        false,Color.YELLOW\n                    )\n\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n                        false,\n                        \"en\",\n                        null,\n                        Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n                        Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n\n                    )\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                        ActionButtonState.ERROR\n                    )\n                }, 500)\n                tabAnimatedActionButton?.changeButtonState(ActionButtonState.ERROR)\n            }\n            else -> {\n\n                if (status.equals(\"tokenized\")) {\n                    Handler().postDelayed({\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                            ActionButtonState.SUCCESS\n                        )\n                    }, 500)\n\n                } else {\n                    Handler().postDelayed({\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(false,\n                           Color.BLUE\n                        )\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n                            false,\n                            \"en\",\n                            null,\n                            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n                            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n\n                            )\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                            ActionButtonState.ERROR\n                        )\n                    }, 500)\n\n                }\n            }\n        }\n     /*   Handler().postDelayed({\n            checkOutActivity?.onBackPressed()\n\n            if (::bottomSheetDialog.isInitialized)\n                bottomSheetDialog.dismiss()\n            _checkoutFragment.activity?.onBackPressed()\n\n        }, 12000)*/\n    }\n\n\n    /**\n     * handlePaymentSuccess handles the payment token obtained from GooglePay API\n     * **/\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun handlePaymentSuccess(paymentData: PaymentData) {\n        removeViews(\n            //businessViewHolder,\n             amountViewHolder,\n            cardViewHolder,\n           // saveCardSwitchHolder,\n            paymentInlineViewHolder,\n            otpViewHolder,\n            goPaySavedCardHolder,\n            goPayViewsHolder\n        )\n        saveCardSwitchHolder?.view?.cardSwitch?.switchesLayout?.visibility = View.GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = View.VISIBLE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n\n        val paymentInformation = paymentData.toJson() ?: return\n\n        try {\n            // Token will be null if PaymentDataRequest was not constructed using fromJson(String).\n            val paymentMethodData =\n                JSONObject(paymentInformation).getJSONObject(\"paymentMethodData\")\n\n            // If the gateway is set to \"example\", no payment information is returned - instead, the\n            // token will only consist of \"examplePaymentMethodToken\".\n            val tokenizationData = paymentMethodData.getJSONObject(\"tokenizationData\")\n\n            val token = tokenizationData.getString(\"token\")\n            Bugfender.d(CustomUtils.tagEvent,\"Google pay raw token :\"+token )\n            val gson = Gson()\n            val jsonToken = gson.fromJson(token, JsonObject::class.java)\n\n\n            /**\n             * At this stage, Passing the googlePaylaod to Tap Backend TokenAPI call followed by chargeAPI.\n             * ***/\n            /**\n             * At this stage, Passing the googlePaylaod to Tap Backend TokenAPI call followed by chargeAPI.\n             */\n            val createTokenGPayRequest = CreateTokenGPayRequest(\"googlepay\", jsonToken)\n            CardViewModel().processEvent(\n                CardViewEvent.CreateGoogleTokenEvent,\n                this,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                context,\n                createTokenGPayRequest\n            )\n            // Logging token string.\n            /* Log.e(\"GooglePaymentToken\", paymentMethodData\n                     .getJSONObject(\"tokenizationData\")\n                     .getString(\"token\"))\n */\n        } catch (e: JSONException) {\n            Log.e(\"handlePaymentSuccess\", \"Error: \" + e.toString())\n        }\n\n    }\n\n    /**\n     * handleError handles the payment response obtained from GooglePay API\n     * **/\n    fun handleError(statusCode: Int) {\n        Log.e(\"loadPaymentData failed\", String.format(\"Error code: %d\", statusCode))\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onReadSuccess(card: TapCard?) {\n        incrementalCount += 1\n\n        println(\"incrementalCount val>>>>>\"+incrementalCount)\n        /*   if (card != null) {\n               if(card.cardNumber!=null)\n              handleScanSuccessResult(card)\n              *//* Log.d(\"checkOutViewModel\", \"onRecognitionSuccess: \" + card.cardNumber)\n            Log.d(\"checkOutViewModel\", \"onRecognitionSuccess: \" + card.expirationDate)\n            Log.d(\"checkOutViewModel\", \"onRecognitionSuccess: \" + card.cardHolder)*//*\n\n        }*/\n        if (card != null && incrementalCount==3) {\n\n            if (card.cardNumber != null && card.cardHolder != null && card.expirationDate != null) {\n                handleScanSuccessResult(card)\n            }\n            return\n        }\n    }\n\n    override fun onReadFailure(error: String?) {\n        handleScanFailedResult(error)\n    }\n\n    private fun logicForLoyaltyProgram() {\n\n        loyaltyViewHolder.loyaltyView.switchLoyalty?.setOnCheckedChangeListener { buttonView, isChecked ->\n            loyaltyViewHolder.loyaltyView.switchTheme()\n\n            if (isChecked) {\n                loyaltyViewHolder.loyaltyView.linearLayout2?.visibility = View.VISIBLE\n                loyaltyViewHolder.loyaltyView.linearLayout3?.visibility = View.VISIBLE\n\n            } else {\n\n                loyaltyViewHolder.loyaltyView.linearLayout2?.visibility = View.GONE\n                loyaltyViewHolder.loyaltyView.linearLayout3?.visibility = View.GONE\n\n            }\n        }\n\n        loyaltyViewHolder.loyaltyView.setLoyaltyHeaderDataSource(\n            LoyaltyHeaderDataSource(\n                \"ADCB\",\n                \"https://is4-ssl.mzstatic.com/image/thumb/Purple112/v4/05/33/67/05336718-a6f6-8ca1-1ea0-0644f5071ce9/AppIcon-0-0-1x_U007emarketing-0-0-0-5-0-0-sRGB-0-0-0-GLES2_U002c0-512MB-85-220-0-0.png/1200x600wa.png\"\n            )\n        )\n\n        loyaltyViewHolder.loyaltyView.textViewClickable?.makeLinks(\n            Pair(\"(T&C)\", View.OnClickListener {\n                val url = \"https://www.adcb.com/en/tools-resources/adcb-privacy-policy/\"\n                val intent = Intent(Intent.ACTION_VIEW)\n                intent.data = Uri.parse(url)\n                context.startActivity(intent)\n\n            })\n        )\n    }\n\n    fun onButtonClicked() {\n        println(\"onButtonClicked\")\n        BenefitInAppCheckout.newInstance(\n            context as Activity,\n            appId,\n            \"448544\",\n            merchantId,\n            seceret,\n            \"20.0\",\n            \"BH\",\n            \"048\",\n            mcc,\n            \"Tap\",\n            \"Manama\",\n            this\n        )\n    }\n\n\n    override fun onTransactionSuccess(p0: Transaction?) {\n        println(\"transaction is success $p0\")\n\n    }\n\n    override fun onTransactionFail(p0: Transaction?) {\n        println(\"onTransactionFail is  $p0\")\n    }\n\n    fun dismissBottomSheet() {\n        checkoutFragment?.dismissBottomSheetDialog()\n    }\n\n\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout/src/main/java/company/tap/checkout/internal/viewmodels/CheckoutViewModel.kt b/checkout/src/main/java/company/tap/checkout/internal/viewmodels/CheckoutViewModel.kt
--- a/checkout/src/main/java/company/tap/checkout/internal/viewmodels/CheckoutViewModel.kt	(revision c46dbf76c8aaeb9118f43cb1199424eeb6aae4c9)
+++ b/checkout/src/main/java/company/tap/checkout/internal/viewmodels/CheckoutViewModel.kt	(date 1681137257980)
@@ -6,6 +6,7 @@
 import android.content.Intent
 import android.content.res.Resources
 import android.graphics.Color
+import android.graphics.drawable.BitmapDrawable
 import android.graphics.drawable.ShapeDrawable
 import android.net.Uri
 import android.os.Build
@@ -18,6 +19,7 @@
 import android.view.ViewOutlineProvider
 import android.view.animation.AnimationUtils
 import android.widget.FrameLayout
+import android.widget.ImageView
 import android.widget.LinearLayout
 import androidx.annotation.Nullable
 import androidx.annotation.RequiresApi
@@ -96,6 +98,7 @@
 import company.tap.tapuilibrary.uikit.ktx.makeLinks
 import company.tap.tapuilibrary.uikit.ktx.setTopBorders
 import company.tap.tapuilibrary.uikit.views.TabAnimatedActionButton
+import jp.wasabeef.blurry.Blurry
 import kotlinx.android.synthetic.main.amountview_layout.view.*
 import kotlinx.android.synthetic.main.businessview_layout.view.*
 import kotlinx.android.synthetic.main.cardviewholder_layout1.view.*
@@ -137,7 +140,7 @@
     private var displayOtpIsOpen: Boolean = false
     private var saveCardSwitchHolder: SwitchViewHolder? = null
 
-    private lateinit var  title :String
+    private lateinit var title: String
     private lateinit var paymentInlineViewHolder: PaymentInlineViewHolder
     private lateinit var goPaySavedCardHolder: GoPaySavedCardHolder
     private lateinit var businessViewHolder: BusinessViewHolder
@@ -165,6 +168,7 @@
     private lateinit var selectedCurrency: String
     private var fee: BigDecimal? = BigDecimal.ZERO
     val provider: IPaymentDataProvider = PaymentDataProvider()
+
     @JvmField
     var currentCurrency: String = ""
 
@@ -172,7 +176,6 @@
     var currentCurrencySymbol: String = ""
 
 
-
     @JvmField
     var currentAmount: String = ""
     private lateinit var adapter: CardTypeAdapterUIKIT
@@ -187,7 +190,9 @@
 
     @SuppressLint("StaticFieldLeak")
     private lateinit var inLineCardLayout: FrameLayout
-    private lateinit var headerLayout: LinearLayout
+
+    @SuppressLint("StaticFieldLeak")
+    private lateinit var headerLayout: FrameLayout
 
     @SuppressLint("StaticFieldLeak")
     private lateinit var sdkLayout: LinearLayout
@@ -222,9 +227,12 @@
     var currentCalculatedAmount: BigDecimal? = null
     var lastSelectedCurrency: String? = null
     var loyatFlag: Boolean? = false
-   @JvmField var isSavedCardSelected: Boolean? = false
 
-    @JvmField var globalChargeResponse: Charge? =null
+    @JvmField
+    var isSavedCardSelected: Boolean? = false
+
+    @JvmField
+    var globalChargeResponse: Charge? = null
 
     @JvmField
     var selectedTotalAmount: String? = null
@@ -246,8 +254,10 @@
     val seceret: String = "3l5e0cstdim11skgwoha8x9vx9zo0kxxi4droryjp4eqd"
     val countrycode: String = "1001"
     val mcc: String = "4816"
+
     @JvmField
-    var incrementalCount:Int = 0
+    var incrementalCount: Int = 0
+
     @RequiresApi(Build.VERSION_CODES.N)
     fun initLayoutManager(
         bottomSheetDialog: BottomSheetDialog,
@@ -261,7 +271,7 @@
         intent: Intent,
         cardViewModel: CardViewModel,
         checkoutFragment: CheckoutFragment,
-        headerLayout: LinearLayout
+        headerLayout: FrameLayout
     ) {
         this.context = context
         this.fragmentManager = fragmentManager
@@ -288,16 +298,16 @@
         initOtpActionButton()
         setAllSeparatorTheme()
         //sdkLayout.setBackgroundColor(Color.parseColor(ThemeManager.getValue("tapBottomSheet.dimmedColor")))
-      //  sdkLayout.setBackgroundColor(Color.parseColor(ThemeManager.getValue("horizontalList.backgroundColor")))
-       // bottomSheetLayout.setBackgroundColor(Color.parseColor(ThemeManager.getValue("horizontalList.backgroundColor")))
-       // frameLayout.setBackgroundColor(Color.parseColor(ThemeManager.getValue("horizontalList.backgroundColor")))
+        //  sdkLayout.setBackgroundColor(Color.parseColor(ThemeManager.getValue("horizontalList.backgroundColor")))
+        // bottomSheetLayout.setBackgroundColor(Color.parseColor(ThemeManager.getValue("horizontalList.backgroundColor")))
+        // frameLayout.setBackgroundColor(Color.parseColor(ThemeManager.getValue("horizontalList.backgroundColor")))
 
-      //  sdkLayout.outlineProvider = ViewOutlineProvider.BACKGROUND
-       // sdkLayout.clipToOutline = true
+        //  sdkLayout.outlineProvider = ViewOutlineProvider.BACKGROUND
+        // sdkLayout.clipToOutline = true
 
 
         //  initLoyaltyView()
-      //  checkoutFragment.enableSections()
+        //  checkoutFragment.enableSections()
 
     }
 
@@ -329,7 +339,7 @@
     private fun initOtpActionButton() {
         otpViewHolder.otpView.otpViewActionButton.setOnClickListener {
             //Added to hide keyboard if open
-            CustomUtils.hideKeyboardFrom(context as Activity,otpViewHolder.view)
+            CustomUtils.hideKeyboardFrom(context as Activity, otpViewHolder.view)
             when (otpTypeString) {
                 PaymentTypeEnum.GOPAY ->
                     goPayViewsHolder.onOtpButtonConfirmationClick(otpViewHolder.otpView.otpViewInput1.text.toString())
@@ -360,8 +370,10 @@
                         false,
                         "en",
                         if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {
-                            payString+" "+currentCurrencySymbol+" "+selectedAmount
-                        }else{ payString+" "+currentCurrencySymbol+" "+currentAmount},
+                            payString + " " + currentCurrencySymbol + " " + selectedAmount
+                        } else {
+                            payString + " " + currentCurrencySymbol + " " + currentAmount
+                        },
                         Color.parseColor(ThemeManager.getValue("actionButton.Valid.paymentBackgroundColor")),
                         Color.parseColor(ThemeManager.getValue("actionButton.Valid.titleLabelColor")),
                     )
@@ -436,16 +448,31 @@
         saveCardSwitchHolder = SwitchViewHolder(context, this)
         loyaltyViewHolder = LoyaltyViewHolder(context, this, this)
 
-         headerLayout.let { it1 ->
-            setTopBorders(
-                it1,
-                35f,// corner raduis
-                0.0f,
-                Color.parseColor(ThemeManager.getValue("horizontalList.backgroundColor")),// stroke color
-                Color.parseColor(ThemeManager.getValue("horizontalList.backgroundColor")),// tint color
-                Color.parseColor(ThemeManager.getValue("horizontalList.backgroundColor"))
-            )
-        }//
+        val bodyImageView = ImageView (this.context);
+        bodyImageView.setBackgroundResource(R.drawable.blurviewnew);
+        headerLayout.addView(bodyImageView)
+//        headerLayout.let { it1 ->
+//            setTopBorders(
+//                it1,
+//                35f,// corner raduis
+//                0.0f,
+//
+//                Color.parseColor("#FF000000"),// stroke color
+//                Color.parseColor("#FF000000"),// tint color
+//                Color.parseColor("#FF000000")
+//            )
+//          //  it1.setBackgroundColor(Color.TRANSPARENT)
+//        }
+        bodyImageView.post {
+            Blurry.with(context)
+                .radius(25)
+                .sampling(4)
+                .onto(bodyImageView.parent as ViewGroup)
+        }
+
+        headerLayout.alpha = 0.5f
+        //
+        //  headerLayout.setBackgroundColor(Color.TRANSPARENT)
         paymentInlineViewHolder = PaymentInlineViewHolder(
             context, this,
             this,
@@ -530,13 +557,13 @@
                         saveCardSwitchHolder
                     )
                     cardViewHolder.cardInfoHeaderText?.visibility = View.GONE
-                } else  if (PaymentDataSource.getPaymentDataType() == "CARD") {
+                } else if (PaymentDataSource.getPaymentDataType() == "CARD") {
                     addViews(
                         businessViewHolder,
-                        paymentInlineViewHolder,saveCardSwitchHolder
+                        paymentInlineViewHolder, saveCardSwitchHolder
                     )
                     cardViewHolder.cardInfoHeaderText.visibility = View.VISIBLE
-                }else
+                } else
                 //Checkimg to be removed once loyalty enabled form api level onluy else will be there
                     if (SDKSession.enableLoyalty == true) {
                         addViews(
@@ -578,7 +605,6 @@
         }?.let { saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setDisplayMetrics(it) }
 
 
-
     }
 
     fun setBottomSheetLayout(bottomSheetLayout: FrameLayout) {
@@ -627,19 +653,19 @@
             // AnimationUtils.loadAnimation(bottomSheetLayout.context,R.anim.slide_down)
             // AnimationEngine.applyTransition(bottomSheetLayout, AnimationEngine.Type.SLIDE, 1200)
 
-        /*    val fadeIn = AlphaAnimation(0f, 1f)
-            fadeIn.interpolator = DecelerateInterpolator() //add this
-            fadeIn.duration = 1000
+            /*    val fadeIn = AlphaAnimation(0f, 1f)
+                fadeIn.interpolator = DecelerateInterpolator() //add this
+                fadeIn.duration = 1000
 
-            val fadeOut = AlphaAnimation(1f, 0f)
-            fadeOut.interpolator = AccelerateInterpolator() //and this
-            fadeOut.startOffset = 1000
-            fadeOut.duration = 1000
+                val fadeOut = AlphaAnimation(1f, 0f)
+                fadeOut.interpolator = AccelerateInterpolator() //and this
+                fadeOut.startOffset = 1000
+                fadeOut.duration = 1000
 
-            val animation = AnimationSet(false) //change to false
-            animation.addAnimation(fadeIn)
-       //     animation.addAnimation(fadeOut)
-            this.bottomSheetLayout.animation = animation*/
+                val animation = AnimationSet(false) //change to false
+                animation.addAnimation(fadeIn)
+           //     animation.addAnimation(fadeOut)
+                this.bottomSheetLayout.animation = animation*/
         }
     }
 
@@ -705,8 +731,10 @@
                 false,
                 "en",
                 if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {
-                    payString+" "+currentCurrencySymbol+" "+selectedAmount
-                }else{ payString+" "+currentCurrencySymbol+" "+currentAmount},
+                    payString + " " + currentCurrencySymbol + " " + selectedAmount
+                } else {
+                    payString + " " + currentCurrencySymbol + " " + currentAmount
+                },
                 Color.parseColor(ThemeManager.getValue("actionButton.Invalid.backgroundColor")),
                 Color.parseColor(ThemeManager.getValue("actionButton.Invalid.titleLabelColor")),
             )
@@ -718,40 +746,38 @@
         removeInlineScanner()
         removeNFCViewFragment()
         setSlideAnimation()
-      /*  Handler().postDelayed({
-            translateViewToNewHeight(bottomSheetLayout.measuredHeight,false)
-        },400)*/
+        /*  Handler().postDelayed({
+              translateViewToNewHeight(bottomSheetLayout.measuredHeight,false)
+          },400)*/
     }
 
 
     private fun caseDisplayControlCurrency() {
-      /*  val newHeight = (context as Activity).window?.decorView?.measuredHeight
-        val viewGroupLayoutParams = bottomSheetLayout.layoutParams
-        viewGroupLayoutParams.height = newHeight ?: 0
-        bottomSheetLayout.layoutParams = viewGroupLayoutParams
-*/
-        val originalHeight :Int = sdkLayout.height
+        /*  val newHeight = (context as Activity).window?.decorView?.measuredHeight
+          val viewGroupLayoutParams = bottomSheetLayout.layoutParams
+          viewGroupLayoutParams.height = newHeight ?: 0
+          bottomSheetLayout.layoutParams = viewGroupLayoutParams
+  */
+        val originalHeight: Int = sdkLayout.height
 
         removeViews(
-                //  businessViewHolder,
-                // amountViewHolder,
-                cardViewHolder,
-                paymentInlineViewHolder,
-                )
+            //  businessViewHolder,
+            // amountViewHolder,
+            cardViewHolder,
+            paymentInlineViewHolder,
+        )
         addViews(
             itemsViewHolder
         )
         //replaced original height with bottomSheetLayout height
         Handler().postDelayed({
-            translateViewToNewHeight(bottomSheetLayout.measuredHeight,true)
+            translateViewToNewHeight(bottomSheetLayout.measuredHeight, true)
 
-        },400)
+        }, 400)
 
         // removeAllViews()
 
 
-
-
         // checkoutFragment?.isFullscreen =true
 
         /**
@@ -769,11 +795,14 @@
             saveCardSwitchHolder,
             goPayViewsHolder,
             otpViewHolder,
-           // itemsViewHolder
+            // itemsViewHolder
         )
         //Hide keyboard of any open
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
-            CustomUtils.hideKeyboardFrom(paymentInlineViewHolder.view.context, paymentInlineViewHolder.view)
+            CustomUtils.hideKeyboardFrom(
+                paymentInlineViewHolder.view.context,
+                paymentInlineViewHolder.view
+            )
         }
     }
 
@@ -781,20 +810,20 @@
         if (goPayViewsHolder.goPayopened || itemsViewHolder.itemsdisplayed) setActionGoPayOpenedItemsDisplayed()
         else setActionNotGoPayOpenedNotItemsDisplayed()
         Handler().postDelayed({
-            translateViewToNewHeight(bottomSheetLayout.measuredHeight,false)
-        },400)
+            translateViewToNewHeight(bottomSheetLayout.measuredHeight, false)
+        }, 400)
 
     }
 
-    private fun translateViewToNewHeight(originalHeight: Int, expandHeightBool :Boolean) {
+    private fun translateViewToNewHeight(originalHeight: Int, expandHeightBool: Boolean) {
         val sdkLayoutHeight = sdkLayout.height
         val bottomSheetLayoutHeight = bottomSheetLayout.height
-        println("sdkLayoutHeight>>"+sdkLayoutHeight)
-        println("originalHeight>>"+originalHeight)
+        println("sdkLayoutHeight>>" + sdkLayoutHeight)
+        println("originalHeight>>" + originalHeight)
         val resizeAnimation = ResizeAnimation(
             bottomSheetLayout,
-            sdkLayoutHeight ,
-            originalHeight , expandHeightBool
+            sdkLayoutHeight,
+            originalHeight, expandHeightBool
         )
         resizeAnimation.duration = 350
         bottomSheetLayout.startAnimation(resizeAnimation)
@@ -803,7 +832,6 @@
     }
 
 
-
     @RequiresApi(Build.VERSION_CODES.N)
     private fun setActionGoPayOpenedItemsDisplayed() {
         removeViews(
@@ -816,8 +844,8 @@
             otpViewHolder,
             itemsViewHolder
         )
-        if(:: webViewHolder.isInitialized){
-            removeViews( webViewHolder)
+        if (::webViewHolder.isInitialized) {
+            removeViews(webViewHolder)
         }
         addViews(
             cardViewHolder,
@@ -832,7 +860,7 @@
     }
 
     private fun setActionNotGoPayOpenedNotItemsDisplayed() {
-        val originalHeight:Int = sdkLayout.height
+        val originalHeight: Int = sdkLayout.height
         saveCardSwitchHolder?.let {
             removeViews(
                 cardViewHolder,
@@ -842,7 +870,7 @@
             )
         }
 
-        if(::webViewHolder.isInitialized) removeViews(webViewHolder)
+        if (::webViewHolder.isInitialized) removeViews(webViewHolder)
 
         saveCardSwitchHolder?.let {
             addViews(
@@ -859,9 +887,9 @@
         itemsViewHolder.view.mainCurrencyChip.chipsRecycler.adapter = currencyAdapter
         //  itemsViewHolder.view.itemRecylerView.adapter =itemAdapter
         frameLayout.visibility = View.GONE
-      /*  Handler().postDelayed({
-            translateViewToNewHeight(bottomSheetLayout.measuredHeight,false)
-        },400)*/
+        /*  Handler().postDelayed({
+              translateViewToNewHeight(bottomSheetLayout.measuredHeight,false)
+          },400)*/
 
 
     }
@@ -875,7 +903,7 @@
     ) {
         setSlideAnimation()
 
-       // amountViewHolder.changeGroupAction(false)
+        // amountViewHolder.changeGroupAction(false)
         amountViewHolder.view.amount_section.itemCountButton.text = LocalizationManager.getValue(
             "close",
             "Common"
@@ -937,7 +965,7 @@
         // bottomSheetDialog.dismissWithAnimation
         //start counter on open otpview
         otpViewHolder?.otpView?.startCounter()
-        addViews( otpViewHolder)
+        addViews(otpViewHolder)
         otpViewHolder.otpView.visibility = View.VISIBLE
         //Added to hide the Items-Amount button when OTP is opened
         amountViewHolder.view.amount_section?.itemAmountLayout?.visibility = View.GONE
@@ -1026,7 +1054,7 @@
     override fun displayRedirect(url: String, authenticate: Charge?) {
         this.redirectURL = url
 
-        println("redirectURL before display>>"+url)
+        println("redirectURL before display>>" + url)
         if (::redirectURL.isInitialized && ::fragmentManager.isInitialized) {
             if (otpViewHolder.otpView.isVisible) {
                 removeViews(
@@ -1036,17 +1064,17 @@
                     otpViewHolder
                 )
             }
-           // setSlideAnimation()
-            if(PaymentDataSource?.getWebViewType()!=null && PaymentDataSource.getWebViewType() ==WebViewType.REDIRECT){
+            // setSlideAnimation()
+            if (PaymentDataSource?.getWebViewType() != null && PaymentDataSource.getWebViewType() == WebViewType.REDIRECT) {
                 businessViewHolder.view.headerView.constraint.visibility = View.GONE
                 businessViewHolder.view.topSeparatorLinear.visibility = View.GONE
                 //Stopped showing closetext as requested
-               // checkoutFragment.closeText.visibility = View.VISIBLE
+                // checkoutFragment.closeText.visibility = View.VISIBLE
                 removeViews(
                     //businessViewHolder,
                     amountViewHolder,
                     cardViewHolder,
-                   // saveCardSwitchHolder,
+                    // saveCardSwitchHolder,
                     paymentInlineViewHolder,
                     otpViewHolder,
                     goPaySavedCardHolder,
@@ -1054,8 +1082,10 @@
                 )
 
                 saveCardSwitchHolder?.view?.mainSwitch?.visibility = View.GONE
-                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)
-                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility= View.GONE
+                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(
+                    ActionButtonState.LOADING
+                )
+                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = View.GONE
 
                 saveCardSwitchHolder?.view?.cardSwitch?.tapLogoImage?.visibility = View.GONE
 
@@ -1063,33 +1093,43 @@
 
                     val fragment = WebFragment.newInstance(
                         redirectURL,
-                        this, cardViewModel, authenticate,this
+                        this, cardViewModel, authenticate, this
                     )
 
-                    fragmentManager.beginTransaction().replace(R.id.webFrameLayout, fragment,"webFragment").addToBackStack("webFragment")
+                    fragmentManager.beginTransaction()
+                        .replace(R.id.webFrameLayout, fragment, "webFragment")
+                        .addToBackStack("webFragment")
                         .commit()
                     //  checkoutFragment.closeText.visibility = View.VISIBLE
                     webFrameLayout.visibility = View.VISIBLE
-                    println("fragment hh"+Resources.getSystem().getDisplayMetrics().heightPixels)
+                    println("fragment hh" + Resources.getSystem().getDisplayMetrics().heightPixels)
                     translateHeightRedirect(sdkLayout)
 
                 }, 500)
                 Handler(Looper.getMainLooper()).postDelayed({
 
-                   // saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = View.INVISIBLE
-                 // removeViews(saveCardSwitchHolder)
+                    // saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = View.INVISIBLE
+                    // removeViews(saveCardSwitchHolder)
 
                 }, 700)
 
 
-            }else   if(PaymentDataSource?.getWebViewType()!=null && PaymentDataSource.getWebViewType() ==WebViewType.THREE_DS_WEBVIEW){
+            } else if (PaymentDataSource?.getWebViewType() != null && PaymentDataSource.getWebViewType() == WebViewType.THREE_DS_WEBVIEW) {
 
-                  webViewHolder = WebViewHolder(context, fragmentManager,url,this,cardViewModel,authenticate,this)
+                webViewHolder = WebViewHolder(
+                    context,
+                    fragmentManager,
+                    url,
+                    this,
+                    cardViewModel,
+                    authenticate,
+                    this
+                )
                 removeViews(
                     //  businessViewHolder,
                     //   amountViewHolder,
                     cardViewHolder,
-                  //  saveCardSwitchHolder,
+                    //  saveCardSwitchHolder,
                     paymentInlineViewHolder,
                     otpViewHolder,
                     goPaySavedCardHolder,
@@ -1100,55 +1140,55 @@
                 amountViewHolder?.view?.amount_section?.itemAmountLayout?.visibility = View.GONE
                 addViews(webViewHolder)
                 saveCardSwitchHolder?.view?.mainSwitch?.visibility = View.GONE
-                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)
-                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility= View.GONE
+                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(
+                    ActionButtonState.LOADING
+                )
+                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = View.GONE
 
                 saveCardSwitchHolder?.view?.cardSwitch?.tapLogoImage?.visibility = View.GONE
-                 Handler(Looper.getMainLooper()).postDelayed({
-                   //  webFrameLayout.visibility = View.VISIBLE
+                Handler(Looper.getMainLooper()).postDelayed({
+                    //  webFrameLayout.visibility = View.VISIBLE
 
-           }, 1800)
+                }, 1800)
 
-                checkoutFragment?.closeText?.visibility= View.GONE
+                checkoutFragment?.closeText?.visibility = View.GONE
                 //Stopped showing cancel button and poweredby for 3ds
-             /*    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(
-              true,
-              LocalizationManager.getLocale(context).toString(),LocalizationManager.getValue("deleteSavedCardButtonCancel", "SavedCardTitle"),
-                     Color.parseColor(ThemeManager.getValue("actionButton.Cancel.backgroundColor")),
-                     Color.parseColor(ThemeManager.getValue("actionButton.Cancel.titleLabelColor")))
+                /*    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(
+                 true,
+                 LocalizationManager.getLocale(context).toString(),LocalizationManager.getValue("deleteSavedCardButtonCancel", "SavedCardTitle"),
+                        Color.parseColor(ThemeManager.getValue("actionButton.Cancel.backgroundColor")),
+                        Color.parseColor(ThemeManager.getValue("actionButton.Cancel.titleLabelColor")))
 
-                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.let {
-                    setBorderedView(
-                        it,
-                        100.0f,
-                        2.0f,
-                        Color.parseColor(ThemeManager.getValue("actionButton.Cancel.borderColor")),
-                        Color.parseColor(ThemeManager.getValue("actionButton.Cancel.backgroundColor")),
-                        Color.parseColor(ThemeManager.getValue("actionButton.Cancel.backgroundColor"))
-                    )
-                }
-          saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.RESET)
+                   saveCardSwitchHolder?.view?.cardSwitch?.payButton?.let {
+                       setBorderedView(
+                           it,
+                           100.0f,
+                           2.0f,
+                           Color.parseColor(ThemeManager.getValue("actionButton.Cancel.borderColor")),
+                           Color.parseColor(ThemeManager.getValue("actionButton.Cancel.backgroundColor")),
+                           Color.parseColor(ThemeManager.getValue("actionButton.Cancel.backgroundColor"))
+                       )
+                   }
+             saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.RESET)
 
-          saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setOnClickListener {
-              this.dismissBottomSheet()
+             saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setOnClickListener {
+                 this.dismissBottomSheet()
 
-          }*/
+             }*/
             }
 
 
-
-
         }
 
-       // removeViews(amountViewHolder, businessViewHolder)
+        // removeViews(amountViewHolder, businessViewHolder)
         // tabAnimatedActionButtonViewHolder?.view?.actionButton?.visibility = View.INVISIBLE
     }
 
-    private fun translateHeightRedirect(sdkLayout: LinearLayout){
+    private fun translateHeightRedirect(sdkLayout: LinearLayout) {
         val resizeAnimation = ResizeAnimation(
             bottomSheetLayout,
             Resources.getSystem().getDisplayMetrics().heightPixels,
-            sdkLayout.height , true
+            sdkLayout.height, true
         )
         resizeAnimation.duration = 350
         bottomSheetLayout.startAnimation(resizeAnimation)
@@ -1185,9 +1225,9 @@
         merchantData: MerchantData?,
         paymentOptionsResponse: PaymentOptionsResponse?
     ) {
-          println("if(::businessViewHolder.isInitialized getpay" + ::businessViewHolder.isInitialized)
-         println("merchantData name>>" + merchantData?.name)
-          println("merchantData logo>>" + merchantData?.logo)
+        println("if(::businessViewHolder.isInitialized getpay" + ::businessViewHolder.isInitialized)
+        println("merchantData name>>" + merchantData?.name)
+        println("merchantData logo>>" + merchantData?.logo)
         if (paymentOptionsResponse != null) {
             this.paymentOptionsResponse = paymentOptionsResponse
         }
@@ -1196,18 +1236,18 @@
                 merchantData?.logo,
                 merchantData?.name
             )
-           // TODO check
-                    if (merchantData?.verifiedApplication == true) {
+            // TODO check
+            if (merchantData?.verifiedApplication == true) {
 
-                    }
+            }
         }
         // println("PaymentOptionsResponse on get$paymentOptionsResponse")
         allCurrencies.value = paymentOptionsResponse?.supportedCurrencies
         savedCardList.value = paymentOptionsResponse?.cards
         currencyAdapter = CurrencyTypeAdapter(this)
 
-      //  println("savedCardList on get" + savedCardList.value)
-      //  println("paymentOptionsResponse?.supportedCurrencie on get" + paymentOptionsResponse?.supportedCurrencies)
+        //  println("savedCardList on get" + savedCardList.value)
+        //  println("paymentOptionsResponse?.supportedCurrencie on get" + paymentOptionsResponse?.supportedCurrencies)
         if (paymentOptionsResponse?.supportedCurrencies != null && ::amountViewHolder.isInitialized) {
             currentCurrency = paymentOptionsResponse.currency
             for (i in paymentOptionsResponse.supportedCurrencies.indices) {
@@ -1219,17 +1259,17 @@
                         CurrencyFormatter.currencyFormat(paymentOptionsResponse.supportedCurrencies[i].amount.toString())
                     currentCurrency =
                         paymentOptionsResponse.supportedCurrencies[i].symbol.toString()
-                  //  println("currentCurrency currency value>>" + currentCurrency)
+                    //  println("currentCurrency currency value>>" + currentCurrency)
 
-                   /* if (currentCurrency.length == 2) {
-                        currentCurrency =
-                            paymentOptionsResponse.supportedCurrencies[i].currency.toString()
-                    } else {
-                        currentCurrency =
-                            paymentOptionsResponse.supportedCurrencies[i].symbol.toString()
-                        currentCurrencySymbol =
-                            paymentOptionsResponse.supportedCurrencies[i].symbol.toString()
-                    }*/
+                    /* if (currentCurrency.length == 2) {
+                         currentCurrency =
+                             paymentOptionsResponse.supportedCurrencies[i].currency.toString()
+                     } else {
+                         currentCurrency =
+                             paymentOptionsResponse.supportedCurrencies[i].symbol.toString()
+                         currentCurrencySymbol =
+                             paymentOptionsResponse.supportedCurrencies[i].symbol.toString()
+                     }*/
                     currentCurrency =
                         paymentOptionsResponse.supportedCurrencies[i].currency.toString()
                     currentCurrencySymbol =
@@ -1239,8 +1279,8 @@
 
             }
             /**
-           *Note replacing all currency to be currency symbol as per ali 17jan23
-            * **/
+             *Note replacing all currency to be currency symbol as per ali 17jan23
+             * **/
             amountViewHolder.setDataFromAPI(
                 currentAmount,
                 currentCurrencySymbol,
@@ -1326,8 +1366,10 @@
             false,
             LocalizationManager.getLocale(context).toString(),
             if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {
-                payString+" "+currentCurrencySymbol+" "+selectedAmount
-            }else{ payString+" "+currentCurrencySymbol+" "+currentAmount},
+                payString + " " + currentCurrencySymbol + " " + selectedAmount
+            } else {
+                payString + " " + currentCurrencySymbol + " " + currentAmount
+            },
             Color.parseColor(ThemeManager.getValue("actionButton.Invalid.backgroundColor")),
             Color.parseColor(ThemeManager.getValue("actionButton.Invalid.titleLabelColor")),
         )
@@ -1440,11 +1482,11 @@
     }
 
     @RequiresApi(Build.VERSION_CODES.N)
-     fun filterCardTypes(list: ArrayList<PaymentOption>) {
+    fun filterCardTypes(list: ArrayList<PaymentOption>) {
         var filteredCardList: List<PaymentOption> =
             list.filter { items -> items.paymentType == PaymentType.CARD }
 
-       // println("filteredCardList value " + filteredCardList.size)
+        // println("filteredCardList value " + filteredCardList.size)
         if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.N) {
             paymentInlineViewHolder.setDataFromAPI(filteredCardList)
         }
@@ -1508,7 +1550,7 @@
     @RequiresApi(Build.VERSION_CODES.N)
     @SuppressLint("WrongConstant")
     override fun didDialogueExecute(response: String, cardTypeDialog: Boolean?) {
-       // println("response are$response")
+        // println("response are$response")
         if (response == "YES") {
             if (deleteCard) {
                 //saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)
@@ -1524,7 +1566,7 @@
                 )
 
             } else {
-               // println("else block is calle are")
+                // println("else block is calle are")
                 removeViews(goPaySavedCardHolder)
                 //  adapter.updateAdapterDataSavedCard(savedCardList.value as List<SavedCard>)
                 goPayViewsHolder.goPayopened = false
@@ -1551,7 +1593,7 @@
 
     override fun deleteSelectedCardListener(delSelectedCard: DeleteCardResponse) {
         println("delSelectedCard value is" + delSelectedCard.deleted)
-      //  println("selectedItemsDel value is" +selectedItemsDel)
+        //  println("selectedItemsDel value is" +selectedItemsDel)
         if (delSelectedCard.deleted) {
             adapter.deleteSelectedCard(selectedItemsDel)
             adapter.updateAdapterDataSavedCard(arrayListSavedCardSize)
@@ -1570,9 +1612,9 @@
         contextSDK: Context?
     ) {
         SessionManager.setActiveSession(false)
-        println("response val>>"+response)
-        println("tabAnimatedActionButton val>>"+tabAnimatedActionButton)
-        println("save val>>"+saveCardSwitchHolder)
+        println("response val>>" + response)
+        println("tabAnimatedActionButton val>>" + tabAnimatedActionButton)
+        println("save val>>" + saveCardSwitchHolder)
         /* if(chargeResponse?.status == null && response == "tokenized"){
              //todo replaced authorized with chargeresponse
              SDKSession.getListener()?.getStatusSDK(response,chargeResponse)
@@ -1592,7 +1634,7 @@
                 context as Activity
             )
         )
-      //  addViews(saveCardSwitchHolder)
+        //  addViews(saveCardSwitchHolder)
         /***
          * This function is  working fine as expected in case when 3ds is false
          * i.e.  sdkSession.isRequires3DSecure(false) as no loading of url occurs direct response
@@ -1602,7 +1644,7 @@
          * **/
 
 
-       // tabAnimatedActionButton?.clearAnimation()
+        // tabAnimatedActionButton?.clearAnimation()
         if (::webFrameLayout.isInitialized) {
             if (fragmentManager.findFragmentById(R.id.webFrameLayout) != null)
                 fragmentManager.beginTransaction()
@@ -1611,13 +1653,13 @@
             webFrameLayout.visibility = View.GONE
             supportFragmentManager?.popBackStack()
         }
-        if(::webViewHolder.isInitialized)
+        if (::webViewHolder.isInitialized)
             removeViews(webViewHolder)
-            //removeAllViews()
+        //removeAllViews()
         Handler().postDelayed({
-            if(::bottomSheetLayout.isInitialized)
-            translateViewToNewHeight(bottomSheetLayout.measuredHeight,false)
-        },300)
+            if (::bottomSheetLayout.isInitialized)
+                translateViewToNewHeight(bottomSheetLayout.measuredHeight, false)
+        }, 300)
 
         if (::otpViewHolder.isInitialized)
             if (otpViewHolder.otpView.isVisible) {
@@ -1630,20 +1672,23 @@
                 )
             }
         if (saveCardSwitchHolder != null) {
-           // removeAllViews()
-         //   addViews(saveCardSwitchHolder)
-             saveCardSwitchHolder?.view?.visibility = View.VISIBLE
+            // removeAllViews()
+            //   addViews(saveCardSwitchHolder)
+            saveCardSwitchHolder?.view?.visibility = View.VISIBLE
             saveCardSwitchHolder?.view?.mainSwitch?.visibility = View.INVISIBLE
             saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = View.VISIBLE
         }
 
-        if(::checkoutFragment.isInitialized)
-          checkoutFragment.closeText.visibility =View.GONE
-        println("chargeResponse are>>>>"+chargeResponse?.status)
-       // println("saveCardSwitchHolder are>>>>"+saveCardSwitchHolder)
-        if(response.contains("failure") && chargeResponse==null){
+        if (::checkoutFragment.isInitialized)
+            checkoutFragment.closeText.visibility = View.GONE
+        println("chargeResponse are>>>>" + chargeResponse?.status)
+        // println("saveCardSwitchHolder are>>>>"+saveCardSwitchHolder)
+        if (response.contains("failure") && chargeResponse == null) {
 
-            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(false,Color.MAGENTA)
+            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(
+                false,
+                Color.MAGENTA
+            )
             saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(
                 false,
                 "en",
@@ -1653,20 +1698,20 @@
             )
             saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.ERROR)
         }
-        println("chargeResponse to handle"+chargeResponse?.status)
+        println("chargeResponse to handle" + chargeResponse?.status)
         when (chargeResponse?.status) {
             ChargeStatus.CAPTURED, ChargeStatus.AUTHORIZED, ChargeStatus.VALID, ChargeStatus.IN_PROGRESS -> {
                 tabAnimatedActionButton?.changeButtonState(ActionButtonState.SUCCESS)
                 Handler().postDelayed({
-                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(
-                    ActionButtonState.SUCCESS
-                )
+                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(
+                        ActionButtonState.SUCCESS
+                    )
                 }, 400)
                 tabAnimatedActionButton?.changeButtonState(ActionButtonState.SUCCESS)
 
                 saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(
                     true,
-                    "en","",
+                    "en", "",
                     Color.parseColor(ThemeManager.getValue("actionButton.Valid.paymentBackgroundColor")),
                     Color.parseColor(ThemeManager.getValue("actionButton.Valid.titleLabelColor"))
                 )
@@ -1674,7 +1719,7 @@
             }
             ChargeStatus.CANCELLED, ChargeStatus.TIMEDOUT, ChargeStatus.FAILED, ChargeStatus.DECLINED, ChargeStatus.UNKNOWN,
             ChargeStatus.RESTRICTED, ChargeStatus.ABANDONED, ChargeStatus.VOID, ChargeStatus.INVALID -> {
-                println("CANCELLED 2>>>"+saveCardSwitchHolder?.view?.cardSwitch?.payButton)
+                println("CANCELLED 2>>>" + saveCardSwitchHolder?.view?.cardSwitch?.payButton)
                 Handler().postDelayed({
                     saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(
                         ActionButtonState.ERROR
@@ -1685,13 +1730,13 @@
                     ActionButtonState.ERROR
                 )
 
-                 saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(
-                       false,
-                       "en",
-                       "",
-                       Color.parseColor(ThemeManager.getValue("actionButton.Invalid.backgroundColor")),
-                       Color.parseColor(ThemeManager.getValue("actionButton.Invalid.titleLabelColor")),
-                   )
+                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(
+                    false,
+                    "en",
+                    "",
+                    Color.parseColor(ThemeManager.getValue("actionButton.Invalid.backgroundColor")),
+                    Color.parseColor(ThemeManager.getValue("actionButton.Invalid.titleLabelColor")),
+                )
 
             }
             else -> {
@@ -1703,12 +1748,15 @@
                 } else {
                     println("is this called>>>")
                     removeAllViews()
-                    if(ThemeManager.currentTheme!=null&& chargeResponse!=null)
-                    tabAnimatedActionButton?.setInValidBackground(false, Color.parseColor(ThemeManager.getValue("actionButton.Invalid.backgroundColor")))
-else
-                    tabAnimatedActionButton?.changeButtonState(
-                        ActionButtonState.ERROR
-                    )
+                    if (ThemeManager.currentTheme != null && chargeResponse != null)
+                        tabAnimatedActionButton?.setInValidBackground(
+                            false,
+                            Color.parseColor(ThemeManager.getValue("actionButton.Invalid.backgroundColor"))
+                        )
+                    else
+                        tabAnimatedActionButton?.changeButtonState(
+                            ActionButtonState.ERROR
+                        )
 
                     if (::businessViewHolder.isInitialized && saveCardSwitchHolder != null) {
                         addViews(businessViewHolder, saveCardSwitchHolder)
@@ -1716,7 +1764,10 @@
                         businessViewHolder.view.topSeparatorLinear.visibility = View.GONE
                         saveCardSwitchHolder?.view?.visibility = View.VISIBLE
                         saveCardSwitchHolder?.view?.mainSwitch?.visibility = View.GONE
-                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(false,Color.RED)
+                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(
+                            false,
+                            Color.RED
+                        )
 
                         saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(
                             false,
@@ -1727,14 +1778,14 @@
 
                             )
 
-                       /*tabAnimatedActionButton?.setButtonDataSource(
-                            false,
-                            "en",
-                            null,
-                            Color.parseColor(ThemeManager.getValue("actionButton.Invalid.backgroundColor")),
-                            Color.parseColor(ThemeManager.getValue("actionButton.Invalid.titleLabelColor")),
+                        /*tabAnimatedActionButton?.setButtonDataSource(
+                             false,
+                             "en",
+                             null,
+                             Color.parseColor(ThemeManager.getValue("actionButton.Invalid.backgroundColor")),
+                             Color.parseColor(ThemeManager.getValue("actionButton.Invalid.titleLabelColor")),
 
-                            )*/
+                             )*/
                         saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(
                             ActionButtonState.ERROR
                         )
@@ -1745,16 +1796,16 @@
             }
         }
         Handler().postDelayed({
-           // tabAnimatedActionButton?.onMorphAnimationReverted()
-           // tabAnimatedActionButton?.clearAnimation()
-            if(chargeResponse!=null)
-            tabAnimatedActionButton?.setButtonDataSource(
-                true,
-                "en",
-                null,
-                Color.parseColor(ThemeManager.getValue("actionButton.Valid.paymentBackgroundColor")),
-                Color.parseColor(ThemeManager.getValue("actionButton.Valid.titleLabelColor")),
-            )
+            // tabAnimatedActionButton?.onMorphAnimationReverted()
+            // tabAnimatedActionButton?.clearAnimation()
+            if (chargeResponse != null)
+                tabAnimatedActionButton?.setButtonDataSource(
+                    true,
+                    "en",
+                    null,
+                    Color.parseColor(ThemeManager.getValue("actionButton.Valid.paymentBackgroundColor")),
+                    Color.parseColor(ThemeManager.getValue("actionButton.Valid.titleLabelColor")),
+                )
             SDKSession.sessionActive = false
 
         }, 4000)
@@ -1769,8 +1820,8 @@
             )
         }
         //removeAllViews()
-      Handler().postDelayed({
-           if (::bottomSheetDialog.isInitialized)
+        Handler().postDelayed({
+            if (::bottomSheetDialog.isInitialized)
                 bottomSheetDialog.dismiss()
 
         }, 5000)
@@ -1783,20 +1834,20 @@
         if (chargeResponse != null) {
             saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)
             removeViews(
-               // businessViewHolder,
+                // businessViewHolder,
                 amountViewHolder,
                 cardViewHolder,
                 paymentInlineViewHolder,
                 saveCardSwitchHolder
             )
-          /*  businessViewHolder.setDataFromAPI(
-                selectedPaymentOption.image,
-                selectedPaymentOption.brand?.name
-            )*/
+            /*  businessViewHolder.setDataFromAPI(
+                  selectedPaymentOption.image,
+                  selectedPaymentOption.brand?.name
+              )*/
             addViews(asynchronousPaymentViewHolder)
             Handler().postDelayed({
-                translateViewToNewHeight(bottomSheetLayout.measuredHeight,true)
-            },400)
+                translateViewToNewHeight(bottomSheetLayout.measuredHeight, true)
+            }, 400)
             asynchronousPaymentViewHolder.setDataFromAPI(chargeResponse)
         }
     }
@@ -1810,18 +1861,18 @@
 
         viewHolders.forEach {
             Handler(Looper.getMainLooper()).postDelayed(Runnable {
-              //  it?.view?.visibility =View.INVISIBLE
+                //  it?.view?.visibility =View.INVISIBLE
                 if (::context.isInitialized) {
                     val animation = AnimationUtils.loadAnimation(context, R.anim.fade_out)
                     it?.view?.startAnimation(animation)
 
                 }
                 Handler().postDelayed({
-                if (::sdkLayout.isInitialized) {
-                    //it?.view?.visibility = View.INVISIBLE
-                    sdkLayout.removeView(it?.view)
+                    if (::sdkLayout.isInitialized) {
+                        //it?.view?.visibility = View.INVISIBLE
+                        sdkLayout.removeView(it?.view)
 
-                }
+                    }
                 }, 150)
 
 
@@ -1836,34 +1887,30 @@
 
         viewHolders.forEach {
             Handler(Looper.getMainLooper()).postDelayed(Runnable {
-               // it?.view?.visibility =View.VISIBLE
+                // it?.view?.visibility =View.VISIBLE
                 if (::context.isInitialized) {
 
 
-                   val animation = AnimationUtils.loadAnimation(context, R.anim.fade_in)
+                    val animation = AnimationUtils.loadAnimation(context, R.anim.fade_in)
                     it?.view?.startAnimation(animation)
 
                 }
 
                 Handler().postDelayed({
-                if (::sdkLayout.isInitialized) {
-                   // it?.view?.visibility = View.VISIBLE
-                    sdkLayout.removeView(it?.view)
-                    sdkLayout.addView(it?.view)
+                    if (::sdkLayout.isInitialized) {
+                        // it?.view?.visibility = View.VISIBLE
+                        sdkLayout.removeView(it?.view)
+                        sdkLayout.addView(it?.view)
 
-                }
+                    }
                 }, 200)
 
 
-
-
-
             }, 0)
             BottomSheetBehavior.STATE_HALF_EXPANDED
         }
 
 
-
     }
 
 
@@ -1888,14 +1935,16 @@
             false,
             LocalizationManager.getLocale(context).toString(),
             if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {
-                payString+" "+currentCurrencySymbol+" "+selectedAmount
-            }else{ payString+" "+currentCurrencySymbol+" "+currentAmount},
+                payString + " " + currentCurrencySymbol + " " + selectedAmount
+            } else {
+                payString + " " + currentCurrencySymbol + " " + currentAmount
+            },
             Color.parseColor(ThemeManager.getValue("actionButton.Invalid.backgroundColor")),
             Color.parseColor(ThemeManager.getValue("actionButton.Invalid.titleLabelColor")),
         )
 
         // saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.IDLE)
-           saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isActivated = false
+        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isActivated = false
         saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isClickable = false
     }
 
@@ -1907,52 +1956,61 @@
     @RequiresApi(Build.VERSION_CODES.N)
     override fun onCardSelectedAction(isSelected: Boolean, savedCardsModel: Any?) {
 
-       // cardViewHolder.view.alpha = 0.95f
+        // cardViewHolder.view.alpha = 0.95f
         /**
          * Clear card input text
          */
-        println("focussss"+paymentInlineViewHolder.tapCardInputView.hasFocus())
-        println("isSelected"+isSelected)
-       // paymentInlineViewHolder.resetPaymentCardView()
+        println("focussss" + paymentInlineViewHolder.tapCardInputView.hasFocus())
+        println("isSelected" + isSelected)
+        // paymentInlineViewHolder.resetPaymentCardView()
         paymentInlineViewHolder.tapCardInputView.clear()
         paymentInlineViewHolder.clearCardInputAction()
-       /* if (paymentInlineViewHolder.tapCardInputView.hasFocus()) {
-            paymentInlineViewHolder.tapCardInputView.clear()
-           // paymentInlineViewHolder.clearCardInputAction()
-            //paymentInlineViewHolder.onFocusChange("")
-           // CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)
-        }*/
+        /* if (paymentInlineViewHolder.tapCardInputView.hasFocus()) {
+             paymentInlineViewHolder.tapCardInputView.clear()
+            // paymentInlineViewHolder.clearCardInputAction()
+             //paymentInlineViewHolder.onFocusChange("")
+            // CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)
+         }*/
         println("savedCardsModel" + savedCardsModel)
         unActivateActionButton()
         when (savedCardsModel) {
             is SavedCard -> {
-                    Bugfender.d(CustomUtils.tagEvent,"Saved card selected :"+savedCardsModel.lastFour+"&"+savedCardsModel.id )
-              //  paymentInlineViewHolder.view.alpha = 1f
-              paymentInlineViewHolder.setDataForSavedCard(
+                Bugfender.d(
+                    CustomUtils.tagEvent,
+                    "Saved card selected :" + savedCardsModel.lastFour + "&" + savedCardsModel.id
+                )
+                //  paymentInlineViewHolder.view.alpha = 1f
+                paymentInlineViewHolder.setDataForSavedCard(
                     savedCardsModel,
                     CardInputUIStatus.SavedCard
                 )
                 setPayButtonAction(PaymentType.SavedCard, savedCardsModel)
                 isSavedCardSelected = true
-                Bugfender.d(CustomUtils.tagEvent,"Payment scheme selected: title :"+savedCardsModel?.brand+"& ID :"+savedCardsModel.paymentOptionIdentifier )
+                Bugfender.d(
+                    CustomUtils.tagEvent,
+                    "Payment scheme selected: title :" + savedCardsModel?.brand + "& ID :" + savedCardsModel.paymentOptionIdentifier
+                )
             }
             else -> {
                 if (savedCardsModel != null) {
-                    println("paymentType"+(savedCardsModel as PaymentOption).paymentType)
+                    println("paymentType" + (savedCardsModel as PaymentOption).paymentType)
                     if ((savedCardsModel as PaymentOption).paymentType == PaymentType.WEB) {
-                      //  paymentInlineViewHolder.view.alpha = 0.95f
+                        //  paymentInlineViewHolder.view.alpha = 0.95f
 
                         PaymentDataSource.setWebViewType(WebViewType.REDIRECT)
                         activateActionButton()
                         setPayButtonAction(PaymentType.WEB, savedCardsModel)
                     } else if ((savedCardsModel as PaymentOption).paymentType == PaymentType.GOOGLE_PAY) {
-                        removeViews(amountViewHolder,cardViewHolder,paymentInlineViewHolder)
+                        removeViews(amountViewHolder, cardViewHolder, paymentInlineViewHolder)
                         checkoutFragment.checkOutActivity?.handleGooglePayApiCall()
                         activateActionButtonForGPay()
                         //setPayButtonAction(PaymentType.WEB, savedCardsModel)
                         PaymentDataSource.setWebViewType(WebViewType.REDIRECT)
                     }
-                    Bugfender.d(CustomUtils.tagEvent,"Payment scheme selected: title :"+(savedCardsModel as PaymentOption).brand+"& ID :"+(savedCardsModel as PaymentOption).id )
+                    Bugfender.d(
+                        CustomUtils.tagEvent,
+                        "Payment scheme selected: title :" + (savedCardsModel as PaymentOption).brand + "& ID :" + (savedCardsModel as PaymentOption).id
+                    )
 
 
                 } else
@@ -1963,13 +2021,13 @@
     }
 
     private fun activateActionButtonForGPay() {
-       val payString:String = LocalizationManager.getValue("pay", "ActionButton")
+        val payString: String = LocalizationManager.getValue("pay", "ActionButton")
         saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isActivated
         saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)
         saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(
             true,
             "en",
-           "",
+            "",
             Color.parseColor(ThemeManager.getValue("actionButton.Valid.paymentBackgroundColor")),
             Color.parseColor(ThemeManager.getValue("actionButton.Valid.titleLabelColor")),
         )
@@ -1989,10 +2047,10 @@
                 "ActionButton"
             )
             //TODO stopped since checkout won't have SAVE_CARD -so not available in Localization
-           /* TransactionMode.SAVE_CARD -> payString = LocalizationManager.getValue(
-                "savecard",
-                "ActionButton"
-            )*/  TransactionMode.SAVE_CARD -> payString = "SAVE CARD"
+            /* TransactionMode.SAVE_CARD -> payString = LocalizationManager.getValue(
+                 "savecard",
+                 "ActionButton"
+             )*/  TransactionMode.SAVE_CARD -> payString = "SAVE CARD"
             else -> payString = LocalizationManager.getValue("pay", "ActionButton")
         }
 
@@ -2000,8 +2058,10 @@
             true,
             "en",
             if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {
-                payString+" "+currentCurrencySymbol+" "+selectedAmount
-            }else{ payString+" "+currentCurrencySymbol+" "+currentAmount},
+                payString + " " + currentCurrencySymbol + " " + selectedAmount
+            } else {
+                payString + " " + currentCurrencySymbol + " " + currentAmount
+            },
             Color.parseColor(ThemeManager.getValue("actionButton.Valid.paymentBackgroundColor")),
             Color.parseColor(ThemeManager.getValue("actionButton.Valid.titleLabelColor")),
         )
@@ -2027,25 +2087,25 @@
         saveCardSwitchHolder?.view?.mainSwitch?.mainTextSave?.visibility = View.INVISIBLE
 
         //Commented to try the flow of redirect
-       removeViews(
+        removeViews(
             //    businessViewHolder,
-             amountViewHolder,
+            amountViewHolder,
             cardViewHolder,
             paymentInlineViewHolder,
             tabAnimatedActionButtonViewHolder
         )
-        businessViewHolder.view.headerView.constraint.visibility= View.GONE
-  Handler().postDelayed({
-         translateViewToNewHeight(bottomSheetLayout.measuredHeight,true)
-        },400)
+        businessViewHolder.view.headerView.constraint.visibility = View.GONE
+        Handler().postDelayed({
+            translateViewToNewHeight(bottomSheetLayout.measuredHeight, true)
+        }, 400)
 
     }
 
     @RequiresApi(Build.VERSION_CODES.N)
     private fun onClickCardPayment() {
         println("onClickCardPayment")
-        println("paymentInlineViewHolder val"+paymentInlineViewHolder.getCard())
-        if(isSavedCardSelected == true){
+        println("paymentInlineViewHolder val" + paymentInlineViewHolder.getCard())
+        if (isSavedCardSelected == true) {
             cardViewModel.processEvent(
                 CardViewEvent.CreateTokenExistingCardEvent,
                 this,
@@ -2058,7 +2118,7 @@
                 paymentInlineViewHolder.getSavedCardData()
             )
 
-        }else {
+        } else {
             cardViewModel.processEvent(
                 CardViewEvent.CreateTokenEvent,
                 this,
@@ -2076,8 +2136,8 @@
         saveCardSwitchHolder?.view?.mainSwitch?.visibility = View.GONE
 
         removeViews(
-          //  businessViewHolder,
-         //   amountViewHolder,
+            //  businessViewHolder,
+            //   amountViewHolder,
             cardViewHolder,
             paymentInlineViewHolder,
             tabAnimatedActionButtonViewHolder
@@ -2104,7 +2164,7 @@
     ) {
         this.cardId = cardId
         if (stopAnimation) {
-            stopDeleteActionAnimation(itemId, maskedCardNumber,arrayListSavedCardSize)
+            stopDeleteActionAnimation(itemId, maskedCardNumber, arrayListSavedCardSize)
         } else {
             cardViewHolder.view.mainChipgroup.groupAction?.text = LocalizationManager.getValue(
                 "close",
@@ -2133,7 +2193,7 @@
         )
         CustomUtils.showDialog(
             "$title",
-            "${message.replace("%@",maskedCardNumber)} ",
+            "${message.replace("%@", maskedCardNumber)} ",
             context,
             4,
             this, null, null, false
@@ -2200,7 +2260,7 @@
         paymentType: PaymentType,
         cardNumber: String,
         expiryDate: String,
-        cvvNumber: String,holderName:String?
+        cvvNumber: String, holderName: String?
     ) {
         activateActionButton()
         setPayButtonAction(paymentType, null)
@@ -2241,8 +2301,8 @@
             bottomSheetDialog.findViewById(com.google.android.material.R.id.design_bottom_sheet)
         BottomSheetBehavior.from(bottomSheet as View).state = BottomSheetBehavior.STATE_EXPANDED
         Handler().postDelayed({
-            translateViewToNewHeight(bottomSheetLayout.measuredHeight,false)
-        },400)
+            translateViewToNewHeight(bottomSheetLayout.measuredHeight, false)
+        }, 400)
         checkSelectedAmountInitiated()
     }
 
@@ -2250,7 +2310,7 @@
     // Override function to open card Scanner and scan the card.
     @RequiresApi(Build.VERSION_CODES.N)
     override fun onClickCardScanner(scannerClicked: Boolean) {
-         //setSlideAnimation()
+        //setSlideAnimation()
         removeViews(
             //businessViewHolder,
             // amountViewHolder,
@@ -2283,8 +2343,8 @@
             bottomSheetDialog.findViewById(com.google.android.material.R.id.design_bottom_sheet)
         BottomSheetBehavior.from(bottomSheet as View).state = BottomSheetBehavior.STATE_EXPANDED
         Handler().postDelayed({
-            translateViewToNewHeight(bottomSheetLayout.measuredHeight,false)
-        },400)
+            translateViewToNewHeight(bottomSheetLayout.measuredHeight, false)
+        }, 400)
         checkSelectedAmountInitiated()
     }
 
@@ -2362,11 +2422,11 @@
             amountViewHolder.updateSelectedCurrency(
                 displayItemsOpen,
                 selectedAmount, selectedCurrency,
-                currentAmount, currentCurrency,selectedCurrencySymbol
+                currentAmount, currentCurrency, selectedCurrencySymbol
             )
-          //  PaymentDataSource.setSelectedCurrency(selectedCurrency = selectedCurrency, null) // changed from null to symbol
+            //  PaymentDataSource.setSelectedCurrency(selectedCurrency = selectedCurrency, null) // changed from null to symbol
             PaymentDataSource.setSelectedCurrency(selectedCurrency, selectedCurrencySymbol)
-          //  PaymentDataSource.setSelectedCurrency(selectedCurrency = selectedCurrencySymbol, selectedCurrencySymbol) //commented
+            //  PaymentDataSource.setSelectedCurrency(selectedCurrency = selectedCurrencySymbol, selectedCurrencySymbol) //commented
 
         } else {
             amountViewHolder.updateSelectedCurrency(
@@ -2392,7 +2452,7 @@
         adapter.resetSelection()
 
         if (::selectedCurrency.isInitialized) {
-            Bugfender.d(CustomUtils.tagEvent,"Currency changed to : "+selectedCurrencySymbol )
+            Bugfender.d(CustomUtils.tagEvent, "Currency changed to : " + selectedCurrencySymbol)
             filterViewModels(selectedCurrency)
         } else {
             filterViewModels(currentCurrency)
@@ -2402,7 +2462,7 @@
 
     }
 
-    fun cancelledCall(){
+    fun cancelledCall() {
         println("cancelledCall from webview")
     }
 
@@ -2412,15 +2472,15 @@
         charge: Charge?,
         contextSDK: Context?
     ) {
-      //  checkoutFragment.dismiss()
+        //  checkoutFragment.dismiss()
         println("done val" + done + "chargeResponse status" + PaymentDataSource.getChargeOrAuthorize())
         println("saveCardSwitchHolder val" + saveCardSwitchHolder)
         println("redirect val" + charge?.response)
         println("gatewayResponse val" + charge?.gatewayResponse)
 
-        businessViewHolder = contextSDK?.let { BusinessViewHolder(it,this) }!!
-       // saveCardSwitchHolder = contextSDK.let { SwitchViewHolder(it,this) }
-       removeViews(businessViewHolder)
+        businessViewHolder = contextSDK?.let { BusinessViewHolder(it, this) }!!
+        // saveCardSwitchHolder = contextSDK.let { SwitchViewHolder(it,this) }
+        removeViews(businessViewHolder)
         if (::webFrameLayout.isInitialized) {
             if (fragmentManager.findFragmentById(R.id.webFrameLayout) != null)
                 fragmentManager.beginTransaction()
@@ -2431,59 +2491,64 @@
             supportFragmentManager?.popBackStack()
 
         }
-      //  sdkLayout.visibility =View.VISIBLE
-        if(::amountViewHolder.isInitialized&& ::cardViewHolder.isInitialized &&:: cardViewHolder. isInitialized && ::paymentInlineViewHolder.isInitialized)
-        removeViews(businessViewHolder,amountViewHolder,cardViewHolder,paymentInlineViewHolder)
+        //  sdkLayout.visibility =View.VISIBLE
+        if (::amountViewHolder.isInitialized && ::cardViewHolder.isInitialized && ::cardViewHolder.isInitialized && ::paymentInlineViewHolder.isInitialized)
+            removeViews(
+                businessViewHolder,
+                amountViewHolder,
+                cardViewHolder,
+                paymentInlineViewHolder
+            )
 
-       /* if(::webViewHolder.isInitialized)removeViews(webViewHolder)
-         addViews(businessViewHolder,saveCardSwitchHolder)
-        businessViewHolder.view.headerView.constraint.visibility = View.GONE
-        businessViewHolder.view.topSeparatorLinear.visibility = View.GONE
-        saveCardSwitchHolder?.view?.cardSwitch?.switchesLayout?.visibility= View.GONE
-        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility= View.VISIBLE
-        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setDisplayMetrics(CustomUtils.getDeviceDisplayMetrics(contextSDK as Activity))*/
-            // removeAllViews()
-       /* saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(
-            ActionButtonState.ERROR
-        )
-        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(
-            false,
-            "en",
-            null,
-            Color.parseColor(ThemeManager.getValue("actionButton.Invalid.backgroundColor")),
-            Color.parseColor(ThemeManager.getValue("actionButton.Invalid.titleLabelColor")),
-        )
+        /* if(::webViewHolder.isInitialized)removeViews(webViewHolder)
+          addViews(businessViewHolder,saveCardSwitchHolder)
+         businessViewHolder.view.headerView.constraint.visibility = View.GONE
+         businessViewHolder.view.topSeparatorLinear.visibility = View.GONE
+         saveCardSwitchHolder?.view?.cardSwitch?.switchesLayout?.visibility= View.GONE
+         saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility= View.VISIBLE
+         saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setDisplayMetrics(CustomUtils.getDeviceDisplayMetrics(contextSDK as Activity))*/
+        // removeAllViews()
+        /* saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(
+             ActionButtonState.ERROR
+         )
+         saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(
+             false,
+             "en",
+             null,
+             Color.parseColor(ThemeManager.getValue("actionButton.Invalid.backgroundColor")),
+             Color.parseColor(ThemeManager.getValue("actionButton.Invalid.titleLabelColor")),
+         )
 
-        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(
-            ActionButtonState.ERROR
-        )*/
-       // checkoutFragment.closeText.visibility =View.GONE
-     /*   val payString: String = LocalizationManager.getValue("pay", "ActionButton")
-        if(chargeResponse?.status== ChargeStatus.CAPTURED||chargeResponse?.status ==ChargeStatus.INITIATED){
-        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(
-            true,"en","",
-            Color.parseColor(ThemeManager.getValue("actionButton.Valid.paymentBackgroundColor")),
-            Color.parseColor(ThemeManager.getValue("actionButton.Valid.titleLabelColor")))
-        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)
-        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.SUCCESS)
-        }else {
-            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(
-                false,
-                "en",
-                null,
-                Color.parseColor(ThemeManager.getValue("actionButton.Invalid.backgroundColor")),
-                Color.parseColor(ThemeManager.getValue("actionButton.Invalid.titleLabelColor")),
-            )
+         saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(
+             ActionButtonState.ERROR
+         )*/
+        // checkoutFragment.closeText.visibility =View.GONE
+        /*   val payString: String = LocalizationManager.getValue("pay", "ActionButton")
+           if(chargeResponse?.status== ChargeStatus.CAPTURED||chargeResponse?.status ==ChargeStatus.INITIATED){
+           saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(
+               true,"en","",
+               Color.parseColor(ThemeManager.getValue("actionButton.Valid.paymentBackgroundColor")),
+               Color.parseColor(ThemeManager.getValue("actionButton.Valid.titleLabelColor")))
+           saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)
+           saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.SUCCESS)
+           }else {
+               saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(
+                   false,
+                   "en",
+                   null,
+                   Color.parseColor(ThemeManager.getValue("actionButton.Invalid.backgroundColor")),
+                   Color.parseColor(ThemeManager.getValue("actionButton.Invalid.titleLabelColor")),
+               )
 
-            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(
-                ActionButtonState.ERROR
-            )
-        }*/
-    /*  if (::bottomSheetDialog.isInitialized)
-            bottomSheetDialog.dismiss()*/
+               saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(
+                   ActionButtonState.ERROR
+               )
+           }*/
+        /*  if (::bottomSheetDialog.isInitialized)
+                bottomSheetDialog.dismiss()*/
 
         Handler().postDelayed({
-           // checkoutFragment.dismiss()
+            // checkoutFragment.dismiss()
             /*if (::bottomSheetDialog.isInitialized)
                 bottomSheetDialog.dismiss()*/
 
@@ -2609,16 +2674,17 @@
         }
         val totalAmount: String
         if (selectedTotalAmount != null) {
-            println("selectedTotalAmount is"+selectedTotalAmount)
-            if(selectedAmount.contains(",")){
+            println("selectedTotalAmount is" + selectedTotalAmount)
+            if (selectedAmount.contains(",")) {
                 totalAmount = CurrencyFormatter.currencyFormat(
-                    fee?.add(BigDecimal(selectedAmount.replace(",","").toDouble())).toString())
+                    fee?.add(BigDecimal(selectedAmount.replace(",", "").toDouble())).toString()
+                )
 
-            }else
-            totalAmount = CurrencyFormatter.currencyFormat(
-                fee?.add(
-                    selectedTotalAmount?.toDouble()?.let { BigDecimal.valueOf(it) }).toString()
-            )
+            } else
+                totalAmount = CurrencyFormatter.currencyFormat(
+                    fee?.add(
+                        selectedTotalAmount?.toDouble()?.let { BigDecimal.valueOf(it) }).toString()
+                )
         } else {
             totalAmount = CurrencyFormatter.currencyFormat(
                 fee?.add(
@@ -2707,7 +2773,7 @@
                 tabAnimatedActionButtonViewHolder
             )
 
-        if(::webViewHolder.isInitialized) removeViews(webViewHolder)
+        if (::webViewHolder.isInitialized) removeViews(webViewHolder)
     }
 
     private fun setAllSeparatorTheme() {
@@ -2716,47 +2782,51 @@
         var borderOpacityVal: String? = null
         var newBorderColor: String? = null
         borderOpacityVal = borderColor.substring(borderColor.length - 2)
-        newBorderColor = "#" + borderOpacityVal + borderColor.substring(0, borderColor.length - 2).replace("#", "")
+        newBorderColor = "#" + borderOpacityVal + borderColor.substring(0, borderColor.length - 2)
+            .replace("#", "")
+        newBorderColor = "#80000000"
+        //sdkLayout.setBackgroundColor(Color.parseColor(newBorderColor))
+        //sdkLayout.setBackgroundColor(android.R.color.transparent)
+        // sdkLayout.alpha = 0.6f
+        //  sdkLayout.setBackgroundResource(0)
 
-        sdkLayout.setBackgroundColor(Color.parseColor(newBorderColor))
-        sdkLayout.let { it1 ->
-            setTopBorders(
-                it1,
-                35f,// corner raduis
-                0.0f,
-                Color.parseColor(
-                    newBorderColor
-                ),// stroke color
-                Color.parseColor(
-                    newBorderColor
-                ),// tint color
-                Color.parseColor(
-                    newBorderColor
-                )
-            )
-        }
-        val separatorViewTheme = SeparatorViewTheme()
-        separatorViewTheme.strokeColor =
-            Color.parseColor(ThemeManager.getValue("tapSeparationLine.backgroundColor"))
-        separatorViewTheme.strokeHeight = ThemeManager.getValue("tapSeparationLine.height")
-        businessViewHolder.view.topSeparatorLinear.topSeparator.setTheme(separatorViewTheme)
-
-        if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains("dark")){
-            amountViewHolder.view.amountView_separator.visibility =View.GONE
-        }else  amountViewHolder.view.amountView_separator.visibility =View.VISIBLE
-        amountViewHolder.view.amountView_separator.setTheme(separatorViewTheme)
-      //  cardViewHolder.view.tapSeparatorViewLinear1.separator_1.setTheme(separatorViewTheme)
-        goPaySavedCardHolder.view.tapSeparatorViewLinear.separator_.setTheme(separatorViewTheme)
-        /**
-         * set separator background
-         */
-        businessViewHolder.view.topSeparatorLinear.setBackgroundColor(
-            (Color.parseColor(
-                ThemeManager.getValue(
-                    "merchantHeaderView.backgroundColor"
-                )
-            ))
-        )
+//        sdkLayout.let { it1 ->
+//            setTopBorders(
+//                it1,
+//                35f,// corner raduis
+//                0.0f,
+//                Color.parseColor(
+//                    newBorderColor
+//                ),// stroke color
+//                Color.parseColor(
+//                    newBorderColor
+//                ),// tint color
+//                Color.parseColor(
+//                    newBorderColor
+//                )
+//            )
+//        }
+//        val separatorViewTheme = SeparatorViewTheme()
+//        separatorViewTheme.strokeColor = Color.parseColor(ThemeManager.getValue("tapSeparationLine.backgroundColor"))
+//        separatorViewTheme.strokeHeight = ThemeManager.getValue("tapSeparationLine.height")
+//        businessViewHolder.view.topSeparatorLinear.topSeparator.setTheme(separatorViewTheme)
+//
+//        if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains("dark")){
+//            amountViewHolder.view.amountView_separator.visibility =View.GONE
+//        }else  amountViewHolder.view.amountView_separator.visibility =View.VISIBLE
+//        amountViewHolder.view.amountView_separator.setTheme(separatorViewTheme)
+//      //  cardViewHolder.view.tapSeparatorViewLinear1.separator_1.setTheme(separatorViewTheme)
+//        goPaySavedCardHolder.view.tapSeparatorViewLinear.separator_.setTheme(separatorViewTheme)
+//        /**
+//         * set separator background
+//         */
+//        businessViewHolder.view.topSeparatorLinear.setBackgroundColor(
+//            (Color.parseColor(
+//                ThemeManager.getValue(
+//                    "merchantHeaderView.backgroundColor"
+//                )
+//            ))
+//        )
     }
 
     @RequiresApi(Build.VERSION_CODES.N)
@@ -2844,7 +2914,6 @@
         }, 300)
 
 
-
         // inlineCamerFragment.onDestroy()
         removeInlineScanner()
 
@@ -2853,27 +2922,31 @@
 
     @RequiresApi(Build.VERSION_CODES.N)
     private fun setScannedCardDetails(card: TapCard) {
-       /* if(CardUtils.isValidCardNumber(card.cardNumber)){
-            paymentInlineViewHolder.tapCardInputView.onTouchView()
-        }else {
-            paymentInlineViewHolder.tapCardInputView.onTouchCardField()
-        }*/
+        /* if(CardUtils.isValidCardNumber(card.cardNumber)){
+             paymentInlineViewHolder.tapCardInputView.onTouchView()
+         }else {
+             paymentInlineViewHolder.tapCardInputView.onTouchCardField()
+         }*/
         //paymentInlineViewHolder.tapCardInputView.onTouchCardField()
         println("scanned card holder is${card.cardHolder}")
         println("scanned card number is${card.cardNumber}")
 
-        paymentInlineViewHolder.tapCardInputView.setCardNumberMasked(paymentInlineViewHolder.maskCardNumber(card.cardNumber))
-            val dateParts: List<String>? = card.expirationDate?.split("/")
-            val month = dateParts?.get(0)?.toInt()
-            val year = dateParts?.get(1)?.toInt()
-            if (month != null) {
-                if (year != null) {
-                    paymentInlineViewHolder.tapCardInputView.setExpiryDate(month, year)
-                }
-            }
+        paymentInlineViewHolder.tapCardInputView.setCardNumberMasked(
+            paymentInlineViewHolder.maskCardNumber(
+                card.cardNumber
+            )
+        )
+        val dateParts: List<String>? = card.expirationDate?.split("/")
+        val month = dateParts?.get(0)?.toInt()
+        val year = dateParts?.get(1)?.toInt()
+        if (month != null) {
+            if (year != null) {
+                paymentInlineViewHolder.tapCardInputView.setExpiryDate(month, year)
+            }
+        }
 
 
-       // paymentInlineViewHolder.tapCardInputView.setCardHolderName(card.cardHolder)
+        // paymentInlineViewHolder.tapCardInputView.setCardHolderName(card.cardHolder)
 
     }
 
@@ -2881,7 +2954,7 @@
     private fun callBinLookupApi(binLookUpStr: String?) {
         cardViewModel.processEvent(
             CardViewEvent.RetreiveBinLookupEvent,
-            CheckoutViewModel(),  null, binLookUpStr, null, null
+            CheckoutViewModel(), null, binLookUpStr, null, null
         )
 
     }
@@ -2921,8 +2994,8 @@
     private fun setNfcCardDetails(emvCard: TapEmvCard) {
         // auto slide added on scan to prevent overlap
         paymentInlineViewHolder.hideViewONScanNFC()
-        println("maskCardNumber"+paymentInlineViewHolder.maskCardNumber(emvCard.cardNumber))
-        paymentInlineViewHolder.tapCardInputView.setCardNumber(emvCard.cardNumber,false)
+        println("maskCardNumber" + paymentInlineViewHolder.maskCardNumber(emvCard.cardNumber))
+        paymentInlineViewHolder.tapCardInputView.setCardNumber(emvCard.cardNumber, false)
         convertDateString(emvCard)
         paymentInlineViewHolder.onFocusChange(CardInputListener.FocusField.FOCUS_CVC)
 
@@ -2961,7 +3034,10 @@
                         return
                     } else {
                         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
-                            paymentInlineViewHolder.tapCardInputView.setExpiryDate(month, year.toInt())
+                            paymentInlineViewHolder.tapCardInputView.setExpiryDate(
+                                month,
+                                year.toInt()
+                            )
                         }
                         // paymentInlineViewHolder.tapCardInputVie
 
@@ -3051,19 +3127,19 @@
             filteredByPaymentTypeAndCurrencyAndSortedList(
                 paymentOptionsWorker, PaymentType.GOOGLE_PAY, currency
             )
-      //  println("googlePaymentOptions"+googlePaymentOptions)
+        //  println("googlePaymentOptions"+googlePaymentOptions)
         val hasWebPaymentOptions = webPaymentOptions.size > 0
         val hasCardPaymentOptions = cardPaymentOptions.size > 0
         val hasGooglePaymentOptions = googlePaymentOptions.size > 0
-       // println("hasGooglePaymentOptions"+hasGooglePaymentOptions)
+        // println("hasGooglePaymentOptions"+hasGooglePaymentOptions)
 
         //Added if else to update showing GooglePay button based on api
         if (hasGooglePaymentOptions && googlePaymentOptions.isNotEmpty()) {
             adapter.updateAdapterGooglePay(googlePaymentOptions)
             PaymentDataSource.setGoogleCardPay(googlePaymentOptions)
-        }else {
+        } else {
             adapter.updateAdapterGooglePay(googlePaymentOptions)
-        PaymentDataSource.setGoogleCardPay(googlePaymentOptions)
+            PaymentDataSource.setGoogleCardPay(googlePaymentOptions)
         }
         logicToHandlePaymentDataType(webPaymentOptions, cardPaymentOptions)
 
@@ -3106,8 +3182,8 @@
 
             }
         }
-        if(LocalizationManager.currentLocalized.length()!=0){
-            title=   LocalizationManager.getValue("title", "ExtraFees")
+        if (LocalizationManager.currentLocalized.length() != 0) {
+            title = LocalizationManager.getValue("title", "ExtraFees")
 
         }
     }
@@ -3123,11 +3199,11 @@
         val extraFeesPart1: String = LocalizationManager.getValue<String>(
             "message",
             "ExtraFees"
-        ).replaceFirst("%@",extraFeesAmount+selectedCurrency)
-        val extraFeesPart2: String = extraFeesPart1.replace("%@",totalAmount+selectedCurrency)
+        ).replaceFirst("%@", extraFeesAmount + selectedCurrency)
+        val extraFeesPart2: String = extraFeesPart1.replace("%@", totalAmount + selectedCurrency)
         // val leftToRight = "\u200F"
-      //  val localizedMessage =
-            // extraFeesPart1 +" "+extraFeesAmount+PaymentDataProvider().getSelectedCurrency()?.currency +extraFeesPart2+" "+ totalAmount+ PaymentDataProvider().getSelectedCurrency()?.currency
+        //  val localizedMessage =
+        // extraFeesPart1 +" "+extraFeesAmount+PaymentDataProvider().getSelectedCurrency()?.currency +extraFeesPart2+" "+ totalAmount+ PaymentDataProvider().getSelectedCurrency()?.currency
         //    "$extraFeesPart1 $extraFeesAmount$selectedCurrency$extraFeesPart2 $totalAmount$selectedCurrency"
         CustomUtils.showDialog(
             title,
@@ -3202,24 +3278,24 @@
                 }
             }
             paymentType === PaymentType.CARD -> {
-               /* paymentInlineViewHolder.view.alpha = 0.9f
-                if (::context.isInitialized) {
-                    val animation = AnimationUtils.loadAnimation(context, R.anim.fade_out)
-                    paymentInlineViewHolder.view.startAnimation(animation)
+                /* paymentInlineViewHolder.view.alpha = 0.9f
+                 if (::context.isInitialized) {
+                     val animation = AnimationUtils.loadAnimation(context, R.anim.fade_out)
+                     paymentInlineViewHolder.view.startAnimation(animation)
 
-                }*/
+                 }*/
                 PaymentDataSource.setWebViewType(WebViewType.THREE_DS_WEBVIEW)
                 //Added to disable click when button loading
                 amountViewHolder.view.amount_section?.itemAmountLayout?.isEnabled = false
                 amountViewHolder.view.amount_section?.itemAmountLayout?.isClickable = false
 
                 Handler().postDelayed({
-                onClickCardPayment()
-                 }, 1000)
+                    onClickCardPayment()
+                }, 1000)
 
             }
             paymentType === PaymentType.SavedCard -> {
-                if(isSavedCardSelected== true){
+                if (isSavedCardSelected == true) {
                     //Added to disable click when button loading
                     amountViewHolder.view.amount_section?.itemAmountLayout?.isEnabled = false
                     amountViewHolder.view.amount_section?.itemAmountLayout?.isClickable = false
@@ -3260,31 +3336,31 @@
     }
 
     fun closeAsynchView() {
-     /*   removeViews(businessViewHolder, asynchronousPaymentViewHolder)
-        businessViewHolder.setDataFromAPI(
-            PaymentDataSource.getMerchantData()?.logo,
-            PaymentDataSource.getMerchantData()?.name
-        )
-        addViews(
-            businessViewHolder,
-            amountViewHolder,
-            cardViewHolder,
-            paymentInlineViewHolder,
-            saveCardSwitchHolder
-        )
-        saveCardSwitchHolder?.view?.visibility = View.VISIBLE
-        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.RESET)
-        val payString: String = LocalizationManager.getValue("pay", "ActionButton")
-        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(
-            false,
-            "en",
-            if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {
-                payString+" "+currentCurrencySymbol+" "+selectedAmount
-            }else{ payString+" "+currentCurrencySymbol+" "+currentAmount},
-            Color.parseColor(ThemeManager.getValue("actionButton.Invalid.backgroundColor")),
-            Color.parseColor(ThemeManager.getValue("actionButton.Invalid.titleLabelColor")),
-        )*/
-      //  Stopped reset view and dismiss it.
+        /*   removeViews(businessViewHolder, asynchronousPaymentViewHolder)
+           businessViewHolder.setDataFromAPI(
+               PaymentDataSource.getMerchantData()?.logo,
+               PaymentDataSource.getMerchantData()?.name
+           )
+           addViews(
+               businessViewHolder,
+               amountViewHolder,
+               cardViewHolder,
+               paymentInlineViewHolder,
+               saveCardSwitchHolder
+           )
+           saveCardSwitchHolder?.view?.visibility = View.VISIBLE
+           saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.RESET)
+           val payString: String = LocalizationManager.getValue("pay", "ActionButton")
+           saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(
+               false,
+               "en",
+               if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {
+                   payString+" "+currentCurrencySymbol+" "+selectedAmount
+               }else{ payString+" "+currentCurrencySymbol+" "+currentAmount},
+               Color.parseColor(ThemeManager.getValue("actionButton.Invalid.backgroundColor")),
+               Color.parseColor(ThemeManager.getValue("actionButton.Invalid.titleLabelColor")),
+           )*/
+        //  Stopped reset view and dismiss it.
         checkoutFragment?.dismissBottomSheetDialog()
     }
 
@@ -3302,8 +3378,10 @@
             false,
             "en",
             if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {
-                payString+" "+currentCurrencySymbol+" "+selectedAmount
-            }else{ payString+" "+currentCurrencySymbol+" "+currentAmount},
+                payString + " " + currentCurrencySymbol + " " + selectedAmount
+            } else {
+                payString + " " + currentCurrencySymbol + " " + currentAmount
+            },
             Color.parseColor(ThemeManager.getValue("actionButton.Valid.paymentBackgroundColor")),
             Color.parseColor(ThemeManager.getValue("actionButton.Valid.titleLabelColor")),
         )
@@ -3326,11 +3404,11 @@
             ChargeStatus.RESTRICTED, ChargeStatus.ABANDONED, ChargeStatus.VOID, ChargeStatus.INVALID -> {
                 Handler().postDelayed({
                     tabAnimatedActionButton?.setInValidBackground(
-                        false,Color.YELLOW
+                        false, Color.YELLOW
                     )
                     tabAnimatedActionButton?.changeButtonState(ActionButtonState.LOADING)
                     saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(
-                        false,Color.YELLOW
+                        false, Color.YELLOW
                     )
 
                     saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(
@@ -3340,7 +3418,7 @@
                         Color.parseColor(ThemeManager.getValue("actionButton.Invalid.backgroundColor")),
                         Color.parseColor(ThemeManager.getValue("actionButton.Invalid.titleLabelColor")),
 
-                    )
+                        )
                     saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(
                         ActionButtonState.ERROR
                     )
@@ -3358,8 +3436,9 @@
 
                 } else {
                     Handler().postDelayed({
-                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(false,
-                           Color.BLUE
+                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(
+                            false,
+                            Color.BLUE
                         )
                         saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(
                             false,
@@ -3377,14 +3456,14 @@
                 }
             }
         }
-     /*   Handler().postDelayed({
-            checkOutActivity?.onBackPressed()
+        /*   Handler().postDelayed({
+               checkOutActivity?.onBackPressed()
 
-            if (::bottomSheetDialog.isInitialized)
-                bottomSheetDialog.dismiss()
-            _checkoutFragment.activity?.onBackPressed()
+               if (::bottomSheetDialog.isInitialized)
+                   bottomSheetDialog.dismiss()
+               _checkoutFragment.activity?.onBackPressed()
 
-        }, 12000)*/
+           }, 12000)*/
     }
 
 
@@ -3395,9 +3474,9 @@
     fun handlePaymentSuccess(paymentData: PaymentData) {
         removeViews(
             //businessViewHolder,
-             amountViewHolder,
+            amountViewHolder,
             cardViewHolder,
-           // saveCardSwitchHolder,
+            // saveCardSwitchHolder,
             paymentInlineViewHolder,
             otpViewHolder,
             goPaySavedCardHolder,
@@ -3419,7 +3498,7 @@
             val tokenizationData = paymentMethodData.getJSONObject("tokenizationData")
 
             val token = tokenizationData.getString("token")
-            Bugfender.d(CustomUtils.tagEvent,"Google pay raw token :"+token )
+            Bugfender.d(CustomUtils.tagEvent, "Google pay raw token :" + token)
             val gson = Gson()
             val jsonToken = gson.fromJson(token, JsonObject::class.java)
 
@@ -3468,7 +3547,7 @@
     override fun onReadSuccess(card: TapCard?) {
         incrementalCount += 1
 
-        println("incrementalCount val>>>>>"+incrementalCount)
+        println("incrementalCount val>>>>>" + incrementalCount)
         /*   if (card != null) {
                if(card.cardNumber!=null)
               handleScanSuccessResult(card)
@@ -3477,7 +3556,7 @@
             Log.d("checkOutViewModel", "onRecognitionSuccess: " + card.cardHolder)*//*
 
         }*/
-        if (card != null && incrementalCount==3) {
+        if (card != null && incrementalCount == 3) {
 
             if (card.cardNumber != null && card.cardHolder != null && card.expirationDate != null) {
                 handleScanSuccessResult(card)
@@ -3558,8 +3637,6 @@
     }
 
 
-
-
 }
 
 
Index: checkout/src/main/java/company/tap/checkout/open/CheckoutFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package company.tap.checkout.open\n\n\nimport android.annotation.SuppressLint\nimport android.app.Activity\nimport android.content.Context\nimport android.content.res.Resources\nimport android.graphics.*\nimport android.graphics.drawable.BitmapDrawable\nimport android.graphics.drawable.Drawable\nimport android.os.Build\nimport android.os.Bundle\nimport android.os.Handler\nimport android.os.Looper\nimport android.util.DisplayMetrics\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.view.WindowManager\nimport android.widget.FrameLayout\nimport android.widget.LinearLayout\nimport android.widget.RelativeLayout\nimport androidx.annotation.RequiresApi\nimport androidx.cardview.widget.CardView\nimport androidx.core.widget.NestedScrollView\nimport androidx.fragment.app.DialogFragment\nimport androidx.fragment.app.Fragment\nimport androidx.fragment.app.viewModels\nimport cards.pay.paycardsrecognizer.sdk.Card\nimport cards.pay.paycardsrecognizer.sdk.ui.InlineViewCallback\nimport com.bumptech.glide.Glide\nimport com.google.android.material.bottomsheet.BottomSheetBehavior\nimport company.tap.checkout.R\nimport company.tap.checkout.internal.api.enums.ChargeStatus\nimport company.tap.checkout.internal.apiresponse.CardViewModel\nimport company.tap.checkout.internal.apiresponse.CardViewState\nimport company.tap.checkout.internal.apiresponse.Resource\nimport company.tap.checkout.internal.enums.SectionType\nimport company.tap.checkout.internal.utils.CustomUtils\nimport company.tap.checkout.internal.utils.ResizeAnimation\nimport company.tap.checkout.internal.viewmodels.CheckoutViewModel\nimport company.tap.checkout.open.controller.SDKSession\nimport company.tap.checkout.open.controller.SDKSession.sessionDelegate\nimport company.tap.checkout.open.controller.SDKSession.tabAnimatedActionButton\nimport company.tap.checkout.open.data_managers.PaymentDataSource\nimport company.tap.taplocalizationkit.LocalizationManager\nimport company.tap.tapuilibrary.themekit.ThemeManager\nimport company.tap.tapuilibrary.uikit.atoms.TapImageView\nimport company.tap.tapuilibrary.uikit.atoms.TapTextView\nimport company.tap.tapuilibrary.uikit.enums.ActionButtonState\nimport company.tap.tapuilibrary.uikit.interfaces.TapBottomDialogInterface\nimport company.tap.tapuilibrary.uikit.ktx.setTopBorders\nimport company.tap.tapuilibrary.uikit.utils.BlurBuilder\nimport company.tap.tapuilibrary.uikit.views.TapBottomSheetDialog\nimport company.tap.tapuilibrary.uikit.views.TapBrandView\nimport eightbitlab.com.blurview.BlurView\nimport eightbitlab.com.blurview.RenderEffectBlur\nimport eightbitlab.com.blurview.RenderScriptBlur\nimport org.json.JSONObject\n\n\n/**\n * A simple [Fragment] subclass.\n// * Use the [CheckoutFragment.newInstance] factory method to\n * create an instance of this fragment.\n */\nclass CheckoutFragment : TapBottomSheetDialog(), TapBottomDialogInterface, InlineViewCallback {\n\n    private var _Context: Context? = null\n\n    @JvmField\n    var _viewModel: CheckoutViewModel? = null\n    private lateinit var cardViewModel: CardViewModel\n    var _activity: Activity? = null\n    var checkOutActivity: CheckOutActivity? = null\n    lateinit var closeText: TapTextView\n    lateinit var closeImage: TapImageView\n    var hideAllView = false\n    lateinit var status: ChargeStatus\n    private var _resetFragment: Boolean = true\n    var newColorVal: String? =null\n    @JvmField\n    var scrollView: NestedScrollView? = null\n\n    @JvmField\n    var isNfcOpened: Boolean = false\n\n    @JvmField\n    var isScannerOpened: Boolean = false\n\n    @JvmField\n    var isFullscreen = false\n    var heightIn: Int = 0\n    private var inLineCardLayout: FrameLayout? = null\n    private var relativeLL: RelativeLayout? = null\n    private var mainCardLayout: CardView? = null\n    private var  topHeaderView: TapBrandView? = null\n    private var displayMetrics: Int? = 0\n    private var targetHeight: Int? = 0\n\n    private val mBackgroundBlurRadius = 30\n    private val mBlurBehindRadius = 60\n\n    // We set a different dim amount depending on whether window blur is enabled or disabled\n    private val mDimAmountWithBlur = 0.1f\n    private val mDimAmountNoBlur = 0.4f\n\n    // We set a different alpha depending on whether window blur is enabled or disabled\n    private val mWindowBackgroundAlphaWithBlur = 170\n    private val mWindowBackgroundAlphaNoBlur = 255\n\n    // Use a rectangular shape drawable for the window background. The outline of this drawable\n    // dictates the shape and rounded corners for the window background blur area.\n    private var mWindowBackgroundDrawable: Drawable? = null\n  var originalHeight:Int?=0\n\n    var blurView: BlurView?=null\n\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        _activity = activity?.parent\n        this._Context = context\n\n\n    }\n\n    /*  @RequiresApi(Build.VERSION_CODES.N)\n      override fun onDestroyView() {\n          println(\"onDestroyView>>>\")\n          *//*if (view?.parent != null) {\n            (view?.parent as ViewGroup).removeView(view)\n        }*//*\n        resetTabAnimatedButton()\n        super.onDestroyView()\n    }*/\n\n\n    override fun onDestroy() {\n        super.onDestroy()\n\n        // if (!this.isDestroyed()) {\n        Glide.with(this).pauseRequests()\n        // }\n        resetTabAnimatedButton()\n\n    }\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        setStyle(DialogFragment.STYLE_NORMAL, R.style.DialogStyle)\n        dialog?.window?.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE)\n\n        return inflater.inflate(R.layout.fragment_checkouttaps, container, false)\n    }\n\n    @SuppressLint(\"ResourceAsColor\")\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        val viewModel: CheckoutViewModel by viewModels()\n        val cardViewModel: CardViewModel by viewModels()\n        this._viewModel = viewModel\n        _Context?.let { cardViewModel.getContext(it) }\n        backgroundColor = (Color.parseColor(ThemeManager.getValue(\"tapBottomSheet.dimmedColor\")))\n        setStyle(DialogFragment.STYLE_NORMAL, R.style.DialogStyle)\n        bottomSheetDialog.behavior.isDraggable = true\n        val checkoutLayout: LinearLayout? = view.findViewById(R.id.fragment_all)\n        val frameLayout: FrameLayout? = view.findViewById(R.id.fragment_container_nfc_lib)\n        val webFrameLayout: FrameLayout? = view.findViewById(R.id.webFrameLayout)\n        webFrameLayout?.setLayoutParams(\n            LinearLayout.LayoutParams(\n                LinearLayout.LayoutParams.MATCH_PARENT,\n                Resources.getSystem().displayMetrics.heightPixels\n            )\n        )\n        inLineCardLayout = view.findViewById(R.id.inline_container)\n        val headerLayout: LinearLayout? = view.findViewById(R.id.headerLayout)\n        bottomSheetLayout = bottomSheetDialog.findViewById(R.id.design_bottom_sheet)\n        closeText = view.findViewById(R.id.closeText)\n        closeImage = view.findViewById(R.id.closeImage)\n        scrollView = view.findViewById(R.id.scrollView)\n        relativeLL = view.findViewById(R.id.relativeLL)\n        mainCardLayout = view.findViewById(R.id.mainCardLayout)\nblurView = BlurView(context)\n\n        topHeaderView = context?.let { TapBrandView(it) }\n        topHeaderView?.visibility = View.GONE\n\n        displayMetrics= CustomUtils.getDeviceDisplayMetrics(context as Activity)\n\n            //  blurLayout = BlurLayout(context)\n        blurBehindView()\n\n        val heightscreen: Int = Resources.getSystem().getDisplayMetrics().heightPixels;\n        if (LocalizationManager.currentLocalized.length() != 0)\n            closeText.text = LocalizationManager.getValue(\"close\", \"Common\")\n\n        if (SDKSession.showCloseImage == true) {\n\n            if (!hideAllView) {\n                Handler().postDelayed({\n                    closeImage.visibility = View.GONE\n\n                }, 3000)\n            }\n\n        } else {\n            if (!hideAllView) {\n                Handler().postDelayed({\n                    closeText.visibility = View.GONE\n\n                }, 3000)\n            }\n\n        }\n\n        //LocalizationManager.loadTapLocale(resources, R.raw.lang)\n        sessionDelegate?.sessionHasStarted()\n\n        bottomSheetLayout?.let {\n            viewModel.setBottomSheetLayout(it)\n        }\n\n        if (checkoutLayout != null) {\n            context?.let {\n                if (frameLayout != null) {\n                    webFrameLayout?.let { it1 ->\n                        if (inLineCardLayout != null) {\n                            activity?.intent?.let { it2 ->\n                                if (headerLayout != null) {\n                                    viewModel.initLayoutManager(\n                                        bottomSheetDialog,\n                                        it,\n                                        childFragmentManager,\n                                        checkoutLayout,\n                                        frameLayout,\n                                        it1,\n                                        inLineCardLayout!!,\n                                        this,\n                                        it2,\n                                        cardViewModel, this, headerLayout\n                                    )\n                                }\n                            }\n\n                        }\n                    }\n                }\n            }\n            enableSections()\n            originalHeight = checkoutLayout.measuredHeight\n\n            checkoutLayout.addView(topHeaderView,0)\n\n\n        }\n        inLineCardLayout?.minimumHeight = heightscreen - checkoutLayout?.height!!\n        dialog?.window?.attributes?.windowAnimations = R.style.DialogAnimation\n\n        bottomSheetDialog.setOnShowListener {\n            //Handler().postDelayed({\n            bottomSheetDialog.behavior.setState(BottomSheetBehavior.STATE_EXPANDED)\n            //  }, 0)\n        }\n        val borderColor: String = ThemeManager.getValue<String>(\"poweredByTap.backgroundColor\").toString()\n        var borderOpacityVal: String? = null\n        //Workaround since we don't have direct method for extraction\n        borderOpacityVal = borderColor.substring(borderColor.length - 2)\n        newColorVal = \"#\" + borderOpacityVal + borderColor.substring(0, borderColor.length - 2).replace(\"#\", \"\")\n        println(\"color iii>>\"+newColorVal)\n\n       //  topHeaderView?.setBackgroundResource(R.drawable.blurviewnew)\n       //  topHeaderView?.setBackgroundColor(Color.parseColor(Color.TRANSPARENT.toString()))\n        scrollView?.let {\n            setTopBorders(\n                it,\n                40f,// corner raduis\n                0.0f,\n                Color.parseColor(\n                    newColorVal\n                ),\n                Color.parseColor(\n                    newColorVal\n                ),// tint color\n                Color.parseColor(\n                    newColorVal\n                )\n            )\n        }\n\n\n        relativeLL.let { it1 ->\n            if (it1 != null) {\n                setTopBorders(\n                    it1,\n                    35f,// corner raduis\n                    0.0f,\n                    Color.parseColor(\n                        newColorVal\n                    ),// stroke color\n                    Color.parseColor(newColorVal),// tint color\n                    Color.parseColor(newColorVal)\n                )\n            }\n        }\n        mainCardLayout.let { it1 ->\n            if (it1 != null) {\n                setTopBorders(\n                    it1,\n                    35f,// corner raduis\n                    0.0f,\n                    Color.parseColor(newColorVal),// stroke color\n                    Color.parseColor(newColorVal),// tint color\n                    Color.parseColor(newColorVal)\n                )\n            }\n        }\n\n\n        /*bottomSheetDialog.behavior.setBottomSheetCallback(object :\n            BottomSheetBehavior.BottomSheetCallback() {\n\n            override fun onStateChanged(bottomSheet: View, newState: Int) {\n                *//*  println(\"111heightscreen>>>>\"+heightscreen)\n                  println(\"1111sdkLayoutheight>>>>>\"+checkoutLayout?.height)\n                  println(\"1111newState>>>>>\"+newState)\n                  println(\"1111difff>>>>>\"+ checkoutLayout?.height?.let { heightscreen.minus(it) })\n                  println(\"1111peek>>>>>\"+bottomSheetDialog.behavior.peekHeight)\n                  var diff = checkoutLayout?.height?.let { heightscreen.minus(it) }*//*\n\n\n                if (newState == BottomSheetBehavior.STATE_HIDDEN) {\n                    resetTabAnimatedButton()\n                    dismiss()\n                }\n\n                if (newState == BottomSheetBehavior.STATE_EXPANDED) {\n                    bottomSheetDialog.behavior.peekHeight = heightscreen\n\n                    bottomSheetDialog.behavior.state = BottomSheetBehavior.STATE_EXPANDED\n                    // bottomSheetDialog.behavior.saveFlags = BottomSheetBehavior.SAVE_FIT_TO_CONTENTS\n                    scrollView?.smoothScrollTo(0, heightscreen)\n                    bottomSheetDialog.behavior.isDraggable = true\n\n                }\n            }\n\n            override fun onSlide(view: View, slideOffset: Float) {\n                // println(\"onSlide\"+p1)\n                //  bottomSheetDialog.behavior.state = BottomSheetBehavior.STATE_EXPANDED\n                scrollView?.smoothScrollTo(0, heightscreen)\n            }\n        })\n*/\n        closeText.setOnClickListener {\n            bottomSheetDialog.dismissWithAnimation\n            bottomSheetDialog.hide()\n            bottomSheetDialog.dismiss()\n            viewModel.incrementalCount = 0\n            resetTabAnimatedButton()\n\n\n        }\n        closeImage.setOnClickListener {\n\n            // bottomSheetDialog.dismissWithAnimation\n            //bottomSheetDialog.hide()\n            // bottomSheetDialog.dismiss()\n            bottomSheetDialog.window?.attributes?.windowAnimations = R.style.DialogAnimation\n            bottomSheetDialog.hide()\n            resetTabAnimatedButton()\n            viewModel.incrementalCount = 0\n\n        }\n\n        adjustHeightAccToDensity()\n\n        Handler(Looper.getMainLooper()).postDelayed( {\n            topHeaderView?.visibility =View.VISIBLE\n            topHeaderView?.setAlpha(0.8f)\n               }, 1000)\n             val resizeAnimation =\n                 targetHeight?.let {\n                     ResizeAnimation(\n                         topHeaderView,\n                         it,\n                         0, true\n                     )\n                 }\n\n            resizeAnimation?.duration = 1500\n            topHeaderView?.startAnimation(resizeAnimation)\n\n        Handler(Looper.getMainLooper()).postDelayed( {\n            topHeaderView?.visibility =View.VISIBLE\n            topHeaderView?.let {\n                blurView?.setupWith(it,RenderEffectBlur()) // or RenderEffectBlur\n                    ?.setBlurRadius(80F)\n            }\n\n        }, 3000)\n\n    }\n\n    private fun blurBehindView() {\n        mWindowBackgroundDrawable = context?.getDrawable(R.drawable.window_background)\n\n        if (buildIsAtLeastS()) {\n            // Enable blur behind. This can also be done in xml with R.attr#windowBlurBehindEnabled\n            activity?.getWindow()?.addFlags(WindowManager.LayoutParams.FLAG_BLUR_BEHIND);\n\n            // Register a listener to adjust window UI whenever window blurs are enabled/disabled\n            setupWindowBlurListener();\n        } else {\n            // Window blurs are not available prior to Android S\n            updateWindowForBlurs(false /* blursEnabled */);\n        }\n\n        // Enable dim. This can also be done in xml, see R.attr#backgroundDimEnabled\n        activity?.getWindow()?.addFlags(WindowManager.LayoutParams.FLAG_DIM_BEHIND);\n    }\n\n\n    private fun getScreenshot(v: View): Bitmap? {\n        val b = Bitmap.createBitmap(v.width, v.height, Bitmap.Config.ARGB_4444)\n        v.draw(Canvas(b))\n        println(\"getScreenshot\"+b)\n        return b\n    }\n    fun applyBlur(context: Context?, mainView: View?, blurView: View?) {\n        //this.context = context\n        if (blurView != null) {\n            getScreenshot(blurView)?.let {\n                if (mainView != null) {\n                    blur(it, mainView)\n                }\n            }\n        }\n    }\n    @SuppressLint(\"NewApi\")\n    private fun blur(bitmap: Bitmap, view: View) {\n        val overlay = Bitmap.createBitmap(\n            (view.measuredWidth.toFloat() / 3.0f).toInt(),\n            (view.measuredHeight\n                .toFloat() / 3.0f).toInt(), Bitmap.Config.ARGB_4444\n        )\n        val canvas = Canvas(overlay)\n        canvas.translate((-view.left).toFloat() / 3.0f, (-view.top).toFloat() / 3.0f)\n        canvas.scale(1.0f / 3.0f, 1.0f / 3.0f)\n        val paint = Paint()\n        paint.setFlags(Paint.FILTER_BITMAP_FLAG)\n        canvas.drawBitmap(bitmap, 0.0f, 0.0f, paint)\n        view.background = BitmapDrawable(\n            this.context?.resources, company.tap.checkout.internal.utils.Blur.fastblur(\n                context, overlay,\n                20.0f.toInt(), true\n            )\n        )\n    }\n\n\n    private fun adjustHeightAccToDensity() {\n        if (displayMetrics == DisplayMetrics.DENSITY_260 || displayMetrics == DisplayMetrics.DENSITY_280 || displayMetrics == DisplayMetrics.DENSITY_300 || displayMetrics == DisplayMetrics.DENSITY_XHIGH || displayMetrics == DisplayMetrics.DENSITY_340 || displayMetrics == DisplayMetrics.DENSITY_360) {\n            targetHeight = 90\n        } else if (displayMetrics == DisplayMetrics.DENSITY_450 || displayMetrics == DisplayMetrics.DENSITY_420 || displayMetrics == DisplayMetrics.DENSITY_400 ) {\n            targetHeight = 120\n        }else targetHeight = 140\n    }\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onAttach(context: Context) {\n        super.onAttach(context)\n        LocalizationManager.setLocale(context, PaymentDataSource.getSDKLocale())\n\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun enableSections(): ArrayList<SectionType> {\n        val enabledSections = ArrayList<SectionType>()\n        enabledSections.add(SectionType.BUSINESS)\n        enabledSections.add(SectionType.AMOUNT_ITEMS)\n        enabledSections.add(SectionType.FRAGMENT)\n        enabledSections.add(SectionType.ActionButton)\n\n        println(\"_resetFragment>>\" + _resetFragment)\n        println(\"hideAllView>>\" + hideAllView)\n        if (_resetFragment) {\n            if (hideAllView) {\n                if (::status.isInitialized)\n                    _viewModel?.showOnlyButtonView(\n                        status,\n                        checkOutActivity as CheckOutActivity?,\n                        this\n                    )\n\n            } else {\n\n                _viewModel?.displayStartupLayout(enabledSections)\n                _viewModel?.getDatasfromAPIs(\n                    PaymentDataSource.getMerchantData(),\n                    PaymentDataSource.getPaymentOptionsResponse()\n                )\n\n            }\n        } else {\n            if (::status.isInitialized)\n                _viewModel?.showOnlyButtonView(status, checkOutActivity as CheckOutActivity?, this)\n        }\n\n        setBottomSheetInterface(this)\n\n        return enabledSections\n    }\n\n\n    companion object {\n        // TODO: Rename and change types and number of parameters\n        const val RESET_FRAG = \"resetFragment\"\n\n        @JvmStatic\n        fun newInstance(context: Context, activity: Activity?, resetFragment: Boolean) =\n            CheckoutFragment().apply {\n                arguments = Bundle().apply {}\n                _Context = context\n                _activity = activity\n                _resetFragment = resetFragment\n                requireArguments().putBoolean(RESET_FRAG, resetFragment)\n            }\n    }\n\n    override fun onScanCardFailed(e: Exception?) {\n        println(\"onScanCardFailed\")\n        // _viewModel?.handleScanFailedResult()\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onScanCardFinished(card: Card?, cardImage: ByteArray?) {\n        if (card != null) {\n            println(\"scanned card is$card\")\n            //  _viewModel?.handleScanSuccessResult(card)\n\n        }\n    }\n\n\n    private fun consumeResponse(response: Resource<CardViewState>) {\n        println(\"response value is\" + response.data?.configResponseModel)\n        when (response) {\n            is Resource.Loading -> concatText(\"Loading\")\n            is Resource.Finished -> renderView(response.data)\n            is Error -> response.message?.let { concatText(it) }\n            is Resource.Success -> renderView(response.data)\n\n        }\n    }\n\n    private fun renderView(data: CardViewState?) {\n\n    }\n\n    @SuppressLint(\"SetTextI18n\")\n    private fun concatText(newText: String) {\n        println(\"newText respoonse$newText\")\n\n    }\n\n\n    override fun onDetach() {\n        super.onDetach()\n        if (view == null) {\n            return\n        }\n        if (isNfcOpened) {\n        } else {\n            checkOutActivity?.onBackPressed()\n        }\n\n        if (isScannerOpened){\n\n        } else {\n            //_viewModel?.incrementalCount =0\n            checkOutActivity?.onBackPressed()\n        }\n\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun resetTabAnimatedButton() {\n        checkOutActivity?.displayMetrics?.let { tabAnimatedActionButton?.setDisplayMetrics(it) }\n        SDKSession.sessionActive = false\n        tabAnimatedActionButton?.changeButtonState(ActionButtonState.RESET)\n        if (checkOutActivity?.isGooglePayClicked == false) {\n            checkOutActivity?.overridePendingTransition(0, R.anim.slide_down_exit)\n            checkOutActivity?.finishAfterTransition()\n        }\n        //  checkOutActivity?.finish()\n\n        val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n        tabAnimatedActionButton?.setButtonDataSource(\n            true,\n            context?.let { LocalizationManager.getLocale(it).language },\n            payString,\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.paymentBackgroundColor\")),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.titleLabelColor\")),\n        )\n        /*  tabAnimatedActionButton?.setOnClickListener {\n              requireActivity().supportFragmentManager.let { it1 -> SDKSession.contextSDK?.let { it2 ->\n                  SDKSession.startSDK(it1,\n                      it2,SDKSession.contextSDK as Activity)\n              } }\n          }*/\n        tabAnimatedActionButton?.isClickable = true\n        tabAnimatedActionButton?.isEnabled = true\n    }\n\n\n    /*  private fun initKeyBoardListener() {\n          // ÐÐ¸Ð½Ð¸Ð¼Ð°Ð»ÑÐ½Ð¾Ðµ Ð·Ð½Ð°ÑÐµÐ½Ð¸Ðµ ÐºÐ»Ð°Ð²Ð¸Ð°ÑÑÑÑ.\n          // Threshold for minimal keyboard height.\n          val MIN_KEYBOARD_HEIGHT_PX = 150\n          // ÐÐºÐ½Ð¾ Ð²ÐµÑÑÐ½ÐµÐ³Ð¾ ÑÑÐ¾Ð²Ð½Ñ view.\n          // Top-level window decor view.\n              // val decorView: View = netscape.javascript.JSObject.getWindow().getDecorView()\n          // Ð ÐµÐ³Ð¸ÑÑÑÐ¸ÑÑÐµÐ¼ Ð³Ð»Ð¾Ð±Ð°Ð»ÑÐ½ÑÐ¹ ÑÐ»ÑÑÐ°ÑÐµÐ»Ñ. Register global layout listener.\n          decorView.viewTreeObserver.addOnGlobalLayoutListener(object : OnGlobalLayoutListener {\n              // ÐÐ¸Ð´Ð¸Ð¼ÑÐ¹ Ð¿ÑÑÐ¼Ð¾ÑÐ³Ð¾Ð»ÑÐ½Ð¸Ðº Ð²Ð½ÑÑÑÐ¸ Ð¾ÐºÐ½Ð°.\n              // Retrieve visible rectangle inside window.\n              private val windowVisibleDisplayFrame: Rect = Rect()\n              private var lastVisibleDecorViewHeight = 0\n              override fun onGlobalLayout() {\n                  decorView.getWindowVisibleDisplayFrame(windowVisibleDisplayFrame)\n                  val visibleDecorViewHeight: Int = windowVisibleDisplayFrame.height()\n                  if (lastVisibleDecorViewHeight != 0) {\n                      if (lastVisibleDecorViewHeight > visibleDecorViewHeight + MIN_KEYBOARD_HEIGHT_PX) {\n\n                      } else if (lastVisibleDecorViewHeight + MIN_KEYBOARD_HEIGHT_PX < visibleDecorViewHeight) {\n\n                      }\n                  }\n                  // Ð¡Ð¾ÑÑÐ°Ð½ÑÐµÐ¼ ÑÐµÐºÑÑÑÑ Ð²ÑÑÐ¾ÑÑ view Ð´Ð¾ ÑÐ»ÐµÐ´ÑÑÑÐµÐ³Ð¾ Ð²ÑÐ·Ð¾Ð²Ð°.\n                  // Save current decor view height for the next call.\n                  lastVisibleDecorViewHeight = visibleDecorViewHeight\n              }\n          })\n      }*/\n\n    fun dismissBottomSheetDialog() {\n        //bottomSheetDialog.window?.attributes?.windowAnimations = R.style.DialogAnimation\n        ThemeManager.currentTheme =\"\"\n        LocalizationManager.currentLocalized= JSONObject()\n        bottomSheetDialog.dismissWithAnimation\n        bottomSheetDialog.hide()\n        bottomSheetDialog.dismiss()\n        resetTabAnimatedButton()\n        sessionDelegate?.sessionCancelled()\n\n    }\n\n    @RequiresApi(api = Build.VERSION_CODES.S)\n    private fun setupWindowBlurListener() {\n        val windowBlurEnabledListener: (Boolean) -> Unit = this::updateWindowForBlurs\n            activity?.window?.decorView?.addOnAttachStateChangeListener(\n            object : View.OnAttachStateChangeListener {\n                override fun onViewAttachedToWindow(v: View) {\n                    activity?.getWindowManager()?.addCrossWindowBlurEnabledListener(\n                        windowBlurEnabledListener\n                    )\n\n                }\n\n                override fun onViewDetachedFromWindow(v: View) {\n                    activity?.getWindowManager()?.removeCrossWindowBlurEnabledListener(\n                        windowBlurEnabledListener\n                    )\n                }\n            })\n    }\n    private fun updateWindowForBlurs(blursEnabled: Boolean) {\n        mWindowBackgroundDrawable?.alpha =\n            if (blursEnabled && mBackgroundBlurRadius > 0) mWindowBackgroundAlphaWithBlur else mWindowBackgroundAlphaNoBlur\n        activity?.getWindow()\n            ?.setDimAmount(if (blursEnabled && mBlurBehindRadius > 0) mDimAmountWithBlur else mDimAmountNoBlur)\n        if (buildIsAtLeastS()) {\n            // Set the window background blur and blur behind radii\n            activity?.getWindow()\n                ?.setBackgroundBlurRadius(mBackgroundBlurRadius)\n            activity?.getWindow()\n                ?.getAttributes()\n                ?.setBlurBehindRadius(mBlurBehindRadius)\n            activity?.getWindow()\n            ?.setAttributes(activity?.getWindow()\n                ?.getAttributes())\n        }\n    }\n    private fun buildIsAtLeastS(): Boolean {\n        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.S\n    }\n\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout/src/main/java/company/tap/checkout/open/CheckoutFragment.kt b/checkout/src/main/java/company/tap/checkout/open/CheckoutFragment.kt
--- a/checkout/src/main/java/company/tap/checkout/open/CheckoutFragment.kt	(revision c46dbf76c8aaeb9118f43cb1199424eeb6aae4c9)
+++ b/checkout/src/main/java/company/tap/checkout/open/CheckoutFragment.kt	(date 1681137473439)
@@ -3,11 +3,11 @@
 
 import android.annotation.SuppressLint
 import android.app.Activity
+import android.app.Dialog
 import android.content.Context
 import android.content.res.Resources
 import android.graphics.*
-import android.graphics.drawable.BitmapDrawable
-import android.graphics.drawable.Drawable
+import android.graphics.drawable.ColorDrawable
 import android.os.Build
 import android.os.Bundle
 import android.os.Handler
@@ -22,6 +22,7 @@
 import android.widget.RelativeLayout
 import androidx.annotation.RequiresApi
 import androidx.cardview.widget.CardView
+import androidx.coordinatorlayout.widget.CoordinatorLayout
 import androidx.core.widget.NestedScrollView
 import androidx.fragment.app.DialogFragment
 import androidx.fragment.app.Fragment
@@ -30,6 +31,8 @@
 import cards.pay.paycardsrecognizer.sdk.ui.InlineViewCallback
 import com.bumptech.glide.Glide
 import com.google.android.material.bottomsheet.BottomSheetBehavior
+import com.google.android.material.bottomsheet.BottomSheetDialog
+import com.google.android.material.bottomsheet.BottomSheetDialogFragment
 import company.tap.checkout.R
 import company.tap.checkout.internal.api.enums.ChargeStatus
 import company.tap.checkout.internal.apiresponse.CardViewModel
@@ -50,12 +53,9 @@
 import company.tap.tapuilibrary.uikit.enums.ActionButtonState
 import company.tap.tapuilibrary.uikit.interfaces.TapBottomDialogInterface
 import company.tap.tapuilibrary.uikit.ktx.setTopBorders
-import company.tap.tapuilibrary.uikit.utils.BlurBuilder
 import company.tap.tapuilibrary.uikit.views.TapBottomSheetDialog
 import company.tap.tapuilibrary.uikit.views.TapBrandView
 import eightbitlab.com.blurview.BlurView
-import eightbitlab.com.blurview.RenderEffectBlur
-import eightbitlab.com.blurview.RenderScriptBlur
 import org.json.JSONObject
 
 
@@ -78,7 +78,8 @@
     var hideAllView = false
     lateinit var status: ChargeStatus
     private var _resetFragment: Boolean = true
-    var newColorVal: String? =null
+    var newColorVal: String? = null
+
     @JvmField
     var scrollView: NestedScrollView? = null
 
@@ -94,65 +95,49 @@
     private var inLineCardLayout: FrameLayout? = null
     private var relativeLL: RelativeLayout? = null
     private var mainCardLayout: CardView? = null
-    private var  topHeaderView: TapBrandView? = null
+    private var topHeaderView: TapBrandView? = null
     private var displayMetrics: Int? = 0
     private var targetHeight: Int? = 0
-
-    private val mBackgroundBlurRadius = 30
-    private val mBlurBehindRadius = 60
-
-    // We set a different dim amount depending on whether window blur is enabled or disabled
-    private val mDimAmountWithBlur = 0.1f
-    private val mDimAmountNoBlur = 0.4f
-
-    // We set a different alpha depending on whether window blur is enabled or disabled
-    private val mWindowBackgroundAlphaWithBlur = 170
-    private val mWindowBackgroundAlphaNoBlur = 255
-
-    // Use a rectangular shape drawable for the window background. The outline of this drawable
-    // dictates the shape and rounded corners for the window background blur area.
-    private var mWindowBackgroundDrawable: Drawable? = null
-  var originalHeight:Int?=0
+    var originalHeight: Int? = 0
 
-    var blurView: BlurView?=null
+    var blurView: BlurView? = null
 
 
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
         _activity = activity?.parent
+
         this._Context = context
-
-
     }
-
-    /*  @RequiresApi(Build.VERSION_CODES.N)
-      override fun onDestroyView() {
-          println("onDestroyView>>>")
-          *//*if (view?.parent != null) {
-            (view?.parent as ViewGroup).removeView(view)
-        }*//*
-        resetTabAnimatedButton()
-        super.onDestroyView()
-    }*/
-
-
     override fun onDestroy() {
         super.onDestroy()
-
-        // if (!this.isDestroyed()) {
         Glide.with(this).pauseRequests()
-        // }
         resetTabAnimatedButton()
 
     }
 
+
+    @SuppressLint("RestrictedApi")
+    override fun setupDialog(dialog: Dialog, style: Int) {
+        super.setupDialog(dialog, style)
+
+        val contentView = View.inflate(context, R.layout.fragment_checkouttaps, null)
+        dialog.setContentView(contentView)
+
+        val params = (contentView.parent as View)
+            .layoutParams as CoordinatorLayout.LayoutParams
+        val behavior = params.behavior
+        (contentView.parent as View).setBackgroundColor(Color.TRANSPARENT)
+
+    }
+
+
     override fun onCreateView(
         inflater: LayoutInflater, container: ViewGroup?,
         savedInstanceState: Bundle?
     ): View? {
-        setStyle(DialogFragment.STYLE_NORMAL, R.style.DialogStyle)
         dialog?.window?.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE)
-
+        dialog?.window?.decorView?.findViewById<View>(R.id.design_bottom_sheet)?.setBackgroundResource(android.R.color.transparent)
         return inflater.inflate(R.layout.fragment_checkouttaps, container, false)
     }
 
@@ -164,64 +149,54 @@
         val cardViewModel: CardViewModel by viewModels()
         this._viewModel = viewModel
         _Context?.let { cardViewModel.getContext(it) }
-        backgroundColor = (Color.parseColor(ThemeManager.getValue("tapBottomSheet.dimmedColor")))
-        setStyle(DialogFragment.STYLE_NORMAL, R.style.DialogStyle)
+      //  backgroundColor = (Color.parseColor(ThemeManager.getValue("tapBottomSheet.dimmedColor")))
+
         bottomSheetDialog.behavior.isDraggable = true
         val checkoutLayout: LinearLayout? = view.findViewById(R.id.fragment_all)
         val frameLayout: FrameLayout? = view.findViewById(R.id.fragment_container_nfc_lib)
         val webFrameLayout: FrameLayout? = view.findViewById(R.id.webFrameLayout)
-        webFrameLayout?.setLayoutParams(
-            LinearLayout.LayoutParams(
-                LinearLayout.LayoutParams.MATCH_PARENT,
-                Resources.getSystem().displayMetrics.heightPixels
-            )
+        webFrameLayout?.layoutParams = LinearLayout.LayoutParams(
+            LinearLayout.LayoutParams.MATCH_PARENT,
+            Resources.getSystem().displayMetrics.heightPixels
         )
         inLineCardLayout = view.findViewById(R.id.inline_container)
-        val headerLayout: LinearLayout? = view.findViewById(R.id.headerLayout)
+        val headerLayout: FrameLayout? = view.findViewById(R.id.headerLayout)
         bottomSheetLayout = bottomSheetDialog.findViewById(R.id.design_bottom_sheet)
+
         closeText = view.findViewById(R.id.closeText)
         closeImage = view.findViewById(R.id.closeImage)
         scrollView = view.findViewById(R.id.scrollView)
         relativeLL = view.findViewById(R.id.relativeLL)
         mainCardLayout = view.findViewById(R.id.mainCardLayout)
-blurView = BlurView(context)
+       // blurView = BlurView(context)
 
         topHeaderView = context?.let { TapBrandView(it) }
-        topHeaderView?.visibility = View.GONE
+        // topHeaderView?.visibility = View.GONE
 
-        displayMetrics= CustomUtils.getDeviceDisplayMetrics(context as Activity)
+        displayMetrics = CustomUtils.getDeviceDisplayMetrics(context as Activity)
 
-            //  blurLayout = BlurLayout(context)
-        blurBehindView()
 
         val heightscreen: Int = Resources.getSystem().getDisplayMetrics().heightPixels;
         if (LocalizationManager.currentLocalized.length() != 0)
             closeText.text = LocalizationManager.getValue("close", "Common")
 
         if (SDKSession.showCloseImage == true) {
-
             if (!hideAllView) {
                 Handler().postDelayed({
                     closeImage.visibility = View.GONE
-
                 }, 3000)
             }
-
         } else {
             if (!hideAllView) {
                 Handler().postDelayed({
                     closeText.visibility = View.GONE
-
                 }, 3000)
             }
-
         }
-
         //LocalizationManager.loadTapLocale(resources, R.raw.lang)
         sessionDelegate?.sessionHasStarted()
-
         bottomSheetLayout?.let {
-            viewModel.setBottomSheetLayout(it)
+           // viewModel.setBottomSheetLayout(it)
         }
 
         if (checkoutLayout != null) {
@@ -252,28 +227,28 @@
             }
             enableSections()
             originalHeight = checkoutLayout.measuredHeight
-
-            checkoutLayout.addView(topHeaderView,0)
+            checkoutLayout.addView(topHeaderView, 0)
 
-
         }
         inLineCardLayout?.minimumHeight = heightscreen - checkoutLayout?.height!!
         dialog?.window?.attributes?.windowAnimations = R.style.DialogAnimation
 
-        bottomSheetDialog.setOnShowListener {
-            //Handler().postDelayed({
-            bottomSheetDialog.behavior.setState(BottomSheetBehavior.STATE_EXPANDED)
-            //  }, 0)
-        }
+//        bottomSheetDialog.setOnShowListener {
+//            bottomSheetDialog.behavior.setState(BottomSheetBehavior.STATE_EXPANDED)
+//            val d = dialog as BottomSheetDialog
+//            val bottomSheet = d.findViewById<View>(R.id.design_bottom_sheet) as FrameLayout? ?: return@setOnShowListener
+//            var bottomSheetBehavior = BottomSheetBehavior.from<FrameLayout?>(bottomSheet)
+//            bottomSheet.background = null
+//
+//        }
         val borderColor: String = ThemeManager.getValue<String>("poweredByTap.backgroundColor").toString()
         var borderOpacityVal: String? = null
         //Workaround since we don't have direct method for extraction
         borderOpacityVal = borderColor.substring(borderColor.length - 2)
         newColorVal = "#" + borderOpacityVal + borderColor.substring(0, borderColor.length - 2).replace("#", "")
-        println("color iii>>"+newColorVal)
+        println("color iii>>" + newColorVal)
 
-       //  topHeaderView?.setBackgroundResource(R.drawable.blurviewnew)
-       //  topHeaderView?.setBackgroundColor(Color.parseColor(Color.TRANSPARENT.toString()))
+
         scrollView?.let {
             setTopBorders(
                 it,
@@ -320,41 +295,6 @@
         }
 
 
-        /*bottomSheetDialog.behavior.setBottomSheetCallback(object :
-            BottomSheetBehavior.BottomSheetCallback() {
-
-            override fun onStateChanged(bottomSheet: View, newState: Int) {
-                *//*  println("111heightscreen>>>>"+heightscreen)
-                  println("1111sdkLayoutheight>>>>>"+checkoutLayout?.height)
-                  println("1111newState>>>>>"+newState)
-                  println("1111difff>>>>>"+ checkoutLayout?.height?.let { heightscreen.minus(it) })
-                  println("1111peek>>>>>"+bottomSheetDialog.behavior.peekHeight)
-                  var diff = checkoutLayout?.height?.let { heightscreen.minus(it) }*//*
-
-
-                if (newState == BottomSheetBehavior.STATE_HIDDEN) {
-                    resetTabAnimatedButton()
-                    dismiss()
-                }
-
-                if (newState == BottomSheetBehavior.STATE_EXPANDED) {
-                    bottomSheetDialog.behavior.peekHeight = heightscreen
-
-                    bottomSheetDialog.behavior.state = BottomSheetBehavior.STATE_EXPANDED
-                    // bottomSheetDialog.behavior.saveFlags = BottomSheetBehavior.SAVE_FIT_TO_CONTENTS
-                    scrollView?.smoothScrollTo(0, heightscreen)
-                    bottomSheetDialog.behavior.isDraggable = true
-
-                }
-            }
-
-            override fun onSlide(view: View, slideOffset: Float) {
-                // println("onSlide"+p1)
-                //  bottomSheetDialog.behavior.state = BottomSheetBehavior.STATE_EXPANDED
-                scrollView?.smoothScrollTo(0, heightscreen)
-            }
-        })
-*/
         closeText.setOnClickListener {
             bottomSheetDialog.dismissWithAnimation
             bottomSheetDialog.hide()
@@ -366,9 +306,6 @@
         }
         closeImage.setOnClickListener {
 
-            // bottomSheetDialog.dismissWithAnimation
-            //bottomSheetDialog.hide()
-            // bottomSheetDialog.dismiss()
             bottomSheetDialog.window?.attributes?.windowAnimations = R.style.DialogAnimation
             bottomSheetDialog.hide()
             resetTabAnimatedButton()
@@ -378,97 +315,62 @@
 
         adjustHeightAccToDensity()
 
-        Handler(Looper.getMainLooper()).postDelayed( {
-            topHeaderView?.visibility =View.VISIBLE
-            topHeaderView?.setAlpha(0.8f)
-               }, 1000)
-             val resizeAnimation =
-                 targetHeight?.let {
-                     ResizeAnimation(
-                         topHeaderView,
-                         it,
-                         0, true
-                     )
-                 }
+        Handler(Looper.getMainLooper()).postDelayed({
+            topHeaderView?.visibility = View.VISIBLE
+        }, 1000)
+        val resizeAnimation =
+            targetHeight?.let {
+                ResizeAnimation(
+                    topHeaderView,
+                    it,
+                    0, true
+                )
+            }
 
-            resizeAnimation?.duration = 1500
-            topHeaderView?.startAnimation(resizeAnimation)
+        resizeAnimation?.duration = 1500
+        topHeaderView?.startAnimation(resizeAnimation)
 
-        Handler(Looper.getMainLooper()).postDelayed( {
-            topHeaderView?.visibility =View.VISIBLE
-            topHeaderView?.let {
-                blurView?.setupWith(it,RenderEffectBlur()) // or RenderEffectBlur
-                    ?.setBlurRadius(80F)
-            }
+        Handler(Looper.getMainLooper()).postDelayed({
+            topHeaderView?.visibility = View.VISIBLE
 
         }, 3000)
 
-    }
+//        bottomSheetLayout?.setBackgroundResource(android.R.color.transparent)
+//
+//        topHeaderView?.setBackgroundColor(0)
+//        topHeaderView?.alpha = 0.4f
 
-    private fun blurBehindView() {
-        mWindowBackgroundDrawable = context?.getDrawable(R.drawable.window_background)
 
-        if (buildIsAtLeastS()) {
-            // Enable blur behind. This can also be done in xml with R.attr#windowBlurBehindEnabled
-            activity?.getWindow()?.addFlags(WindowManager.LayoutParams.FLAG_BLUR_BEHIND);
 
-            // Register a listener to adjust window UI whenever window blurs are enabled/disabled
-            setupWindowBlurListener();
-        } else {
-            // Window blurs are not available prior to Android S
-            updateWindowForBlurs(false /* blursEnabled */);
-        }
+    }
 
-        // Enable dim. This can also be done in xml, see R.attr#backgroundDimEnabled
-        activity?.getWindow()?.addFlags(WindowManager.LayoutParams.FLAG_DIM_BEHIND);
-    }
 
+    override fun onActivityCreated(savedInstanceState: Bundle?) {
+        super.onActivityCreated(savedInstanceState)
+        (view?.parent as View).setBackgroundColor(Color.TRANSPARENT)
 
-    private fun getScreenshot(v: View): Bitmap? {
-        val b = Bitmap.createBitmap(v.width, v.height, Bitmap.Config.ARGB_4444)
-        v.draw(Canvas(b))
-        println("getScreenshot"+b)
-        return b
-    }
-    fun applyBlur(context: Context?, mainView: View?, blurView: View?) {
-        //this.context = context
-        if (blurView != null) {
-            getScreenshot(blurView)?.let {
-                if (mainView != null) {
-                    blur(it, mainView)
-                }
-            }
-        }
-    }
-    @SuppressLint("NewApi")
-    private fun blur(bitmap: Bitmap, view: View) {
-        val overlay = Bitmap.createBitmap(
-            (view.measuredWidth.toFloat() / 3.0f).toInt(),
-            (view.measuredHeight
-                .toFloat() / 3.0f).toInt(), Bitmap.Config.ARGB_4444
-        )
-        val canvas = Canvas(overlay)
-        canvas.translate((-view.left).toFloat() / 3.0f, (-view.top).toFloat() / 3.0f)
-        canvas.scale(1.0f / 3.0f, 1.0f / 3.0f)
-        val paint = Paint()
-        paint.setFlags(Paint.FILTER_BITMAP_FLAG)
-        canvas.drawBitmap(bitmap, 0.0f, 0.0f, paint)
-        view.background = BitmapDrawable(
-            this.context?.resources, company.tap.checkout.internal.utils.Blur.fastblur(
-                context, overlay,
-                20.0f.toInt(), true
-            )
-        )
     }
 
+
+    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {
+    
+
+        bottomSheetDialog = super.onCreateDialog(savedInstanceState) as BottomSheetDialog
+        return BottomSheetDialog(requireContext(), R.style.MyTransparentBottomSheetDialogTheme)
+
+
+
+    }
+    override fun getTheme() = R.style.MyTransparentBottomSheetDialogTheme
 
     private fun adjustHeightAccToDensity() {
         if (displayMetrics == DisplayMetrics.DENSITY_260 || displayMetrics == DisplayMetrics.DENSITY_280 || displayMetrics == DisplayMetrics.DENSITY_300 || displayMetrics == DisplayMetrics.DENSITY_XHIGH || displayMetrics == DisplayMetrics.DENSITY_340 || displayMetrics == DisplayMetrics.DENSITY_360) {
             targetHeight = 90
-        } else if (displayMetrics == DisplayMetrics.DENSITY_450 || displayMetrics == DisplayMetrics.DENSITY_420 || displayMetrics == DisplayMetrics.DENSITY_400 ) {
+        } else if (displayMetrics == DisplayMetrics.DENSITY_450 || displayMetrics == DisplayMetrics.DENSITY_420 || displayMetrics == DisplayMetrics.DENSITY_400) {
             targetHeight = 120
-        }else targetHeight = 140
+        } else targetHeight = 140
     }
+
     @RequiresApi(Build.VERSION_CODES.N)
     override fun onAttach(context: Context) {
         super.onAttach(context)
@@ -578,7 +480,7 @@
             checkOutActivity?.onBackPressed()
         }
 
-        if (isScannerOpened){
+        if (isScannerOpened) {
 
         } else {
             //_viewModel?.incrementalCount =0
@@ -618,40 +520,9 @@
     }
 
 
-    /*  private fun initKeyBoardListener() {
-          // ÐÐ¸Ð½Ð¸Ð¼Ð°Ð»ÑÐ½Ð¾Ðµ Ð·Ð½Ð°ÑÐµÐ½Ð¸Ðµ ÐºÐ»Ð°Ð²Ð¸Ð°ÑÑÑÑ.
-          // Threshold for minimal keyboard height.
-          val MIN_KEYBOARD_HEIGHT_PX = 150
-          // ÐÐºÐ½Ð¾ Ð²ÐµÑÑÐ½ÐµÐ³Ð¾ ÑÑÐ¾Ð²Ð½Ñ view.
-          // Top-level window decor view.
-              // val decorView: View = netscape.javascript.JSObject.getWindow().getDecorView()
-          // Ð ÐµÐ³Ð¸ÑÑÑÐ¸ÑÑÐµÐ¼ Ð³Ð»Ð¾Ð±Ð°Ð»ÑÐ½ÑÐ¹ ÑÐ»ÑÑÐ°ÑÐµÐ»Ñ. Register global layout listener.
-          decorView.viewTreeObserver.addOnGlobalLayoutListener(object : OnGlobalLayoutListener {
-              // ÐÐ¸Ð´Ð¸Ð¼ÑÐ¹ Ð¿ÑÑÐ¼Ð¾ÑÐ³Ð¾Ð»ÑÐ½Ð¸Ðº Ð²Ð½ÑÑÑÐ¸ Ð¾ÐºÐ½Ð°.
-              // Retrieve visible rectangle inside window.
-              private val windowVisibleDisplayFrame: Rect = Rect()
-              private var lastVisibleDecorViewHeight = 0
-              override fun onGlobalLayout() {
-                  decorView.getWindowVisibleDisplayFrame(windowVisibleDisplayFrame)
-                  val visibleDecorViewHeight: Int = windowVisibleDisplayFrame.height()
-                  if (lastVisibleDecorViewHeight != 0) {
-                      if (lastVisibleDecorViewHeight > visibleDecorViewHeight + MIN_KEYBOARD_HEIGHT_PX) {
-
-                      } else if (lastVisibleDecorViewHeight + MIN_KEYBOARD_HEIGHT_PX < visibleDecorViewHeight) {
-
-                      }
-                  }
-                  // Ð¡Ð¾ÑÑÐ°Ð½ÑÐµÐ¼ ÑÐµÐºÑÑÑÑ Ð²ÑÑÐ¾ÑÑ view Ð´Ð¾ ÑÐ»ÐµÐ´ÑÑÑÐµÐ³Ð¾ Ð²ÑÐ·Ð¾Ð²Ð°.
-                  // Save current decor view height for the next call.
-                  lastVisibleDecorViewHeight = visibleDecorViewHeight
-              }
-          })
-      }*/
-
     fun dismissBottomSheetDialog() {
-        //bottomSheetDialog.window?.attributes?.windowAnimations = R.style.DialogAnimation
-        ThemeManager.currentTheme =""
-        LocalizationManager.currentLocalized= JSONObject()
+        ThemeManager.currentTheme = ""
+        LocalizationManager.currentLocalized = JSONObject()
         bottomSheetDialog.dismissWithAnimation
         bottomSheetDialog.hide()
         bottomSheetDialog.dismiss()
@@ -660,45 +531,6 @@
 
     }
 
-    @RequiresApi(api = Build.VERSION_CODES.S)
-    private fun setupWindowBlurListener() {
-        val windowBlurEnabledListener: (Boolean) -> Unit = this::updateWindowForBlurs
-            activity?.window?.decorView?.addOnAttachStateChangeListener(
-            object : View.OnAttachStateChangeListener {
-                override fun onViewAttachedToWindow(v: View) {
-                    activity?.getWindowManager()?.addCrossWindowBlurEnabledListener(
-                        windowBlurEnabledListener
-                    )
-
-                }
-
-                override fun onViewDetachedFromWindow(v: View) {
-                    activity?.getWindowManager()?.removeCrossWindowBlurEnabledListener(
-                        windowBlurEnabledListener
-                    )
-                }
-            })
-    }
-    private fun updateWindowForBlurs(blursEnabled: Boolean) {
-        mWindowBackgroundDrawable?.alpha =
-            if (blursEnabled && mBackgroundBlurRadius > 0) mWindowBackgroundAlphaWithBlur else mWindowBackgroundAlphaNoBlur
-        activity?.getWindow()
-            ?.setDimAmount(if (blursEnabled && mBlurBehindRadius > 0) mDimAmountWithBlur else mDimAmountNoBlur)
-        if (buildIsAtLeastS()) {
-            // Set the window background blur and blur behind radii
-            activity?.getWindow()
-                ?.setBackgroundBlurRadius(mBackgroundBlurRadius)
-            activity?.getWindow()
-                ?.getAttributes()
-                ?.setBlurBehindRadius(mBlurBehindRadius)
-            activity?.getWindow()
-            ?.setAttributes(activity?.getWindow()
-                ?.getAttributes())
-        }
-    }
-    private fun buildIsAtLeastS(): Boolean {
-        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.S
-    }
 
 }
 
Index: checkout/src/main/res/layout/fragment_checkouttaps.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.cardview.widget.CardView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:windowSoftInputMode=\"adjustResize|adjustPan\"\n    android:orientation=\"vertical\"\n    android:fillViewport=\"true\"\n    android:clipToOutline=\"true\"\n    android:id=\"@+id/mainCardLayout\"\n\n\n    app:cardCornerRadius=\"1.5dp\"\n    android:background=\"@android:color/transparent\"\n\n\n\n    tools:context=\".open.CheckoutFragment\">\n\n\n    <androidx.core.widget.NestedScrollView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        app:behavior_hideable=\"false\"\n        app:behavior_peekHeight=\"0dp\"\n        android:clipToOutline=\"true\"\n        app:layout_behavior=\"com.google.android.material.bottomsheet.BottomSheetBehavior\"\n        android:id=\"@+id/scrollView\"\n\n        android:background=\"@android:color/transparent\"\n       >\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"vertical\"\n        android:windowSoftInputMode=\"adjustResize|adjustPan\"\n        tools:context=\".open.CheckoutFragment\">\n\n\n<RelativeLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:clipToOutline=\"true\"\n\n    android:id=\"@+id/relativeLL\"\n    android:gravity=\"center\">\n  <!--  android:background=\"@drawable/layout_bg\"-->\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"vertical\"\n        android:id=\"@+id/headerLayout\"\n\n        tools:context=\".open.CheckoutFragment\">\n\n        <LinearLayout\n            android:id=\"@+id/fragment_all\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:clipToOutline=\"true\"\n            android:visibility=\"visible\"\n\n            android:orientation=\"vertical\" />\n\n        <!-- <LinearLayout\n             android:id=\"@+id/sdkContainer\"\n             android:layout_width=\"match_parent\"\n             android:layout_height=\"wrap_content\"\n             android:orientation=\"vertical\"\n            >\n         </LinearLayout>-->\n\n        <FrameLayout\n            android:id=\"@+id/webFrameLayout\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:visibility=\"gone\"\n            android:layout_gravity=\"center\"\n            />\n        <FrameLayout\n            android:id=\"@+id/fragment_container_nfc_lib\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:layout_gravity=\"bottom\"\n            android:orientation=\"vertical\"\n            android:visibility=\"gone\"\n            android:gravity=\"bottom\"/>\n\n\n\n        <FrameLayout\n            android:id=\"@+id/inline_container\"\n            android:layout_width=\"match_parent\"\n            android:visibility=\"gone\"\n            android:layout_height=\"500dp\"\n            />\n\n\n    </LinearLayout>\n    <!--Kept webframelayout outside so that it takes full screen-->\n\n\n    <company.tap.tapuilibrary.uikit.atoms.TapTextView\n        android:id=\"@+id/closeText\"\n        android:layout_width=\"48dp\"\n        android:layout_height=\"40dp\"\n        android:layout_alignParentEnd=\"true\"\n        android:layout_gravity=\"end\"\n        android:layout_marginEnd=\"10dp\"\n        android:gravity=\"center\"\n        android:text=\"CLOSE\"\n        android:textColor=\"@color/dark_gray\"\n        android:textSize=\"12sp\"\n        android:visibility=\"gone\" />\n\n    <company.tap.tapuilibrary.uikit.atoms.TapImageView\n        android:layout_width=\"40dp\"\n        android:layout_height=\"40dp\"\n        android:id=\"@+id/closeImage\"\n        android:src=\"@drawable/ic_close\"\n        android:gravity=\"center\"\n        android:layout_marginEnd=\"10dp\"\n        android:text=\"close\"\n        android:visibility=\"gone\"\n        android:layout_alignParentEnd=\"true\"\n        android:layout_gravity=\"end\"/>\n\n\n</RelativeLayout>\n    </LinearLayout>\n        </androidx.core.widget.NestedScrollView>\n\n\n</androidx.cardview.widget.CardView>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout/src/main/res/layout/fragment_checkouttaps.xml b/checkout/src/main/res/layout/fragment_checkouttaps.xml
--- a/checkout/src/main/res/layout/fragment_checkouttaps.xml	(revision c46dbf76c8aaeb9118f43cb1199424eeb6aae4c9)
+++ b/checkout/src/main/res/layout/fragment_checkouttaps.xml	(date 1681137001119)
@@ -9,13 +9,8 @@
     android:fillViewport="true"
     android:clipToOutline="true"
     android:id="@+id/mainCardLayout"
-
-
     app:cardCornerRadius="1.5dp"
-    android:background="@android:color/transparent"
-
-
-
+    app:cardBackgroundColor="@android:color/transparent"
     tools:context=".open.CheckoutFragment">
 
 
@@ -48,12 +43,12 @@
     android:gravity="center">
   <!--  android:background="@drawable/layout_bg"-->
 
-    <LinearLayout
+    <FrameLayout
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
         android:orientation="vertical"
+        android:background="@null"
         android:id="@+id/headerLayout"
-
         tools:context=".open.CheckoutFragment">
 
         <LinearLayout
@@ -99,7 +94,7 @@
             />
 
 
-    </LinearLayout>
+    </FrameLayout>
     <!--Kept webframelayout outside so that it takes full screen-->
 
 
Index: .idea/deploymentTargetDropDown.xml
===================================================================
diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
deleted file mode 100644
--- a/.idea/deploymentTargetDropDown.xml	(revision c46dbf76c8aaeb9118f43cb1199424eeb6aae4c9)
+++ /dev/null	(revision c46dbf76c8aaeb9118f43cb1199424eeb6aae4c9)
@@ -1,17 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="deploymentTargetDropDown">
-    <runningDeviceTargetSelectedWithDropDown>
-      <Target>
-        <type value="RUNNING_DEVICE_TARGET" />
-        <deviceKey>
-          <Key>
-            <type value="VIRTUAL_DEVICE_PATH" />
-            <value value="$USER_HOME$/.android/avd/Pixel_3a_XL_API_31_1.avd" />
-          </Key>
-        </deviceKey>
-      </Target>
-    </runningDeviceTargetSelectedWithDropDown>
-    <timeTargetWasSelectedWithDropDown value="2023-04-09T09:49:11.019577Z" />
-  </component>
-</project>
\ No newline at end of file
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\n  <component name=\"GradleSettings\">\n    <option name=\"linkedExternalProjectsSettings\">\n      <GradleProjectSettings>\n        <option name=\"testRunner\" value=\"GRADLE\" />\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\n        <option name=\"gradleJvm\" value=\"#JAVA_HOME\" />\n        <option name=\"modules\">\n          <set>\n            <option value=\"$PROJECT_DIR$\" />\n            <option value=\"$PROJECT_DIR$/app\" />\n            <option value=\"$PROJECT_DIR$/checkout\" />\n          </set>\n        </option>\n        <option name=\"resolveModulePerSourceSet\" value=\"false\" />\n      </GradleProjectSettings>\n    </option>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
--- a/.idea/gradle.xml	(revision c46dbf76c8aaeb9118f43cb1199424eeb6aae4c9)
+++ b/.idea/gradle.xml	(date 1681040659930)
@@ -7,7 +7,7 @@
         <option name="testRunner" value="GRADLE" />
         <option name="distributionType" value="DEFAULT_WRAPPED" />
         <option name="externalProjectPath" value="$PROJECT_DIR$" />
-        <option name="gradleJvm" value="#JAVA_HOME" />
+        <option name="gradleJvm" value="Embedded JDK" />
         <option name="modules">
           <set>
             <option value="$PROJECT_DIR$" />
@@ -15,7 +15,6 @@
             <option value="$PROJECT_DIR$/checkout" />
           </set>
         </option>
-        <option name="resolveModulePerSourceSet" value="false" />
       </GradleProjectSettings>
     </option>
   </component>
Index: checkout/src/main/res/layout/fragment_checkouttaps_full.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n  android:background=\"@drawable/layout_bb\"\n    android:orientation=\"vertical\"\n    android:layoutDirection=\"locale\"\n    tools:context=\".open.CheckoutFragment\">\n\n\n<RelativeLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n\n    android:gravity=\"center\">\n  <!--  android:background=\"@drawable/layout_bg\"-->\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\"\n\n        tools:context=\".open.CheckoutFragment\">\n\n        <LinearLayout\n            android:id=\"@+id/fragment_all\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n\n            android:visibility=\"visible\"\n            android:orientation=\"vertical\" />\n\n        <!-- <LinearLayout\n             android:id=\"@+id/sdkContainer\"\n             android:layout_width=\"match_parent\"\n             android:layout_height=\"wrap_content\"\n             android:orientation=\"vertical\"\n            >\n         </LinearLayout>-->\n\n\n        <FrameLayout\n            android:id=\"@+id/fragment_container_nfc_lib\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:layout_gravity=\"bottom\"\n            android:orientation=\"vertical\"\n            android:visibility=\"gone\"\n            android:gravity=\"bottom\"/>\n\n\n\n        <FrameLayout\n            android:id=\"@+id/inline_container\"\n            android:layout_width=\"match_parent\"\n            android:visibility=\"gone\"\n            android:layout_height=\"match_parent\"\n            android:layout_margin=\"20dp\" />\n\n\n    </LinearLayout>\n    <!--Kept webframelayout outside so that it takes full screen-->\n    <FrameLayout\n        android:id=\"@+id/webFrameLayout\"\n        android:layout_width=\"match_parent\"\n        android:visibility=\"gone\"\n        android:layout_height=\"match_parent\" />\n\n\n    <company.tap.tapuilibrary.uikit.atoms.TapTextView\n        android:layout_width=\"40dp\"\n        android:layout_height=\"40dp\"\n        android:id=\"@+id/closeText\"\n        android:gravity=\"center\"\n        android:layout_marginEnd=\"10dp\"\n        android:text=\"close\"\n        android:visibility=\"gone\"\n        android:layout_alignParentEnd=\"true\"\n        android:layout_gravity=\"end\"/>\n\n    <company.tap.tapuilibrary.uikit.atoms.TapImageView\n        android:layout_width=\"40dp\"\n        android:layout_height=\"40dp\"\n        android:id=\"@+id/closeImage\"\n        android:src=\"@drawable/ic_close\"\n        android:gravity=\"center\"\n        android:layout_marginEnd=\"10dp\"\n        android:text=\"close\"\n        android:visibility=\"gone\"\n        android:layout_alignParentEnd=\"true\"\n        android:layout_gravity=\"end\"/>\n\n\n</RelativeLayout>\n\n</LinearLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout/src/main/res/layout/fragment_checkouttaps_full.xml b/checkout/src/main/res/layout/fragment_checkouttaps_full.xml
--- a/checkout/src/main/res/layout/fragment_checkouttaps_full.xml	(revision c46dbf76c8aaeb9118f43cb1199424eeb6aae4c9)
+++ b/checkout/src/main/res/layout/fragment_checkouttaps_full.xml	(date 1681110823725)
@@ -3,7 +3,6 @@
     xmlns:tools="http://schemas.android.com/tools"
     android:layout_width="match_parent"
     android:layout_height="wrap_content"
-  android:background="@drawable/layout_bb"
     android:orientation="vertical"
     android:layoutDirection="locale"
     tools:context=".open.CheckoutFragment">
Index: checkout/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.library'\napply plugin: 'kotlin-android'\napply plugin: 'kotlin-android-extensions'\napply plugin: 'kotlin-kapt'\n\nandroid {\n    compileSdkVersion 31\n   // buildToolsVersion \"31.0.3\"\n\n    defaultConfig {\n        minSdkVersion 22\n        targetSdkVersion 31\n        versionCode 1\n        versionName \"1.0\"\n        multiDexEnabled true\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n        consumerProguardFiles 'consumer-rules.pro'\n    }\n\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\n        }\n        buildTypes.each {\n            it.buildConfigField 'String', 'EncryptAPIKEY', EncryptAPIKEY\n        }\n\n\n    }\n\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_8\n        targetCompatibility JavaVersion.VERSION_1_8\n    }\n\n    kotlinOptions {\n        jvmTarget = JavaVersion.VERSION_1_8.toString()\n    }\n}\n\ndependencies {\n    implementation 'com.google.android.material:material:1.6.1'\n    def koin_version = '2.2.0-alpha-1'\n\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\n    implementation (\"androidx.lifecycle:lifecycle-extensions:2.2.0@aar\") {\n        transitive = true\n    }\n    def lifecycle_version = \"2.4.1\"\n    implementation \"androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version\"\n    implementation \"androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version\"\n    implementation \"androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version\"\n    kapt \"androidx.lifecycle:lifecycle-common-java8:$lifecycle_version\"\n\n    implementation \"androidx.fragment:fragment-ktx:1.4.1\"\n\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\n    implementation files('libs/benefitinappsdk-1.0.23.aar')\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version\"\n    implementation 'androidx.appcompat:appcompat:1.4.1'\n    implementation 'androidx.core:core-ktx:1.7.0'\n    api 'com.github.Tap-Payments:LocalisationManager-Android:0.0.1.34'\n  //  implementation 'com.github.Tap-Payments:TapCardInputKit-Android:0.1.0.25'\n    implementation 'com.github.Tap-Payments:TapCardInputKit-Android:0.1.0.36.200'\n //   api 'com.github.Tap-Payments:TapCardInputKit-Android:0.1.0.25'\n    api 'com.github.Tap-Payments:TapCardInputKit-Android:0.1.0.36.200'\n    implementation \"com.hbb20:ccp:2.5.0\"\n    api 'androidx.activity:activity-ktx:1.4.0'\n    testImplementation 'junit:junit:4.13.2'\n    androidTestImplementation 'androidx.test.ext:junit:1.1.5'\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'\n    implementation 'com.github.bumptech.glide:glide:4.12.0'\n    kapt 'com.github.bumptech.glide:compiler:4.12.0'\n    implementation 'com.github.Tap-Payments:TapCardScannerKit-Android:0.0.1.18.6'\n    implementation 'company.tap:PayCards-Tap-Android:0.1.6.4'\n    api 'company.tap:PayCards-Tap-Android:0.1.6.4'\n    implementation(\"io.coil-kt:coil:1.2.0\")\n    implementation(\"io.coil-kt:coil-svg:1.2.0\")\n    implementation 'com.github.Tap-Payments:TapNFCCardReaderKit-Android:0.0.1.6.1'\n    implementation \"io.reactivex.rxjava2:rxjava:2.2.19\"\n    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'\n    api 'com.github.Tap-Payments:TapNetwrok-Android:0.2.2.23'\n    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.0'\n    api 'com.github.Tap-Payments:CommonDataModelsKit-Android:0.1.5'\n    api 'com.google.code.gson:gson:2.8.9'\n    implementation 'com.squareup.retrofit2:retrofit:2.9.0'\n    implementation 'androidx.multidex:multidex:2.0.1'\n    implementation 'androidx.recyclerview:recyclerview:1.2.1'\n    implementation \"androidx.fragment:fragment-ktx:1.5.6\"\n    implementation 'com.gdacciaro:iosdialog:1.0.3'\n    implementation 'com.github.Tap-Payments:LocalisationManager-Android:0.0.1.34'\n    implementation 'com.koushikdutta.ion:ion:3.1.0'\n    implementation \"com.google.android.gms:play-services-wallet:19.1.0\"\n\n    implementation 'com.github.Tap-Payments:TapUIKit-Android:1.1.1.358.294'\n    api 'com.github.Tap-Payments:TapUIKit-Android:1.1.1.358.294'\n    implementation 'com.github.2coffees1team:GlideToVectorYou:v2.0.0'\n    implementation 'com.fasterxml.jackson.core:jackson-core:2.11.1'\n    implementation 'com.fasterxml.jackson.core:jackson-databind:2.11.1'\n//This is BungFender for logs\n    implementation 'com.bugfender.sdk:android:3.+'\n\n    implementation 'com.github.Dimezis:BlurView:version-2.0.3'\n     implementation 'io.alterac.blurkit:blurkit:1.1.0'\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout/build.gradle b/checkout/build.gradle
--- a/checkout/build.gradle	(revision c46dbf76c8aaeb9118f43cb1199424eeb6aae4c9)
+++ b/checkout/build.gradle	(date 1681040659904)
@@ -105,5 +105,10 @@
     implementation 'com.github.Dimezis:BlurView:version-2.0.3'
      implementation 'io.alterac.blurkit:blurkit:1.1.0'
 
+    implementation 'jp.wasabeef:blurry:4.0.1'
+    implementation 'jp.wasabeef:glide-transformations:4.3.0'
+    // If you want to use the GPU Filters
+    implementation 'jp.co.cyberagent.android:gpuimage:2.1.0'
+
 
 }
Index: app/src/main/res/values/styles.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><resources xmlns:tools=\"http://schemas.android.com/tools\">\n\n    <!-- Base application theme. -->\n    <style name=\"AppTheme\" parent=\"Theme.MaterialComponents.Light.DarkActionBar.Bridge\">\n        <!-- Customize your theme here. -->\n        <item name=\"colorPrimary\">@color/colorPrimary</item>\n        <item name=\"colorPrimaryDark\">@color/colorPrimaryDark</item>\n        <item name=\"colorAccent\">@color/colorAccent</item>\n    </style>\n    <style name=\"DialogStyle\" parent=\"Theme.Design.Light.BottomSheetDialog\">\n        <item name=\"android:windowIsFloating\">false</item>\n        <item name=\"android:statusBarColor\">@android:color/transparent</item>\n        <item name=\"android:windowSoftInputMode\">adjustResize</item>\n    </style>\n\n    <style name=\"EditText\">\n        <item name=\"android:textCursorDrawable\">@null</item>\n        <item name=\"android:textColor\">@color/greyish_brown</item>\n        <item name=\"android:textSize\">16sp</item>\n        <item name=\"android:fontFamily\" tools:targetApi=\"jelly_bean\">sans-serif-light</item>\n        <item name=\"android:textStyle\">normal</item>\n    </style>\n    <!--Floating label text style-->\n    <style name=\"TextInputLayout.Hint\" parent=\"TextAppearance.AppCompat.Small\">\n        <item name=\"android:textColor\">@color/black</item>\n        <item name=\"android:fontFamily\" tools:targetApi=\"jelly_bean\">sans-serif</item>\n        <item name=\"android:textSize\">@dimen/font_size_11sp</item>\n        <item name=\"android:textStyle\">normal</item>\n\n    </style>\n</resources>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/styles.xml b/app/src/main/res/values/styles.xml
--- a/app/src/main/res/values/styles.xml	(revision c46dbf76c8aaeb9118f43cb1199424eeb6aae4c9)
+++ b/app/src/main/res/values/styles.xml	(date 1681092957847)
@@ -28,4 +28,6 @@
         <item name="android:textStyle">normal</item>
 
     </style>
+
+
 </resources>
Index: checkout/src/main/res/values/styles.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources xmlns:tools=\"http://schemas.android.com/tools\">\n    <style name=\"DialogStyle\" parent=\"Theme.Design.Light.BottomSheetDialog\">\n        <item name=\"android:windowIsFloating\">false</item>\n        <item name=\"android:statusBarColor\">@android:color/transparent</item>\n        <item name=\"android:windowSoftInputMode\">adjustResize|adjustPan</item>\n        <item name=\"android:windowAnimationStyle\">@style/DialogAnimation</item>\n        <item name=\"android:windowIsTranslucent\">true</item>\n    </style>\n\n    <style name=\"Theme.AppCompat.Translucent\" parent=\"Theme.MaterialComponents.NoActionBar\">\n        <item name=\"android:windowNoTitle\">true</item>\n        <item name=\"android:windowBackground\">@android:color/transparent</item>\n        <item name=\"android:colorBackgroundCacheHint\">@null</item>\n        <item name=\"android:windowIsTranslucent\">true</item>\n        <item name=\"android:editTextColor\">@color/black_color</item>\n        <item name=\"android:windowAnimationStyle\">@android:style/Animation</item>\n    </style>\n\n    <style name=\"DialogAnimation\">\n        <item name=\"android:windowEnterAnimation\">@anim/slide_up</item>\n        <item name=\"android:windowExitAnimation\">@anim/slide_down</item>\n    </style>\n    <style name=\"CustomCardViewStyle\" parent=\"@style/Widget.MaterialComponents.CardView\">\n        <item name=\"shapeAppearanceOverlay\">@style/ShapeAppearanceOverlay.MaterialCardView.Cut</item>\n    </style>\n    <style name=\"TransparentCompat\" parent=\"Theme.MaterialComponents.Light.NoActionBar.Bridge\">\n        <item name=\"android:windowNoTitle\">true</item>\n        <item name=\"android:windowBackground\">@android:color/transparent</item>\n        <item name=\"android:colorBackgroundCacheHint\">@null</item>\n        <item name=\"android:windowIsTranslucent\">true</item>\n        <item name=\"android:statusBarColor\" tools:ignore=\"NewApi\">@color/french_gray</item>\n    </style>\n    <style name=\"DialogTheme\" parent=\"DialogStyle\">\n        <item name=\"android:windowNoTitle\">true</item>\n        <item name=\"android:windowFullscreen\">true</item>\n        <item name=\"android:windowIsFloating\">false</item>\n    </style>\n</resources>\n<!--\n<item name=\"android:background\">#00000000</item>  Or any transparency or color you need -->\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout/src/main/res/values/styles.xml b/checkout/src/main/res/values/styles.xml
--- a/checkout/src/main/res/values/styles.xml	(revision c46dbf76c8aaeb9118f43cb1199424eeb6aae4c9)
+++ b/checkout/src/main/res/values/styles.xml	(date 1681119012427)
@@ -1,11 +1,24 @@
 <?xml version="1.0" encoding="utf-8"?>
 <resources xmlns:tools="http://schemas.android.com/tools">
-    <style name="DialogStyle" parent="Theme.Design.Light.BottomSheetDialog">
-        <item name="android:windowIsFloating">false</item>
+    <style name="DialogStyle" parent="ThemeOverlay.MaterialComponents.BottomSheetDialog">
         <item name="android:statusBarColor">@android:color/transparent</item>
         <item name="android:windowSoftInputMode">adjustResize|adjustPan</item>
         <item name="android:windowAnimationStyle">@style/DialogAnimation</item>
         <item name="android:windowIsTranslucent">true</item>
+        <item name="bottomSheetStyle">@style/CustomBottomSheetStyle</item>
+        <item name="android:windowContentOverlay">@null</item>
+        <item name="android:colorBackground">@android:color/transparent</item>
+        <item name="android:backgroundDimEnabled">true</item>
+        <item name="android:backgroundDimAmount">0.3</item>
+        <item name="android:windowFrame">@null</item>
+        <item name="android:windowIsFloating">true</item>
+    </style>
+
+    <style name="CustomBottomSheetStyle" parent="Widget.MaterialComponents.BottomSheet.Modal">
+        <item name="android:background">@android:color/transparent</item>
+        <item name="android:colorBackground">@android:color/transparent</item>
+        <item name="backgroundTint">@android:color/transparent</item>
+
     </style>
 
     <style name="Theme.AppCompat.Translucent" parent="Theme.MaterialComponents.NoActionBar">
@@ -36,6 +49,11 @@
         <item name="android:windowFullscreen">true</item>
         <item name="android:windowIsFloating">false</item>
     </style>
+
+    <style name="MyTransparentBottomSheetDialogTheme" parent="Theme.AppCompat.Light">
+        <item name="android:background">@android:color/transparent</item>
+        <item name="android:colorBackground">@android:color/transparent</item>
+    </style>
 </resources>
 <!--
 <item name="android:background">#00000000</item>  Or any transparency or color you need -->
