Index: checkout/src/main/java/company/tap/checkout/open/CheckoutFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package company.tap.checkout.open\n\n\nimport android.annotation.SuppressLint\nimport android.app.Activity\nimport android.content.Context\nimport android.content.res.Resources\nimport android.graphics.*\nimport android.graphics.drawable.BitmapDrawable\nimport android.graphics.drawable.Drawable\nimport android.os.Build\nimport android.os.Bundle\nimport android.os.Handler\nimport android.os.Looper\nimport android.util.DisplayMetrics\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.view.WindowManager\nimport android.widget.FrameLayout\nimport android.widget.LinearLayout\nimport android.widget.RelativeLayout\nimport androidx.annotation.RequiresApi\nimport androidx.cardview.widget.CardView\nimport androidx.core.widget.NestedScrollView\nimport androidx.fragment.app.DialogFragment\nimport androidx.fragment.app.Fragment\nimport androidx.fragment.app.viewModels\nimport cards.pay.paycardsrecognizer.sdk.Card\nimport cards.pay.paycardsrecognizer.sdk.ui.InlineViewCallback\nimport com.bumptech.glide.Glide\nimport com.google.android.material.bottomsheet.BottomSheetBehavior\nimport company.tap.checkout.R\nimport company.tap.checkout.internal.api.enums.ChargeStatus\nimport company.tap.checkout.internal.apiresponse.CardViewModel\nimport company.tap.checkout.internal.apiresponse.CardViewState\nimport company.tap.checkout.internal.apiresponse.Resource\nimport company.tap.checkout.internal.enums.SectionType\nimport company.tap.checkout.internal.utils.CustomUtils\nimport company.tap.checkout.internal.utils.ResizeAnimation\nimport company.tap.checkout.internal.viewmodels.CheckoutViewModel\nimport company.tap.checkout.open.controller.SDKSession\nimport company.tap.checkout.open.controller.SDKSession.sessionDelegate\nimport company.tap.checkout.open.controller.SDKSession.tabAnimatedActionButton\nimport company.tap.checkout.open.data_managers.PaymentDataSource\nimport company.tap.taplocalizationkit.LocalizationManager\nimport company.tap.tapuilibrary.themekit.ThemeManager\nimport company.tap.tapuilibrary.uikit.atoms.TapImageView\nimport company.tap.tapuilibrary.uikit.atoms.TapTextView\nimport company.tap.tapuilibrary.uikit.enums.ActionButtonState\nimport company.tap.tapuilibrary.uikit.interfaces.TapBottomDialogInterface\nimport company.tap.tapuilibrary.uikit.ktx.setTopBorders\nimport company.tap.tapuilibrary.uikit.utils.BlurBuilder\nimport company.tap.tapuilibrary.uikit.views.TapBottomSheetDialog\nimport company.tap.tapuilibrary.uikit.views.TapBrandView\nimport eightbitlab.com.blurview.BlurView\nimport eightbitlab.com.blurview.RenderEffectBlur\nimport eightbitlab.com.blurview.RenderScriptBlur\nimport org.json.JSONObject\n\n\n/**\n * A simple [Fragment] subclass.\n// * Use the [CheckoutFragment.newInstance] factory method to\n * create an instance of this fragment.\n */\nclass CheckoutFragment : TapBottomSheetDialog(), TapBottomDialogInterface, InlineViewCallback {\n\n    private var _Context: Context? = null\n\n    @JvmField\n    var _viewModel: CheckoutViewModel? = null\n    private lateinit var cardViewModel: CardViewModel\n    var _activity: Activity? = null\n    var checkOutActivity: CheckOutActivity? = null\n    lateinit var closeText: TapTextView\n    lateinit var closeImage: TapImageView\n    var hideAllView = false\n    lateinit var status: ChargeStatus\n    private var _resetFragment: Boolean = true\n    var newColorVal: String? =null\n    @JvmField\n    var scrollView: NestedScrollView? = null\n\n    @JvmField\n    var isNfcOpened: Boolean = false\n\n    @JvmField\n    var isScannerOpened: Boolean = false\n\n    @JvmField\n    var isFullscreen = false\n    var heightIn: Int = 0\n    private var inLineCardLayout: FrameLayout? = null\n    private var relativeLL: RelativeLayout? = null\n    private var mainCardLayout: CardView? = null\n    private var  topHeaderView: TapBrandView? = null\n    private var displayMetrics: Int? = 0\n    private var targetHeight: Int? = 0\n\n    private val mBackgroundBlurRadius = 30\n    private val mBlurBehindRadius = 60\n\n    // We set a different dim amount depending on whether window blur is enabled or disabled\n    private val mDimAmountWithBlur = 0.1f\n    private val mDimAmountNoBlur = 0.4f\n\n    // We set a different alpha depending on whether window blur is enabled or disabled\n    private val mWindowBackgroundAlphaWithBlur = 170\n    private val mWindowBackgroundAlphaNoBlur = 255\n\n    // Use a rectangular shape drawable for the window background. The outline of this drawable\n    // dictates the shape and rounded corners for the window background blur area.\n    private var mWindowBackgroundDrawable: Drawable? = null\n  var originalHeight:Int?=0\n\n    var blurView: BlurView?=null\n\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        _activity = activity?.parent\n        this._Context = context\n\n\n    }\n\n    /*  @RequiresApi(Build.VERSION_CODES.N)\n      override fun onDestroyView() {\n          println(\"onDestroyView>>>\")\n          *//*if (view?.parent != null) {\n            (view?.parent as ViewGroup).removeView(view)\n        }*//*\n        resetTabAnimatedButton()\n        super.onDestroyView()\n    }*/\n\n\n    override fun onDestroy() {\n        super.onDestroy()\n\n        // if (!this.isDestroyed()) {\n        Glide.with(this).pauseRequests()\n        // }\n        resetTabAnimatedButton()\n\n    }\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        setStyle(DialogFragment.STYLE_NORMAL, R.style.DialogStyle)\n        dialog?.window?.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE)\n\n        return inflater.inflate(R.layout.fragment_checkouttaps, container, false)\n    }\n\n    @SuppressLint(\"ResourceAsColor\")\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        val viewModel: CheckoutViewModel by viewModels()\n        val cardViewModel: CardViewModel by viewModels()\n        this._viewModel = viewModel\n        _Context?.let { cardViewModel.getContext(it) }\n        backgroundColor = (Color.parseColor(ThemeManager.getValue(\"tapBottomSheet.dimmedColor\")))\n        setStyle(DialogFragment.STYLE_NORMAL, R.style.DialogStyle)\n        bottomSheetDialog.behavior.isDraggable = true\n        val checkoutLayout: LinearLayout? = view.findViewById(R.id.fragment_all)\n        val frameLayout: FrameLayout? = view.findViewById(R.id.fragment_container_nfc_lib)\n        val webFrameLayout: FrameLayout? = view.findViewById(R.id.webFrameLayout)\n        webFrameLayout?.setLayoutParams(\n            LinearLayout.LayoutParams(\n                LinearLayout.LayoutParams.MATCH_PARENT,\n                Resources.getSystem().displayMetrics.heightPixels\n            )\n        )\n        inLineCardLayout = view.findViewById(R.id.inline_container)\n        val headerLayout: LinearLayout? = view.findViewById(R.id.headerLayout)\n        bottomSheetLayout = bottomSheetDialog.findViewById(R.id.design_bottom_sheet)\n        closeText = view.findViewById(R.id.closeText)\n        closeImage = view.findViewById(R.id.closeImage)\n        scrollView = view.findViewById(R.id.scrollView)\n        relativeLL = view.findViewById(R.id.relativeLL)\n        mainCardLayout = view.findViewById(R.id.mainCardLayout)\nblurView = BlurView(context)\n\n        topHeaderView = context?.let { TapBrandView(it) }\n        topHeaderView?.visibility = View.GONE\n\n        displayMetrics= CustomUtils.getDeviceDisplayMetrics(context as Activity)\n\n            //  blurLayout = BlurLayout(context)\n        blurBehindView()\n\n        val heightscreen: Int = Resources.getSystem().getDisplayMetrics().heightPixels;\n        if (LocalizationManager.currentLocalized.length() != 0)\n            closeText.text = LocalizationManager.getValue(\"close\", \"Common\")\n\n        if (SDKSession.showCloseImage == true) {\n\n            if (!hideAllView) {\n                Handler().postDelayed({\n                    closeImage.visibility = View.GONE\n\n                }, 3000)\n            }\n\n        } else {\n            if (!hideAllView) {\n                Handler().postDelayed({\n                    closeText.visibility = View.GONE\n\n                }, 3000)\n            }\n\n        }\n\n        //LocalizationManager.loadTapLocale(resources, R.raw.lang)\n        sessionDelegate?.sessionHasStarted()\n\n        bottomSheetLayout?.let {\n            viewModel.setBottomSheetLayout(it)\n        }\n\n        if (checkoutLayout != null) {\n            context?.let {\n                if (frameLayout != null) {\n                    webFrameLayout?.let { it1 ->\n                        if (inLineCardLayout != null) {\n                            activity?.intent?.let { it2 ->\n                                if (headerLayout != null) {\n                                    viewModel.initLayoutManager(\n                                        bottomSheetDialog,\n                                        it,\n                                        childFragmentManager,\n                                        checkoutLayout,\n                                        frameLayout,\n                                        it1,\n                                        inLineCardLayout!!,\n                                        this,\n                                        it2,\n                                        cardViewModel, this, headerLayout\n                                    )\n                                }\n                            }\n\n                        }\n                    }\n                }\n            }\n            enableSections()\n            originalHeight = checkoutLayout.measuredHeight\n\n            checkoutLayout.addView(topHeaderView,0)\n\n\n        }\n        inLineCardLayout?.minimumHeight = heightscreen - checkoutLayout?.height!!\n        dialog?.window?.attributes?.windowAnimations = R.style.DialogAnimation\n\n        bottomSheetDialog.setOnShowListener {\n            //Handler().postDelayed({\n            bottomSheetDialog.behavior.setState(BottomSheetBehavior.STATE_EXPANDED)\n            //  }, 0)\n        }\n        val borderColor: String = ThemeManager.getValue<String>(\"poweredByTap.backgroundColor\").toString()\n        var borderOpacityVal: String? = null\n        //Workaround since we don't have direct method for extraction\n        borderOpacityVal = borderColor.substring(borderColor.length - 2)\n        newColorVal = \"#\" + borderOpacityVal + borderColor.substring(0, borderColor.length - 2).replace(\"#\", \"\")\n        println(\"color iii>>\"+newColorVal)\n\n       //  topHeaderView?.setBackgroundResource(R.drawable.blurviewnew)\n       //  topHeaderView?.setBackgroundColor(Color.parseColor(Color.TRANSPARENT.toString()))\n        scrollView?.let {\n            setTopBorders(\n                it,\n                40f,// corner raduis\n                0.0f,\n                Color.parseColor(\n                    newColorVal\n                ),\n                Color.parseColor(\n                    newColorVal\n                ),// tint color\n                Color.parseColor(\n                    newColorVal\n                )\n            )\n        }\n\n\n        relativeLL.let { it1 ->\n            if (it1 != null) {\n                setTopBorders(\n                    it1,\n                    35f,// corner raduis\n                    0.0f,\n                    Color.parseColor(\n                        newColorVal\n                    ),// stroke color\n                    Color.parseColor(newColorVal),// tint color\n                    Color.parseColor(newColorVal)\n                )\n            }\n        }\n        mainCardLayout.let { it1 ->\n            if (it1 != null) {\n                setTopBorders(\n                    it1,\n                    35f,// corner raduis\n                    0.0f,\n                    Color.parseColor(newColorVal),// stroke color\n                    Color.parseColor(newColorVal),// tint color\n                    Color.parseColor(newColorVal)\n                )\n            }\n        }\n\n\n        /*bottomSheetDialog.behavior.setBottomSheetCallback(object :\n            BottomSheetBehavior.BottomSheetCallback() {\n\n            override fun onStateChanged(bottomSheet: View, newState: Int) {\n                *//*  println(\"111heightscreen>>>>\"+heightscreen)\n                  println(\"1111sdkLayoutheight>>>>>\"+checkoutLayout?.height)\n                  println(\"1111newState>>>>>\"+newState)\n                  println(\"1111difff>>>>>\"+ checkoutLayout?.height?.let { heightscreen.minus(it) })\n                  println(\"1111peek>>>>>\"+bottomSheetDialog.behavior.peekHeight)\n                  var diff = checkoutLayout?.height?.let { heightscreen.minus(it) }*//*\n\n\n                if (newState == BottomSheetBehavior.STATE_HIDDEN) {\n                    resetTabAnimatedButton()\n                    dismiss()\n                }\n\n                if (newState == BottomSheetBehavior.STATE_EXPANDED) {\n                    bottomSheetDialog.behavior.peekHeight = heightscreen\n\n                    bottomSheetDialog.behavior.state = BottomSheetBehavior.STATE_EXPANDED\n                    // bottomSheetDialog.behavior.saveFlags = BottomSheetBehavior.SAVE_FIT_TO_CONTENTS\n                    scrollView?.smoothScrollTo(0, heightscreen)\n                    bottomSheetDialog.behavior.isDraggable = true\n\n                }\n            }\n\n            override fun onSlide(view: View, slideOffset: Float) {\n                // println(\"onSlide\"+p1)\n                //  bottomSheetDialog.behavior.state = BottomSheetBehavior.STATE_EXPANDED\n                scrollView?.smoothScrollTo(0, heightscreen)\n            }\n        })\n*/\n        closeText.setOnClickListener {\n            bottomSheetDialog.dismissWithAnimation\n            bottomSheetDialog.hide()\n            bottomSheetDialog.dismiss()\n            viewModel.incrementalCount = 0\n            resetTabAnimatedButton()\n\n\n        }\n        closeImage.setOnClickListener {\n\n            // bottomSheetDialog.dismissWithAnimation\n            //bottomSheetDialog.hide()\n            // bottomSheetDialog.dismiss()\n            bottomSheetDialog.window?.attributes?.windowAnimations = R.style.DialogAnimation\n            bottomSheetDialog.hide()\n            resetTabAnimatedButton()\n            viewModel.incrementalCount = 0\n\n        }\n\n        adjustHeightAccToDensity()\n\n        Handler(Looper.getMainLooper()).postDelayed( {\n            topHeaderView?.visibility =View.VISIBLE\n            topHeaderView?.setAlpha(0.8f)\n               }, 1000)\n             val resizeAnimation =\n                 targetHeight?.let {\n                     ResizeAnimation(\n                         topHeaderView,\n                         it,\n                         0, true\n                     )\n                 }\n\n            resizeAnimation?.duration = 1500\n            topHeaderView?.startAnimation(resizeAnimation)\n\n        Handler(Looper.getMainLooper()).postDelayed( {\n            topHeaderView?.visibility =View.VISIBLE\n            topHeaderView?.let {\n                blurView?.setupWith(it,RenderEffectBlur()) // or RenderEffectBlur\n                    ?.setBlurRadius(80F)\n            }\n\n        }, 3000)\n\n    }\n\n    private fun blurBehindView() {\n        mWindowBackgroundDrawable = context?.getDrawable(R.drawable.window_background)\n\n        if (buildIsAtLeastS()) {\n            // Enable blur behind. This can also be done in xml with R.attr#windowBlurBehindEnabled\n            activity?.getWindow()?.addFlags(WindowManager.LayoutParams.FLAG_BLUR_BEHIND);\n\n            // Register a listener to adjust window UI whenever window blurs are enabled/disabled\n            setupWindowBlurListener();\n        } else {\n            // Window blurs are not available prior to Android S\n            updateWindowForBlurs(false /* blursEnabled */);\n        }\n\n        // Enable dim. This can also be done in xml, see R.attr#backgroundDimEnabled\n        activity?.getWindow()?.addFlags(WindowManager.LayoutParams.FLAG_DIM_BEHIND);\n    }\n\n\n    private fun getScreenshot(v: View): Bitmap? {\n        val b = Bitmap.createBitmap(v.width, v.height, Bitmap.Config.ARGB_4444)\n        v.draw(Canvas(b))\n        println(\"getScreenshot\"+b)\n        return b\n    }\n    fun applyBlur(context: Context?, mainView: View?, blurView: View?) {\n        //this.context = context\n        if (blurView != null) {\n            getScreenshot(blurView)?.let {\n                if (mainView != null) {\n                    blur(it, mainView)\n                }\n            }\n        }\n    }\n    @SuppressLint(\"NewApi\")\n    private fun blur(bitmap: Bitmap, view: View) {\n        val overlay = Bitmap.createBitmap(\n            (view.measuredWidth.toFloat() / 3.0f).toInt(),\n            (view.measuredHeight\n                .toFloat() / 3.0f).toInt(), Bitmap.Config.ARGB_4444\n        )\n        val canvas = Canvas(overlay)\n        canvas.translate((-view.left).toFloat() / 3.0f, (-view.top).toFloat() / 3.0f)\n        canvas.scale(1.0f / 3.0f, 1.0f / 3.0f)\n        val paint = Paint()\n        paint.setFlags(Paint.FILTER_BITMAP_FLAG)\n        canvas.drawBitmap(bitmap, 0.0f, 0.0f, paint)\n        view.background = BitmapDrawable(\n            this.context?.resources, company.tap.checkout.internal.utils.Blur.fastblur(\n                context, overlay,\n                20.0f.toInt(), true\n            )\n        )\n    }\n\n\n    private fun adjustHeightAccToDensity() {\n        if (displayMetrics == DisplayMetrics.DENSITY_260 || displayMetrics == DisplayMetrics.DENSITY_280 || displayMetrics == DisplayMetrics.DENSITY_300 || displayMetrics == DisplayMetrics.DENSITY_XHIGH || displayMetrics == DisplayMetrics.DENSITY_340 || displayMetrics == DisplayMetrics.DENSITY_360) {\n            targetHeight = 90\n        } else if (displayMetrics == DisplayMetrics.DENSITY_450 || displayMetrics == DisplayMetrics.DENSITY_420 || displayMetrics == DisplayMetrics.DENSITY_400 ) {\n            targetHeight = 120\n        }else targetHeight = 140\n    }\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onAttach(context: Context) {\n        super.onAttach(context)\n        LocalizationManager.setLocale(context, PaymentDataSource.getSDKLocale())\n\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun enableSections(): ArrayList<SectionType> {\n        val enabledSections = ArrayList<SectionType>()\n        enabledSections.add(SectionType.BUSINESS)\n        enabledSections.add(SectionType.AMOUNT_ITEMS)\n        enabledSections.add(SectionType.FRAGMENT)\n        enabledSections.add(SectionType.ActionButton)\n\n        println(\"_resetFragment>>\" + _resetFragment)\n        println(\"hideAllView>>\" + hideAllView)\n        if (_resetFragment) {\n            if (hideAllView) {\n                if (::status.isInitialized)\n                    _viewModel?.showOnlyButtonView(\n                        status,\n                        checkOutActivity as CheckOutActivity?,\n                        this\n                    )\n\n            } else {\n\n                _viewModel?.displayStartupLayout(enabledSections)\n                _viewModel?.getDatasfromAPIs(\n                    PaymentDataSource.getMerchantData(),\n                    PaymentDataSource.getPaymentOptionsResponse()\n                )\n\n            }\n        } else {\n            if (::status.isInitialized)\n                _viewModel?.showOnlyButtonView(status, checkOutActivity as CheckOutActivity?, this)\n        }\n\n        setBottomSheetInterface(this)\n\n        return enabledSections\n    }\n\n\n    companion object {\n        // TODO: Rename and change types and number of parameters\n        const val RESET_FRAG = \"resetFragment\"\n\n        @JvmStatic\n        fun newInstance(context: Context, activity: Activity?, resetFragment: Boolean) =\n            CheckoutFragment().apply {\n                arguments = Bundle().apply {}\n                _Context = context\n                _activity = activity\n                _resetFragment = resetFragment\n                requireArguments().putBoolean(RESET_FRAG, resetFragment)\n            }\n    }\n\n    override fun onScanCardFailed(e: Exception?) {\n        println(\"onScanCardFailed\")\n        // _viewModel?.handleScanFailedResult()\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onScanCardFinished(card: Card?, cardImage: ByteArray?) {\n        if (card != null) {\n            println(\"scanned card is$card\")\n            //  _viewModel?.handleScanSuccessResult(card)\n\n        }\n    }\n\n\n    private fun consumeResponse(response: Resource<CardViewState>) {\n        println(\"response value is\" + response.data?.configResponseModel)\n        when (response) {\n            is Resource.Loading -> concatText(\"Loading\")\n            is Resource.Finished -> renderView(response.data)\n            is Error -> response.message?.let { concatText(it) }\n            is Resource.Success -> renderView(response.data)\n\n        }\n    }\n\n    private fun renderView(data: CardViewState?) {\n\n    }\n\n    @SuppressLint(\"SetTextI18n\")\n    private fun concatText(newText: String) {\n        println(\"newText respoonse$newText\")\n\n    }\n\n\n    override fun onDetach() {\n        super.onDetach()\n        if (view == null) {\n            return\n        }\n        if (isNfcOpened) {\n        } else {\n            checkOutActivity?.onBackPressed()\n        }\n\n        if (isScannerOpened){\n\n        } else {\n            //_viewModel?.incrementalCount =0\n            checkOutActivity?.onBackPressed()\n        }\n\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun resetTabAnimatedButton() {\n        checkOutActivity?.displayMetrics?.let { tabAnimatedActionButton?.setDisplayMetrics(it) }\n        SDKSession.sessionActive = false\n        tabAnimatedActionButton?.changeButtonState(ActionButtonState.RESET)\n        if (checkOutActivity?.isGooglePayClicked == false) {\n            checkOutActivity?.overridePendingTransition(0, R.anim.slide_down_exit)\n            checkOutActivity?.finishAfterTransition()\n        }\n        //  checkOutActivity?.finish()\n\n        val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n        tabAnimatedActionButton?.setButtonDataSource(\n            true,\n            context?.let { LocalizationManager.getLocale(it).language },\n            payString,\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.paymentBackgroundColor\")),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.titleLabelColor\")),\n        )\n        /*  tabAnimatedActionButton?.setOnClickListener {\n              requireActivity().supportFragmentManager.let { it1 -> SDKSession.contextSDK?.let { it2 ->\n                  SDKSession.startSDK(it1,\n                      it2,SDKSession.contextSDK as Activity)\n              } }\n          }*/\n        tabAnimatedActionButton?.isClickable = true\n        tabAnimatedActionButton?.isEnabled = true\n    }\n\n\n    /*  private fun initKeyBoardListener() {\n          // Минимальное значение клавиатуры.\n          // Threshold for minimal keyboard height.\n          val MIN_KEYBOARD_HEIGHT_PX = 150\n          // Окно верхнего уровня view.\n          // Top-level window decor view.\n              // val decorView: View = netscape.javascript.JSObject.getWindow().getDecorView()\n          // Регистрируем глобальный слушатель. Register global layout listener.\n          decorView.viewTreeObserver.addOnGlobalLayoutListener(object : OnGlobalLayoutListener {\n              // Видимый прямоугольник внутри окна.\n              // Retrieve visible rectangle inside window.\n              private val windowVisibleDisplayFrame: Rect = Rect()\n              private var lastVisibleDecorViewHeight = 0\n              override fun onGlobalLayout() {\n                  decorView.getWindowVisibleDisplayFrame(windowVisibleDisplayFrame)\n                  val visibleDecorViewHeight: Int = windowVisibleDisplayFrame.height()\n                  if (lastVisibleDecorViewHeight != 0) {\n                      if (lastVisibleDecorViewHeight > visibleDecorViewHeight + MIN_KEYBOARD_HEIGHT_PX) {\n\n                      } else if (lastVisibleDecorViewHeight + MIN_KEYBOARD_HEIGHT_PX < visibleDecorViewHeight) {\n\n                      }\n                  }\n                  // Сохраняем текущую высоту view до следующего вызова.\n                  // Save current decor view height for the next call.\n                  lastVisibleDecorViewHeight = visibleDecorViewHeight\n              }\n          })\n      }*/\n\n    fun dismissBottomSheetDialog() {\n        //bottomSheetDialog.window?.attributes?.windowAnimations = R.style.DialogAnimation\n        ThemeManager.currentTheme =\"\"\n        LocalizationManager.currentLocalized= JSONObject()\n        bottomSheetDialog.dismissWithAnimation\n        bottomSheetDialog.hide()\n        bottomSheetDialog.dismiss()\n        resetTabAnimatedButton()\n        sessionDelegate?.sessionCancelled()\n\n    }\n\n    @RequiresApi(api = Build.VERSION_CODES.S)\n    private fun setupWindowBlurListener() {\n        val windowBlurEnabledListener: (Boolean) -> Unit = this::updateWindowForBlurs\n            activity?.window?.decorView?.addOnAttachStateChangeListener(\n            object : View.OnAttachStateChangeListener {\n                override fun onViewAttachedToWindow(v: View) {\n                    activity?.getWindowManager()?.addCrossWindowBlurEnabledListener(\n                        windowBlurEnabledListener\n                    )\n\n                }\n\n                override fun onViewDetachedFromWindow(v: View) {\n                    activity?.getWindowManager()?.removeCrossWindowBlurEnabledListener(\n                        windowBlurEnabledListener\n                    )\n                }\n            })\n    }\n    private fun updateWindowForBlurs(blursEnabled: Boolean) {\n        mWindowBackgroundDrawable?.alpha =\n            if (blursEnabled && mBackgroundBlurRadius > 0) mWindowBackgroundAlphaWithBlur else mWindowBackgroundAlphaNoBlur\n        activity?.getWindow()\n            ?.setDimAmount(if (blursEnabled && mBlurBehindRadius > 0) mDimAmountWithBlur else mDimAmountNoBlur)\n        if (buildIsAtLeastS()) {\n            // Set the window background blur and blur behind radii\n            activity?.getWindow()\n                ?.setBackgroundBlurRadius(mBackgroundBlurRadius)\n            activity?.getWindow()\n                ?.getAttributes()\n                ?.setBlurBehindRadius(mBlurBehindRadius)\n            activity?.getWindow()\n            ?.setAttributes(activity?.getWindow()\n                ?.getAttributes())\n        }\n    }\n    private fun buildIsAtLeastS(): Boolean {\n        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.S\n    }\n\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout/src/main/java/company/tap/checkout/open/CheckoutFragment.kt b/checkout/src/main/java/company/tap/checkout/open/CheckoutFragment.kt
--- a/checkout/src/main/java/company/tap/checkout/open/CheckoutFragment.kt	(revision 4ebf74211dd61b5ddcb6b0fa43dd9c6c94a5814d)
+++ b/checkout/src/main/java/company/tap/checkout/open/CheckoutFragment.kt	(date 1681040483403)
@@ -8,6 +8,7 @@
 import android.graphics.*
 import android.graphics.drawable.BitmapDrawable
 import android.graphics.drawable.Drawable
+import android.media.Image
 import android.os.Build
 import android.os.Bundle
 import android.os.Handler
@@ -18,6 +19,7 @@
 import android.view.ViewGroup
 import android.view.WindowManager
 import android.widget.FrameLayout
+import android.widget.ImageView
 import android.widget.LinearLayout
 import android.widget.RelativeLayout
 import androidx.annotation.RequiresApi
@@ -29,6 +31,7 @@
 import cards.pay.paycardsrecognizer.sdk.Card
 import cards.pay.paycardsrecognizer.sdk.ui.InlineViewCallback
 import com.bumptech.glide.Glide
+import com.bumptech.glide.request.RequestOptions.bitmapTransform
 import com.google.android.material.bottomsheet.BottomSheetBehavior
 import company.tap.checkout.R
 import company.tap.checkout.internal.api.enums.ChargeStatus
@@ -56,9 +59,12 @@
 import eightbitlab.com.blurview.BlurView
 import eightbitlab.com.blurview.RenderEffectBlur
 import eightbitlab.com.blurview.RenderScriptBlur
+import jp.wasabeef.blurry.Blurry
+import jp.wasabeef.glide.transformations.BlurTransformation
 import org.json.JSONObject
 
 
+
 /**
  * A simple [Fragment] subclass.
 // * Use the [CheckoutFragment.newInstance] factory method to
@@ -187,12 +193,12 @@
 blurView = BlurView(context)
 
         topHeaderView = context?.let { TapBrandView(it) }
-        topHeaderView?.visibility = View.GONE
+       // topHeaderView?.visibility = View.GONE
 
         displayMetrics= CustomUtils.getDeviceDisplayMetrics(context as Activity)
 
             //  blurLayout = BlurLayout(context)
-        blurBehindView()
+        //blurBehindView()
 
         val heightscreen: Int = Resources.getSystem().getDisplayMetrics().heightPixels;
         if (LocalizationManager.currentLocalized.length() != 0)
@@ -269,55 +275,68 @@
         var borderOpacityVal: String? = null
         //Workaround since we don't have direct method for extraction
         borderOpacityVal = borderColor.substring(borderColor.length - 2)
-        newColorVal = "#" + borderOpacityVal + borderColor.substring(0, borderColor.length - 2).replace("#", "")
+       // newColorVal = "#" + borderOpacityVal + borderColor.substring(0, borderColor.length - 2).replace("#", "")
         println("color iii>>"+newColorVal)
 
-       //  topHeaderView?.setBackgroundResource(R.drawable.blurviewnew)
-       //  topHeaderView?.setBackgroundColor(Color.parseColor(Color.TRANSPARENT.toString()))
-        scrollView?.let {
-            setTopBorders(
-                it,
-                40f,// corner raduis
-                0.0f,
-                Color.parseColor(
-                    newColorVal
-                ),
-                Color.parseColor(
-                    newColorVal
-                ),// tint color
-                Color.parseColor(
-                    newColorVal
-                )
-            )
-        }
-
-
-        relativeLL.let { it1 ->
-            if (it1 != null) {
-                setTopBorders(
-                    it1,
-                    35f,// corner raduis
-                    0.0f,
-                    Color.parseColor(
-                        newColorVal
-                    ),// stroke color
-                    Color.parseColor(newColorVal),// tint color
-                    Color.parseColor(newColorVal)
-                )
-            }
-        }
-        mainCardLayout.let { it1 ->
-            if (it1 != null) {
-                setTopBorders(
-                    it1,
-                    35f,// corner raduis
-                    0.0f,
-                    Color.parseColor(newColorVal),// stroke color
-                    Color.parseColor(newColorVal),// tint color
-                    Color.parseColor(newColorVal)
-                )
-            }
-        }
+//        Blurry.with(requireContext())
+//            .radius(10)
+//            .sampling(8)
+//            .color(Color.argb(66, 255, 255, 0))
+//            .async()
+//            .onto(topHeaderView);
+        //Blurry.with(requireContext()).radius(25).sampling(2).onto(topHeaderView);
+        Glide.with(requireContext())
+            .load(R.drawable.blurviewnew)
+            .apply(bitmapTransform(BlurTransformation(25, 25)))
+            .into(topHeaderView?.poweredByImage as ImageView)
+      //  Blurry.with(context).radius(25).sampling(2).onto(topHeaderView)
+
+        // topHeaderView?.setBackgroundResource(R.drawable.blurviewnew)
+      //   topHeaderView?.setBackgroundColor(Color.parseColor("#ffffff"))
+//        scrollView?.let {
+//            setTopBorders(
+//                it,
+//                40f,// corner raduis
+//                0.0f,
+//                Color.parseColor(
+//                    newColorVal
+//                ),
+//                Color.parseColor(
+//                    newColorVal
+//                ),// tint color
+//                Color.parseColor(
+//                    newColorVal
+//                )
+//            )
+//        }
+//
+//
+//        relativeLL.let { it1 ->
+//            if (it1 != null) {
+//                setTopBorders(
+//                    it1,
+//                    35f,// corner raduis
+//                    0.0f,
+//                    Color.parseColor(
+//                        newColorVal
+//                    ),// stroke color
+//                    Color.parseColor(newColorVal),// tint color
+//                    Color.parseColor(newColorVal)
+//                )
+//            }
+//        }
+//        mainCardLayout.let { it1 ->
+//            if (it1 != null) {
+//                setTopBorders(
+//                    it1,
+//                    35f,// corner raduis
+//                    0.0f,
+//                    Color.parseColor(newColorVal),// stroke color
+//                    Color.parseColor(newColorVal),// tint color
+//                    Color.parseColor(newColorVal)
+//                )
+//            }
+//        }
 
 
         /*bottomSheetDialog.behavior.setBottomSheetCallback(object :
@@ -380,7 +399,7 @@
 
         Handler(Looper.getMainLooper()).postDelayed( {
             topHeaderView?.visibility =View.VISIBLE
-            topHeaderView?.setAlpha(0.8f)
+//            topHeaderView?.setAlpha(0.8f)
                }, 1000)
              val resizeAnimation =
                  targetHeight?.let {
@@ -396,50 +415,50 @@
 
         Handler(Looper.getMainLooper()).postDelayed( {
             topHeaderView?.visibility =View.VISIBLE
-            topHeaderView?.let {
-                blurView?.setupWith(it,RenderEffectBlur()) // or RenderEffectBlur
-                    ?.setBlurRadius(80F)
-            }
+//            topHeaderView?.let {
+//                blurView?.setupWith(it,RenderEffectBlur()) // or RenderEffectBlur
+//                    ?.setBlurRadius(80F)
+//            }
 
         }, 3000)
 
     }
 
-    private fun blurBehindView() {
-        mWindowBackgroundDrawable = context?.getDrawable(R.drawable.window_background)
-
-        if (buildIsAtLeastS()) {
-            // Enable blur behind. This can also be done in xml with R.attr#windowBlurBehindEnabled
-            activity?.getWindow()?.addFlags(WindowManager.LayoutParams.FLAG_BLUR_BEHIND);
+//    private fun blurBehindView() {
+//        mWindowBackgroundDrawable = context?.getDrawable(R.drawable.window_background)
+//
+//        if (buildIsAtLeastS()) {
+//            // Enable blur behind. This can also be done in xml with R.attr#windowBlurBehindEnabled
+//            activity?.getWindow()?.addFlags(WindowManager.LayoutParams.FLAG_BLUR_BEHIND);
+//
+//            // Register a listener to adjust window UI whenever window blurs are enabled/disabled
+//            setupWindowBlurListener();
+//        } else {
+//            // Window blurs are not available prior to Android S
+//            updateWindowForBlurs(false /* blursEnabled */);
+//        }
+//
+//        // Enable dim. This can also be done in xml, see R.attr#backgroundDimEnabled
+//        activity?.getWindow()?.addFlags(WindowManager.LayoutParams.FLAG_DIM_BEHIND);
+//    }
 
-            // Register a listener to adjust window UI whenever window blurs are enabled/disabled
-            setupWindowBlurListener();
-        } else {
-            // Window blurs are not available prior to Android S
-            updateWindowForBlurs(false /* blursEnabled */);
-        }
 
-        // Enable dim. This can also be done in xml, see R.attr#backgroundDimEnabled
-        activity?.getWindow()?.addFlags(WindowManager.LayoutParams.FLAG_DIM_BEHIND);
-    }
-
-
-    private fun getScreenshot(v: View): Bitmap? {
-        val b = Bitmap.createBitmap(v.width, v.height, Bitmap.Config.ARGB_4444)
-        v.draw(Canvas(b))
-        println("getScreenshot"+b)
-        return b
-    }
-    fun applyBlur(context: Context?, mainView: View?, blurView: View?) {
-        //this.context = context
-        if (blurView != null) {
-            getScreenshot(blurView)?.let {
-                if (mainView != null) {
-                    blur(it, mainView)
-                }
-            }
-        }
-    }
+//    private fun getScreenshot(v: View): Bitmap? {
+//        val b = Bitmap.createBitmap(v.width, v.height, Bitmap.Config.ARGB_4444)
+//        v.draw(Canvas(b))
+//        println("getScreenshot"+b)
+//        return b
+//    }
+//    fun applyBlur(context: Context?, mainView: View?, blurView: View?) {
+//        //this.context = context
+//        if (blurView != null) {
+//            getScreenshot(blurView)?.let {
+//                if (mainView != null) {
+//                    blur(it, mainView)
+//                }
+//            }
+//        }
+//    }
     @SuppressLint("NewApi")
     private fun blur(bitmap: Bitmap, view: View) {
         val overlay = Bitmap.createBitmap(
@@ -660,45 +679,45 @@
 
     }
 
-    @RequiresApi(api = Build.VERSION_CODES.S)
-    private fun setupWindowBlurListener() {
-        val windowBlurEnabledListener: (Boolean) -> Unit = this::updateWindowForBlurs
-            activity?.window?.decorView?.addOnAttachStateChangeListener(
-            object : View.OnAttachStateChangeListener {
-                override fun onViewAttachedToWindow(v: View) {
-                    activity?.getWindowManager()?.addCrossWindowBlurEnabledListener(
-                        windowBlurEnabledListener
-                    )
-
-                }
-
-                override fun onViewDetachedFromWindow(v: View) {
-                    activity?.getWindowManager()?.removeCrossWindowBlurEnabledListener(
-                        windowBlurEnabledListener
-                    )
-                }
-            })
-    }
-    private fun updateWindowForBlurs(blursEnabled: Boolean) {
-        mWindowBackgroundDrawable?.alpha =
-            if (blursEnabled && mBackgroundBlurRadius > 0) mWindowBackgroundAlphaWithBlur else mWindowBackgroundAlphaNoBlur
-        activity?.getWindow()
-            ?.setDimAmount(if (blursEnabled && mBlurBehindRadius > 0) mDimAmountWithBlur else mDimAmountNoBlur)
-        if (buildIsAtLeastS()) {
-            // Set the window background blur and blur behind radii
-            activity?.getWindow()
-                ?.setBackgroundBlurRadius(mBackgroundBlurRadius)
-            activity?.getWindow()
-                ?.getAttributes()
-                ?.setBlurBehindRadius(mBlurBehindRadius)
-            activity?.getWindow()
-            ?.setAttributes(activity?.getWindow()
-                ?.getAttributes())
-        }
-    }
-    private fun buildIsAtLeastS(): Boolean {
-        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.S
-    }
+//    @RequiresApi(api = Build.VERSION_CODES.S)
+//    private fun setupWindowBlurListener() {
+//        val windowBlurEnabledListener: (Boolean) -> Unit = this::updateWindowForBlurs
+//            activity?.window?.decorView?.addOnAttachStateChangeListener(
+//            object : View.OnAttachStateChangeListener {
+//                override fun onViewAttachedToWindow(v: View) {
+//                    activity?.getWindowManager()?.addCrossWindowBlurEnabledListener(
+//                        windowBlurEnabledListener
+//                    )
+//
+//                }
+//
+//                override fun onViewDetachedFromWindow(v: View) {
+//                    activity?.getWindowManager()?.removeCrossWindowBlurEnabledListener(
+//                        windowBlurEnabledListener
+//                    )
+//                }
+//            })
+//    }
+//    private fun updateWindowForBlurs(blursEnabled: Boolean) {
+//        mWindowBackgroundDrawable?.alpha =
+//            if (blursEnabled && mBackgroundBlurRadius > 0) mWindowBackgroundAlphaWithBlur else mWindowBackgroundAlphaNoBlur
+//        activity?.getWindow()
+//            ?.setDimAmount(if (blursEnabled && mBlurBehindRadius > 0) mDimAmountWithBlur else mDimAmountNoBlur)
+//        if (buildIsAtLeastS()) {
+//            // Set the window background blur and blur behind radii
+//            activity?.getWindow()
+//                ?.setBackgroundBlurRadius(mBackgroundBlurRadius)
+//            activity?.getWindow()
+//                ?.getAttributes()
+//                ?.setBlurBehindRadius(mBlurBehindRadius)
+//            activity?.getWindow()
+//            ?.setAttributes(activity?.getWindow()
+//                ?.getAttributes())
+//        }
+//    }
+//    private fun buildIsAtLeastS(): Boolean {
+//        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.S
+//    }
 
 }
 
Index: checkout/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.library'\napply plugin: 'kotlin-android'\napply plugin: 'kotlin-android-extensions'\napply plugin: 'kotlin-kapt'\n\nandroid {\n    compileSdkVersion 31\n   // buildToolsVersion \"31.0.3\"\n\n    defaultConfig {\n        minSdkVersion 22\n        targetSdkVersion 31\n        versionCode 1\n        versionName \"1.0\"\n        multiDexEnabled true\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n        consumerProguardFiles 'consumer-rules.pro'\n    }\n\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\n        }\n        buildTypes.each {\n            it.buildConfigField 'String', 'EncryptAPIKEY', EncryptAPIKEY\n        }\n\n\n    }\n\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_8\n        targetCompatibility JavaVersion.VERSION_1_8\n    }\n\n    kotlinOptions {\n        jvmTarget = JavaVersion.VERSION_1_8.toString()\n    }\n}\n\ndependencies {\n    implementation 'com.google.android.material:material:1.6.1'\n    def koin_version = '2.2.0-alpha-1'\n\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\n    implementation (\"androidx.lifecycle:lifecycle-extensions:2.2.0@aar\") {\n        transitive = true\n    }\n    def lifecycle_version = \"2.4.1\"\n    implementation \"androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version\"\n    implementation \"androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version\"\n    implementation \"androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version\"\n    kapt \"androidx.lifecycle:lifecycle-common-java8:$lifecycle_version\"\n\n    implementation \"androidx.fragment:fragment-ktx:1.4.1\"\n\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\n    implementation files('libs/benefitinappsdk-1.0.23.aar')\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version\"\n    implementation 'androidx.appcompat:appcompat:1.4.1'\n    implementation 'androidx.core:core-ktx:1.7.0'\n    api 'com.github.Tap-Payments:LocalisationManager-Android:0.0.1.34'\n  //  implementation 'com.github.Tap-Payments:TapCardInputKit-Android:0.1.0.25'\n    implementation 'com.github.Tap-Payments:TapCardInputKit-Android:0.1.0.36.200'\n //   api 'com.github.Tap-Payments:TapCardInputKit-Android:0.1.0.25'\n    api 'com.github.Tap-Payments:TapCardInputKit-Android:0.1.0.36.200'\n    implementation \"com.hbb20:ccp:2.5.0\"\n    api 'androidx.activity:activity-ktx:1.4.0'\n    testImplementation 'junit:junit:4.13.2'\n    androidTestImplementation 'androidx.test.ext:junit:1.1.5'\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'\n    implementation 'com.github.bumptech.glide:glide:4.12.0'\n    kapt 'com.github.bumptech.glide:compiler:4.12.0'\n    implementation 'com.github.Tap-Payments:TapCardScannerKit-Android:0.0.1.18.6'\n    implementation 'company.tap:PayCards-Tap-Android:0.1.6.4'\n    api 'company.tap:PayCards-Tap-Android:0.1.6.4'\n    implementation(\"io.coil-kt:coil:1.2.0\")\n    implementation(\"io.coil-kt:coil-svg:1.2.0\")\n    implementation 'com.github.Tap-Payments:TapNFCCardReaderKit-Android:0.0.1.6.1'\n    implementation \"io.reactivex.rxjava2:rxjava:2.2.19\"\n    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'\n    api 'com.github.Tap-Payments:TapNetwrok-Android:0.2.2.23'\n    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.0'\n    api 'com.github.Tap-Payments:CommonDataModelsKit-Android:0.1.5'\n    api 'com.google.code.gson:gson:2.8.9'\n    implementation 'com.squareup.retrofit2:retrofit:2.9.0'\n    implementation 'androidx.multidex:multidex:2.0.1'\n    implementation 'androidx.recyclerview:recyclerview:1.2.1'\n    implementation \"androidx.fragment:fragment-ktx:1.5.6\"\n    implementation 'com.gdacciaro:iosdialog:1.0.3'\n    implementation 'com.github.Tap-Payments:LocalisationManager-Android:0.0.1.34'\n    implementation 'com.koushikdutta.ion:ion:3.1.0'\n    implementation \"com.google.android.gms:play-services-wallet:19.1.0\"\n\n    implementation 'com.github.Tap-Payments:TapUIKit-Android:1.1.1.358.289'\n    api 'com.github.Tap-Payments:TapUIKit-Android:1.1.1.358.289'\n    implementation 'com.github.2coffees1team:GlideToVectorYou:v2.0.0'\n    implementation 'com.fasterxml.jackson.core:jackson-core:2.11.1'\n    implementation 'com.fasterxml.jackson.core:jackson-databind:2.11.1'\n//This is BungFender for logs\n    implementation 'com.bugfender.sdk:android:3.+'\n\n    implementation 'com.github.Dimezis:BlurView:version-2.0.3'\n     implementation 'io.alterac.blurkit:blurkit:1.1.0'\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout/build.gradle b/checkout/build.gradle
--- a/checkout/build.gradle	(revision 4ebf74211dd61b5ddcb6b0fa43dd9c6c94a5814d)
+++ b/checkout/build.gradle	(date 1681039919676)
@@ -105,5 +105,10 @@
     implementation 'com.github.Dimezis:BlurView:version-2.0.3'
      implementation 'io.alterac.blurkit:blurkit:1.1.0'
 
+    implementation 'jp.wasabeef:blurry:4.0.1'
+    implementation 'jp.wasabeef:glide-transformations:4.3.0'
+    // If you want to use the GPU Filters
+    implementation 'jp.co.cyberagent.android:gpuimage:2.1.0'
+
 
 }
Index: .idea/deploymentTargetDropDown.xml
===================================================================
diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
deleted file mode 100644
--- a/.idea/deploymentTargetDropDown.xml	(revision 4ebf74211dd61b5ddcb6b0fa43dd9c6c94a5814d)
+++ /dev/null	(revision 4ebf74211dd61b5ddcb6b0fa43dd9c6c94a5814d)
@@ -1,17 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="deploymentTargetDropDown">
-    <runningDeviceTargetSelectedWithDropDown>
-      <Target>
-        <type value="RUNNING_DEVICE_TARGET" />
-        <deviceKey>
-          <Key>
-            <type value="VIRTUAL_DEVICE_PATH" />
-            <value value="$USER_HOME$/.android/avd/Pixel_3a_XL_API_31_1.avd" />
-          </Key>
-        </deviceKey>
-      </Target>
-    </runningDeviceTargetSelectedWithDropDown>
-    <timeTargetWasSelectedWithDropDown value="2023-04-06T12:53:10.995511Z" />
-  </component>
-</project>
\ No newline at end of file
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\n  <component name=\"GradleSettings\">\n    <option name=\"linkedExternalProjectsSettings\">\n      <GradleProjectSettings>\n        <option name=\"testRunner\" value=\"GRADLE\" />\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\n        <option name=\"gradleJvm\" value=\"#JAVA_HOME\" />\n        <option name=\"modules\">\n          <set>\n            <option value=\"$PROJECT_DIR$\" />\n            <option value=\"$PROJECT_DIR$/app\" />\n            <option value=\"$PROJECT_DIR$/checkout\" />\n          </set>\n        </option>\n        <option name=\"resolveModulePerSourceSet\" value=\"false\" />\n      </GradleProjectSettings>\n    </option>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
--- a/.idea/gradle.xml	(revision 4ebf74211dd61b5ddcb6b0fa43dd9c6c94a5814d)
+++ b/.idea/gradle.xml	(date 1681032008276)
@@ -7,7 +7,7 @@
         <option name="testRunner" value="GRADLE" />
         <option name="distributionType" value="DEFAULT_WRAPPED" />
         <option name="externalProjectPath" value="$PROJECT_DIR$" />
-        <option name="gradleJvm" value="#JAVA_HOME" />
+        <option name="gradleJvm" value="Embedded JDK" />
         <option name="modules">
           <set>
             <option value="$PROJECT_DIR$" />
@@ -15,7 +15,6 @@
             <option value="$PROJECT_DIR$/checkout" />
           </set>
         </option>
-        <option name="resolveModulePerSourceSet" value="false" />
       </GradleProjectSettings>
     </option>
   </component>
