Index: checkout/src/main/java/company/tap/checkout/internal/viewholders/PaymentInlineViewHolder.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package company.tap.checkout.internal.viewholders\n\nimport android.annotation.SuppressLint\nimport android.app.Activity\nimport android.content.Context\nimport android.graphics.Color\nimport android.os.Build\nimport android.text.Editable\nimport android.text.TextWatcher\nimport android.transition.Fade\nimport android.transition.TransitionManager\nimport android.view.LayoutInflater\nimport android.view.MotionEvent\nimport android.view.View\nimport android.widget.*\nimport androidx.annotation.RequiresApi\nimport androidx.core.widget.doAfterTextChanged\nimport com.bugfender.sdk.Bugfender\nimport com.google.android.material.tabs.TabLayout\nimport company.tap.cardinputwidget2.CardBrandSingle\nimport company.tap.cardinputwidget2.CardInputUIStatus\nimport company.tap.cardinputwidget2.views.CardBrandView\nimport company.tap.cardinputwidget2.widget.CardInputListener\nimport company.tap.cardinputwidget2.widget.inline.InlineCardInput2\nimport company.tap.cardscanner.TapCard\nimport company.tap.checkout.R\nimport company.tap.checkout.internal.api.enums.CardScheme\nimport company.tap.checkout.internal.api.enums.LogsModel\nimport company.tap.checkout.internal.api.enums.PaymentType\nimport company.tap.checkout.internal.api.models.*\nimport company.tap.checkout.internal.apiresponse.CardViewEvent\nimport company.tap.checkout.internal.apiresponse.CardViewModel\nimport company.tap.checkout.internal.enums.PaymentTypeEnum\nimport company.tap.checkout.internal.enums.SectionType\nimport company.tap.checkout.internal.enums.ThemeMode\nimport company.tap.checkout.internal.interfaces.BaseLayoutManager\nimport company.tap.checkout.internal.interfaces.PaymentCardComplete\nimport company.tap.checkout.internal.utils.*\nimport company.tap.checkout.internal.viewmodels.CheckoutViewModel\nimport company.tap.checkout.open.data_managers.PaymentDataSource\nimport company.tap.checkout.open.enums.CardType\nimport company.tap.nfcreader.open.reader.TapEmvCard\nimport company.tap.nfcreader.open.utils.TapNfcUtils\nimport company.tap.tapcardvalidator_android.CardBrand\nimport company.tap.tapcardvalidator_android.CardValidationState\nimport company.tap.tapcardvalidator_android.CardValidator\nimport company.tap.tapcardvalidator_android.DefinedCardBrand\nimport company.tap.taplocalizationkit.LocalizationManager\nimport company.tap.tapuilibraryy.themekit.ThemeManager\nimport company.tap.tapuilibraryy.uikit.atoms.TapSeparatorView\nimport company.tap.tapuilibraryy.uikit.atoms.TapTextViewNew\nimport company.tap.tapuilibraryy.uikit.datasource.TapSwitchDataSource\nimport company.tap.tapuilibraryy.uikit.interfaces.TapPaymentShowHideClearImage\nimport company.tap.tapuilibraryy.uikit.interfaces.TapSelectionTabLayoutInterface\nimport company.tap.tapuilibraryy.uikit.models.SectionTabItem\nimport company.tap.tapuilibraryy.uikit.organisms.TapPaymentInput\nimport company.tap.tapuilibraryy.uikit.views.*\nimport kotlinx.android.synthetic.main.cardviewholder_layout1.view.*\nimport kotlinx.android.synthetic.main.switch_layout.view.*\n\n\n@RequiresApi(Build.VERSION_CODES.N)\nclass PaymentInlineViewHolder(\n    private val context: Context,\n    private val checkoutViewModel: CheckoutViewModel,\n    private val onPaymentCardComplete: PaymentCardComplete,\n    private val switchViewHolder: SwitchViewHolder?,\n    private val baseLayoutManager: BaseLayoutManager,\n    private val cardViewModel: CardViewModel,\n) : TapBaseViewHolder,\n    TapSelectionTabLayoutInterface, CardInputListener, TapPaymentShowHideClearImage {\n    override val view: View =\n        LayoutInflater.from(context).inflate(R.layout.payment_inline_viewholder, null)\n    override val type = SectionType.PAYMENT_INPUT\n    var tabLayout: TapSelectionTabLayout = view.findViewById(R.id.sections_tablayout)\n     var intertabLayout: TabLayout = tabLayout.findViewById(R.id.tab_layout)\n\n    val paymentInputContainer: LinearLayout\n\n\n    var selectedType = PaymentTypeEnum.card\n    private var shouldShowScannerOptions = true\n    private var lastFocusField = CardInputListener.FocusField.FOCUS_CARD\n    private var lastCardInput = \"\"\n    private var cardScannerBtn: ImageView? = null\n     var savedCardsModel: SavedCard? = null\n\n\n    var tapCardInputView: InlineCardInput2\n    internal var tapMobileInputView: TapMobilePaymentView\n    private var linearLayoutPay: LinearLayout? = null\n    private var tapSeparatorViewLinear: LinearLayout? = null\n    private var tabPosition: Int? = null\n    var tapAlertView: TapAlertView? = null\n    var mainLinear: LinearLayout? = null\n\n    private var imageURL: String = \"\"\n    private var selectedImageURL: String = \"\"\n\n    //  private  var paymentType: PaymentTypeEnum ?= null\n    private var paymentType: PaymentType? = null\n    private lateinit var cardBrandType: String\n     var cardNumber: String? = null\n    private var fullCardNumber: String? = null\n     var expiryDate: String? = null\n     var cvvNumber: String? = null\n     var cardHolderName: String? = null\n    private var cardHolderNamePrev: String? = null\n    private var cvvNumberPrev: String? = null\n    private var expiryDatePrev: String? = null\n    private val BIN_NUMBER_LENGTH = 6\n    private lateinit var cardSchema: String\n    var schema: CardScheme? = null\n    var itemsCardsList = ArrayList<SectionTabItem>()\n    var resetView: Boolean = false\n    private var displayMetrics: Int? = 0\n    private var height: Int = 0\n    var constraintt: LinearLayout\n\n    var acceptedCardText: TapTextViewNew\n    var tapInlineCardSwitch: TapInlineCardSwitch? = null\n    var secondaryLayout: LinearLayout? = null\n    var textViewPowered: TapTextViewNew? = null\n    var saveForOtherCheckBox: CheckBox? = null\n    var nfcButton: ImageView? = null\n    var scannerButton: ImageView? = null\n    var touchLayer:View\n    var outerFrame:LinearLayout\n\n    var cardBrandView: CardBrandView? = null\n    var closeButton: ImageView? = null\n    var cardInputUIStatus: CardInputUIStatus? = CardInputUIStatus.NormalCard\n\n    var contactDetailsView: TapContactDetailsView? = null\n    var shippingDetailView: TapShippingDetailView? = null\n    var tapPaymentInput: TapPaymentInput? = null\n    var allFieldsValid: Boolean? = false\n    var separator1: TapSeparatorView? = null\n    var cardNumValidation: Boolean = false\n    var mPreviousCount: Int = 0\n    var saveLocalBinLookup: BINLookupResponse? = null\n    var prevSetCardBrand: CardBrand? = CardBrand.unknown\n    var isCVCLengthMax: Boolean? = false\n\n\n    init {\n\n    //    tabLayout.setTabLayoutInterface(this)\n        tapMobileInputView = TapMobilePaymentView(context, null)\n        tapMobileInputView.setTapPaymentShowHideClearImage(this)\n        tapCardInputView = InlineCardInput2(context, null)\n        // tapAlertView = tapCardInputView.findViewById(R.id.alertView)\n        nfcButton = tapCardInputView.findViewById(R.id.nfc_button)\n        cardBrandView = tapCardInputView.findViewById(R.id.card_brand_view)\n        scannerButton = tapCardInputView.findViewById(R.id.card_scanner_button)\n        closeButton = tapCardInputView.findViewById(R.id.clear_text)\n        tapPaymentInput = view.findViewById(R.id.tap_payment_input_layout)\n        separator1 = tapCardInputView.findViewById(R.id.separator_1)\n        tapAlertView = tapPaymentInput?.findViewById(R.id.alertView)\n        mainLinear = tapPaymentInput?.findViewById(R.id.mainLinear)\n        paymentInputContainer = view.findViewById(R.id.payment_input_layout)\n        tapCardInputView.backArrow.visibility = View.GONE\n        contactDetailsView = view.findViewById(R.id.contact_detailsView)\n        shippingDetailView = view.findViewById(R.id.ship_detailsView)\n\n        tapInlineCardSwitch = tapPaymentInput?.findViewById(R.id.switch_Inline_card)\n        tapInlineCardSwitch?.brandingLayout?.visibility = View.GONE\n        tapPaymentInput?.separator?.visibility = View.GONE\n        touchLayer = tapCardInputView?.findViewById(R.id.touch_layer_inside)\nouterFrame = tapCardInputView?.findViewById(R.id.linear_payout)\n        secondaryLayout = tapCardInputView.findViewById(R.id.secondary_Layout)\n        textViewPowered = tapCardInputView.findViewById(R.id.textViewPowered)\n        saveForOtherCheckBox = tapCardInputView.findViewById(R.id.saveForOtherCheckBox)\n        secondaryLayout?.visibility = View.GONE\n        tapInlineCardSwitch?.setSwitchDataSource(\n            TapSwitchDataSource(\n                switchSaveMerchantCheckout = LocalizationManager.getValue(\n                    \"cardSaveLabel\",\n                    \"TapCardInputKit\"\n                )\n\n            )\n        )\n        tabLayout?.fadeVisibility(View.VISIBLE)\n\n        constraintt = view.findViewById(R.id.constraintt)\n        constraintt.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"horizontalList.backgroundColor\")))\n        acceptedCardText = view.findViewById(R.id.acceptedCardText)\n\n        acceptedCardText.isEnabled =false\n\n        acceptedCardText.text = LocalizationManager.getValue(\"weSupport\", \"TapCardInputKit\")\n        saveForOtherCheckBox?.text =\n            LocalizationManager.getValue(\"cardSaveForTapLabel\", \"TapCardInputKit\")\n        //cardBrandView?.iconView?.setImageResource(iconViewRes1)\n        bindViewComponents()\n\n    }\n\n\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun bindViewComponents() {\n        initCardInput()\n        /**\n         * @TODO : waiting for backend to finish it\n         */\n        // initMobileInput()\n        // tapMobileInputViewWatcher()\n        initializeCardForm()\n        initializeIcons()\n        // initializeCardBrandView()\n        initCustomerDetailView()\n        tapCardInputView.setCardInputListener(this)\n\n        /**\n         * set separator background\n         */\n        //  view.separator?.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"horizontalList.backgroundColor\")))\n        //setSeparatorTheme()\n\n\n    }\n\n    private fun initCustomerDetailView() {\n        contactDetailsView?.cardDetailTitle?.text = LocalizationManager.getValue(\n            \"SaveCardHeader\",\n            \"HorizontalHeaders\",\n            \"contactDetailsSectionTitle\"\n        )\n\n        contactDetailsView?.contactEmailET?.hint = LocalizationManager.getValue(\n            \"email\",\n            \"Common\"\n        )\n        shippingDetailView?.shippingDetailTitle?.text = LocalizationManager.getValue(\n            \"SaveCardHeader\",\n            \"HorizontalHeaders\",\n            \"shippingSectionTitle\"\n        )\n        shippingDetailView?.flatEditText?.hint = LocalizationManager.getValue(\n            \"flatPlaceHolder\",\n            \"TapCardInputKit\"\n        )\n        shippingDetailView?.additionalLineEditText?.hint = LocalizationManager.getValue(\n            \"additionalLinePlaceHolder\",\n            \"TapCardInputKit\"\n        )\n        shippingDetailView?.cityEditText?.hint = LocalizationManager.getValue(\n            \"cityPlaceHolder\",\n            \"TapCardInputKit\"\n        )\n        tapInlineCardSwitch?.switchSaveCard?.isChecked = false\n        contactDetailsView?.visibility = View.GONE\n        contactDetailsView?.contactEmailET?.setBackgroundColor(\n            Color.parseColor(\n                ThemeManager.getValue(\n                    \"customerDataCollection.backgroundColor\"\n                )\n            )\n        )\n        shippingDetailView?.flatEditText?.setBackgroundColor(\n            Color.parseColor(\n                ThemeManager.getValue(\n                    \"customerDataCollection.backgroundColor\"\n                )\n            )\n        )\n        shippingDetailView?.additionalLineEditText?.setBackgroundColor(\n            Color.parseColor(\n                ThemeManager.getValue(\n                    \"customerDataCollection.backgroundColor\"\n                )\n            )\n        )\n        shippingDetailView?.cityEditText?.setBackgroundColor(\n            Color.parseColor(\n                ThemeManager.getValue(\n                    \"customerDataCollection.backgroundColor\"\n                )\n            )\n        )\n        // contactDetailsView?.contactEmailET?.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"customerDataCollection.backgroundColor\")))\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun initializeIcons() {\n\n        nfcButton?.setOnClickListener {\n            checkoutViewModel.onClickNFC()\n        }\n        scannerButton?.setOnClickListener {\n            checkoutViewModel.onClickCardScanner(true)\n        }\n        controlScannerOptions()\n        closeButton?.setOnClickListener {\n\n            tapCardInputView.clear()\n            closeButton?.visibility = View.GONE\n            controlScannerOptions()\n            cardInputUIStatus = CardInputUIStatus.NormalCard\n            /*tapCardInputView.setSingleCardInput(\n                  CardBrandSingle.Unknown, null\n              )*/\n            tapInlineCardSwitch?.visibility = View.GONE\n            //tapCardInputView.separatorcard2.visibility = View.INVISIBLE\n            separator1?.visibility = View.GONE\n            // resetCardBrandIcon()\n            if (PaymentDataSource.getBinLookupResponse() != null) {\n                PaymentDataSource.setBinLookupResponse(null)\n\n            }\n\n\n            tapInlineCardSwitch?.saveForOtherCheckBox?.isChecked = false\n            tapInlineCardSwitch?.switchSaveCard?.isChecked = false\n            contactDetailsView?.visibility = View.GONE\n            shippingDetailView?.visibility = View.GONE\n            closeButton?.visibility = View.GONE\n            tapCardInputView.setVisibilityOfHolderField(false)\n            tapCardInputView.holderNameEnabled = false\n            checkoutViewModel.incrementalCount = 0\n            tabLayout.fadeVisibility(View.VISIBLE)\n            intertabLayout.fadeVisibility(View.VISIBLE)\n            acceptedCardText.fadeVisibility(View.VISIBLE)\n            allFieldsValid = false\n            tapAlertView?.fadeVisibility(View.GONE, 500)\n            expiryDatePrev = null\n            cvvNumberPrev = null\n            if (getPreTypedCardData() != null) {\n                getPreTypedCardData()?.cardNumber = null\n                getPreTypedCardData()?.cvc = null\n                getPreTypedCardData()?.cardholderName = null\n                getPreTypedCardData()?.expirationMonth = null\n                getPreTypedCardData()?.expirationYear = null\n            }\n            getPreTypedCardData()?.cvc\n            savedCardsModel = null\n            prevSetCardBrand = CardBrand.unknown\n        }\n    }\n\n\n\n    private fun initializeCardForm() {\n        cardScannerBtn = view.findViewById(R.id.card_scanner_button)\n        nfcButton = view.findViewById(R.id.nfc_button)\n        cardScannerBtn?.visibility = View.VISIBLE\n        linearLayoutPay = view.findViewById(R.id.linear_paylayout)\n        // clearView.visibility = View.INVISIBLE\n        closeButton?.visibility = View.GONE\n\n\n    }\n\n\n    fun clearCardInputAction() {\n\n        if (selectedType == PaymentTypeEnum.card) {\n            //  tapCardInputView.clear()\n            tapCardInputView.clearFocus()\n            switchViewHolder?.setSwitchLocals(PaymentTypeEnum.card)\n        } else if (selectedType == PaymentTypeEnum.telecom) {\n            tapMobileInputView.clearNumber()\n            switchViewHolder?.setSwitchLocals(PaymentTypeEnum.telecom)\n        }\n        tapCardInputView.setSingleCardInput(\n            CardBrandSingle.Unknown, null\n        )\n\n\n//        switchViewHolder11?.view?.cardSwitch?.switchesLayout?.visibility = View.VISIBLE\n        switchViewHolder?.view?.mainSwitch?.mainSwitchLinear?.visibility = View.VISIBLE\n        tapAlertView?.fadeVisibility(View.GONE, 500)\n        switchViewHolder?.view?.cardSwitch?.payButton?.isActivated = false\n//        switchViewHolder11?.view?.cardSwitch?.showOnlyPayButton()\n        switchViewHolder?.bindViewComponents()\n        val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n        val nowString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n        switchViewHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n            false,\n            \"en\",\n            payString + \" \" + nowString,\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n        )\n        tabLayout.resetBehaviour()\n        if (PaymentDataSource.getBinLookupResponse() != null) {\n            PaymentDataSource.setBinLookupResponse(null)\n        }\n        controlScannerOptions()\n        tapInlineCardSwitch?.saveForOtherCheckBox?.isChecked = true\n        tapInlineCardSwitch?.switchSaveCard?.isChecked = true\n        tapInlineCardSwitch?.visibility = View.GONE\n        closeButton?.visibility = View.GONE\n        // tapCardInputView.setVisibilityOfHolderField(false)\n        tapCardInputView.holderNameEnabled = false\n        checkoutViewModel.incrementalCount = 0\n    }\n\n    private fun initMobileInput() {\n        tapMobileInputView.mobileNumber.doAfterTextChanged {\n            it?.let {\n                println(\"is this called\")\n                if (it.isEmpty()) {\n                    closeButton?.visibility = View.INVISIBLE\n                } else {\n                    closeButton?.visibility = View.VISIBLE\n                }\n                //check if editable start with number of oridoo or zain etc\n                // onPaymentCardComplete.onPaycardSwitchAction(true, PaymentType.MOBILE)\n                if (tapMobileInputView.mobileNumber.text.length > 7)\n                    baseLayoutManager.displayOTPView(\n                        PaymentDataSource.getCustomer().getPhone(),\n                        PaymentTypeEnum.telecom.name\n                    )\n\n            }\n        }\n    }\n\n    @SuppressLint(\"ClickableViewAccessibility\")\n    private fun initCardInput() {\n        resetCardBrandIcon()\n        tapInlineCardSwitch?.visibility = View.GONE\n        tapPaymentInput?.separator?.visibility = View.GONE\n\n        addViewsToPaymentViewContainer()\n        tapCardInputView.clearFocus()\n        cardNumberWatcher()\n        expiryDateWatcher()\n        cvcNumberWatcher()\n        cardHolderNameWatcher()\n        switchCheckedState()\n\n\n   tapCardInputView.backArrow.setOnTouchListener(object : View.OnTouchListener {\n            override fun onTouch(v: View?, event: MotionEvent?): Boolean {\n                checkoutViewModel.setTitleNormalCard()\n                if (getPreTypedCardData() != null) setPrevTypedCard()\n                else {\n\n                    tabLayout.resetBehaviour()\n                    cardInputUIStatus = CardInputUIStatus.NormalCard\n                    tabLayout.resetBehaviour()\n                    tabLayout.getChildAt(0).minimumHeight=15\n                    tapCardInputView.clear()\n                    closeButton?.visibility = View.GONE\n                    controlScannerOptions()\n                    tapInlineCardSwitch?.visibility = View.GONE\n                    tapAlertView?.fadeVisibility(View.GONE, 500)\n                    checkoutViewModel.resetCardSelection()\n                    checkoutViewModel.isSavedCardSelected = false\n                    tabLayout.fadeVisibility(View.VISIBLE)\n                    intertabLayout.fadeVisibility(View.VISIBLE)\n                    acceptedCardText.fadeVisibility(View.VISIBLE)\n                    checkoutViewModel.resetViewHolder()\n                    expiryDate = null\n                    cvvNumber = null\n                    cardHolderName = null\n                    fullCardNumber = null\n                }\n\n                return false\n            }\n        })\n\n    }\n\n\n    private fun setPrevTypedCard() {\n        println(\"setPrevTypedCard is called\")\n        cardInputUIStatus = CardInputUIStatus.NormalCard\n        val updateCardString: String = getPreTypedCardData()?.cardNumber?.trim().toString()\n            .substring(0, 6) + getPreTypedCardData()?.cardNumber?.length?.minus(4)\n            ?.let {\n                getPreTypedCardData()?.cardNumber?.trim().toString().substring(\n                    it\n                )\n            }\n            println(\"getPreTypedCardData()\"+getPreTypedCardData()?.cvc)\n        val cardModel = company.tap.cardinputwidget2.Card(\n            number = getPreTypedCardData()?.cardNumber,\n            cvc = getPreTypedCardData()?.cvc,\n           expMonth =  getPreTypedCardData()?.expirationMonth?.toInt(),\n           expYear =  getPreTypedCardData()?.expirationYear?.toInt(),\n            name = getPreTypedCardData()?.cardholderName,\n            last4 = getPreTypedCardData()?.cardNumber?.length?.minus(4)\n                ?.let { getPreTypedCardData()?.cardNumber?.substring(it) },\n            brand = company.tap.cardinputwidget2.CardBrand.fromCardNumber(getPreTypedCardData()?.cardNumber),\n            metadata = null\n            )\n\n\n        if (getPreTypedCardData()?.cardholderName != null) {\n            tapInlineCardSwitch?.visibility = View.VISIBLE\n            tapInlineCardSwitch?.switchesLayout?.visibility = View.VISIBLE\n            tapInlineCardSwitch?.switchSaveCard?.visibility = View.VISIBLE\n            tapInlineCardSwitch?.switchSaveCard?.isChecked = true\n            tapCardInputView.setVisibilityOfHolderField(true)\n            tapCardInputView.holderNameEnabled = true\n            separator1?.visibility = View.VISIBLE\n            tapInlineCardSwitch?.switchSaveCard?.isChecked = true\n\n        }\n\n        tapCardInputView.setNormalCardDetails(cardModel, CardInputUIStatus.NormalCard)\n\n        val card = CardValidator.validate(getPreTypedCardData()?.cardNumber)\n        getPreTypedCardData()?.cardNumber?.let {\n            logicTosetImageDynamic(\n                card.cardBrand,\n                it\n            )\n        }\n\n        prevSetCardBrand = card.cardBrand\n        contactDetailsView?.visibility = View.GONE\n        shippingDetailView?.visibility = View.GONE\n        tabLayout.fadeVisibility(View.GONE, 2000)\n        intertabLayout.fadeVisibility(View.GONE, 2000)\n        savedCardsModel=null\n        if(getPreTypedCardData()!=null && getPreTypedCardData()?.cvc!=null){\n            tapAlertView?.fadeVisibility(View.GONE, 2000)\n            tapInlineCardSwitch?.fadeVisibility(View.VISIBLE)\n            onCvcComplete()\n            checkoutViewModel.isSavedCardSelected = false\n        }\n        //Added for opening as soon as cvv focus\n      else  CustomUtils.showKeyboard(context)\n    }\n\n\n    fun setNFCCardData(emvCard: TapEmvCard , month :Int , year :Int)\n    {\n        cardInputUIStatus = CardInputUIStatus.NormalCard\n        val updateCardString: String = emvCard.cardNumber?.trim().toString()\n            .substring(0, 6) + emvCard.cardNumber?.length?.minus(4)\n            ?.let {\n                emvCard.cardNumber?.trim().toString().substring(\n                    it\n                )\n            }\n        println(\"updateCardString\"+updateCardString)\n\n        val cardModel = company.tap.cardinputwidget2.Card(\n            emvCard?.cardNumber,\n            null,\n          month,\n            year,\n            emvCard.holderFirstname,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            emvCard.cardNumber?.length?.minus(4)\n                ?.let { emvCard?.cardNumber?.substring(it) },\n            company.tap.cardinputwidget2.CardBrand.fromCardNumber(emvCard.cardNumber),\n            null,\n            null,\n            null,\n            null,\n            null,\n            null\n        )\n\n\n        if (emvCard?.holderFirstname != null) {\n            tapInlineCardSwitch?.visibility = View.VISIBLE\n            tapInlineCardSwitch?.switchesLayout?.visibility = View.VISIBLE\n            tapInlineCardSwitch?.switchSaveCard?.visibility = View.VISIBLE\n            tapInlineCardSwitch?.switchSaveCard?.isChecked = true\n            tapCardInputView.setVisibilityOfHolderField(true)\n            tapCardInputView.holderNameEnabled = true\n            separator1?.visibility = View.VISIBLE\n            tapInlineCardSwitch?.switchSaveCard?.isChecked = true\n\n        }\n\n        tapCardInputView.setScanNFCCardDetails(cardModel, CardInputUIStatus.NormalCard)\n        /*  val alertMessage:String = LocalizationManager.getValue(\"Warning\", \"Hints\", \"missingCVV\")\n           tapAlertView?.alertMessage?.text =alertMessage.replace(\"%i\",\"3\")\n\n           tapAlertView?.visibility =View.VISIBLE*/\n\n            val card = CardValidator.validate(emvCard?.cardNumber)\n            emvCard.cardNumber?.let {\n                logicTosetImageDynamic(\n                    card.cardBrand,\n                    it\n                )\n            }\n\n\n        contactDetailsView?.visibility = View.GONE\n        shippingDetailView?.visibility = View.GONE\n        tabLayout.fadeVisibility(View.GONE, 2000)\n        intertabLayout.fadeVisibility(View.GONE, 2000)\n\n        fullCardNumber= emvCard.cardNumber\n       expiryDate = month.toString()+\"/\"+year.toString()\n        cardHolderName = emvCard.holderFirstname\n        //Added for opening as soon as cvv focus\n        CustomUtils.showKeyboard(context)\n\n    }\n\n    fun setCardScanData(tapCard: TapCard, month :Int, year :Int)\n    {\n        cardInputUIStatus = CardInputUIStatus.NormalCard\n        val cardModel = company.tap.cardinputwidget2.Card(\n            tapCard.cardNumber,\n            null,\n            month,\n            year,\n            tapCard.cardHolder,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            tapCard.cardNumber?.length?.minus(4)\n                ?.let { tapCard?.cardNumber?.substring(it) },\n            company.tap.cardinputwidget2.CardBrand.fromCardNumber(tapCard.cardNumber),\n            null,\n            null,\n            null,\n            null,\n            null,\n            null\n        )\n\n\n        if (tapCard?.cardHolder != null) {\n            tapInlineCardSwitch?.visibility = View.VISIBLE\n            tapInlineCardSwitch?.switchesLayout?.visibility = View.VISIBLE\n            tapInlineCardSwitch?.switchSaveCard?.visibility = View.VISIBLE\n            tapInlineCardSwitch?.switchSaveCard?.isChecked = true\n            tapCardInputView.setVisibilityOfHolderField(true)\n            tapCardInputView.holderNameEnabled = true\n            separator1?.visibility = View.VISIBLE\n            tapInlineCardSwitch?.switchSaveCard?.isChecked = true\n            cardHolderName = tapCard.cardHolder\n\n        }\n        println(\"cardNumValidation is\"+cardNumValidation)\n\n        tapCardInputView.setScanNFCCardDetails(cardModel, CardInputUIStatus.NormalCard)\n        /*  val alertMessage:String = LocalizationManager.getValue(\"Warning\", \"Hints\", \"missingCVV\")\n           tapAlertView?.alertMessage?.text =alertMessage.replace(\"%i\",\"3\")\n\n           tapAlertView?.visibility =View.VISIBLE*/\n\n            val card = CardValidator.validate(tapCard?.cardNumber)\n            tapCard.cardNumber?.let {\n                logicTosetImageDynamic(\n                    card.cardBrand,\n                    it\n                )\n            }\n\n\n        contactDetailsView?.visibility = View.GONE\n        shippingDetailView?.visibility = View.GONE\n        // intertabLayout.visibility = View.GONE\n        tabLayout?.fadeVisibility(View.GONE, 2000)\n        intertabLayout?.fadeVisibility(View.GONE, 2000)\n        println(\"tapCard val\"+tapCard.cardNumber.trim())\n        fullCardNumber= tapCard.cardNumber\n        expiryDate = month.toString()+\"/\"+year.toString()\n        cardHolderName = tapCard.cardHolder\n        //Added for opening as soon as cvv focus\n        CustomUtils.showKeyboard(context)\n\n    }\n\n    private fun resetCardBrandIcon() {\n        if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains(\"dark\")) {\n            cardBrandView?.iconView?.setImageResource(R.drawable.card_icon_dark)\n        } else if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains(\"light\")) {\n            cardBrandView?.iconView?.setImageResource(R.drawable.card_icon_light)\n        }\n    }\n\n    private fun cardHolderNameWatcher() {\n        tapCardInputView.setCardHolderHint(\n            LocalizationManager.getValue(\n                \"cardNamePlaceHolder\",\n                \"TapCardInputKit\"\n            )\n        )\n        tapCardInputView.setHolderNameTextWatcher(object : TextWatcher {\n            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {\n                if (allFieldsValid == true) {\n                    intertabLayout.visibility = View.GONE\n                    tabLayout.visibility = View.GONE\n                    acceptedCardText.visibility = View.INVISIBLE\n\n                }\n\n            }\n\n            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {\n                if (s.toString().length > 3) {\n                    if (PaymentDataSource.getCardHolderNameShowHide()) {\n                        // tapInlineCardSwitch?.visibility = View.VISIBLE\n                        tapInlineCardSwitch?.fadeVisibility(View.VISIBLE)\n                        contactDetailsView?.visibility = View.GONE //temp visible to gone\n                        shippingDetailView?.visibility = View.GONE //temp visible to gone\n                        allFieldsValid = true\n                    } else {\n                        contactDetailsView?.visibility = View.GONE\n                        shippingDetailView?.visibility = View.GONE\n                    }\n\n                } else {\n                    contactDetailsView?.visibility = View.GONE\n                    shippingDetailView?.visibility = View.GONE\n                    // tapInlineCardSwitch?.visibility = View.GONE\n                    tapInlineCardSwitch?.fadeVisibility(View.GONE, 2000)\n                }\n            }\n\n            override fun afterTextChanged(s: Editable?) {\n\n                println(\"PaymentDataSource?.getBinLookupResponse()\"+PaymentDataSource?.getBinLookupResponse())\n                println(\"cardHolderName>>\"+cardHolderName)\n                //On Details complete\n                if (s.toString().length > 3) {\n                    if(isCVCLengthMax == true)\n                    cardNumber?.let {\n                        expiryDate?.let { it1 ->\n                            if(PaymentDataSource.getBinLookupResponse()!=null)\n                            onPaymentCardComplete.onPayCardCompleteAction(\n                                true, PaymentType.CARD,\n                                it, it1, cvvNumber, cardHolderName ,PaymentDataSource.getBinLookupResponse()?.scheme?.cardBrand?.rawValue\n                            )\n                        }\n                    }\n                    Bugfender.d(\n                        LogsModel.EVENT.name,\n                        \"Finished valid raw card data for:\" + PaymentType.CARD\n                    )\n\n                    cardHolderNamePrev = s.toString()\n\n                }\n\n            }\n\n        })\n    }\n\n\n    private fun switchCheckedState() {\n        /* tapCardInputView.setSwitchSaveCardListener { buttonView, isChecked ->\n             if (isChecked) {\n                 secondaryLayout?.visibility = View.VISIBLE\n             } else secondaryLayout?.visibility = View.GONE\n\n\n             tapCardInputView.switchCardEnabled = isChecked\n\n         }*/\n        /* if(tapInlineCardSwitch?.switchSaveCard?.isChecked == true && tapInlineCardSwitch?.saveForOtherCheckBox?.isChecked == true){\n             contactDetailsView?.visibility = View.VISIBLE\n         }*/\n\n        tapInlineCardSwitch?.switchSaveCard?.setOnCheckedChangeListener { buttonView, isChecked ->\n            secondaryLayout?.visibility = View.GONE\n            tapAlertView?.fadeVisibility(View.GONE, 500)\n\n\n            if (isChecked) {\n                tapInlineCardSwitch?.saveForOtherCheckBox?.isChecked = true\n                tapInlineCardSwitch?.saveForOtherCheckBox?.visibility = View.VISIBLE\n                tapInlineCardSwitch?.toolsTipImageView?.visibility = View.VISIBLE\n                tapPaymentInput?.separator?.visibility = View.VISIBLE\n                tapInlineCardSwitch?.saveForOtherTextView?.visibility = View.VISIBLE\n                if (!PaymentDataSource.getCardHolderNameShowHide()) {\n                    shippingDetailView?.visibility = View.GONE\n                    contactDetailsView?.visibility = View.GONE\n                }\n\n\n            } else {\n                tapPaymentInput?.separator?.visibility = View.GONE\n                tapInlineCardSwitch?.saveForOtherCheckBox?.isChecked = false\n                tapInlineCardSwitch?.saveForOtherCheckBox?.visibility = View.GONE\n                tapInlineCardSwitch?.saveForOtherTextView?.visibility = View.GONE\n                tapInlineCardSwitch?.toolsTipImageView?.visibility = View.GONE\n\n\n            }\n\n\n        }\n\n\n        tapInlineCardSwitch?.saveForOtherCheckBox?.setOnCheckedChangeListener(object :\n            CompoundButton.OnCheckedChangeListener {\n            override fun onCheckedChanged(buttonView: CompoundButton?, isChecked: Boolean) {\n                secondaryLayout?.visibility = View.GONE\n                tapAlertView?.fadeVisibility(View.GONE, 500)\n                // tabLayout?.visibility = View.GONE\n                // intertabLayout?.visibility = View.GONE\n                //tapInlineCardSwitch?.saveForOtherCheckBox?.isChecked = isChecked\n\n                if (isChecked) {\n                    println(\"saveForOtherCheckBox \" + isChecked)\n\n                    if (cardInputUIStatus == CardInputUIStatus.SavedCard) {\n                        contactDetailsView?.visibility = View.GONE\n                        shippingDetailView?.visibility = View.GONE\n                    } else if (allFieldsValid == true) {\n                        if (!PaymentDataSource.getCardHolderNameShowHide()) {\n                            shippingDetailView?.visibility = View.GONE\n                            contactDetailsView?.visibility = View.GONE\n                        } else {\n                            contactDetailsView?.visibility = View.GONE //temp visibel to gone\n                            shippingDetailView?.visibility = View.GONE //temp visibel to gone\n                        }\n                    }\n\n                } else {\n                    contactDetailsView?.visibility = View.GONE\n                    shippingDetailView?.visibility = View.GONE\n\n                    // tapInlineCardSwitch?.switchSaveCard?.isChecked = false\n                    tapInlineCardSwitch?.saveForOtherCheckBox?.isChecked = false\n                }\n\n            }\n\n        })\n\n    }\n\n    private fun addViewsToPaymentViewContainer() {\n        displayMetrics = CustomUtils.getDeviceDisplayMetrics(context as Activity)\n        paymentInputContainer.addView(tapCardInputView)\n\n\n    }\n\n    private fun cardNumberWatcher() {\n        tapCardInputView.setCardHint(\n            LocalizationManager.getValue(\n                \"cardNumberPlaceHolder\",\n                \"TapCardInputKit\"\n            )\n        )\n        if(tapCardInputView.cardFormHasFocus) checkoutViewModel.resetViewHolder()\n        tapCardInputView.setCardNumberTextWatcher(object : TextWatcher {\n            override fun afterTextChanged(s: Editable?) {\n\n\n                var length: Int? = s?.length;\n\n                //mPreviousLength is a field\n                var mPreviousLength = 0\n                if (mPreviousLength > length!!) {\n                    // delete character action have done\n                    // do what ever you want\n                    // Log.d(\"MainActivityTag\", \"Character deleted\");\n                    //  intertabLayout.visibility = View.VISIBLE\n                    //  tabLayout.visibility = View.VISIBLE\n                    // acceptedCardText.visibility = View.VISIBLE\n                    tabLayout?.fadeVisibility(View.VISIBLE)\n                }\n                mPreviousLength = length;\n\n\n\n                if (s != null) {\n                    if (s.length >= 19) afterValidation()\n                }\n\n\n            }\n\n            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {\n                checkoutViewModel.resetViewHolder()\n                //tapAlertView?.fadeVisibility(View.GONE, 500) // removed\n                if (after < count) {\n                    // delete character action have done\n                    // do what ever you want\n                }\n\n            }\n\n            @RequiresApi(Build.VERSION_CODES.N)\n            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {\n                println(\"cardInputUIStatus>>\" + cardInputUIStatus)\n                println(\"start>>\" + start)\n                println(\"before>>\" + before)\n                println(\"count>>\" + count)\n\n                if (mPreviousCount > count) {\n                    // delete character action have done\n                    // do what ever you want\n                    // Log.d(\"MainActivityTag\", \"Character deleted\");\n\n                    tabLayout?.fadeVisibility(View.VISIBLE)\n                    intertabLayout?.fadeVisibility(View.VISIBLE)\n                    acceptedCardText?.fadeVisibility(View.VISIBLE)\n\n                }\n                mPreviousCount = count;\n\n\n                if (cardInputUIStatus != CardInputUIStatus.SavedCard ) {\n                    onCardTextChange(s)\n                   cardNumAfterTextChangeListener(s.toString().trim(), this)\n\n                }\n\n            }\n        })\n    }\n\n    private fun afterValidation() {\n        if (!fullCardNumber.isNullOrBlank() && !fullCardNumber.isNullOrEmpty() && cardNumValidation && !expiryDate.isNullOrBlank() && !expiryDate.isNullOrEmpty() && !cvvNumber.isNullOrBlank() && !cvvNumber.isNullOrEmpty()\n        ) {\n\n            if (PaymentDataSource.getCardHolderNameShowHide()) {\n                tapCardInputView.setVisibilityOfHolderField(PaymentDataSource.getCardHolderNameShowHide())\n                tapCardInputView.holderNameEnabled = true\n                //  tapInlineCardSwitch?.visibility = View.VISIBLE\n                tapInlineCardSwitch?.fadeVisibility(View.VISIBLE)\n            }\n\n        }\n    }\n\n    private fun onCardTextChange(s: CharSequence?) {\n        if (s.toString().isEmpty()) {\n            closeButton?.visibility = View.GONE\n            tapAlertView?.fadeVisibility(View.GONE, 500)\n        } else {\n            closeButton?.visibility = View.VISIBLE\n        }\n        tapInlineCardSwitch?.visibility = View.GONE\n\n    }\n\n    private fun expiryDateWatcher() {\n        tapCardInputView.setExpiryHint(\n            LocalizationManager.getValue(\n                \"cardExpiryPlaceHolder\",\n                \"TapCardInputKit\"\n            )\n        )\n\n        tapCardInputView.setExpiryDateTextWatcher(object : TextWatcher {\n            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {\n            }\n            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {\n                if(!tapCardInputView.isExpDateValid){\n                    checkoutViewModel.unActivateActionButton()\n                    tapInlineCardSwitch?.visibility =View.GONE\n                }\n\n            }\n\n            override fun afterTextChanged(s: Editable?) {\n                afterTextChangeAction(s)\n            }\n        })\n    }\n\n    private fun afterTextChangeAction(s: Editable?) {\n\n        // tapInlineCardSwitch?.visibility = View.VISIBLE\n        if (s.isNullOrEmpty()) {\n            // tabLayout.resetBehaviour()\n        } else {\n            /**\n             * we will get date value\n             */\n            expiryDate = s.toString()\n\n            println(\"isExpDateValid>>>\"+tapCardInputView.isExpDateValid)\n            if (s.length >= 5 ) {\n                if (cardInputUIStatus?.equals(CardInputUIStatus.SavedCard) == true) {\n                    tapAlertView?.fadeVisibility(View.GONE, 500)\n                } else {\n                    expiryDatePrev = s.toString()\n                    if (tapCardInputView.isExpDateValid) {\n                        tapAlertView?.fadeVisibility(View.VISIBLE)\n                        val alertMessage: String =\n                            LocalizationManager.getValue(\"Warning\", \"Hints\", \"missingCVV\")\n                        tapAlertView?.alertMessage?.text = alertMessage.replace(\"%i\", \"3\")\n                    } else{\n                        checkoutViewModel.unActivateActionButton()\n                        tapInlineCardSwitch?.visibility =View.GONE\n                       // tapAlertView?.fadeVisibility(View.GONE, 500)\n                    }\n                }\n                // tapAlertView?.visibility = View.VISIBLE\n                lastFocusField = CardInputListener.FocusField.FOCUS_CVC\n                // checkoutFragment.scrollView?.scrollTo(0,height)\n                tapInlineCardSwitch?.switchSaveCard?.isChecked = true\n            } else {\n              tapAlertView?.fadeVisibility(View.GONE, 500)\n            }\n\n\n        }\n    }\n\n\n    private fun cvcNumberWatcher() {\n        tapCardInputView.setCVVHint(\n            LocalizationManager.getValue(\n                \"cardCVVPlaceHolder\",\n                \"TapCardInputKit\"\n            )\n        )\n        tapCardInputView.setCvcNumberTextWatcher(object : TextWatcher {\n            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {\n            }\n\n            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {\n\n                if (s?.trim()?.length == 3 || s?.trim()?.length == 4) {\n                    if (cardInputUIStatus == CardInputUIStatus.NormalCard) {\n                        if (PaymentDataSource?.getBinLookupResponse()?.scheme != null) {\n                            PaymentDataSource?.getBinLookupResponse()?.scheme?.cardBrand?.let {\n                                logicForImageOnCVV(\n                                    it,\n                                    s.toString()\n                                )\n                            }\n                        } else {\n\n                            if (fullCardNumber != null)\n                                logicForImageOnCVV(\n                                    CardValidator.validate(fullCardNumber).cardBrand,\n                                    s.toString()\n                                )\n                        }\n                        acceptedCardText.visibility = View.GONE\n                        tabLayout.fadeVisibility(View.GONE, 2000)\n                    } else logicForImageOnCVV(\n                        CardValidator.validate(savedCardsModel?.firstSix).cardBrand,\n                        s.toString()\n                    )\n                }\n            }\n\n            override fun afterTextChanged(s: Editable?) {\n                tapPaymentInput?.visibility = View.VISIBLE\n                if (cardInputUIStatus == CardInputUIStatus.SavedCard) tapAlertView?.visibility =\n                    View.GONE\n\n                /**\n                 * we will get cvv number\n                 */\n                cvvNumber = s.toString()\n\n                if (s?.trim()?.length == 3 || s?.trim()?.length == 4 && tapCardInputView.isExpDateValid) {\n                    if (!PaymentDataSource.getCardHolderNameShowHide()) {\n                        var paymentTyper :PaymentType ?= PaymentType.CARD\n                        println(\"savedCardsModel   hhshhs\"+savedCardsModel)\n\n                        if(savedCardsModel ==null) {\n                            paymentTyper = PaymentType.CARD\n                        } else  paymentTyper = PaymentType.SavedCard\n                        println(\"paymentTyper   hhshhs\"+paymentTyper)\n\n                        if(!prevSetCardBrand?.name?.contains(CardBrand.unknown.name)!!)\n                            fullCardNumber.toString().let {\n                                expiryDate?.let { it1 ->\n                                    cvvNumber?.let { it2 ->\n                                        onPaymentCardComplete.onPayCardCompleteAction(\n                                            true, paymentTyper,\n                                           // it, it1, it2, null,prevSetCardBrand?.toString() , savedCardsModel\n                                            it, it1, it2, null,savedCardsModel?.brand?.name , savedCardsModel\n                                        )\n                                        tapInlineCardSwitch?.switchSaveCard?.isChecked = true\n\n                                        tapInlineCardSwitch?.fadeVisibility(View.VISIBLE)\n                                        Bugfender.d(\n                                            CustomUtils.tagEvent,\n                                            \"Finished valid raw card data for:\" + PaymentType.CARD\n                                        )\n\n                                    }\n                                }\n                            }else {\n                            if(isCVCLengthMax == true)\n                            cardNumber.toString().let {\n                                expiryDate?.let { it1 ->\n                                    cvvNumber?.let { it2 ->\n                                        onPaymentCardComplete.onPayCardCompleteAction(\n                                            true,\n                                            paymentTyper,\n                                            it,\n                                            it1,\n                                            it2,\n                                            null,\n                                            PaymentDataSource?.getBinLookupResponse()?.scheme?.cardBrand?.rawValue,\n                                            savedCardsModel\n                                        )\n                                        tapInlineCardSwitch?.switchSaveCard?.isChecked = true\n\n                                        tapInlineCardSwitch?.fadeVisibility(View.VISIBLE)\n                                        Bugfender.d(\n                                            CustomUtils.tagEvent,\n                                            \"Finished valid raw card data for:\" + PaymentType.CARD\n                                        )\n\n                                    }\n                                }\n                            }\n                        }\n                        allFieldsValid = true\n\n                    } else {\n                        if (cardInputUIStatus != null && cardInputUIStatus == CardInputUIStatus.NormalCard) {\n                            if (PaymentDataSource.getCardHolderNameShowHide()) {\n                                tapCardInputView.holderNameEnabled = true\n                                tapCardInputView.setVisibilityOfHolderField(PaymentDataSource.getCardHolderNameShowHide())\n                                onFocusChange(CardInputListener.FocusField.FOCUS_HOLDERNAME)\n                                // tapCardInputView.separatorcard2.visibility = View.VISIBLE\n                                separator1?.visibility = View.VISIBLE\n                                if (PaymentDataSource.getDefaultCardHolderName()\n                                        ?.isNotEmpty() == true || PaymentDataSource.getDefaultCardHolderName()\n                                        ?.isNotBlank() == true\n                                ) {\n                                    tapCardInputView.setCardHolderName(PaymentDataSource.getDefaultCardHolderName())\n                                    //  tapInlineCardSwitch?.visibility = View.VISIBLE\n                                    tapInlineCardSwitch?.fadeVisibility(View.VISIBLE)\n                                    // tapCardInputView.separatorcard2.visibility = View.VISIBLE\n                                }\n                            }\n                            println(\"cvvNumberPrev\" + cvvNumberPrev)\n\n                            cvvNumberPrev = s.toString()\n                        } else tapInlineCardSwitch?.visibility = View.GONE\n                    }\n\n                    tapAlertView?.visibility = View.GONE\n\n                    if (cardInputUIStatus != null && cardInputUIStatus == CardInputUIStatus.SavedCard) {\n                        println(\"avedCardsModel?.brand?.name\"+savedCardsModel?.brand?.name)\n                        tapAlertView?.fadeVisibility(View.GONE, 500)\n                        //  tapCardInputView.setVisibilityOfHolderField(false)\n                        tapCardInputView.holderNameEnabled = false\n                        separator1?.visibility = View.GONE\n                        //tapCardInputView.separatorcard2.visibility = View.INVISIBLE\n                        tapInlineCardSwitch?.visibility = View.GONE\n\n                        if (s.trim().length == 3 || s.trim().length == 4) {\n                            if(savedCardsModel!=null){\n                                if(isCVCLengthMax == true)\n                                onPaymentCardComplete.onPayCardSwitchAction(\n                                    true, PaymentType.SavedCard , savedCardsModel?.brand?.name\n                                )\n                               // if(isCVCLengthMax == true) //check\n                                cardNumber?.let {\n                                    expiryDate?.let { it1 ->\n                                        onPaymentCardComplete.onPayCardCompleteAction(\n                                            true, PaymentType.SavedCard,\n                                            it, it1, cvvNumber!!, cardHolderName, savedCardsModel?.brand?.name ,savedCardsModel\n                                        )\n                                    }\n                                }\n                            }else {\n                                if(isCVCLengthMax == true)\n                                onPaymentCardComplete.onPayCardSwitchAction(\n                                    true, PaymentType.CARD , PaymentDataSource?.getBinLookupResponse()?.cardBrand?.toString()\n                                )\n                                if(isCVCLengthMax == true)\n                                cardNumber?.let {\n                                    expiryDate?.let { it1 ->\n                                        onPaymentCardComplete.onPayCardCompleteAction(\n                                            true, PaymentType.CARD,\n                                            it, it1, cvvNumber!!, cardHolderName, PaymentDataSource?.getBinLookupResponse()?.cardBrand?.toString() ,null\n                                        )\n                                    }\n                                }\n                            }\n                            tapAlertView?.fadeVisibility(View.GONE, 500)\n                            CustomUtils.hideKeyboardFrom(context, view)\n                            Bugfender.d(\n                                CustomUtils.tagEvent,\n                                \"Finished valid raw card data for:\" + PaymentType.CARD\n                            )\n                        }\n\n                    }\n                    /*  cardNumber\n                          ?.let { logicTosetImageDynamic(CardBrand.fromString(cardNumber), it) }*/\n                    cvvNumberPrev = s.toString()\n                } else {\n\n                    if(cardInputUIStatus == CardInputUIStatus.NormalCard)\n                        onPaymentCardComplete.onPayCardSwitchAction(\n                        false, PaymentType.CARD\n                    )else {\n                        onPaymentCardComplete.onPayCardSwitchAction(\n                            false, PaymentType.SavedCard\n                        )\n\n                    }\n                    isCVCLengthMax= false\n                    //  tapAlertView?.visibility = View.VISIBLE\n\n\n                }\n\n            }\n        })\n    }\n\n    fun EditText.updateText(text: String) {\n        val focussed = hasFocus()\n        if (focussed) {\n            clearFocus()\n        }\n        setText(text)\n        if (focussed) {\n            requestFocus()\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun cardNumAfterTextChangeListener(charSequence: CharSequence?, textWatcher: TextWatcher) {\n        val card = CardValidator.validate(charSequence.toString())\n        // var card:DefinedCardBrand?=null\n        // if(tapCardInputView.fullCardNumber!=null)\n        //  card  = CardValidator.validate(tapCardInputView.fullCardNumber)\n\n        if (charSequence != null) {\n            baseLayoutManager.resetViewHolder()\n\n\n            if (charSequence.length <=2) {\n                if (card.cardBrand != null)\n                    logicTosetImageDynamic(card.cardBrand, charSequence.toString())\n\n            }\n\n            if (charSequence.length > 2) {\n                callCardBinNumberApi(charSequence, textWatcher)\n\n            }else {\n                tabLayout.resetBehaviour()\n                PaymentDataSource.setBinLookupResponse(null)\n            }\n        }\n        charSequence?.let {\n            if (charSequence.isNullOrEmpty()) {\n                tapAlertView?.fadeVisibility(View.GONE, 500)\n            }\n            if (card?.cardBrand != null) {\n\n                tabLayout.selectTab(\n                    card.cardBrand,\n                    card.validationState == CardValidationState.valid\n                )\n\n\n                println(\"card brand value is>>>\" + card.cardBrand)\n\n                val binLookupResponse: BINLookupResponse? =\n                    PaymentDataSource.getBinLookupResponse()\n                // println(\"binLookupResponse\" + binLookupResponse)\n                if (charSequence.length > 4) checkIfCardTypeExistInList(card.cardBrand)\n                if (PaymentDataSource.getCardType() != null && PaymentDataSource.getCardType() == CardType.ALL) {\n\n                    if(charSequence.length == 8) // added length check to avoid flickering\n                    setTabLayoutBasedOnApiResponse(binLookupResponse, card)\n                } else {\n                    checkAllowedCardTypes(binLookupResponse)\n                    if(charSequence.length == 8)// added length check to avoid flickering\n                    setTabLayoutBasedOnApiResponse(binLookupResponse, card)\n                }\n            }\n            println(\"charSequence.le\" + charSequence.length)\n            if (charSequence.length == 19) {\n                fullCardNumber = charSequence.toString()\n            }\n            if (card != null && card.cardBrand != null && card.cardBrand.name == CardBrand.americanExpress.name) {\n                fullCardNumber = charSequence.toString()\n            }\n            /**\n             * we will get the full card number\n             */\n            cardNumber = charSequence.toString()\n\n\n\n            lastCardInput = it.toString()\n            shouldShowScannerOptions = it.isEmpty()\n            controlScannerOptions()\n            cardBrandDetection(charSequence.toString())\n            if (card != null) checkValidationState(card,charSequence.toString(),textWatcher)\n        }\n         if(charSequence.toString().isEmpty()){\n             tapCardInputView.setSingleCardInput(\n                 CardBrandSingle.Unknown, null\n             )\n         }\n\n    }\n\n    private fun setTabLayoutBasedOnApiResponse(\n        binLookupResponse: BINLookupResponse?,\n        cardBrand: DefinedCardBrand\n    ) {\n\n        if (binLookupResponse?.cardBrand?.name == binLookupResponse?.scheme?.name) {\n            // we will send card brand to validator\n            binLookupResponse?.cardBrand?.let { it1 ->\n                tabLayout.selectTab(\n                    it1,\n                    true\n                )\n\n            }\n            if (itemsCardsList.isNotEmpty()) {\n                for (i in itemsCardsList.indices) {\n                    //   println(\"binLookupResponse>>>\"+binLookupResponse?.cardBrand?.name)\n                    //    println(\"selectedImageURL>>>\"+itemsCardsList[i].selectedImageURL)\n                    if (binLookupResponse?.cardBrand?.name?.let {\n                            itemsCardsList[i].selectedImageURL.contains(\n                                it\n                            )\n                        } == true  ) {\n                        selectedImageURL = itemsCardsList[i].selectedImageURL\n\n                        tapCardInputView.setSingleCardInput(\n                            CardBrandSingle.fromCode(\n                                binLookupResponse?.cardBrand.toString()\n                            ), selectedImageURL\n                        )\n\n                        tabLayout?.visibility = View.GONE\n                        tapAlertView?.fadeVisibility(View.GONE, 500)\n\n                    }\n                }\n            }\n\n\n\n\n//            tabLayout.setUnselectedAlphaLevel(0.5f)\n        } else {\n            //we will send scheme\n            schema = binLookupResponse?.scheme\n\n\n            binLookupResponse?.scheme?.cardBrand?.let { it1 ->\n                tabLayout.selectTab(it1, false)\n            }\n            if (itemsCardsList.isNotEmpty()) {\n                for (i in itemsCardsList.indices) {\n                    // println(\"binLookupResponse/////\"+binLookupResponse?.scheme?.cardBrand?.name)\n                    // println(\"selectedImageURL////\"+itemsCardsList[i].selectedImageURL)\n                    if (binLookupResponse?.scheme?.cardBrand?.name?.toLowerCase()\n                            ?.let { itemsCardsList[i].selectedImageURL?.contains(it) } == true\n                    ) {\n                        selectedImageURL = itemsCardsList[i].selectedImageURL\n                        tapCardInputView.setSingleCardInput(\n                            CardBrandSingle.fromCode(\n                                binLookupResponse?.scheme?.cardBrand.toString()\n                            ), selectedImageURL\n                        )\n\n                        tabLayout?.visibility = View.GONE\n                      tapAlertView?.fadeVisibility(View.GONE, 500)\n\n                    }\n                }\n            }\n\n//            tabLayout.setUnselectedAlphaLevel(0.5f)\n\n        }\n\n        // PaymentDataSource.setBinLookupResponse(null)\n    }\n\n\n    /*\n    This function for calling api to validate card number after 6 digit\n     */\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun callCardBinNumberApi(s: CharSequence, textWatcher: TextWatcher) {\n        if (s.trim().toString().replace(\" \", \"\").length == BIN_NUMBER_LENGTH) {\n            cardViewModel.processEvent(\n                CardViewEvent.RetreiveBinLookupEvent,\n                CheckoutViewModel(), null, s.trim().toString().replace(\" \", \"\"), null, null\n            )\n\n        }\n        tapCardInputView.removeCardNumberTextWatcher(textWatcher)\n        tapCardInputView.setCardNumberTextWatcher(textWatcher)\n    }\n\n\n    private fun checkValidationState(card: DefinedCardBrand, charSequence :String,textWatcher :TextWatcher) {\n        if (card.cardBrand != null)\n            when (card.validationState) {\n\n                CardValidationState.invalid -> {\n                    println(\"cardBrand val\" + card.cardBrand)\n                    if (card.cardBrand != null)\n                        tapCardInputView.setSingleCardInput(\n                            CardBrandSingle.Unknown, null\n                        )\n                       // tabLayout.selectTab(card.cardBrand, false)\n                    tapAlertView?.fadeVisibility(View.VISIBLE,1000)\n                    tapAlertView?.alertMessage?.text =\n                        (LocalizationManager.getValue(\"Error\", \"Hints\", \"wrongCardNumber\"))\n                    cardNumValidation = false\n\n                }\n                CardValidationState.incomplete -> {\n                    intertabLayout.visibility = View.VISIBLE\n                    tabLayout.visibility = View.VISIBLE\n                    acceptedCardText.visibility = View.VISIBLE\n                    cardNumValidation = false\n                }\n                CardValidationState.valid -> {\n                    if (schema != null){\n                        schema?.cardBrand?.let { tabLayout.selectTab(it, true)\n                          if( PaymentDataSource.getBinLookupResponse()?.scheme?.cardBrand != null)\n                              PaymentDataSource?.getBinLookupResponse()?.scheme?.cardBrand?.let { it1 ->\n                                  logicTosetImageDynamic(\n                                      it1, charSequence.toString())\n                              }\n                        }\n                    }else{\n                        logicTosetImageDynamic(card.cardBrand, charSequence.toString())\n                        tabLayout.selectTab(card.cardBrand, true)\n                    }\n\n                    tapAlertView?.fadeVisibility(View.VISIBLE,1000)\n                    tapAlertView?.alertMessage?.text =\n                        (LocalizationManager.getValue(\"Warning\", \"Hints\", \"missingExpiryCVV\"))\n\n\n                    intertabLayout.visibility = View.GONE\n                    tabLayout.visibility = View.GONE\n                    acceptedCardText.visibility = View.INVISIBLE\n                    cardNumValidation = true\n                }\n                else -> {\n                    if (cardInputUIStatus?.equals(CardInputUIStatus.SavedCard) == true) {\n                        tapAlertView?.visibility = View.GONE\n                    } else {\n                        tapAlertView?.visibility = View.VISIBLE\n                    }\n                    // tapAlertView?.visibility = View.VISIBLE\n                    tapAlertView?.alertMessage?.text =\n                        (LocalizationManager.getValue(\"Warning\", \"Hints\", \"missingExpiryCVV\"))\n                }\n            }\n    }\n\n    // Logic to show the switches when card details are valid\n    private fun cardBrandDetection(cardTyped: String) {\n        if (cardTyped.isEmpty()) {\n            tapAlertView?.fadeVisibility(View.GONE, 500)\n        }\n        val card = CardValidator.validate(cardTyped)\n        // checkValidationState(card.cardBrand)\n        if (card.cardBrand != null) {\n            println(\"card brand: ${card.validationState}\")\n            nfcButton?.visibility = View.GONE\n            cardScannerBtn?.visibility = View.GONE\n        }\n    }\n\n    private fun controlScannerOptions() {\n        if (shouldShowScannerOptions) {\n            if (TapNfcUtils.isNfcAvailable(context)) {\n                nfcButton?.visibility = View.VISIBLE\n            } else nfcButton?.visibility = View.GONE\n\n            cardScannerBtn?.visibility = View.VISIBLE\n        } else {\n\n            nfcButton?.visibility = View.GONE\n            cardScannerBtn?.visibility = View.GONE\n        }\n    }\n\n\n    override fun onTabSelected(position: Int?) {\n        tabPosition = position\n        //  position?.let { swapInputViews(it) }\n    }\n\n    private fun swapInputViews(position: Int) {\n        // TransitionManager.beginDelayedTransition(paymentLayoutContainer, Fade())\n        TransitionManager.beginDelayedTransition(paymentInputContainer, Fade())\n        paymentInputContainer.removeAllViews()\n        if (position == 0) {\n            println(\"call 1\")\n            swapInputViewsPosition0()\n        } else {\n            swapInputViewsPositionNot0()\n        }\n        tabPosition = position\n    }\n\n    private fun swapInputViewsPositionNot0() {\n        selectedType = PaymentTypeEnum.telecom\n        println(\"call 2\")\n        switchViewHolder?.setSwitchLocals(PaymentTypeEnum.telecom)\n        nfcButton?.visibility = View.GONE\n        cardScannerBtn?.visibility = View.GONE\n        if (tapMobileInputView.mobileNumber.text.isEmpty())\n            closeButton?.visibility = View.GONE\n        else\n            closeButton?.visibility = View.VISIBLE\n\n        paymentInputContainer.addView(tapMobileInputView)\n    }\n\n    private fun swapInputViewsPosition0() {\n        selectedType = PaymentTypeEnum.card\n        switchViewHolder?.setSwitchLocals(PaymentTypeEnum.card)\n        //It will be hidden until goPay is Logged in\n        if (switchViewHolder?.goPayisLoggedin == true) {\n            switchViewHolder.view.cardSwitch?.switchGoPayCheckout?.visibility = View.VISIBLE\n        } else switchViewHolder?.view?.cardSwitch?.switchGoPayCheckout?.visibility = View.GONE\n\n        controlScannerOptions()\n        cardScannerBtn?.visibility = View.VISIBLE\n        closeButton?.visibility = View.GONE\n        paymentInputContainer.addView(tapCardInputView)\n        // checkForFocus()\n    }\n\n    private fun checkForFocus() {\n        shouldShowScannerOptions =\n            lastFocusField == CardInputListener.FocusField.FOCUS_CARD\n                    && lastCardInput.isEmpty()\n        controlScannerOptions()\n    }\n\n    override fun onCardComplete() {\n        if (view.layoutDirection == View.LAYOUT_DIRECTION_RTL) {\n            cardNumber = cardNumber?.reversed()\n        }\n\n\n    }\n\n    override fun onCvcComplete() {\n        checkoutViewModel.onPayCardCompleteAction(\n            true,PaymentType.CARD,fullCardNumber,expiryDatePrev,cvvNumberPrev,cardHolderNamePrev,prevSetCardBrand?.toString(),null\n        )\n    }\n    override fun cardFormHasFocus(hasFocus: Boolean) {\n\n       checkoutViewModel.resetViewHolder()\n    }\n\n    override fun cvvFieldHasFocus(hasFocus: Boolean) {\n       \n        if(hasFocus){\n            tapAlertView?.fadeVisibility(View.GONE, 500)\n        }else {\n            if(cvvNumber!=null)\n            if(cvvNumber?.length!! <3) {\n                tapAlertView?.fadeVisibility(View.VISIBLE)\n                val alertMessage: String =\n                    LocalizationManager.getValue(\"Warning\", \"Hints\", \"missingCVV\")\n                tapAlertView?.alertMessage?.text = alertMessage.replace(\"%i\", \"3\")\n            }\n\n        }\n    }\n\n    override fun isCVCValid(isValid: Boolean) {\n        println(\"isCVCValid ss\"+isValid)\n        isCVCLengthMax = isValid\n\n    }\n\n\n    override fun onExpirationComplete() {\n        /*if (cardInputUIStatus == CardInputUIStatus.SavedCard) {\n            onFocusChange(CardInputListener.FocusField.FOCUS_CVC)\n        }*/\n    }\n\n\n\n    override fun onFocusChange(focusField: String) {\n        lastFocusField = focusField\n\n        println(\"lastFocusField>>>>\" + lastFocusField)\n        if(focusField == \"focus_cardholder\" && cardHolderName.isNullOrEmpty()) CustomUtils.showKeyboard(context)\n\n\n    }\n\n    fun resetTouchView() {\n        if (resetView) {\n            if (!cardNumber.isNullOrEmpty() && !cardNumber.isNullOrBlank() && CardValidator.validate(\n                    cardNumber\n                ).validationState == CardValidationState.valid\n            ) {\n                tapCardInputView.onTouchView()\n                resetView = false\n            }\n\n        }\n    }\n\n    /**\n     * Sets data from API through LayoutManager\n     * @param imageURLApi represents the images of payment methods.\n     * */\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun setDataFromAPI(imageURLApi: List<PaymentOption>) {\n        println(\"imageURLApi>>\" + imageURLApi)\n//        tabLayout.resetBehaviour()\n\n        val itemsMobilesList = ArrayList<SectionTabItem>()\n        itemsCardsList = ArrayList<SectionTabItem>()\n        intertabLayout.removeAllTabs()\n\n        PaymentDataSource.setBinLookupResponse(null)\n        /**\n         * Sorted cardpayment types based on orderBY*/\n        decideTapSelection(imageURLApi.sortedBy { it.orderBy }, itemsMobilesList, itemsCardsList)\n        /**\n         * if there is only one payment method we will set visibility gone for tablayout\n         * and set the payment method icon for inline input card\n         * and set visibility  for separator after chips gone\n         */\n\n        hideTabLayoutWhenOnlyOnePayment(itemsCardsList, itemsMobilesList)\n        tabLayout.addSection(itemsCardsList)\n        // tabLayout.addSection(itemsMobilesList)\n//        tabLayout.\n\n        if (itemsMobilesList.size != 0) tabLayout.addSection(itemsMobilesList)\n\n\n    }\n\n    private fun hideTabLayoutWhenOnlyOnePayment(\n        itemsCardsList: ArrayList<SectionTabItem>,\n        itemsMobilesList: ArrayList<SectionTabItem>\n    ) {\n        if ((itemsCardsList.size == 1 && itemsMobilesList.size == 0) || (itemsCardsList.size == 0 && itemsMobilesList.size == 1)) {\n            tabLayout.visibility = View.GONE\n            tapSeparatorViewLinear?.visibility = View.GONE\n            tapCardInputView.setSingleCardInput(CardBrandSingle.fromCode(cardBrandType), imageURL)\n        }\n//        else\n//            tabLayout.changeTabItemAlphaValue(1f)\n    }\n\n    private fun decideTapSelection(\n        imageURLApi: List<PaymentOption>,\n        itemsMobilesList: ArrayList<SectionTabItem>,\n        itemsCardsList: ArrayList<SectionTabItem>\n    ) {\n        for (i in imageURLApi.indices) {\n            when(CustomUtils.getCurrentTheme()){\n                ThemeMode.dark.name->{\n                   imageURL= imageURLApi[i].logos?.dark?.png?.toString().toString()\n                }\n\n                ThemeMode.dark_colored.name->{\n                    imageURL= imageURLApi[i].logos?.dark_colored?.png?.toString().toString()\n                }\n                ThemeMode.light.name->{\n                    imageURL= imageURLApi[i].logos?.light?.png?.toString().toString()\n                }\n                ThemeMode.light_mono.name->{\n                    imageURL= imageURLApi[i].logos?.light_mono?.png?.toString().toString()\n                }\n            }\n            // imageURL = imageURLApi[i].image.toString()\n            paymentType = imageURLApi[i].paymentType\n            cardBrandType = if (imageURLApi[i].brand == null) {\n                \"unknown\"\n            } else\n                imageURLApi[i].brand.toString()\n\n           /**\n            * was added for telecom payment types to be used future*/\n            /// set payment option object for all payment types and send it to paymentcompletion action function and i will pass it to show extra fees\n            /*      if (paymentType == PaymentType.telecom) {\n                      itemsMobilesList.add(\n                          SectionTabItem(\n                              imageURL, imageURL, CardBrand.valueOf(\n                                  cardBrandType\n                              )\n                          )\n                      )\n                  } else if (paymentType?.name == PaymentType.CARD.name) {\n                      itemsCardsList.add(\n                          SectionTabItem(\n                              imageURL,\n                              imageURL,\n                              CardBrand.valueOf(cardBrandType)\n                          )\n                      )\n                  }*/\n\n            itemsCardsList.add(\n                SectionTabItem(\n                    imageURL,\n                    imageURL,\n                    CardBrand.fromString(cardBrandType)\n                )\n            )\n        }\n    }\n\n\n    override fun showHideClearImage(show: Boolean) {\n        if (show) {\n            // closeButton?.visibility = View.VISIBLE  hiding for mobile view\n        } else {\n            //  closeButton?.visibility = View.GONE\n            tapAlertView?.fadeVisibility(View.GONE, 500)\n        }\n    }\n\n    fun getCard(): CreateTokenCard? {\n        val number: String? = fullCardNumber\n        val expiryDate: String? = expiryDate\n        val cvc: String? = cvvNumber\n        //temporrary    val cardholderName: String? = cardholderName\n        var cardholderName: String? = null\n        if (PaymentDataSource.getDefaultCardHolderName() != null) {\n            cardholderName = PaymentDataSource.getDefaultCardHolderName()\n            tapCardInputView.setCardHolderName(cardholderName)\n        } else {\n            cardholderName = \"cardholderName\"\n        }\n        // val cardholderName: String = \"cardholder\"\n        return if (number == null || expiryDate == null || cvc == null) {\n            null\n        } else {\n            val dateParts: List<String> = expiryDate.split(\"/\")\n\n            return dateParts.get(0).let {\n                CreateTokenCard(\n                    number.replace(\" \", \"\"),\n                    it,\n                    dateParts[1],\n                    cvc,\n                    cardholderName, null\n                )\n            }\n        }\n        // TODO: Add address handling here.\n    }\n\n    fun getPreTypedCardData(): NormalCardData? {\n        val number: String? = fullCardNumber\n        val expiryDate: String? = expiryDatePrev\n        val cvc: String? = cvvNumberPrev\n        val holderName: String? = cardHolderNamePrev\n\n        return if (number == null || expiryDate == null || cvc == null) {\n            null\n        } else {\n            val dateParts: List<String> = expiryDate.split(\"/\")\n\n            return dateParts.get(0).let {\n                cvvNumberPrev?.let { it1 ->\n                    NormalCardData(\n                        number.replace(\" \", \"\"),\n                        it,\n                        dateParts[1],\n                        it1,\n                        holderName\n                    )\n                }\n            }\n        }\n\n    }\n\n\n    fun setCurrentBinData(binLookupResponse: BINLookupResponse?) {\n        //  cardNumberWatcher()\n        cardSchema = binLookupResponse?.scheme.toString()\n    }\n\n    fun checkAllowedCardTypes(binLookupResponse: BINLookupResponse?) {\n        if (binLookupResponse != null && PaymentDataSource?.getCardType().toString() != null) {\n            if (PaymentDataSource.getCardType().toString() != binLookupResponse.cardType) {\n                CustomUtils.showDialog(\n                  /*  LocalizationManager.getValue(\n                        \"alertUnsupportedCardTitle\",\n                        \"AlertBox\"\n                    ),*/\n                    title = \"Alert\",\n                   // LocalizationManager.getValue(\"alertUnsupportedCardMessage\", \"AlertBox\"),\n                    messageString = \"Card Not supported\",\n                    context = context,\n                    btnType = 1,\n                    baseLayoutManager =  baseLayoutManager,\n                    cardTypeDialog = true\n                )\n\n            }\n        }\n\n    }\n\n    private fun checkIfCardTypeExistInList(cardBrand: CardBrand?) {\n        val cardBrandArrayList = ArrayList<String>()\n\n        for (i in 0 until itemsCardsList.size) {\n            cardBrandArrayList.add(itemsCardsList[i].type.name)\n        }\n        // println(\"cardBrand is>>\"+cardBrand?.name)\n        // println(\"cardBrandArrayList is>>\"+cardBrandArrayList)\n\n        if (cardBrand != null && !cardBrandArrayList.contains(cardBrand.name)) {\n            clearCardInputAction()\n          //  tapCardInputView.clear()\n            tabLayout.resetBehaviour()\n            /*CustomUtils.showDialog(\n                LocalizationManager.getValue(\n                    \"alertUnsupportedCardTitle\",\n                    \"AlertBox\"\n                ),\n                LocalizationManager.getValue(\"alertUnsupportedCardMessage\", \"AlertBox\"),\n                context,\n                1,\n                baseLayoutManager,\n                null,\n                null,\n                true\n            )*/\n            CustomUtils.showDialog(\n                title = \"alert\",\n                messageString = \"cardnot supported\",\n                context=context,\n                btnType = 1,\n               baseLayoutManager= baseLayoutManager,\n                cardTypeDialog = true\n            )\n\n        }\n    }\n\n\n    fun maskCardNumber(cardInput: String): String {\n        val maskLen: Int = cardInput.length - 4\n        if (maskLen <= 0) return cardInput // Nothing to mask\n        return (cardInput).replaceRange(0, maskLen, \"•••• \")\n    }\n\n    private fun maskCardNumber2(cardInput: String): String {\n        val maskLen: Int = cardInput.length - 4\n        if (maskLen <= 0) return cardInput // Nothing to mask\n        return (cardInput).replaceRange(0, 6, \"•••• \")\n    }\n\n    /**\n     * here when user enter CVV in input Credit Card\n     */\n    fun setDataForSavedCard(_savedCardsModel: SavedCard, cardInputUIStatus: CardInputUIStatus) {\n        println(\"cardInputUIStatus>>\" + cardInputUIStatus)\n        tapCardInputView.holderNameEnabled = false\n        // tapCardInputView.setVisibilityOfHolderField(false)\n        this.cardInputUIStatus = cardInputUIStatus\n        this.savedCardsModel = _savedCardsModel\n        val cardModel = company.tap.cardinputwidget2.Card(\n            maskCardNumber2(_savedCardsModel.firstSix + _savedCardsModel.lastFour),\n            null,\n            _savedCardsModel.expiry?.month?.toInt(),\n            _savedCardsModel.expiry?.year?.toInt(),\n            _savedCardsModel.cardholderName,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            _savedCardsModel.lastFour,\n            company.tap.cardinputwidget2.CardBrand.fromCardNumber(_savedCardsModel.firstSix),\n            null,\n            null,\n            _savedCardsModel.currency,\n            _savedCardsModel.customer,\n            null,\n            null\n        )\n\n        expiryDate = _savedCardsModel.expiry?.month + \"/\" + _savedCardsModel.expiry?.year\n        println(\"expiryDate saved\" + expiryDate)\n        //  tapCardInputView.isSavedCard = true\n        /* tapCardInputView.updateIconCvc(\n             false,\n             cvvNumber,\n             company.tap.cardinputwidget.CardBrand.fromCardNumber(_savedCardsModel.firstSix)\n         )*/\n        tapCardInputView.setSavedCardDetails(cardModel, cardInputUIStatus)\n        /*  val alertMessage:String = LocalizationManager.getValue(\"Warning\", \"Hints\", \"missingCVV\")\n           tapAlertView?.alertMessage?.text =alertMessage.replace(\"%i\",\"3\")\n\n           tapAlertView?.visibility =View.VISIBLE*/\n        var loadUrlString : String ?=\"\"\n        when(CustomUtils.getCurrentTheme()){\n            ThemeMode.dark.name->{\n                loadUrlString = _savedCardsModel.logos?.dark?.png\n            }\n            ThemeMode.dark_colored.name->{\n                loadUrlString = _savedCardsModel.logos?.dark_colored?.png\n            }\n            ThemeMode.light.name->{\n                loadUrlString = _savedCardsModel.logos?.light?.png\n            }\n            ThemeMode.light_mono.name->{\n                loadUrlString = _savedCardsModel.logos?.light_mono?.png\n            }\n        }\n        tapCardInputView.setSingleCardInput(\n            CardBrandSingle.fromCode(\n                company.tap.cardinputwidget2.CardBrand.fromCardNumber(_savedCardsModel.firstSix)\n                    .toString()\n            ), loadUrlString\n        )\n        tapInlineCardSwitch?.visibility = View.GONE\n        separator1?.visibility = View.GONE\n        acceptedCardText.visibility = View.INVISIBLE\n        contactDetailsView?.visibility = View.GONE\n        shippingDetailView?.visibility = View.GONE\n        //  intertabLayout.visibility = View.GONE\n        tabLayout.fadeVisibility(View.GONE, 2000)\n        //Added for opening as soon as cvv focus\n        CustomUtils.showKeyboard(context)\n    }\n\n    fun getSavedCardData(): CreateTokenSavedCard? {\n        return if (savedCardsModel == null && PaymentDataSource.getCustomer().identifier != null) {\n            null\n        } else {\n            CreateTokenSavedCard(\n                savedCardsModel?.id,\n                PaymentDataSource.getCustomer().identifier\n            )\n\n\n        }\n\n    }\n\n    fun resetPaymentCardView() {\n\n\n        tapCardInputView.clearFocus()\n        tapCardInputView.clear()\n        closeButton?.visibility = View.GONE\n        controlScannerOptions()\n        cardInputUIStatus = CardInputUIStatus.NormalCard\n        checkoutViewModel.setTitleNormalCard()\n        /*tapCardInputView.setSingleCardInput(\n              CardBrandSingle.Unknown, null\n          )*/\n        tapInlineCardSwitch?.visibility = View.GONE\n        // tapCardInputView.separatorcard2.visibility = View.INVISIBLE\n        separator1?.visibility = View.GONE\n        // resetCardBrandIcon()\n        if (PaymentDataSource.getBinLookupResponse() != null) {\n            PaymentDataSource.setBinLookupResponse(null)\n\n        }\n        if (getPreTypedCardData()?.cardholderName != null) {\n            tapCardInputView.setVisibilityOfHolderField(false)\n            tapCardInputView.holderNameEnabled = false\n        }\n        if (getPreTypedCardData() != null) {\n            getPreTypedCardData()?.cardholderName = null\n            getPreTypedCardData()?.cardNumber = null\n            getPreTypedCardData()?.expirationYear = null\n            getPreTypedCardData()?.expirationMonth = null\n            getPreTypedCardData()?.cvc = null\n\n        }\n\n\n        /*  if(tapCardInputView.fullCardNumber!=null){\n              tapCardInputView.fullCardNumber= null\n              tabLayout.resetBehaviour()\n          }*/\n\n        tapInlineCardSwitch?.saveForOtherCheckBox?.isChecked = false\n        tapInlineCardSwitch?.switchSaveCard?.isChecked = false\n        contactDetailsView?.visibility = View.GONE\n        shippingDetailView?.visibility = View.GONE\n        closeButton?.visibility = View.GONE\n        // tapCardInputView.setVisibilityOfHolderField(false)\n        tapCardInputView.holderNameEnabled = false\n        checkoutViewModel.incrementalCount = 0\n        //  tabLayout.visibility =View.VISIBLE\n        //   intertabLayout.visibility =View.VISIBLE\n        allFieldsValid = false\n        tapAlertView?.fadeVisibility(View.GONE, 500)\n        //  acceptedCardText.visibility = View.VISIBLE\n        tabLayout.fadeVisibility(View.VISIBLE)\n        acceptedCardText.fadeVisibility(View.VISIBLE)\n        intertabLayout.fadeVisibility(View.VISIBLE)\n\n\n    }\n\n    fun logicTosetImageDynamic(card: CardBrand, cardCharSeq: String) {\n        for (i in itemsCardsList.indices) {\n\n            if (itemsCardsList[i].selectedImageURL != null && itemsCardsList[i].selectedImageURL.contentEquals(\n                    \"dark\"\n                )\n            ) {\n                val iconStr = itemsCardsList[i].selectedImageURL.replace(\n                    \"https://tap-assets.b-cdn.net/payment-options/v2/dark/\",\n                    \"\"\n                )\n                if (iconStr.replace(\".png\", \"\").toLowerCase().contains(card.name.toLowerCase())) {\n                    tapCardInputView.setSingleCardInput(\n                        CardBrandSingle.fromCode(card.name), itemsCardsList[i].selectedImageURL\n                    )\n\n                }\n            } else {\n                println(\"itemsCardsList[i] light\" + itemsCardsList[i].selectedImageURL)\n                val iconStr = itemsCardsList[i].selectedImageURL.replace(\n                    \"https://tap-assets.b-cdn.net/payment-options/v2/light/\",\n                    \"\"\n                )\n                if (iconStr.replace(\".png\", \"\").replace(\"_\", \"\").toLowerCase()\n                        .contains(card.name.toLowerCase())\n                ) {\n                    tapCardInputView.setSingleCardInput(\n                        CardBrandSingle.fromCode(card.name), itemsCardsList[i].selectedImageURL\n                    )\n\n                }\n            }\n\n        }\n    }\n\n    fun logicForImageOnCVV(card: CardBrand, cardCharSeq: String) {\n\n        println(\"cardSchema is\" + card.name)\n        //TODO 19MAR\n        for (i in itemsCardsList.indices) {\n\n            if (itemsCardsList[i].selectedImageURL != null && itemsCardsList[i].selectedImageURL.contentEquals(\n                    \"dark\"\n                )\n            ) {\n                val iconStr = itemsCardsList[i].selectedImageURL.replace(\n                    \"https://tap-assets.b-cdn.net/payment-options/v2/dark/\",\n                    \"\"\n                )\n\n                if (iconStr.replace(\".png\", \"\").replace(\"_\", \"\").toLowerCase()\n                        .contains(card.name.toLowerCase())\n                ) {\n                    tapCardInputView.setCardBrandUrl(itemsCardsList[i].selectedImageURL)\n\n                }\n            } else {\n                println(\"itemsCardsList[i] light\" + itemsCardsList[i].selectedImageURL)\n                val iconStr = itemsCardsList[i].selectedImageURL.replace(\n                    \"https://tap-assets.b-cdn.net/payment-options/v2/light/\",\n                    \"\"\n                )\n                if (iconStr.replace(\".png\", \"\").replace(\"_\", \"\").toLowerCase()\n                        .contains(card.name.toLowerCase())\n                ) {\n                    tapCardInputView.setCardBrandUrl(itemsCardsList[i].selectedImageURL)\n                    saveLocalBinLookup = null\n                }\n            }\n        }\n    }\n\n\n\n    fun hideViewONScanNFC() {\n        intertabLayout.visibility = View.GONE\n        tabLayout.visibility = View.GONE\n        acceptedCardText.visibility = View.INVISIBLE\n        tapCardInputView.onTouchView()\n\n    }\n\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout/src/main/java/company/tap/checkout/internal/viewholders/PaymentInlineViewHolder.kt b/checkout/src/main/java/company/tap/checkout/internal/viewholders/PaymentInlineViewHolder.kt
--- a/checkout/src/main/java/company/tap/checkout/internal/viewholders/PaymentInlineViewHolder.kt	(revision 0178ff4538a3087120fee48003c4849f6743f525)
+++ b/checkout/src/main/java/company/tap/checkout/internal/viewholders/PaymentInlineViewHolder.kt	(date 1685624004321)
@@ -99,12 +99,13 @@
 
     //  private  var paymentType: PaymentTypeEnum ?= null
     private var paymentType: PaymentType? = null
-    private lateinit var cardBrandType: String
+     lateinit var cardBrandType: String
      var cardNumber: String? = null
     private var fullCardNumber: String? = null
      var expiryDate: String? = null
      var cvvNumber: String? = null
      var cardHolderName: String? = null
+    var cardBrandInString:String?=null
     private var cardHolderNamePrev: String? = null
     private var cvvNumberPrev: String? = null
     private var expiryDatePrev: String? = null
@@ -493,6 +494,7 @@
             )
 
 
+
         if (getPreTypedCardData()?.cardholderName != null) {
             tapInlineCardSwitch?.visibility = View.VISIBLE
             tapInlineCardSwitch?.switchesLayout?.visibility = View.VISIBLE
@@ -516,6 +518,8 @@
         }
 
         prevSetCardBrand = card.cardBrand
+        cardBrandInString = cardModel.brand.name
+
         contactDetailsView?.visibility = View.GONE
         shippingDetailView?.visibility = View.GONE
         tabLayout.fadeVisibility(View.GONE, 2000)
@@ -1081,6 +1085,7 @@
                             fullCardNumber.toString().let {
                                 expiryDate?.let { it1 ->
                                     cvvNumber?.let { it2 ->
+                                        cardBrandInString = savedCardsModel?.brand?.name
                                         onPaymentCardComplete.onPayCardCompleteAction(
                                             true, paymentTyper,
                                            // it, it1, it2, null,prevSetCardBrand?.toString() , savedCardsModel
@@ -1101,6 +1106,8 @@
                             cardNumber.toString().let {
                                 expiryDate?.let { it1 ->
                                     cvvNumber?.let { it2 ->
+                                        cardBrandInString =  PaymentDataSource?.getBinLookupResponse()?.scheme?.cardBrand?.rawValue
+
                                         onPaymentCardComplete.onPayCardCompleteAction(
                                             true,
                                             paymentTyper,
@@ -1169,6 +1176,8 @@
                                // if(isCVCLengthMax == true) //check
                                 cardNumber?.let {
                                     expiryDate?.let { it1 ->
+                                        cardBrandInString = savedCardsModel?.brand?.name
+
                                         onPaymentCardComplete.onPayCardCompleteAction(
                                             true, PaymentType.SavedCard,
                                             it, it1, cvvNumber!!, cardHolderName, savedCardsModel?.brand?.name ,savedCardsModel
@@ -1176,6 +1185,7 @@
                                     }
                                 }
                             }else {
+                                cardBrandInString = PaymentDataSource?.getBinLookupResponse()?.cardBrand?.toString()
                                 if(isCVCLengthMax == true)
                                 onPaymentCardComplete.onPayCardSwitchAction(
                                     true, PaymentType.CARD , PaymentDataSource?.getBinLookupResponse()?.cardBrand?.toString()
Index: checkout/src/main/java/company/tap/checkout/internal/viewmodels/CheckoutViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package company.tap.checkout.internal.viewmodels\n\nimport android.annotation.SuppressLint\nimport android.app.Activity\nimport android.content.Context\nimport android.content.Intent\nimport android.content.res.ColorStateList\nimport android.graphics.Color\nimport android.graphics.drawable.ShapeDrawable\nimport android.net.Uri\nimport android.os.Build\nimport android.os.Handler\nimport android.text.format.DateFormat\nimport android.util.Log\nimport android.view.View\nimport android.view.View.*\nimport android.view.ViewGroup\nimport android.view.animation.AnimationUtils\nimport android.widget.FrameLayout\nimport android.widget.ImageView\nimport android.widget.LinearLayout\nimport android.widget.RelativeLayout\nimport androidx.annotation.Nullable\nimport androidx.annotation.RequiresApi\nimport androidx.annotation.RestrictTo\nimport androidx.cardview.widget.CardView\nimport androidx.constraintlayout.widget.ConstraintLayout\nimport androidx.core.view.isNotEmpty\nimport androidx.core.view.isVisible\nimport androidx.fragment.app.FragmentManager\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.ViewModel\nimport androidx.recyclerview.widget.DividerItemDecoration\nimport androidx.transition.*\nimport cards.pay.paycardsrecognizer.sdk.FrameManager\nimport cards.pay.paycardsrecognizer.sdk.ui.InlineViewCallback\nimport com.bugfender.sdk.Bugfender\nimport com.bumptech.glide.Glide\nimport com.bumptech.glide.load.engine.DiskCacheStrategy\nimport com.fasterxml.jackson.databind.ObjectMapper\nimport com.google.android.gms.wallet.PaymentData\nimport com.google.android.material.bottomsheet.BottomSheetBehavior\nimport com.google.android.material.bottomsheet.BottomSheetDialog\nimport com.google.android.material.textfield.TextInputLayout\nimport com.google.gson.Gson\nimport com.google.gson.JsonObject\nimport company.tap.cardinputwidget2.CardBrandSingle\nimport company.tap.cardinputwidget2.CardInputUIStatus\nimport company.tap.cardinputwidget2.widget.CardInputListener\nimport company.tap.cardscanner.*\nimport company.tap.checkout.R\nimport company.tap.checkout.internal.PaymentDataProvider\nimport company.tap.checkout.internal.adapter.CardTypeAdapterUIKIT\nimport company.tap.checkout.internal.adapter.CurrencyTypeAdapter\nimport company.tap.checkout.internal.adapter.GoPayCardAdapterUIKIT\nimport company.tap.checkout.internal.adapter.ItemAdapter\nimport company.tap.checkout.internal.api.enums.ChargeStatus\nimport company.tap.checkout.internal.api.enums.PaymentType\nimport company.tap.checkout.internal.api.models.*\nimport company.tap.checkout.internal.api.requests.CreateTokenGPayRequest\nimport company.tap.checkout.internal.api.responses.DeleteCardResponse\nimport company.tap.checkout.internal.api.responses.MerchantData\nimport company.tap.checkout.internal.api.responses.PaymentOptionsResponse\nimport company.tap.checkout.internal.apiresponse.CardViewEvent\nimport company.tap.checkout.internal.apiresponse.CardViewModel\nimport company.tap.checkout.internal.apiresponse.testmodels.GoPaySavedCards\nimport company.tap.checkout.internal.cache.SharedPrefManager\nimport company.tap.checkout.internal.cache.UserSupportedLocaleForTransactions\nimport company.tap.checkout.internal.enums.PaymentTypeEnum\nimport company.tap.checkout.internal.enums.SectionType\nimport company.tap.checkout.internal.enums.ThemeMode\nimport company.tap.checkout.internal.enums.WebViewType\nimport company.tap.checkout.internal.interfaces.*\nimport company.tap.checkout.internal.utils.*\nimport company.tap.checkout.internal.utils.AmountCalculator.calculateExtraFeesAmount\nimport company.tap.checkout.internal.viewholders.*\nimport company.tap.checkout.internal.webview.WebFragment\nimport company.tap.checkout.internal.webview.WebViewContract\nimport company.tap.checkout.open.CheckOutActivity\nimport company.tap.checkout.open.CheckoutFragment\nimport company.tap.checkout.open.controller.SDKSession\nimport company.tap.checkout.open.controller.SDKSession.tabAnimatedActionButton\nimport company.tap.checkout.open.controller.SessionManager\nimport company.tap.checkout.open.data_managers.PaymentDataSource\nimport company.tap.checkout.open.enums.CardType\nimport company.tap.checkout.open.enums.TransactionMode\nimport company.tap.checkout.open.models.ItemsModel\nimport company.tap.nfcreader.open.reader.TapEmvCard\nimport company.tap.taplocalizationkit.LocalizationManager\nimport company.tap.tapuilibraryy.themekit.ThemeManager\nimport company.tap.tapuilibraryy.themekit.theme.SeparatorViewTheme\nimport company.tap.tapuilibraryy.uikit.animation.MorphingAnimation\nimport company.tap.tapuilibraryy.uikit.atoms.TapTextInput\nimport company.tap.tapuilibraryy.uikit.datasource.LoyaltyHeaderDataSource\nimport company.tap.tapuilibraryy.uikit.enums.ActionButtonState\nimport company.tap.tapuilibraryy.uikit.enums.GoPayLoginMethod\nimport company.tap.tapuilibraryy.uikit.fragment.NFCFragment\nimport company.tap.tapuilibraryy.uikit.interfaces.TabAnimatedButtonListener\nimport company.tap.tapuilibraryy.uikit.ktx.loadAppThemManagerFromPath\nimport company.tap.tapuilibraryy.uikit.ktx.makeLinks\nimport company.tap.tapuilibraryy.uikit.ktx.setTopBorders\nimport company.tap.tapuilibraryy.uikit.utils.MetricsUtil\nimport company.tap.tapuilibraryy.uikit.views.TabAnimatedActionButton\nimport company.tap.tapuilibraryy.uikit.views.TapBrandView\nimport kotlinx.android.synthetic.main.amountview_layout.view.*\nimport kotlinx.android.synthetic.main.businessview_layout.view.*\nimport kotlinx.android.synthetic.main.cardviewholder_layout1.view.*\nimport kotlinx.android.synthetic.main.fragment_checkouttaps.view.*\nimport kotlinx.android.synthetic.main.gopaysavedcard_layout.view.*\nimport kotlinx.android.synthetic.main.itemviewholder_layout.view.*\nimport kotlinx.android.synthetic.main.loyalty_view_layout.view.*\nimport kotlinx.android.synthetic.main.otpview_layout.view.*\nimport kotlinx.android.synthetic.main.switch_layout.view.*\nimport mobi.foo.benefitinapp.data.Transaction\nimport mobi.foo.benefitinapp.listener.CheckoutListener\nimport org.json.JSONException\nimport org.json.JSONObject\nimport java.math.BigDecimal\nimport java.util.*\nimport kotlin.properties.Delegates\n\n\n/**\n *\n * Copyright © 2020 Tap Payments. All rights reserved.\n *\n */\n\n@RestrictTo(RestrictTo.Scope.LIBRARY)\nopen class CheckoutViewModel : ViewModel(), BaseLayoutManager, OnCardSelectedActionListener,\n    PaymentCardComplete, onCardNFCCallListener, OnCurrencyChangedActionListener, WebViewContract,\n    TapTextRecognitionCallBack, TapScannerCallback, CheckoutListener, TabAnimatedButtonListener,\n    MorphingAnimation.OnAnimationEndListener {\n    private var savedCardList: MutableList<SavedCard>? = mutableListOf()\n    private var arrayListSavedCardSize = ArrayList<SavedCard>()\n    private var supportedLoyalCards = MutableLiveData<List<LoyaltySupportedCurrency>>()\n    private var paymentOptionsList = MutableLiveData<List<PaymentOption>>()\n    private var goPayCardList = MutableLiveData<List<GoPaySavedCards>>()\n    private var selectedViewToBeDeletedFromCardViewHolder: ViewGroup? = null\n    private var viewToBeBlurCardViewHolder: View? = null\n    var newColorVal: Int? = null\n\n    private var allCurrencies = MutableLiveData<List<SupportedCurrencies>>()\n    private var selectedItemsDel by Delegates.notNull<Int>()\n    private var cardIDToBeDeleted: Int? = 0\n\n    private val isShaking = MutableLiveData<Boolean>()\n    val localCurrencyReturned = MutableLiveData<Boolean>()\n    val powerdByTapAnimationFinished = MutableLiveData<Boolean>()\n    val isItemsAreOpend = MutableLiveData<Boolean>()\n\n    private var deleteCard: Boolean = false\n    private var displayItemsOpen: Boolean = false\n    private var displayOtpIsOpen: Boolean = false\n    private var saveCardSwitchHolder: SwitchViewHolder? = null\n\n    private lateinit var title: String\n    private lateinit var paymentInlineViewHolder: PaymentInlineViewHolder\n    private lateinit var goPaySavedCardHolder: GoPaySavedCardHolder\n    private lateinit var businessViewHolder: BusinessViewHolder\n    private lateinit var amountViewHolder: AmountViewHolder\n    private lateinit var currencyAdapter: CurrencyTypeAdapter\n    private lateinit var goPayAdapter: GoPayCardAdapterUIKIT\n    private lateinit var goPayViewsHolder: GoPayViewsHolder\n    private lateinit var itemsViewHolder: ItemsViewHolder\n    private lateinit var cardViewHolder: CardViewHolder\n    private lateinit var webViewHolder: WebViewHolder\n    private lateinit var asynchronousPaymentViewHolder: AsynchronousPaymentViewHolder\n    private lateinit var loyaltyViewHolder: LoyaltyViewHolder\n\n    private var tabAnimatedActionButtonViewHolder: TabAnimatedActionButtonViewHolder? = null\n    private lateinit var bottomSheetDialog: BottomSheetDialog\n    private lateinit var fragmentManager: FragmentManager\n\n    @SuppressLint(\"StaticFieldLeak\")\n    private lateinit var bottomSheetLayout: FrameLayout\n\n    @Nullable\n    internal lateinit var selectedAmount: String\n\n    @Nullable\n    lateinit var selectedCurrency: String\n\n    companion object {\n        var currencySelectedForCheck: String = \"\"\n    }\n\n    private var fee: BigDecimal? = BigDecimal.ZERO\n    private var webPaymentOptions: java.util.ArrayList<PaymentOption> = ArrayList()\n\n    @JvmField\n    var currentCurrency: String = \"\"\n\n    @JvmField\n    var currentCurrencySymbol: String = \"\"\n\n\n    @JvmField\n    var finalCurrencySymbol: String = \"\"\n\n    @JvmField\n    var currentAmount: String = \"\"\n    private lateinit var adapter: CardTypeAdapterUIKIT\n    private lateinit var itemAdapter: ItemAdapter\n    private lateinit var otpViewHolder: OTPViewHolder\n\n    @SuppressLint(\"StaticFieldLeak\")\n    private lateinit var webFrameLayout: FrameLayout\n\n    @SuppressLint(\"StaticFieldLeak\")\n    private lateinit var frameLayout: FrameLayout\n\n    @SuppressLint(\"StaticFieldLeak\")\n    private lateinit var inLineCardLayout: FrameLayout\n\n    @SuppressLint(\"StaticFieldLeak\")\n    private lateinit var headerLayout: LinearLayout\n\n    @SuppressLint(\"StaticFieldLeak\")\n    private lateinit var sdkLayout: LinearLayout\n\n    @SuppressLint(\"StaticFieldLeak\")\n    private lateinit var topHeaderView: TapBrandView\n\n\n    private lateinit var checkoutFragment: CheckoutFragment\n    private lateinit var itemList: List<ItemsModel>\n    private lateinit var unModifiedItemList: List<ItemsModel>\n    private lateinit var selectedPaymentOption: PaymentOption\n\n    @SuppressLint(\"StaticFieldLeak\")\n    private lateinit var context: Context\n    private lateinit var cardViewModel: CardViewModel\n    private var otpTypeString: PaymentTypeEnum = PaymentTypeEnum.SAVEDCARD\n    private lateinit var paymentActionType: PaymentType\n    private val nfcFragment = NFCFragment()\n\n\n    //  private val inlineViewFragment = InlineViewFragment()\n    private val inlineCamerFragment = CameraFragment()\n    private var isInlineOpened = false\n\n    @JvmField\n    var isNFCOpened = false\n    private var textRecognitionML: TapTextRecognitionML? = null\n    private lateinit var intent: Intent\n    private lateinit var inlineViewCallback: InlineViewCallback\n    lateinit var paymentOptionsResponse: PaymentOptionsResponse\n    lateinit var redirectURL: String\n    lateinit var cardId: String\n    var currencyOldRate: BigDecimal? = null\n    var lastSelectedCurrency: String? = null\n\n    @JvmField\n    var isSavedCardSelected: Boolean? = false\n\n    @JvmField\n    var globalChargeResponse: Charge? = null\n\n    @JvmField\n    var selectedTotalAmount: String? = null\n\n    @JvmField\n    var selectedAmountPos: BigDecimal? = null\n\n    @JvmField\n    var selectedCurrencyPos: String? = null\n\n    lateinit var paymentOptionsWorker: java.util.ArrayList<PaymentOption>\n\n\n    val appId: String = \"4530082749\"\n    val merchantId: String = \"00000101\"\n    val seceret: String = \"3l5e0cstdim11skgwoha8x9vx9zo0kxxi4droryjp4eqd\"\n    val countrycode: String = \"1001\"\n    val mcc: String = \"4816\"\n\n\n    private var colorBackGround: String? = null\n    private var intColorArray: IntArray? = null\n    private var startColor: String? = null\n    private var endColor: String? = null\n    private var middleColor: String? = null\n    private var image: ImageView? = null\n    var savedCardsBasedCurr: java.util.ArrayList<SavedCard> = java.util.ArrayList<SavedCard>()\n\n    @JvmField\n    var incrementalCount: Int = 0\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun initLayoutManager(\n        bottomSheetDialog: BottomSheetDialog,\n        context: Context,\n        fragmentManager: FragmentManager,\n        sdkLayout: LinearLayout,\n        frameLayout: FrameLayout,\n        webFrameLayout: FrameLayout,\n        inLineCardLayout: FrameLayout,\n        inlineViewCallback: InlineViewCallback,\n        intent: Intent,\n        cardViewModel: CardViewModel,\n        checkoutFragment: CheckoutFragment,\n        headerLayout: LinearLayout,\n        topHeaderView: TapBrandView?,\n    ) {\n        this.context = context\n        this.fragmentManager = fragmentManager\n        this.sdkLayout = sdkLayout\n        this.frameLayout = frameLayout\n        this.webFrameLayout = webFrameLayout\n        this.bottomSheetDialog = bottomSheetDialog\n        this.inLineCardLayout = inLineCardLayout\n        this.inlineViewCallback = inlineViewCallback\n        this.intent = intent\n        this.cardViewModel = cardViewModel\n        this.checkoutFragment = checkoutFragment\n        this.headerLayout = headerLayout\n        if (topHeaderView != null) {\n            this.topHeaderView = topHeaderView\n        }\n\n        initializeScanner(this)\n        initViewHolders()\n        initAmountAction()\n        initSwitchAction()\n        initOtpActionButton()\n        setAllSeparatorTheme()\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setTabAnimatedInterface(object :\n            TabAnimatedButtonListener {\n            override fun onTabAnimatedStarted() {\n                headerLayout.deepForEach { isEnabled = false }\n            }\n\n            override fun onTabAnimatedEnded() {\n                doAfterSpecificTime {\n                    headerLayout.deepForEach { isEnabled = true }\n                }\n\n            }\n\n        })\n\n\n    }\n\n    private fun poweredByTapAnimationEnds() {\n        powerdByTapAnimationFinished.value = true\n    }\n\n    init {\n        powerdByTapAnimationFinished.value = false\n        isItemsAreOpend.value = false\n    }\n\n    private fun initLoyaltyView() {\n        if (SDKSession.enableLoyalty == true) {\n            /*removeViews(saveCardSwitchHolder)\n            addViews(loyaltyViewHolder,saveCardSwitchHolder)*/\n            removeAllViews()\n            addViews(\n                businessViewHolder,\n                amountViewHolder,\n                cardViewHolder,\n                paymentInlineViewHolder,\n                loyaltyViewHolder,\n                saveCardSwitchHolder\n            )\n            loyaltyViewHolder.view.loyaltyView.constraintLayout?.visibility = VISIBLE\n\n        } else\n            loyaltyViewHolder.view.loyaltyView.constraintLayout?.visibility = GONE\n    }\n\n    private fun initializeScanner(checkoutViewModel: CheckoutViewModel) {\n        textRecognitionML = TapTextRecognitionML(checkoutViewModel)\n        textRecognitionML?.addTapScannerCallback(checkoutViewModel)\n    }\n\n    override fun onTabAnimatedStarted() {\n        context.showToast(\"animation Started\")\n    }\n\n    override fun onTabAnimatedEnded() {\n        context.showToast(\"animation Ended\")\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun initOtpActionButton() {\n\n        otpViewHolder.otpView.otpViewActionButton.setOnClickListener {\n            //Added to hide keyboard if open\n            CustomUtils.hideKeyboardFrom(context as Activity, otpViewHolder.view)\n            when (otpTypeString) {\n                PaymentTypeEnum.GOPAY ->\n                    goPayViewsHolder.onOtpButtonConfirmationClick(otpViewHolder.otpView.otpViewInput1.text.toString())\n\n\n                PaymentTypeEnum.SAVEDCARD -> confirmOTPCode(otpViewHolder.otpView.otpViewInput1.text.toString())\n                else -> {\n\n                    removeViews(\n                        businessViewHolder,\n                        amountViewHolder,\n                        paymentInlineViewHolder,\n                        cardViewHolder,\n                        saveCardSwitchHolder,\n                        otpViewHolder\n                    )\n                    addViews(\n                        businessViewHolder,\n                        amountViewHolder,\n                        cardViewHolder,\n                        paymentInlineViewHolder,\n                        saveCardSwitchHolder\n                    )\n                    saveCardSwitchHolder?.view?.mainSwitch?.switchSaveMobile?.visibility =\n                        GONE\n                    val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n                    val nowString: String = LocalizationManager.getValue(\"now\", \"ActionButton\")\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n                        false,\n                        \"en\",\n                        if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                            payString + \" \" + nowString\n                        } else {\n                            payString + \" \" + nowString\n                        },\n                        Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.paymentBackgroundColor\")),\n                        Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.titleLabelColor\")),\n                    )\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = VISIBLE\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                        ActionButtonState.IDLE\n                    )\n                    paymentInlineViewHolder.tapMobileInputView.clearNumber()\n\n                }\n            }\n        }\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun confirmOTPCode(otpCode: String) {\n        otpViewHolder.view.otpView.otpViewActionButton.setDisplayMetricsTheme(\n            CustomUtils.getDeviceDisplayMetrics(\n                context as Activity\n            ), CustomUtils.getCurrentTheme()\n        )\n        otpViewHolder.view.otpView.otpViewActionButton.changeButtonState(ActionButtonState.LOADING)\n        val viewsToDisable = mutableListOf<View>(\n            cardViewHolder.view.mainChipgroup.chipsRecycler as View,\n            paymentInlineViewHolder.tapCardInputView.backArrow as View,\n            amountViewHolder.view.amount_section.constraint,\n            amountViewHolder.view.amount_section.tapChipAmount,\n            cardViewHolder.view,\n            cardViewHolder.view.mainChipgroup,\n            paymentInlineViewHolder.tapCardInputView,\n            paymentInlineViewHolder.view,\n            paymentInlineViewHolder.nfcButton as View,\n            paymentInlineViewHolder.scannerButton as View,\n            saveCardSwitchHolder?.view as View,\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton as View\n        )\n        viewsToDisable.disableViews()\n        when (PaymentDataSource.getTransactionMode()) {\n            TransactionMode.PURCHASE -> sendChargeOTPCode(otpCode)\n            TransactionMode.AUTHORIZE_CAPTURE -> sendAuthorizeOTPCode(otpCode)\n            else -> sendChargeOTPCode(otpCode)\n        }\n\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun sendAuthorizeOTPCode(otpCode: String) {\n        cardViewModel.processEvent(\n            event = CardViewEvent.AuthenticateAuthorizeTransaction,\n            viewModel = this,\n            otpString = otpCode\n        )\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun sendChargeOTPCode(otpCode: String) {\n        cardViewModel.processEvent(\n            event = CardViewEvent.AuthenticateChargeTransaction,\n            viewModel = this,\n            otpString = otpCode\n        )\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun initViewHolders() {\n        businessViewHolder = BusinessViewHolder(context, this)\n        amountViewHolder = AmountViewHolder(context, this, this)\n        tabAnimatedActionButtonViewHolder = TabAnimatedActionButtonViewHolder(context)\n        cardViewHolder = CardViewHolder(context, this)\n        goPaySavedCardHolder = GoPaySavedCardHolder(context, this, this)\n        saveCardSwitchHolder = SwitchViewHolder(context, this)\n\n        loyaltyViewHolder = LoyaltyViewHolder(context, this, this)\n\n\n        headerLayout.let { it1 ->\n            setTopBorders(\n                view = it1,\n                cornerRadius = 35f,\n                strokeWidth = 0.0f,\n                strokeColor = loadAppThemManagerFromPath(AppColorTheme.PoweredByTapBackgroundColor),// stroke color\n                tintColor = loadAppThemManagerFromPath(AppColorTheme.PoweredByTapBackgroundColor),// tint color\n                shadowColor = loadAppThemManagerFromPath(AppColorTheme.PoweredByTapBackgroundColor)\n            )\n\n        }//\n        paymentInlineViewHolder = PaymentInlineViewHolder(\n            context, this,\n            this,\n            saveCardSwitchHolder,\n            this,\n            cardViewModel\n        )\n\n        itemsViewHolder = ItemsViewHolder(context, this)\n\n        otpViewHolder = OTPViewHolder(context)\n        otpViewHolder.otpView.visibility = GONE\n        otpViewHolder.otpView.requestFocus()\n        otpViewHolder.otpView.otpViewInput1.cursorColor =\n            Color.parseColor(ThemeManager.getValue(\"TapOtpView.OtpController.activeBottomColor\"))\n        otpViewHolder.otpView.otpViewInput1.setLineColorInactive(\n            Color.parseColor(\n                ThemeManager.getValue(\n                    \"TapOtpView.OtpController.bottomLineColor\"\n                )\n            )\n        )\n        otpViewHolder.otpView.otpViewInput1.setLineColorActive(\n            Color.parseColor(\n                ThemeManager.getValue(\n                    \"TapOtpView.OtpController.activeBottomColor\"\n                )\n            )\n        )\n        otpViewHolder.otpView.otpViewInput1.isCursorVisible = true\n        goPayViewsHolder = GoPayViewsHolder(context, this, otpViewHolder)\n        asynchronousPaymentViewHolder = AsynchronousPaymentViewHolder(context, this)\n        logicForLoyaltyProgram()\n\n        amountViewHolder.view.amount_section.tapChipPopup.setOnClickListener {\n            removePaymentInlineShrinkageAndDimmed()\n            amountViewHolder.view.amount_section.tapChipPopup.slideFromLeftToRight()\n            with(SharedPrefManager.getUserSupportedLocaleForTransactions(context)!!) {\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n                    submitNewLocalCurrency(\n                        currencySelected = currency.toString(),\n                        currencyRate = rate?.toBigDecimal()!!,\n                        totalSelectedAmount = amount,\n                        selectedCurrencySymbol = symbol ?: \"\"\n                    )\n                }\n            }\n            unActivateActionButton()\n\n        }\n        newColorVal = Color.parseColor(ThemeManager.getValue(\"horizontalList.backgroundColor\"))\n\n\n    }\n\n\n    private fun showCountryFlag(): String? {\n        val currency = SharedPrefManager.getUserSupportedLocaleForTransactions(context)\n        Log.e(\"localNeeded\", currency.toString())\n        if (ThemeManager.currentTheme.contains(\"dark\")) {\n            return currency?.logos?.dark?.png\n        } else {\n            return currency?.logos?.light?.png\n        }\n    }\n\n    private fun initSwitchAction() {\n        saveCardSwitchHolder?.view?.mainSwitch?.mainSwitch?.visibility = GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.switchGoPayCheckout?.isChecked = false\n        saveCardSwitchHolder?.view?.cardSwitch?.switchGoPayCheckout?.visibility = GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.saveGoPay?.visibility = GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.alertGoPaySignUp?.visibility = GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.switchSeparator?.visibility = GONE\n    }\n\n    private fun initAmountAction() {\n        amountViewHolder.setOnItemsClickListener()\n        amountViewHolder.view.amount_section.mainKDAmountValue.visibility = GONE\n    }\n\n\n    override fun displayStartupLayout(enabledSections: ArrayList<SectionType>) {\n        println(\"PaymentDataSource.getPaymentDataType()\" + PaymentDataSource.getPaymentDataType())\n        //Todo based on api response logic for switch case\n        when (PaymentDataSource.getTransactionMode()) {\n\n            TransactionMode.TOKENIZE_CARD -> {\n                addViews(\n                    businessViewHolder,\n                    paymentInlineViewHolder,\n                    saveCardSwitchHolder\n                )\n\n            }\n            TransactionMode.SAVE_CARD -> {\n                addViews(\n                    businessViewHolder,\n                    paymentInlineViewHolder,\n                    saveCardSwitchHolder\n                )\n            }\n            else -> {\n\n\n                if (PaymentDataSource.getPaymentDataType() == \"WEB\") {\n                    addViews(\n                        businessViewHolder,\n                        amountViewHolder,\n                        cardViewHolder,\n                        saveCardSwitchHolder\n                    )\n                    cardViewHolder.cardInfoHeaderText?.visibility = GONE\n                } else if (PaymentDataSource.getPaymentDataType() == \"CARD\") {\n\n                    addViews(\n                        businessViewHolder,\n                        amountViewHolder,\n                        cardViewHolder,\n                        paymentInlineViewHolder, saveCardSwitchHolder\n                    )\n                    cardViewHolder.cardInfoHeaderText.visibility = VISIBLE\n                } else\n                //Checkimg to be removed once loyalty enabled form api level onluy else will be there\n                    if (SDKSession.enableLoyalty == true) {\n                        addViews(\n                            businessViewHolder,\n                            amountViewHolder,\n                            cardViewHolder,\n                            paymentInlineViewHolder,\n                            loyaltyViewHolder,\n                            saveCardSwitchHolder\n                        )\n                    } else {\n                        addViews(\n                            businessViewHolder,\n                            amountViewHolder,\n                            cardViewHolder,\n                            paymentInlineViewHolder,\n                            saveCardSwitchHolder\n                        )\n                    }\n\n\n            }\n        }\n\n        saveCardSwitchHolder?.view?.mainSwitch?.mainSwitchLinear?.setBackgroundColor(\n            Color.parseColor(\n                ThemeManager.getValue(\n                    \"TapSwitchView.main.backgroundColor\"\n                )\n            )\n        )\n        inLineCardLayout.visibility = GONE\n        amountViewHolder.readyToScanVisibility(false)\n        saveCardSwitchHolder?.view?.cardviewSwitch?.cardElevation = 0f\n        SDKSession.activity?.let {\n            CustomUtils.getDeviceDisplayMetrics(\n                it\n            )\n        }?.let {\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setDisplayMetricsTheme(\n                it,\n                CustomUtils.getCurrentTheme()\n            )\n        }\n\n\n    }\n\n    fun setBottomSheetLayout(bottomSheetLayout: FrameLayout) {\n        this.bottomSheetLayout = bottomSheetLayout\n        bottomSheetLayout.clipToOutline = true\n    }\n\n    override fun displayGoPayLogin() {\n        saveCardSwitchHolder?.let {\n            removeViews(\n                businessViewHolder, amountViewHolder,\n                cardViewHolder, paymentInlineViewHolder,\n                it, otpViewHolder,\n                goPayViewsHolder\n            )\n        }\n\n        addViews(businessViewHolder, amountViewHolder, goPayViewsHolder)\n        if (goPayViewsHolder.goPayopened) {\n            goPayViewsHolder.goPayLoginInput.inputType = GoPayLoginMethod.PHONE\n            goPayViewsHolder.goPayLoginInput.visibility = VISIBLE\n            saveCardSwitchHolder?.view?.cardSwitch?.switchGoPayCheckout?.visibility = VISIBLE\n        }\n        //TODO goPayAdapter.updateAdapterData(goPayCardList.value as List<GoPaySavedCards>)\n        amountViewHolder.changeGroupAction(false)\n        goPayViewsHolder.goPayopened = true\n    }\n\n\n    override fun displayGoPay() {\n\n        saveCardSwitchHolder?.let {\n            removeViews(\n                businessViewHolder,\n                amountViewHolder,\n                goPayViewsHolder,\n                cardViewHolder,\n                paymentInlineViewHolder,\n                it,\n                otpViewHolder\n            )\n        }\n\n        saveCardSwitchHolder?.let {\n            addViews(\n                businessViewHolder,\n                amountViewHolder,\n                goPaySavedCardHolder,\n                cardViewHolder,\n                paymentInlineViewHolder,\n                it\n            )\n        }\n\n        cardViewHolder.view.mainChipgroup.groupAction.visibility = View.INVISIBLE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = VISIBLE\n        saveCardSwitchHolder?.goPayisLoggedin = true\n        adapter.goPayOpenedfromMain(true)\n        adapter.removeItems()\n    }\n\n    override fun controlCurrency(display: Boolean) {\n        isItemsAreOpend.value = display\n        if (display) caseDisplayControlCurrency()\n        else caseNotDisplayControlCurrency()\n\n        displayItemsOpen = !display\n        amountViewHolder.changeGroupAction(!display)\n        //   if (this::currentAmount.isInitialized)\n        if (this::selectedAmount.isInitialized && this::selectedCurrency.isInitialized) {\n            if (selectedAmount == currentAmount && selectedCurrency == currentCurrency) {\n                amountViewHolder.view.amount_section.mainKDAmountValue.visibility = GONE\n\n\n            } else {\n                amountViewHolder.updateSelectedCurrency(\n                    displayItemsOpen,\n                    selectedAmount, selectedCurrency,\n                    currentAmount, finalCurrencySymbol, currentCurrencySymbol\n                )\n\n            }\n\n        }\n        if (otpViewHolder.otpView.isVisible) {\n            removeViews(otpViewHolder)\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.RESET)\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isClickable = true\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.stateListAnimator = null\n            val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n            val nowString: String = LocalizationManager.getValue(\"now\", \"ActionButton\")\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n                false,\n                \"en\",\n                if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                    payString + \" \" + nowString\n                } else {\n                    payString + \" \" + nowString\n                },\n                Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n                Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n            )\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isActivated = false\n        }\n        if (PaymentDataSource.getPaymentDataType() != null && PaymentDataSource.getPaymentDataType() == \"WEB\") {\n            removeViews(paymentInlineViewHolder)\n        }\n        removeInlineScanner()\n        removeNFCViewFragment()\n\n\n    }\n\n    override fun reOpenSDKState() {\n        //todo add back to sdk functionality\n\n        removeViews(otpViewHolder, amountViewHolder, paymentInlineViewHolder, saveCardSwitchHolder)\n        doAfterSpecificTime(time = 500L) {\n            with(cardViewHolder.view.mainChipgroup) {\n                mutableListOf<View>(\n                    chipsRecycler,\n                    groupAction,\n                    groupName\n                ).addFadeInAnimationToViews()\n            }\n\n        }\n\n        businessViewHolder.setDataFromAPI(\n            PaymentDataSource.getMerchantData()?.logo,\n            PaymentDataSource.getMerchantData()?.name\n        )\n        addViews(\n            amountViewHolder,\n            paymentInlineViewHolder,\n            saveCardSwitchHolder\n        )\n        amountViewHolder.view.amount_section.itemAmountLayout?.visibility = VISIBLE\n        amountViewHolder.view.amount_section.itemPopupLayout?.visibility = VISIBLE\n        amountViewHolder.view.amount_section.tapChipAmount?.visibility = VISIBLE\n        checkSelectedAmountInitiated()\n        amountViewHolder.changeGroupAction(false)\n        amountViewHolder.setOnItemsClickListener()\n        amountViewHolder.view.amount_section.flagImageView?.visibility = VISIBLE\n\n\n        saveCardSwitchHolder?.view?.visibility = VISIBLE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.RESET)\n        val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n        val nowString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n            false,\n            \"en\",\n            if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                payString + \" \" + nowString\n            } else {\n                payString + \" \" + nowString\n            },\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n        )\n\n    }\n\n\n    fun addTitlePaymentAndFlag() {\n        addDataToAmountView()\n        if (displayItemsOpen) {\n\n        }\n        amountViewHolder.view.amount_section.tapChipPopup.slidefromRightToLeft()\n        amountViewHolder.view.amount_section.itemPopupLayout.applyGlowingEffect(getCurrencyColors())\n\n    }\n\n    fun addDataToAmountView() {\n        val currencyAlert: String = LocalizationManager.getValue(\"currencyAlert\", \"Common\")\n        amountViewHolder.view.amount_section.popupTextView.text =\n            currencyAlert + \" \" + checkoutFragment.getSimIsoCountryCurrency()\n        Glide.with(context).load(showCountryFlag())\n            .into(amountViewHolder.view.amount_section.flagImageView);\n        amountViewHolder.view.amount_section.tapChipAmount.bringToFront()\n\n    }\n\n    fun removevisibiltyCurrency() {\n        amountViewHolder.view.amount_section.tapChipPopup.visibility = GONE\n    }\n\n    fun getCurrencyColors(): Pair<Int, Int> {\n        var pair: Pair<Int, Int>? = null\n        if (ThemeManager.currentTheme.contains(\"dark\")) {\n            /**\n             * dark theme colors\n             */\n            pair = Pair(Color.parseColor(\"#211F1F\"), Color.parseColor(\"#343232\"))\n        } else {\n            /**\n             * light theme colors\n             */\n\n            pair = Pair(Color.parseColor(\"#F4F4F4\"), Color.parseColor(\"#E1E1E1\"))\n        }\n        return pair\n    }\n\n\n    /**\n     * case displaying @TODO:EGP /\n     */\n\n    private fun caseDisplayControlCurrency() {\n\n\n        removeViews(\n            cardViewHolder,\n            paymentInlineViewHolder,\n            goPayViewsHolder,\n            otpViewHolder,\n        )\n        saveCardSwitchHolder?.view?.visibility = View.GONE\n        addViews(\n            itemsViewHolder\n        )\n\n\n        /**\n         * will be replaced by itemList coming from the API**/\n        if (PaymentDataSource.getItems() != null) {\n            itemsViewHolder.view.itemRecylerView.adapter = itemAdapter\n            itemAdapter.updateAdapterData(itemList)\n        }\n        currencyAdapter.updateAdapterData(allCurrencies.value as List<SupportedCurrencies>)\n\n        frameLayout.visibility = VISIBLE\n        itemsViewHolder.itemsdisplayed = true\n\n\n        //Hide keyboard of any open\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n            CustomUtils.hideKeyboardFrom(\n                paymentInlineViewHolder.view.context,\n                paymentInlineViewHolder.view\n            )\n        }\n    }\n\n    private fun caseNotDisplayControlCurrency() {\n\n        if (goPayViewsHolder.goPayopened || itemsViewHolder.itemsdisplayed) setActionGoPayOpenedItemsDisplayed()\n        else setActionNotGoPayOpenedNotItemsDisplayed()\n\n        itemAdapter.resetViewToInitialValue()\n\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun setActionGoPayOpenedItemsDisplayed() {\n\n        removeViews(\n            cardViewHolder,\n            paymentInlineViewHolder,\n            goPayViewsHolder,\n            otpViewHolder,\n            itemsViewHolder\n        )\n        if (::webViewHolder.isInitialized) {\n            removeViews(webViewHolder)\n        }\n        addViews(\n            cardViewHolder,\n            paymentInlineViewHolder,\n            saveCardSwitchHolder, afterAddingViews = {\n                saveCardSwitchHolder?.view?.visibility = VISIBLE\n            })\n\n\n        paymentInlineViewHolder.resetPaymentCardView()\n        frameLayout.visibility = GONE\n    }\n\n    private fun setActionNotGoPayOpenedNotItemsDisplayed() {\n        val originalHeight: Int = sdkLayout.height\n        saveCardSwitchHolder?.let {\n            removeViews(\n                cardViewHolder,\n                paymentInlineViewHolder,\n                it,\n                itemsViewHolder\n            )\n        }\n\n        if (::webViewHolder.isInitialized) removeViews(webViewHolder)\n\n        saveCardSwitchHolder?.let {\n            addViews(\n                cardViewHolder,\n                paymentInlineViewHolder,\n                it\n            )\n        }\n\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.IDLE)\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isEnabled = true\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isClickable = true\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isActivated = true\n        itemsViewHolder.view.mainCurrencyChip.chipsRecycler.adapter = currencyAdapter\n        frameLayout.visibility = GONE\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    @SuppressLint(\"SetTextI18n\")\n    override fun displayOTPView(\n        phoneNumber: PhoneNumber?,\n        otpType: String,\n        chargeResponse: Charge?\n    ) {\n\n\n        // amountViewHolder.changeGroupAction(false)\n        amountViewHolder.view.amount_section.itemCountButton.text = LocalizationManager.getValue(\n            \"close\",\n            \"Common\"\n        )\n        // amountViewHolder.view.amount_section.itemAmountLayout?.visibility = View.GONE\n        //  amountViewHolder.view.amount_section.itemPopupLayout?.visibility = View.GONE\n        amountViewHolder.view.amount_section.flagImageView?.visibility = GONE\n        amountViewHolder.view.amount_section.popupTextView.text = LocalizationManager.getValue(\n            \"close\",\n            \"Common\"\n        )\n\n\n        //  amountViewHolder.view.amount_section.itemCountButton?.visibility = View.GONE\n\n        displayOtpIsOpen = true\n        displayItemsOpen = false\n        when (otpType) {\n            PaymentTypeEnum.GOPAY.name -> {\n                displayOtpGoPay(phoneNumber)\n            }\n            PaymentTypeEnum.telecom.name -> {\n                displayOtpTelecoms(phoneNumber)\n            }\n            PaymentTypeEnum.SAVEDCARD.name -> {\n                displayOtpCharge(phoneNumber, chargeResponse)\n            }\n            else -> {\n                displayOtpCharge(phoneNumber, chargeResponse)\n            }\n        }\n    }\n\n    private fun displayOtpGoPay(phoneNumber: PhoneNumber?) {\n        // otpTypeString = PaymentTypeEnum.GOPAY //temporray\n        removeViews(\n            cardViewHolder,\n            paymentInlineViewHolder, saveCardSwitchHolder, amountViewHolder\n        )\n        addViews(amountViewHolder, otpViewHolder)\n\n        otpViewHolder.otpView.visibility = VISIBLE\n        setOtpPhoneNumber(phoneNumber)\n        otpViewHolder.otpView.changePhone.setOnClickListener {\n            goPayViewsHolder.onChangePhoneClicked()\n        }\n    }\n\n    @SuppressLint(\"SetTextI18n\")\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun displayOtpCharge(phoneNumber: PhoneNumber?, chargeResponse: Charge?) {\n        // otpTypeString = PaymentTypeEnum.GOPAY //temporray\n        println(\"mmmmmmmm\" + amountViewHolder?.originalAmount)\n        /*if(::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n            amountViewHolder.updateSelectedCurrency(\n                false,\n                selectedAmount,\n                selectedCurrency,\n                currentAmount,\n                currentCurrency\n            )\n            println(\"selectedAmount>>>>\" + selectedAmount)\n        }*/\n        removeViews(\n            paymentInlineViewHolder, otpViewHolder\n        )\n\n        saveCardSwitchHolder?.view?.mainSwitch?.visibility = GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n\n        //start counter on open otpview\n        otpViewHolder?.otpView?.startCounter()\n        amountViewHolder?.view?.amountView_separator?.visibility = View.GONE\n        //Replaced blur with below\n        otpViewHolder?.otpView?.otpLinearLayout.setBackgroundColor(\n            Color.parseColor(\n                ThemeManager.getValue(\n                    \"amountSectionView.backgroundColor\"\n                )\n            )\n        )\n        // otpViewHolder?.otpView?.otpLinearLayout.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"TapOtpView.backgroundColor\")))\n        doAfterSpecificTime(time = 700L) {\n            removeViews(cardViewHolder)\n            addViews(otpViewHolder)\n            otpViewHolder.otpView.visibility = VISIBLE\n\n        }\n        doAfterSpecificTime(time = 800L) { CustomUtils.showKeyboard(context) }\n        //Added to hide the Items-Amount button when OTP is opened\n        // amountViewHolder.view.amount_section.itemAmountLayout?.visibility = View.GONE\n        amountViewHolder.view.amount_section.tapChipAmount?.visibility = GONE\n\n        setOtpPhoneNumber(phoneNumber)\n        otpViewHolder.otpView.changePhone.visibility = View.INVISIBLE\n        otpViewHolder.otpView.timerText.setOnClickListener {\n            resendOTPCode(chargeResponse)\n            otpViewHolder.otpView.restartTimer()\n        }\n        amountViewHolder.view.amount_section.mainKDAmountValue.visibility = GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = GONE\n    }\n\n    private fun setOtpPhoneNumber(phoneNumber: PhoneNumber?) {\n\n        var replaced = \"\"\n        var countryCodeReplaced = \"\"\n        countryCodeReplaced = phoneNumber?.countryCode?.replace(\"0\", \"\").toString()\n        if (phoneNumber?.number?.length!! > 7)\n            replaced = (phoneNumber.number.toString()).replaceRange(1, 6, \"••••\")\n        otpViewHolder.otpView.mobileNumberText.text = \"+$countryCodeReplaced $replaced\"\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun resendOTPCode(chargeResponse: Charge?) {\n        if (chargeResponse != null) {\n            if (chargeResponse is Authorize) resendAuthorizeOTPCode(chargeResponse as Authorize?)\n            else resendChargeOTPCode(chargeResponse as Charge?)\n        }\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun resendAuthorizeOTPCode(authorize: Authorize?) {\n        cardViewModel.requestAuthenticateForAuthorizeTransaction(this, authorize)\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun resendChargeOTPCode(charge: Charge?) {\n        if (charge != null) {\n            cardViewModel.requestAuthenticateForChargeTransaction(this, charge)\n        }\n    }\n\n    private fun displayOtpTelecoms(phoneNumber: PhoneNumber?) {\n        otpTypeString = PaymentTypeEnum.telecom\n        removeViews(\n            businessViewHolder,\n            amountViewHolder,\n            paymentInlineViewHolder,\n            cardViewHolder,\n            saveCardSwitchHolder,\n            otpViewHolder\n        )\n        addViews(\n            businessViewHolder,\n            amountViewHolder,\n            cardViewHolder,\n            paymentInlineViewHolder,\n            saveCardSwitchHolder,\n            otpViewHolder\n        )\n        //Added check change listener to handle showing of extra save options\n        saveCardSwitchHolder?.view?.mainSwitch?.switchSaveMobile?.visibility = GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = GONE\n        saveCardSwitchHolder?.view?.mainSwitch?.switchSaveMobile?.setOnCheckedChangeListener { buttonView, isChecked ->\n            if (isChecked) saveCardSwitchHolder?.view?.cardSwitch?.switchesLayout?.visibility =\n                GONE\n        }\n        saveCardSwitchHolder?.setSwitchToggleData(PaymentType.telecom)\n        otpViewHolder.setMobileOtpView()\n        var replaced = \"\"\n        var countryCodeReplaced = \"\"\n        if (phoneNumber?.number?.length!! > 7)\n            replaced = (phoneNumber.number.toString()).replaceRange(1, 6, \"....\")\n        countryCodeReplaced =\n            goPayViewsHolder.goPayLoginInput.countryCodePicker.selectedCountryCode.replace(\n                \"+\",\n                \" \"\n            )\n        otpViewHolder.otpView.mobileNumberTextNormalPay.text = \"+$countryCodeReplaced$replaced\"\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.P)\n    override fun displayRedirect(url: String, authenticate: Charge?) {\n        this.redirectURL = url\n\n        println(\"redirectURL before display>>\" + url)\n        if (::redirectURL.isInitialized && ::fragmentManager.isInitialized) {\n            if (otpViewHolder.otpView.isVisible) {\n                removeViews(\n                    // businessViewHolder,\n                    cardViewHolder,\n                    paymentInlineViewHolder,\n                    otpViewHolder\n                )\n            }\n            // setSlideAnimation()\n            if (PaymentDataSource?.getWebViewType() != null && PaymentDataSource.getWebViewType() == WebViewType.REDIRECT) {\n\n                //Stopped showing closetext as requested\n                // checkoutFragment.closeText.visibility = View.VISIBLE\n                doAfterSpecificTime {\n                    removeViews(\n                        paymentInlineViewHolder,\n                        otpViewHolder,\n                        goPaySavedCardHolder,\n                        goPayViewsHolder,\n                        amountViewHolder,\n                        cardViewHolder,\n                        paymentInlineViewHolder,\n                        tabAnimatedActionButtonViewHolder\n                    )\n\n                }\n\n\n                val fragment = WebFragment.newInstance(\n                    redirectURL,\n                    this,\n                    cardViewModel,\n                    authenticate,\n                    this,\n                    isFirstTimeLoading = true,\n                    onLoadedWebView = {\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.addFadeOutAnimation(\n                            durationTime = 5,\n                            isGone = true\n                        )\n\n                        showWebView()\n                    }\n                )\n                if (!fragmentManager.isDestroyed)\n                    fragmentManager.beginTransaction()\n                        .replace(R.id.webFrameLayout, fragment, \"webFragment\")\n                        .addToBackStack(\"webFragment\")\n                        .commit()\n\n\n            } else if (PaymentDataSource?.getWebViewType() != null && PaymentDataSource.getWebViewType() == WebViewType.THREE_DS_WEBVIEW) {\n\n                webViewHolder = WebViewHolder(\n                    context,\n                    url,\n                    this,\n                    cardViewModel,\n                    authenticate,\n                    this,\n                    bottomSheetLayout,\n                    sdkLayout,\n                    saveCardSwitchHolder,\n                    paymentInlineViewHolder,\n                    cardViewHolder\n                )\n                removeViews(\n                    //  businessViewHolder,\n                    // amountViewHolder,\n                    //  cardViewHolder,\n                    //  saveCardSwitchHolder,\n                    // paymentInlineViewHolder,\n                    otpViewHolder,\n                    goPaySavedCardHolder,\n                    goPayViewsHolder\n                )\n\n                addViews(webViewHolder)\n\n\n                //            saveCardSwitchHolder?.view?.mainSwitch?.visibility = GONE\n                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                    ActionButtonState.LOADING\n                )\n                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = VISIBLE\n                saveCardSwitchHolder?.view?.cardSwitch?.tapLogoImage?.visibility = GONE\n                // checkoutFragment.closeText.visibility = GONE\n\n\n            }\n        }\n    }\n\n    private fun showWebView() {\n        animateBS(\n            fromView = bottomSheetLayout,\n            toView = sdkLayout,\n            transitionAnimation = 1000L,\n            changeHeight = {\n                webFrameLayout.visibility = VISIBLE\n            })\n    }\n\n\n    override fun displaySaveCardOptions() {\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun setBinLookupData(\n        binLookupResponse: BINLookupResponse,\n        context: Context,\n        cardViewModel: CardViewModel\n    ) {\n        paymentInlineViewHolder = PaymentInlineViewHolder(\n            context,\n            this,\n            this,\n            saveCardSwitchHolder,\n            this,\n            cardViewModel,\n        )\n        //  paymentInlineViewHolder.tabLayout.setUnselectedAlphaLevel(1.0f)\n        if (::paymentInlineViewHolder.isInitialized)\n            paymentInlineViewHolder.setCurrentBinData(binLookupResponse)\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun getDatasfromAPIs(\n        merchantData: MerchantData?,\n        paymentOptionsResponse: PaymentOptionsResponse?\n    ) {\n        println(\"if(::businessViewHolder.isInitialized getpay\" + ::businessViewHolder.isInitialized)\n        println(\"merchantData name>>\" + merchantData?.name)\n        println(\"merchantData logo>>\" + merchantData?.logo)\n        if (paymentOptionsResponse != null) {\n            this.paymentOptionsResponse = paymentOptionsResponse\n        }\n        if (::businessViewHolder.isInitialized && PaymentDataSource.getTransactionMode() != TransactionMode.TOKENIZE_CARD) {\n            businessViewHolder.setDataFromAPI(\n                merchantData?.logo,\n                merchantData?.name\n            )\n            // TODO check\n            if (merchantData?.verifiedApplication == true) {\n\n            }\n        }\n        // println(\"PaymentOptionsResponse on get$paymentOptionsResponse\")\n        allCurrencies.value =\n            (paymentOptionsResponse?.supportedCurrencies as List<SupportedCurrencies>).sortedBy { it.orderBy }\n        Log.e(\n            \"supportedCurrencyUser\",\n            SharedPrefManager.getUserLocalCurrency(context).toString()\n        )\n        cacheUserLocalCurrency()\n\n\n\n\n        savedCardList = paymentOptionsResponse?.cards\n        currencyAdapter = CurrencyTypeAdapter(this)\n        if (paymentOptionsResponse.supportedCurrencies != null && ::amountViewHolder.isInitialized) {\n            currentCurrency = paymentOptionsResponse.currency\n            val sortedList: List<SupportedCurrencies> =\n                (paymentOptionsResponse.supportedCurrencies).sortedBy { it.orderBy }\n            for (i in sortedList.indices) {\n\n                if (sortedList[i].currency == currentCurrency) {\n                    currentAmount =\n                        CurrencyFormatter.currencyFormat(sortedList[i].amount.toString())\n                    currentCurrency =\n                        sortedList[i].symbol.toString()\n\n                    currentCurrency =\n                        sortedList[i].currency.toString()\n                    currentCurrencySymbol =\n                        sortedList[i].symbol.toString()\n                    finalCurrencySymbol =\n                        sortedList[i].symbol.toString()\n                    currencySelectedForCheck = currentCurrency\n\n                    currencyAdapter.updateSelectedPosition(i)\n                }\n\n            }\n            /**\n             *Note replacing all currency to be currency symbol as per ali 17jan23\n             * **/\n            amountViewHolder.setDataFromAPI(\n                currentAmount,\n                currentCurrencySymbol,\n                PaymentDataSource.getItems()?.size.toString()\n            )\n        }\n        /**\n         * <<<<<<< This items list is going to come from API response later now for loading the view we are taking the List from\n         * PaymentDatasource.getItems()  >>>>>>>> */\n        if (PaymentDataSource.getItems() != null) {\n            itemList = PaymentDataSource.getItems()!!\n            //  unModifiedItemList = itemList\n            unModifiedItemList = itemList.map { it.copy() }\n        }\n\n\n\n\n        if (::itemsViewHolder.isInitialized) {\n            paymentOptionsResponse?.supportedCurrencies?.let {\n                itemsViewHolder.setDataFromAPI(\n                    it,\n                    PaymentDataSource.getItems()\n                )\n            }\n            //  itemsViewHolder.setItemsRecylerView()\n            //  itemsViewHolder.setCurrencyRecylerView()\n\n\n        }\n\n        merchantData?.name?.let {\n            saveCardSwitchHolder?.setDataFromAPI(\n                it,\n                paymentInlineViewHolder.selectedType\n            )\n        }\n        paymentOptionsList.value = paymentOptionsResponse?.paymentOptions\n        //println(\"paymentOptions value\" + paymentOptionsResponse?.paymentOptions)\n        if (::context.isInitialized)\n            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.N) {\n                val divider = DividerItemDecoration(\n                    context,\n                    DividerItemDecoration.HORIZONTAL\n                )\n                divider.setDrawable(ShapeDrawable().apply {\n                    intrinsicWidth = 10\n                    paint.color = Color.TRANSPARENT\n                }) // note: currently (support version 28.0.0), we can not use tranparent color here, if we use transparent, we still see a small divider line. So if we want to display transparent space, we can set color = background color or we can create a custom ItemDecoration instead of DividerItemDecoration.\n                cardViewHolder.view.mainChipgroup.chipsRecycler.addItemDecoration(divider)\n                initAdaptersAction()\n\n            }\n\n        //PaymentDataSource.setSelectedCurrency(currentCurrency, null)\n        PaymentDataSource.setSelectedCurrency(currentCurrency, currentCurrencySymbol)\n        PaymentDataSource.setSelectedAmount(currentAmount.toBigDecimal())\n\n        if (::loyaltyViewHolder.isInitialized) {\n            val objectMapper = ObjectMapper()\n            val tapLoyaltyModel: TapLoyaltyModel =\n                objectMapper.readValue(\n                    context.resources.openRawResource(R.raw.loyalty),\n                    TapLoyaltyModel::class.java\n                )\n            supportedLoyalCards.value =\n                tapLoyaltyModel.supportedCurrencies as List<LoyaltySupportedCurrency>\n            //println(\"tapLoyaltyModel>>>\" + tapLoyaltyModel.bankLogo)\n            tapLoyaltyModel.bankLogo?.let {\n                tapLoyaltyModel.bankName?.let { it1 ->\n                    loyaltyViewHolder.setDataFromAPI(\n                        it,\n                        it1,\n                        tapLoyaltyModel,\n                        supportedLoyalCards.value as List<LoyaltySupportedCurrency>\n                    )\n                }\n            }\n\n        }\n        val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n        val nowString: String = LocalizationManager.getValue(\"now\", \"ActionButton\")\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n            false,\n            LocalizationManager.getLocale(context).toString(),\n            if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                payString + \" \" + nowString\n            } else {\n                payString + \" \" + nowString\n            },\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n        )\n\n    }\n\n    fun cacheUserLocalCurrency(): Boolean {\n        val suportedCurrencyForUser = allCurrencies.value?.find {\n            it.symbol == SharedPrefManager.getUserLocalCurrency(context)?.symbol\n        }\n        return SharedPrefManager.saveModelLocally(\n            context = context,\n            dataToBeSaved = suportedCurrencyForUser,\n            keyValueToBeSaved = UserSupportedLocaleForTransactions\n        )\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun initAdaptersAction() {\n        adapter = CardTypeAdapterUIKIT(this)\n        goPayAdapter = GoPayCardAdapterUIKIT(this)\n        itemAdapter = ItemAdapter(bottomSheetLayout, headerLayout, sdkLayout)\n        // adapter?.possiblyShowGooglePayButton()\n        // val arrayList = ArrayList<String>()//Creating an empty arraylist\n        //  arrayList.add(\"Google Pay\")//Adding object in arraylist\n\n\n        //adapter.updateAdapterGooglePay(arrayList)\n        //  goPayAdapter.updateAdapterData(goPayCardList.value as List<GoPaySavedCards>)\n        if (allCurrencies.value?.isNotEmpty() == true) {\n            currencyAdapter.updateAdapterData(allCurrencies.value as List<SupportedCurrencies>)\n        }\n        if (savedCardList?.isNotEmpty() == true) {\n            println(\"savedCardList.value\" + PaymentDataSource.getCardType())\n            if (PaymentDataSource.getCardType() != null && PaymentDataSource.getCardType() != CardType.ALL) {\n                filterSavedCardTypes(savedCardList as List<SavedCard>)\n            } else adapter.updateAdapterDataSavedCard(savedCardList as List<SavedCard>)\n        } else {\n            cardViewHolder.view.mainChipgroup.groupAction?.visibility = GONE\n        }\n        //  itemsViewHolder.view.itemRecylerView.adapter = itemAdapter\n        itemsViewHolder.view.mainCurrencyChip.chipsRecycler.adapter = currencyAdapter\n        if (PaymentDataSource.getItems() != null) {\n            PaymentDataSource.getItems()?.let { itemAdapter.updateAdapterData(it) }\n        }\n        cardViewHolder.view.mainChipgroup.chipsRecycler.adapter = adapter\n        cardViewHolder.view.mainChipgroup.chipsRecycler.animation =\n            AnimationUtils.loadAnimation(context, R.anim.fall_down_animation)\n\n        cardViewHolder.view.mainChipgroup.groupAction?.setOnClickListener {\n            setMainChipGroupActionListener()\n            paymentInlineViewHolder.tapCardInputView?.clear()\n            paymentInlineViewHolder.onFocusChange(\"\")\n            paymentInlineViewHolder.tapCardInputView.setSingleCardInput(\n                CardBrandSingle.Unknown, null\n            )\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n        }\n\n        paymentOptionsWorker =\n            java.util.ArrayList<PaymentOption>(paymentOptionsResponse.paymentOptions)\n\n        filterViewModels(currentCurrency)\n        // filterModels(PaymentDataSource.getCurrency()?.isoCode.toString())\n        //  filterCardTypes(PaymentDataSource.getCurrency()?.isoCode.toString(),paymentOptionsWorker)\n\n        //    goPaySavedCardHolder.view.goPayLoginView.groupAction.setOnClickListener {\n        //       setGoPayLoginViewGroupActionListener()\n        //   }\n        //paymentInlineViewHolder.tabLayout.setOnTouchListener { v, _ ->\n        touchHandlingForCardView()\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    @SuppressLint(\"ClickableViewAccessibility\")\n    private fun touchHandlingForCardView() {\n        saveCardSwitchHolder?.view?.setOnTouchListener { v, _ ->\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n            paymentInlineViewHolder.resetView = true\n            paymentInlineViewHolder.resetTouchView()\n\n            true\n        }\n        cardViewHolder.view.cardLinearLayout.setOnTouchListener { v, _ ->\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n            paymentInlineViewHolder.resetView = true\n            paymentInlineViewHolder.resetTouchView()\n\n            true\n        }\n        amountViewHolder.view.setOnTouchListener { v, _ ->\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n            paymentInlineViewHolder.resetView = true\n            paymentInlineViewHolder.resetTouchView()\n\n            true\n        }\n        paymentInlineViewHolder.tapAlertView?.setOnTouchListener { v, _ ->\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n            paymentInlineViewHolder.resetView = true\n            paymentInlineViewHolder.resetTouchView()\n\n            true\n        }\n        paymentInlineViewHolder.tabLayout.setOnTouchListener { v, _ ->\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n            paymentInlineViewHolder.resetView = true\n            paymentInlineViewHolder.resetTouchView()\n\n            true\n        }\n        businessViewHolder.view.setOnTouchListener { v, _ ->\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n            paymentInlineViewHolder.resetView = true\n            paymentInlineViewHolder.resetTouchView()\n\n            true\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun filterCardTypes(list: ArrayList<PaymentOption>) {\n        var filteredCardList: List<PaymentOption> =\n            list.filter { items -> items.paymentType == PaymentType.CARD }\n\n        // println(\"filteredCardList value \" + filteredCardList.size)\n        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.N) {\n            paymentInlineViewHolder.setDataFromAPI(filteredCardList)\n        }\n    }\n\n    private fun filterSavedCardTypes(savedCardList: List<SavedCard>) {\n        val filteredSavedCardList: List<SavedCard> =\n            savedCardList.filter { items ->\n                items.funding == PaymentDataSource?.getCardType().toString()\n            }\n\n        adapter.updateAdapterDataSavedCard(filteredSavedCardList)\n    }\n\n\n    private fun setMainChipGroupActionListener() {\n        if (cardViewHolder.view.mainChipgroup.groupAction?.text == LocalizationManager.getValue(\n                \"close\",\n                \"Common\"\n            )\n        ) {\n            isShaking.value = false\n            adapter.updateShaking(isShaking.value ?: false)\n            goPayAdapter.updateShaking(isShaking.value ?: false)\n            cardViewHolder.view.mainChipgroup.groupAction?.text =\n                LocalizationManager.getValue(\"edit\", \"Common\")\n        } else {\n            isShaking.value = true\n            adapter.updateShaking(isShaking.value ?: true)\n            goPayAdapter.updateShaking(isShaking.value ?: true)\n            goPayAdapter.updateShaking(false)\n            cardViewHolder.view.mainChipgroup.groupAction?.text =\n                LocalizationManager.getValue(\"close\", \"Common\")\n        }\n    }\n\n    private fun setGoPayLoginViewGroupActionListener() {\n        if (goPaySavedCardHolder.view.goPayLoginView.groupAction?.text == LocalizationManager.getValue(\n                \"close\",\n                \"Common\"\n            )\n        ) {\n            isShaking.value = false\n            adapter.updateShaking(isShaking.value ?: false)\n            goPayAdapter.updateShaking(isShaking.value ?: false)\n            goPaySavedCardHolder.view.goPayLoginView.groupAction?.text =\n                LocalizationManager.getValue(\"edit\", \"Common\")\n            goPayAdapter.updateSignOut(goPayCardList.value as List<GoPaySavedCards>, false)\n\n        } else {\n            isShaking.value = true\n            adapter.updateShaking(isShaking.value ?: true)\n            Log.d(\"isShaking.value\", isShaking.value.toString())\n            goPayAdapter.updateShaking(false)\n            goPaySavedCardHolder.view.goPayLoginView.groupAction?.text =\n                LocalizationManager.getValue(\"close\", \"Common\")\n            goPayAdapter.updateSignOut(goPayCardList.value as List<GoPaySavedCards>, true)\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    @SuppressLint(\"WrongConstant\")\n    override fun didDialogueExecute(response: String, cardTypeDialog: Boolean?) {\n        // println(\"response are$response\")\n        if (response == \"YES\") {\n            if (deleteCard) {\n                selectedViewToBeDeletedFromCardViewHolder?.addLoaderWithBlurryToView(invokeAfterLoad = {\n                    cardViewModel.processEvent(\n                        CardViewEvent.DeleteSaveCardEvent,\n                        this,\n                        null,\n                        null,\n                        null,\n                        null,\n                        PaymentDataSource.getCustomer().identifier,\n                        cardId\n                    )\n                }, viewToBeBLur = selectedViewToBeDeletedFromCardViewHolder)\n\n\n            } else {\n                // println(\"else block is calle are\")\n                removeViews(goPaySavedCardHolder)\n                //  adapter.updateAdapterDataSavedCard(savedCardList.value as List<SavedCard>)\n                goPayViewsHolder.goPayopened = false\n                adapter.goPayOpenedfromMain(true)\n                adapter.updateShaking(false)\n                //cardViewHolder.view.mainChipgroup.groupAction.visibility = View.VISIBLE\n            }\n        } else if (response == \"NO\") {\n            adapter.updateShaking(false)\n            deleteCard = false\n            sdkLayout.deepForEach { isEnabled = true }\n\n        } else if (response == \"DONE\") {\n            if (cardTypeDialog == true) {\n                paymentInlineViewHolder.tapCardInputView.clear()\n                paymentInlineViewHolder.tabLayout.resetBehaviour()\n                paymentInlineViewHolder.resetPaymentCardView()\n            } else {\n                bottomSheetDialog.dismissWithAnimation\n                bottomSheetDialog.dismiss()\n            }\n        }\n    }\n\n\n    override fun deleteSelectedCardListener(delSelectedCard: DeleteCardResponse) {\n        if (delSelectedCard.deleted) {\n            savedCardsBasedCurr?.removeAt(selectedItemsDel)\n            savedCardsBasedCurr?.let { adapter.updateAdapterDataSavedCard(it) }\n            cardViewHolder.view.mainChipgroup.chipsRecycler.adapter = adapter\n            deleteCard = false\n            adapter.updateShaking(false)\n            if (savedCardList.isNullOrEmpty()) cardViewHolder.view.mainChipgroup?.groupAction?.visibility =\n                GONE\n\n            sdkLayout.deepForEach { isEnabled = true }\n\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun handleSuccessFailureResponseButton(\n        response: String,\n        authenticate: Authenticate?,\n        chargeResponse: Charge?,\n        tabAnimatedActionButton: TabAnimatedActionButton?,\n        contextSDK: Context?\n    ) {\n\n        SessionManager.setActiveSession(false)\n        println(\"response val>>\" + response)\n        println(\"tabAnimatedActionButton val>>\" + tabAnimatedActionButton)\n        println(\"save val>>\" + saveCardSwitchHolder)\n\n        /* if(chargeResponse?.status == null && response == \"tokenized\"){\n             //todo replaced authorized with chargeresponse\n             SDKSession.getListener()?.getStatusSDK(response,chargeResponse)\n         }else{\n             SDKSession.getListener()?.getStatusSDK(response,chargeResponse)\n         }*/\n\n        /*saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setDisplayMetricsTheme(\n            CustomUtils.getDeviceDisplayMetrics(\n                contextSDK as Activity\n            )\n        )*/\n\n        /***\n         * This function is  working fine as expected in case when 3ds is false\n         * i.e.  sdkSession.isRequires3DSecure(false) as no loading of url occurs direct response\n         * from the API is available.\n         * WRONG OTP scenario also handled here as similar to old sdk show user error button and\n         * close the sdk.\n         * **/\n\n\n        if (::otpViewHolder.isInitialized)\n            if (otpViewHolder.otpView.isVisible) {\n                removeViews(\n                    businessViewHolder,\n                    amountViewHolder,\n                    cardViewHolder,\n                    paymentInlineViewHolder,\n                    otpViewHolder\n                )\n            }\n        if (saveCardSwitchHolder != null) {\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = INVISIBLE\n            saveCardSwitchHolder?.view?.visibility = VISIBLE\n        }\n//        if (::checkoutFragment.isInitialized)\n//            checkoutFragment.closeText.visibility = GONE\n        println(\"chargeResponse are>>>>\" + chargeResponse?.status)\n        if (response.contains(\"failure\") || response.contains(\"Cancelled Google Pay\") && chargeResponse == null) {\n\n            if (::webFrameLayout.isInitialized) {\n                provideBackgroundtoBsLayout(8300)\n                showAnimatedButtonRegardingWebViewDismiss(\n                    viewToFadeOut = webFrameLayout,\n                    isSuccess = false\n                )\n            } else {\n                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = VISIBLE\n                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                    ActionButtonState.ERROR\n                )\n            }\n        }\n        when (chargeResponse?.status) {\n            ChargeStatus.CAPTURED, ChargeStatus.AUTHORIZED, ChargeStatus.VALID, ChargeStatus.IN_PROGRESS -> {\n                if (::webViewHolder.isInitialized) {\n                    showAnimatedButtonRegardingWebViewDismiss(viewToFadeOut = webViewHolder.view)\n                } else if (::webFrameLayout.isInitialized && webFrameLayout.isVisible) {\n                    provideBackgroundtoBsLayout(8000)\n                    showAnimatedButtonRegardingWebViewDismiss(viewToFadeOut = webFrameLayout)\n                } else {\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = VISIBLE\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                        ActionButtonState.SUCCESS\n                    )\n                }\n\n            }\n            ChargeStatus.CANCELLED, ChargeStatus.TIMEDOUT, ChargeStatus.FAILED, ChargeStatus.DECLINED, ChargeStatus.UNKNOWN,\n            ChargeStatus.RESTRICTED, ChargeStatus.ABANDONED, ChargeStatus.VOID, ChargeStatus.INVALID -> {\n\n                if (::webFrameLayout.isInitialized) {\n                    provideBackgroundtoBsLayout(8300)\n                    showAnimatedButtonRegardingWebViewDismiss(\n                        viewToFadeOut = webFrameLayout,\n                        isSuccess = false\n                    )\n                }\n\n            }\n            else -> {\n\n                if (response == \"tokenized\") {\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                        ActionButtonState.SUCCESS\n                    )\n                } else {\n                    println(\"is this called>>>\")\n                    // removeAllViews()\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = VISIBLE\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                        ActionButtonState.ERROR\n                    )\n\n\n                }\n            }\n        }\n\n\n        SessionManager.setActiveSession(false)\n        doAfterSpecificTime(4500)\n        {\n            if (::bottomSheetDialog.isInitialized)\n                bottomSheetDialog.dismiss()\n        }\n\n\n    }\n\n\n    private fun showAnimatedButtonRegardingWebViewDismiss(\n        viewToFadeOut: View,\n        isSuccess: Boolean = true,\n        tranisitionDuration: Long = 500L\n    ) {\n\n        viewToFadeOut.addFadeOutAnimation {\n            animateBS(\n                fromView = bottomSheetLayout,\n                toView = sdkLayout,\n                transitionAnimation = tranisitionDuration,\n                changeHeight = {},\n                onTransitionEnd = {\n                    doAfterSpecificTime {\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = VISIBLE\n                        if (isSuccess) {\n                            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                                ActionButtonState.SUCCESS\n                            )\n                        } else {\n                            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                                ActionButtonState.ERROR\n                            )\n                        }\n                        provideBackgroundtoBsLayout()\n                    }\n\n                },\n            )\n        }\n\n    }\n\n\n    override fun displayAsynchronousPaymentView(chargeResponse: Charge) {\n        if (chargeResponse != null) {\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n\n            removeViews(\n                // businessViewHolder,\n                amountViewHolder,\n                cardViewHolder,\n                paymentInlineViewHolder,\n                saveCardSwitchHolder\n            )\n            /*  businessViewHolder.setDataFromAPI(\n                  selectedPaymentOption.image,\n                  selectedPaymentOption.brand?.name\n              )*/\n            addViews(asynchronousPaymentViewHolder)\n\n\n            asynchronousPaymentViewHolder.setDataFromAPI(chargeResponse)\n        }\n    }\n\n    override fun resetViewHolder() {\n        adapter.resetSelection()\n        cardViewHolder?.cardInfoHeaderText.text =\n            LocalizationManager.getValue(\"cardSectionTitleOr\", \"TapCardInputKit\")\n        unActivateActionButton()\n    }\n\n    private fun removeViews(vararg viewHolders: TapBaseViewHolder?, onRemoveEnd: () -> Unit = {}) {\n        animateBS(\n            fromView = bottomSheetLayout,\n            toView = sdkLayout,\n            transitionAnimation = 100L,\n            changeHeight = {\n                viewHolders.forEach {\n                    if (::sdkLayout.isInitialized) {\n                        if (it is PaymentInlineViewHolder) {\n                            removePaymentInlineShrinkageAndDimmed()\n                        }\n                        sdkLayout.removeView(it?.view)\n                        provideBackgroundtoBsLayout()\n                        onRemoveEnd.invoke()\n                    }\n                }\n\n            })\n    }\n\n\n    private fun addViews(\n        vararg viewHolders: TapBaseViewHolder?,\n        afterAddingViews: () -> Unit = {}\n    ) {\n\n        animateBS(fromView = bottomSheetLayout, toView = sdkLayout, changeHeight = {\n            viewHolders.forEach {\n                if (::sdkLayout.isInitialized) {\n                    sdkLayout.removeView(it?.view)\n                    provideBackgroundtoBsLayout()\n                    sdkLayout.addView(it?.view)\n\n\n                }\n            }\n            afterAddingViews.invoke()\n        })\n\n    }\n\n\n    fun provideBackgroundtoBsLayout(levelDuration: Int = 7500) {\n        /**\n         * needed to be enhanced according to the bottomSheetAnimation .\n         *\n         */\n        bottomSheetLayout.background = context.resources.getDrawable(R.drawable.bkgd_level)\n        bottomSheetLayout.backgroundTintList =\n            ColorStateList.valueOf(loadAppThemManagerFromPath(AppColorTheme.GlobalValuesColor))\n        bottomSheetLayout.background.level = levelDuration\n    }\n\n\n    fun unActivateActionButton() {\n        val payNowString: String\n\n        when (PaymentDataSource.getTransactionMode()) {\n            TransactionMode.TOKENIZE_CARD -> payNowString = LocalizationManager.getValue(\n                \"pay\",\n                \"ActionButton\"\n            )\n            //TODO stopped since checkout won't have SAVE_CARD -so not available in Localization\n            /*TransactionMode.SAVE_CARD -> payString = LocalizationManager.getValue(\n                \"savecard\",\n                \"ActionButton\"\n            )*/\n            TransactionMode.SAVE_CARD -> payNowString = \"SAVE CARD\"\n            else -> {\n                val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n                val nowString: String = LocalizationManager.getValue(\"now\", \"ActionButton\")\n                payNowString = payString + \" \" + nowString\n            }\n        }\n\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n            false,\n            LocalizationManager.getLocale(context).toString(),\n            if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                payNowString\n            } else {\n                payNowString\n            },\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n        )\n\n        // saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.IDLE)\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isActivated = false\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isClickable = false\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isEnabled = false\n    }\n\n\n    fun resetCardSelection() {\n        adapter.resetSelection()\n    }\n\n    @SuppressLint(\"ClickableViewAccessibility\")\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onCardSelectedAction(isSelected: Boolean, savedCardsModel: Any?) {\n\n        unActivateActionButton()\n\n        when (savedCardsModel) {\n            is SavedCard -> {\n                Bugfender.d(\n                    CustomUtils.tagEvent,\n                    \"Saved card selected :\" + savedCardsModel.lastFour + \"&\" + savedCardsModel.id\n                )\n                /**\n                 * Clear card input text auto focus\n                 */\n                paymentInlineViewHolder.tapCardInputView.clear()\n                paymentInlineViewHolder.clearCardInputAction()\n\n                paymentInlineViewHolder.setDataForSavedCard(\n                    savedCardsModel,\n                    CardInputUIStatus.SavedCard\n                )\n\n                cardViewHolder.view.cardInfoHeaderText.visibility = VISIBLE\n                cardViewHolder.view.cardInfoHeaderText.text =\n                    LocalizationManager.getValue(\"savedCardSectionTitle\", \"TapCardInputKit\")\n\n                isSavedCardSelected = true\n                Bugfender.d(\n                    CustomUtils.tagEvent,\n                    \"Payment scheme selected: title :\" + savedCardsModel?.brand + \"& ID :\" + savedCardsModel.paymentOptionIdentifier\n                )\n                unActivateActionButton()\n            }\n            else -> {\n                if (savedCardsModel != null) {\n                    if ((savedCardsModel as PaymentOption).paymentType == PaymentType.WEB) {\n\n                        showShrinkageForPaymentInline()\n                        PaymentDataSource.setWebViewType(WebViewType.REDIRECT)\n                        activateActionButton((savedCardsModel as PaymentOption))\n                        setPayButtonAction(PaymentType.WEB, savedCardsModel)\n                    } else if ((savedCardsModel as PaymentOption).paymentType == PaymentType.GOOGLE_PAY) {\n                        showShrinkageForPaymentInline()\n                        activateActionButton((savedCardsModel as PaymentOption))\n                        setPayButtonAction(PaymentType.GOOGLE_PAY, savedCardsModel)\n                        PaymentDataSource.setWebViewType(WebViewType.THREE_DS_WEBVIEW)\n                    }\n                    /**\n                     * needed to reset these setOnclick listener after refactoring\n                     * the payment Inline :S :S to avaid multible onClickListener .\n                     */\n                    paymentInlineViewHolder.intertabLayout.getTabAt(0)?.view?.setOnClickListener {\n                        performResetToPaymentInline()\n                    }\n                    paymentInlineViewHolder.tabLayout.getChildAt(0).setOnClickListener {\n                        performResetToPaymentInline()\n                    }\n                    paymentInlineViewHolder.mainLinear?.setOnTouchListener { view, motionEvent ->\n                        performResetToPaymentInline()\n                        return@setOnTouchListener true\n                    }\n                } else\n\n                    displayGoPayLogin()\n            }\n        }\n    }\n\n    private fun performResetToPaymentInline() {\n        resetViewToPaymentInline()\n        resetCardSelection()\n        unActivateActionButton()\n        if (paymentInlineViewHolder.cvvNumber?.length == 3) {\n            with(paymentInlineViewHolder) {\n                if (this.savedCardsModel != null) {\n                    onPayCardCompleteAction(\n                        true,\n                        PaymentType.SavedCard,\n                        cardNumber,\n                        expiryDate,\n                        cvvNumber!!,\n                        cardHolderName,\n                        this.savedCardsModel?.brand?.name,\n                        this.savedCardsModel\n                    )\n                } else {\n                    onPayCardCompleteAction(\n                        true,\n                        PaymentType.CARD,\n                        cardNumber,\n                        expiryDate,\n                        cvvNumber!!,\n                        cardHolderName,\n                        PaymentDataSource?.getBinLookupResponse()?.scheme?.cardBrand?.rawValue,\n                        this.savedCardsModel\n                    )\n                }\n\n            }\n        }\n    }\n\n    @SuppressLint(\"ClickableViewAccessibility\")\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun showShrinkageForPaymentInline() {\n        paymentInlineViewHolder.mainLinear?.addShrinkAnimation(\n            xDirection = 0.9f,\n            yDirection = 0.9f,\n            isDimmed = true\n        )\n        cardViewHolder.cardInfoHeaderText.addShrinkAnimation(\n            xDirection = 0.9f,\n            yDirection = 1f,\n            isDimmed = true\n        )\n        paymentInlineViewHolder.tapCardInputView.hideCursor()\n        paymentInlineViewHolder.mainLinear?.deepForEach {\n               isClickable=false\n        }\n\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun resetViewToPaymentInline() {\n        paymentInlineViewHolder.tapCardInputView.showCursor()\n        cardViewHolder.cardInfoHeaderText.addShrinkAnimation(\n            xDirection = 1f,\n            yDirection = 1f,\n            isDimmed = false\n        )\n        paymentInlineViewHolder.mainLinear?.addShrinkAnimation(\n            xDirection = 1f,\n            yDirection = 1f,\n            isDimmed = false\n        )\n    }\n\n\n    private fun activateActionButton(\n        paymentOptObject: PaymentOption? = null,\n        cardBrandString: String? = null\n    ) {\n        val payStringButton: String\n\n        provideBackgroundtoBsLayout()\n        when (PaymentDataSource.getTransactionMode()) {\n            TransactionMode.TOKENIZE_CARD -> payStringButton = LocalizationManager.getValue(\n                \"pay\",\n                \"ActionButton\"\n            )\n            //TODO stopped since checkout won't have SAVE_CARD -so not available in Localization\n            /* TransactionMode.SAVE_CARD -> payString = LocalizationManager.getValue(\n                 \"savecard\",\n                 \"ActionButton\"\n             )*/  TransactionMode.SAVE_CARD -> payStringButton = \"SAVE CARD\"\n            else -> {\n                val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n                val nowString: String = LocalizationManager.getValue(\"now\", \"ActionButton\")\n\n                payStringButton = payString + \" \" + nowString\n            }\n        }\n\n        println(\"cardBrandString before \" + cardBrandString)\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n            logicTogetButtonStyle(paymentOptObject, payStringButton, cardBrandString)\n        }\n\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun logicTogetButtonStyle(\n        paymentOptObject: PaymentOption?,\n        payString: String,\n        cardBrandString: String?\n    ) {\n\n        var selectedPayOpt: PaymentOption? = null\n\n        if (cardBrandString != null && cardBrandString != \"Unknown\") {\n            selectedPayOpt = logicTogetPayOptions(cardBrandString)\n\n        } else selectedPayOpt = paymentOptObject\n\n        //  println(\"selectedPayOpt are\"+selectedPayOpt)\n        var bgArrayList: ArrayList<String>? = arrayListOf()\n\n        when (CustomUtils.getCurrentTheme()) {\n            ThemeMode.dark.name -> {\n                if (selectedPayOpt?.buttonStyle?.background?.darkModel?.backgroundColors?.size == 1) {\n                    colorBackGround =\n                        selectedPayOpt.buttonStyle?.background?.darkModel?.backgroundColors?.get(0)\n                }\n                intColorArray = null\n            }\n            ThemeMode.dark_colored.name -> {\n                if (selectedPayOpt?.buttonStyle?.background?.darkModel?.backgroundColors?.size == 1) {\n                    colorBackGround =\n                        selectedPayOpt.buttonStyle?.background?.darkModel?.backgroundColors?.get(0)\n                }\n                intColorArray = null\n            }\n            ThemeMode.light.name -> {\n                bgArrayList = selectedPayOpt?.buttonStyle?.background?.lightModel?.backgroundColors\n                if (bgArrayList?.size == 1) {\n                    colorBackGround = bgArrayList[0]\n                    intColorArray = null\n                } else {\n\n                    if (bgArrayList?.size == 2) {\n                        startColor = bgArrayList.get(0).replace(\"0x\", \"#\")\n                        endColor = bgArrayList.get(1).replace(\"0x\", \"#\")\n\n                        intColorArray =\n                            intArrayOf(Color.parseColor(startColor), Color.parseColor(endColor))\n                        colorBackGround = \"0\"\n\n                    } else if (bgArrayList?.size == 3) {\n                        startColor = bgArrayList[2].replace(\"0x\", \"#\")\n\n                        middleColor = bgArrayList[1].replace(\"0x\", \"#\")\n                        endColor = bgArrayList[0].replace(\"0x\", \"#\")\n\n                        intColorArray = intArrayOf(\n                            Color.parseColor(startColor),\n                            Color.parseColor(middleColor),\n                            Color.parseColor(endColor)\n                        )\n                        colorBackGround = \"0\"\n\n                    }\n                }\n            }\n            ThemeMode.light_mono.name -> {\n                println(\"see\")\n            }\n        }\n\n\n\n\n\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.removeAllViewsInLayout()\n        if (CustomUtils.getCurrentTheme() == ThemeMode.light.name || CustomUtils.getCurrentTheme() == ThemeMode.light_mono.name ){\n            if (bgArrayList?.isNotEmpty() == true){\n                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n                    true,\n                    LocalizationManager.getLocale(context).language,\n                    payString,\n                    if (colorBackGround.equals(\"0\") || colorBackGround == null) 0 else Color.parseColor(\n                        colorBackGround\n                    ),\n                    Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.titleLabelColor\")),\n                    intColorArray\n                )\n            }\n        }else{\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n                true,\n                LocalizationManager.getLocale(context).language,\n                payString,\n                if (colorBackGround.equals(\"0\") || colorBackGround == null) 0 else Color.parseColor(\n                    colorBackGround\n                ),\n                Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.titleLabelColor\")),\n                intColorArray\n            )\n        }\n\n\n\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.clearFocus()\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.clearAnimation()\n\n        image = ImageView(context)\n        val params = LinearLayout.LayoutParams(\n            LinearLayout.LayoutParams.MATCH_PARENT,\n            LinearLayout.LayoutParams.MATCH_PARENT\n        )\n        /**\n         *work around condition for small logo of knet , set margins according to design figma*/\n        if (CustomUtils.getCurrentLocale(context).contains(\"ar\")) {\n\n            params.setMargins(\n                MetricsUtil.convertDpToPixel(100f, context).toInt(),\n                MetricsUtil.convertDpToPixel(5f, context).toInt(),\n                MetricsUtil.convertDpToPixel(100f, context).toInt(),\n                MetricsUtil.convertDpToPixel(5f, context).toInt()\n            )\n\n        } else {\n            if (selectedPayOpt?.brand?.contains(\"KNET\") == true) params.setMargins(\n                MetricsUtil.convertDpToPixel(\n                    80f,\n                    context\n                ).toInt(),\n                MetricsUtil.convertDpToPixel(5f, context).toInt(),\n                MetricsUtil.convertDpToPixel(80f, context).toInt(),\n                MetricsUtil.convertDpToPixel(5f, context).toInt()\n            )\n            else\n                params.setMargins(\n                    MetricsUtil.convertDpToPixel(108f, context).toInt(),\n                    MetricsUtil.convertDpToPixel(10f, context).toInt(),\n                    MetricsUtil.convertDpToPixel(108f, context).toInt(),\n                    MetricsUtil.convertDpToPixel(10f, context).toInt()\n                )\n\n\n        }\n\n        image?.layoutParams = params\n        Glide.with(context)\n            .load(\n                getAssetName(\n                    selectedPayOpt\n                )\n            ).fitCenter()\n            .diskCacheStrategy(DiskCacheStrategy.ALL)\n            .into(image!!)\n\n\n        //  println(\"asset size\"+getAssetName(selectedPaymentOption))\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.addChildView(image!!)\n\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isActivated = true\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isClickable = true\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isEnabled = true\n\n    }\n\n    private fun logicTogetPayOptions(cardBrandString: String?): PaymentOption? {\n        //  println(\"cardBrandString inn>>>>\"+cardBrandString)\n        var selectedPayOption: PaymentOption? = null\n        var slectedBrand: String? = null\n        for (i in 0 until paymentOptionsResponse.paymentOptions.size) {\n            slectedBrand = paymentOptionsResponse.paymentOptions[i].brand?.replace(\"_\", \"\")\n            if (slectedBrand == cardBrandString?.replace(\"_\", \"\")?.toUpperCase()) {\n                selectedPayOption = paymentOptionsResponse.paymentOptions[i]\n            }\n        }\n        // println(\"selectedPayOption>>\"+selectedPayOption)\n\n        return selectedPayOption\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    @SuppressLint(\"WrongConstant\")\n    private fun onClickRedirect(savedCardsModel: Any) {\n        /**\n         * on Click Redirect for Knet Redirection\n         */\n\n        amountViewHolder.view.amount_section?.tapChipPopup?.slideFromLeftToRight()\n        val viewsToDisable = mutableListOf<View>(\n            cardViewHolder.view.mainChipgroup.chipsRecycler as View,\n            paymentInlineViewHolder.tapCardInputView.backArrow as View,\n            amountViewHolder.view.amount_section.constraint,\n            amountViewHolder.view.amount_section.tapChipAmount,\n            cardViewHolder.view,\n            cardViewHolder.view.mainChipgroup,\n            paymentInlineViewHolder.tapCardInputView,\n            paymentInlineViewHolder.view,\n            paymentInlineViewHolder.nfcButton as View,\n            paymentInlineViewHolder.scannerButton as View,\n            saveCardSwitchHolder?.view as View,\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton as View\n        )\n\n        viewsToDisable.disableViews()\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n\n        doAfterSpecificTime {\n            selectedPaymentOption = savedCardsModel as PaymentOption\n            cardViewModel.processEvent(\n                CardViewEvent.ChargeEvent,\n                this,\n                selectedPaymentOption,\n                null,\n                null,\n                null\n            )\n            if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains(\"dark\")) {\n                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(\n                    backgroundColor = Color.parseColor(\n                        savedCardsModel.buttonStyle?.background?.darkModel?.baseColor\n                    )\n                )\n\n            } else saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(\n                backgroundColor = Color.parseColor(savedCardsModel.buttonStyle?.background?.lightModel?.baseColor)\n            )\n\n            saveCardSwitchHolder?.view?.mainSwitch?.mainTextSave?.visibility = View.INVISIBLE\n\n            mutableListOf(\n                amountViewHolder.view,\n                cardViewHolder.view,\n                paymentInlineViewHolder.view,\n                tabAnimatedActionButtonViewHolder!!.view\n            ).addFadeOutAnimationToViews {\n                translateHeightAnimationForWebViews()\n            }\n\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun onClickCardPayment(savedCardsModel: Any?) {\n        removeVisibilityOfSwitch()\n        PaymentDataSource.setWebViewType(WebViewType.THREE_DS_WEBVIEW)\n        amountViewHolder.view.amount_section?.tapChipPopup?.slideFromLeftToRight()\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n\n        doAfterSpecificTime {\n            savedCardsModel as PaymentOption\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n            if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains(\"dark\")) {\n                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(\n                    backgroundColor = Color.parseColor(\n                        savedCardsModel.buttonStyle?.background?.darkModel?.baseColor\n                    )\n                )\n            } else saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(\n                backgroundColor = Color.parseColor(savedCardsModel.buttonStyle?.background?.lightModel?.baseColor)\n            )\n            if (paymentInlineViewHolder.cardInputUIStatus == CardInputUIStatus.NormalCard) {\n                paymentInlineViewHolder.paymentInputContainer.applyBluryToView()\n                with(cardViewHolder.view.mainChipgroup) {\n                    val viewsToFadeOut = mutableListOf<View>(\n                        chipsRecycler,\n                        groupAction,\n                        groupName,\n                    )\n                    if (paymentInlineViewHolder.cardInputUIStatus == CardInputUIStatus.NormalCard) {\n                        viewsToFadeOut.add(amountViewHolder.view)\n                    }\n                    doAfterSpecificTime(time = 100L) {\n\n                        viewsToFadeOut.addFadeOutAnimationToViews(onAnimationStart = {\n                            paymentInlineViewHolder.paymentInputContainer.applyBluryToView()\n                        }, durationTime = 500, onAnimationEnd = {\n                            animateBS(\n                                fromView = bottomSheetLayout,\n                                toView = sdkLayout,\n                                transitionAnimation = 500, changeHeight = {})\n                        }, headerLayout = headerLayout)\n\n                        if (isSavedCardSelected == true) {\n                            cardViewModel.processEvent(\n                                event = CardViewEvent.CreateTokenExistingCardEvent,\n                                viewModel = this@CheckoutViewModel,\n                                createTokenWithExistingCardRequest = paymentInlineViewHolder.getSavedCardData()\n                            )\n\n                        } else {\n                            cardViewModel.processEvent(\n                                event = CardViewEvent.CreateTokenEvent,\n                                viewModel = this@CheckoutViewModel,\n                                cardDataRequest = paymentInlineViewHolder.getCard(),\n                                saveCardValue = paymentInlineViewHolder.tapInlineCardSwitch?.switchSaveCard?.isChecked\n                            )\n                        }\n                    }\n\n                }\n\n            }\n\n        }\n\n\n    }\n\n    private fun removeVisibilityOfSwitch() {\n        saveCardSwitchHolder?.view?.mainSwitch?.visibility = GONE\n        paymentInlineViewHolder?.tapInlineCardSwitch?.addFadeOutAnimation()\n        animateBS(\n            fromView = bottomSheetLayout,\n            toView = sdkLayout,\n            transitionAnimation = 500, changeHeight = {})\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onDeleteIconClicked(\n        stopAnimation: Boolean,\n        itemId: Int,\n        cardId: String,\n        maskedCardNumber: String,\n        arrayListSavedCardSize: ArrayList<SavedCard>,\n        selectedViewToBeDeleted: ViewGroup,\n        viewtoBeBlur: View,\n        position: Int\n    ) {\n        this.cardId = cardId\n        selectedViewToBeDeletedFromCardViewHolder = selectedViewToBeDeleted\n        viewToBeBlurCardViewHolder = viewtoBeBlur\n        selectedItemsDel = itemId\n        cardIDToBeDeleted = position\n        if (stopAnimation) {\n            stopDeleteActionAnimation(itemId, maskedCardNumber, arrayListSavedCardSize)\n        } else {\n            cardViewHolder.view.mainChipgroup.groupAction?.text = LocalizationManager.getValue(\n                \"close\",\n                \"Common\"\n            )\n            deleteCard = false\n        }\n\n    }\n\n    private fun stopDeleteActionAnimation(\n        itemId: Int,\n        maskedCardNumber: String,\n        arrayListSavedCardSizes: ArrayList<SavedCard>\n    ) {\n        isShaking.value = false\n        cardViewHolder.view.mainChipgroup.groupAction?.text = LocalizationManager.getValue(\n            \"GatewayHeader\",\n            \"HorizontalHeaders\",\n            \"rightTitle\"\n        )\n        val title: String = LocalizationManager.getValue(\"title\", \"DeleteCard\")\n        val message: String = LocalizationManager.getValue(\n            \"message\",\n            \"DeleteCard\"\n        )\n        CustomUtils.showDialog(\n            \"$title\",\n            \"${message.replace(\"%@\", maskedCardNumber)} \",\n            context,\n            4,\n            this, null, null, false\n        )\n\n        selectedItemsDel = itemId\n        deleteCard = true\n        this.arrayListSavedCardSize = arrayListSavedCardSizes\n        sdkLayout.deepForEach { isEnabled = false }\n\n    }\n\n    override fun onGoPayLogoutClicked(isClicked: Boolean) {\n        if (isClicked) CustomUtils.showDialog(\n            LocalizationManager.getValue(\"goPaySignOut\", \"GoPay\"), LocalizationManager.getValue(\n                \"goPaySaveCards\",\n                \"GoPay\"\n            ), context, 2, this, null, null, false\n        )\n    }\n\n    override fun onEditClicked(isClicked: Boolean) {\n        if (isClicked) {\n            adapter.updateShaking(true)\n            goPayAdapter.updateShaking(true)\n        } else {\n            adapter.updateShaking(false)\n            goPayAdapter.updateShaking(false)\n        }\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onGooglePayClicked(isClicked: Boolean) {\n        println(\"onGooglePayClicked>>>\" + isClicked)\n        // checkoutFragment.checkOutActivity?.handleGooglePayApiCall(savedCardsModel as PaymentOption)\n\n    }\n\n    override fun removePaymentInlineShrinkageAndDimmed() {\n        resetViewToPaymentInline()\n    }\n\n\n    override fun onPayCardSwitchAction(\n        isCompleted: Boolean,\n        paymentType: PaymentType,\n        cardBrandString: String?\n    ) {\n        println(\"isCompleted???\" + isCompleted)\n        //todo add validations from api when cvv is valid the only  activate ActionButton\n        if (isCompleted) {\n            businessViewHolder.view?.headerView.constraint.visibility = VISIBLE\n            saveCardSwitchHolder?.view?.mainSwitch?.visibility = GONE\n            saveCardSwitchHolder?.view?.mainSwitch?.switchSaveMobile?.visibility = GONE\n            saveCardSwitchHolder?.setSwitchToggleData(paymentType)\n            loyaltyViewHolder.view.loyaltyView?.constraintLayout?.visibility = VISIBLE\n            // loyatFlag = true\n            /**\n             * @TODO:  Will be enabled when coming from API directly\n             */\n            //  initLoyaltyView() // Will be enabled when coming from API directly\n            activateActionButton(cardBrandString = cardBrandString)\n            paymentActionType = paymentType\n        } else {\n            saveCardSwitchHolder?.view?.mainSwitch?.switchSaveMobile?.visibility = GONE\n            saveCardSwitchHolder?.setSwitchToggleData(paymentType)\n            unActivateActionButton()\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onPayCardCompleteAction(\n        isCompleted: Boolean,\n        paymentType: PaymentType,\n        cardNumber: String?,\n        expiryDate: String?,\n        cvvNumber: String?, holderName: String?, cardBrandString: String?, savedCardsModel: Any?\n\n    ) {\n        println(\"isCompleted aaa\" + isCompleted)\n        println(\"cardBrandString aaa\" + cardBrandString)\n        println(\"cardNumber aaa\" + cardNumber)\n        println(\"cardInput status>>\" + paymentInlineViewHolder.cardInputUIStatus)\n        println(\"paymentTypeEnum status>>\" + paymentType)\n        println(\"savedCardsModel status>>\" + savedCardsModel)\n\n        if (isCompleted) {\n            activateActionButton(cardBrandString = cardBrandString)\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n        }\n        if (savedCardsModel != null) {\n            setPayButtonAction(paymentType, savedCardsModel)\n        } else {\n            val typedCardModel = logicTogetPayOptions(cardBrandString)\n            setPayButtonAction(paymentType, typedCardModel)\n        }\n\n    }\n\n    override fun onPaymentCardIsLoyaltyCard(isLoyaltyCard: Boolean) {\n        //Todo logic for loyalty card\n    }\n\n    // Override function to open NFC fragment and scan the card via NFC.\n    override fun onClickNFC() {\n\n        removeViews(\n            //businessViewHolder,\n            // amountViewHolder,\n            // cardViewHolder,\n            paymentInlineViewHolder,\n            saveCardSwitchHolder,\n            otpViewHolder,\n            goPaySavedCardHolder,\n            goPayViewsHolder\n        )\n        frameLayout.visibility = VISIBLE\n        //  addViews(businessViewHolder, amountViewHolder)\n\n        cardViewHolder.view.visibility = GONE\n        fragmentManager\n            .beginTransaction()\n            .replace(R.id.fragment_container_nfc_lib, nfcFragment)\n            .commit()\n        /* fragmentManager.beginTransaction().remove(InlineViewFragment()).replace(\n             R.id.fragment_container_nfc_lib,\n             nfcFragment\n         ).commit()*/\n        isNFCOpened = true\n        checkoutFragment.isNfcOpened = true\n        amountViewHolder.changeGroupAction(false)\n        val bottomSheet: FrameLayout? =\n            bottomSheetDialog.findViewById(com.google.android.material.R.id.design_bottom_sheet)\n        BottomSheetBehavior.from(bottomSheet as View).state = BottomSheetBehavior.STATE_EXPANDED\n        checkSelectedAmountInitiated()\n    }\n\n\n    // Override function to open card Scanner and scan the card.\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onClickCardScanner(scannerClicked: Boolean) {\n        //setSlideAnimation()\n        removeViews(\n            //businessViewHolder,\n            // amountViewHolder,\n            //cardViewHolder,\n            saveCardSwitchHolder,\n            paymentInlineViewHolder,\n            otpViewHolder,\n            goPaySavedCardHolder,\n            goPayViewsHolder\n        )\n        amountViewHolder.readyToScanVisibility(scannerClicked)\n        // addViews(businessViewHolder, amountViewHolder)\n        inLineCardLayout.visibility = VISIBLE\n        cardViewHolder.view.visibility = GONE\n        FrameManager.getInstance().frameColor = Color.WHITE\n        // Use\n        //  val bottomSheet: FrameLayout? = bottomSheetDialog.findViewById(com.google.android.material.R.id.design_bottom_sheet)\n        //  BottomSheetBehavior.from(bottomSheet as View).state = BottomSheetBehavior.STATE_EXPANDED\n        //   bottomSheetDialog.behavior.state = BottomSheetBehavior.STATE_EXPANDED\n\n        fragmentManager\n            .beginTransaction()\n            .replace(R.id.inline_container, inlineCamerFragment)\n            .commit()\n\n        isInlineOpened = true\n        checkoutFragment.isScannerOpened = true\n\n        amountViewHolder.changeGroupAction(false)\n        val bottomSheet: FrameLayout? =\n            bottomSheetDialog.findViewById(com.google.android.material.R.id.design_bottom_sheet)\n        BottomSheetBehavior.from(bottomSheet as View).state = BottomSheetBehavior.STATE_EXPANDED\n        checkSelectedAmountInitiated()\n    }\n\n    private fun checkSelectedAmountInitiated() {\n        if (this::selectedAmount.isInitialized && this::selectedCurrency.isInitialized) {\n            amountViewHolder.updateSelectedCurrency(\n                displayItemsOpen,\n                selectedAmount, selectedCurrency,\n                currentAmount, currentCurrency, currentCurrencySymbol\n            )\n        }\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onCurrencyClicked(\n        currencySelected: String,\n        currencyRate: BigDecimal,\n        totalSelectedAmount: BigDecimal,\n        previousSelectedCurrency: String,\n        selectedCurrencySymbol: String\n    ) {\n\n        /**\n         * case currencyClicked @TODO:EGP /\n         */\n\n        currencyOldRate = currencyRate\n        lastSelectedCurrency = previousSelectedCurrency\n        if (::unModifiedItemList.isInitialized)\n            println(\"unModifiedItemList\" + unModifiedItemList)\n        if (::itemList.isInitialized) {\n            for (i in itemList.indices) {\n                itemList[i].amount = unModifiedItemList[i].amount?.times(currencyRate)\n                //itemList[i].totalAmount = currencyOldRate?.div(currencyRate)\n                itemList[i].totalAmount =\n                    unModifiedItemList[i].getPlainAmount()?.times(currencyRate)\n\n\n                println(\"item per unit >>\" + itemList[i].amount)\n\n\n            }\n\n            itemsViewHolder.view.itemRecylerView.adapter = itemAdapter\n            itemAdapter.updateAdapterData(itemList)\n\n        }\n\n        //  itemList[i].amount = (list[i].amount.toLong())\n        //  itemList[i].currency = currencySelected\n\n        selectedAmount = CurrencyFormatter.currencyFormat(totalSelectedAmount.toString())\n        selectedCurrency = currencySelected\n        currencySelectedForCheck = currencySelected\n        selectedTotalAmount = selectedAmount\n\n        /**\n         * Logic based on currency synbol , actual currency code etc note currentCurrency and finalCurrencySymbol passed in\n         * if-else separately ***/\n\n        if (selectedCurrencySymbol.length == 2) {\n            amountViewHolder.updateSelectedCurrency(\n                displayItemsOpen,\n                selectedAmount, selectedCurrency,\n                currentAmount, currentCurrency, selectedCurrencySymbol\n            )\n            //  PaymentDataSource.setSelectedCurrency(selectedCurrency = selectedCurrency, null) // changed from null to symbol\n            PaymentDataSource.setSelectedCurrency(selectedCurrency, selectedCurrencySymbol)\n            //  PaymentDataSource.setSelectedCurrency(selectedCurrency = selectedCurrencySymbol, selectedCurrencySymbol) //commented\n\n        } else {\n            amountViewHolder.updateSelectedCurrency(\n                displayItemsOpen,\n                selectedAmount, selectedCurrency,\n                currentAmount, finalCurrencySymbol, selectedCurrencySymbol\n            )\n            PaymentDataSource.setSelectedCurrency(selectedCurrency, selectedCurrencySymbol)\n\n        }\n        currentCurrencySymbol = selectedCurrencySymbol\n\n\n        // PaymentDataSource.setSelectedCurrency(selectedCurrency = selectedCurrency)\n        PaymentDataSource.setSelectedAmount(currencyRate)\n        if (paymentInlineViewHolder.tapCardInputView.isNotEmpty()) {\n            paymentInlineViewHolder.tapCardInputView.clear()\n            paymentInlineViewHolder.tapAlertView?.fadeVisibility(GONE, 500)\n            paymentInlineViewHolder.acceptedCardText.visibility = VISIBLE\n            paymentInlineViewHolder.tabLayout.resetBehaviour()\n        }\n\n        adapter.resetSelection()\n\n        if (::selectedCurrency.isInitialized) {\n            println(\"selectedCurrency he\" + selectedCurrency)\n            Bugfender.d(CustomUtils.tagEvent, \"Currency changed to : \" + selectedCurrencySymbol)\n            filterViewModels(selectedCurrency)\n        } else {\n            filterViewModels(currentCurrency)\n            //Bugfender.d(\"Currency changed to : \"+currentCurrency ,CustomUtils.tagEvent)\n\n        }\n\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun submitNewLocalCurrency(\n        currencySelected: String,\n        currencyRate: BigDecimal,\n        totalSelectedAmount: BigDecimal,\n        selectedCurrencySymbol: String\n    ) {\n\n\n        currencyOldRate = currencyRate\n        if (::unModifiedItemList.isInitialized)\n            println(\"unModifiedItemList\" + unModifiedItemList)\n        if (::itemList.isInitialized) {\n            for (i in itemList.indices) {\n                itemList[i].amount = unModifiedItemList[i].amount?.times(currencyRate)\n                //itemList[i].totalAmount = currencyOldRate?.div(currencyRate)\n                itemList[i].totalAmount =\n                    unModifiedItemList[i].getPlainAmount()?.times(currencyRate)\n\n\n            }\n\n            itemsViewHolder.view.itemRecylerView.adapter = itemAdapter\n            itemAdapter.updateAdapterData(itemList)\n\n        }\n\n        //  itemList[i].amount = (list[i].amount.toLong())\n        //  itemList[i].currency = currencySelected\n\n        selectedAmount = CurrencyFormatter.currencyFormat(totalSelectedAmount.toString())\n        if (currencySelected != null) {\n            selectedCurrency = currencySelected\n        }\n        selectedTotalAmount = selectedAmount\n\n\n        /**\n         * Why this check present ??!!  :\n         * Ans- This is logic to check symbol of currency was 2 digit or 3 like kwd or kd/\n         */\n        if (selectedCurrencySymbol.length == 2) {\n            amountViewHolder.updateSelectedCurrency(\n                displayItemsOpen,\n                selectedAmount,\n                selectedCurrency,\n                currentAmount,\n                currentCurrency,\n                selectedCurrencySymbol,\n                isChangingCurrencyFromOutside = true\n            )\n            //  PaymentDataSource.setSelectedCurrency(selectedCurrency = selectedCurrency, null) // changed from null to symbol\n            PaymentDataSource.setSelectedCurrency(selectedCurrency, selectedCurrencySymbol)\n            //  PaymentDataSource.setSelectedCurrency(selectedCurrency = selectedCurrencySymbol, selectedCurrencySymbol) //commented\n\n        } else {\n            amountViewHolder.updateSelectedCurrency(\n                true,\n                selectedAmount,\n                selectedCurrency,\n                currentAmount,\n                finalCurrencySymbol,\n                selectedCurrencySymbol,\n                isChangingCurrencyFromOutside = true\n            )\n            PaymentDataSource.setSelectedCurrency(selectedCurrency, selectedCurrencySymbol)\n\n        }\n        currentCurrencySymbol = selectedCurrencySymbol\n\n        Log.e(\"itemList\", itemList.toString())\n        val sortedList: List<SupportedCurrencies> =\n            (paymentOptionsResponse.supportedCurrencies).sortedBy { it.orderBy }\n        sortedList.forEachIndexed { index, supportedCurrencies ->\n            /**\n             * here we update selected currency flag to be rounded corner\n             */\n            if (supportedCurrencies.currency == selectedCurrency) {\n                currencyAdapter.updateSelectedPosition(index)\n            }\n            /**\n             * here we update currency selected check to avoid it's appearance when selected currency is same\n             */\n            CheckoutViewModel.currencySelectedForCheck = selectedCurrency\n        }\n\n\n        adapter.resetSelection()\n\n        if (::selectedCurrency.isInitialized) {\n            Bugfender.d(CustomUtils.tagEvent, \"Currency changed to : \" + selectedCurrencySymbol)\n            filterViewModels(selectedCurrency)\n        } else {\n            filterViewModels(currentCurrency)\n            //Bugfender.d(\"Currency changed to : \"+currentCurrency ,CustomUtils.tagEvent)\n        }\n\n    }\n\n\n    @SuppressLint(\"ResourceType\")\n    override fun redirectLoadingFinished(\n        done: Boolean,\n        charge: Charge?,\n        contextSDK: Context?\n    ) {\n        //  checkoutFragment.dismiss()\n        println(\"done val\" + done + \"chargeResponse status\" + PaymentDataSource.getChargeOrAuthorize())\n        println(\"saveCardSwitchHolder val\" + saveCardSwitchHolder)\n        println(\"redirect val\" + charge?.response)\n        println(\"gatewayResponse val\" + charge?.gatewayResponse)\n\n        //  saveCardSwitchHolder?.view?.layoutParams= ViewGroup.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.MATCH_PARENT)\n\n        businessViewHolder = contextSDK?.let { BusinessViewHolder(it, this) }!!\n        // saveCardSwitchHolder = contextSDK.let { SwitchViewHolder(it,this) }\n        removeViews(businessViewHolder)\n\n\n\n        if (::amountViewHolder.isInitialized && ::cardViewHolder.isInitialized && ::cardViewHolder.isInitialized && ::paymentInlineViewHolder.isInitialized)\n            removeViews(\n                businessViewHolder,\n                amountViewHolder,\n                cardViewHolder,\n                paymentInlineViewHolder\n            )\n    }\n\n    override fun resultObtained(done: Boolean, contextSDK: Context?) {\n\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun setPayButtonAction(\n        paymentTypeEnum: PaymentType? = null,\n        savedCardsModel: Any? = null\n    ) {\n        println(\"setPayButtonAction >>\" + saveCardSwitchHolder?.view?.cardSwitch?.payButton)\n        println(\"paymentTypeEnum >>\" + paymentTypeEnum)\n        /**\n         * payment from onSelectPaymentOptionActionListener\n         */\n\n\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setOnClickListener {\n            when (paymentTypeEnum) {\n                PaymentType.SavedCard -> {\n                    /**\n                     * Note PaymentType savedcard is changed to Card for saved card payments for extra fees and payment options*/\n                    if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                        checkForExtraFees(\n                            selectedAmount,\n                            selectedCurrency,\n                            PaymentType.SavedCard,\n                            savedCardsModel,\n                            PaymentDataProvider().getSelectedCurrency()\n                        )\n\n                    } else checkForExtraFees(\n                        currentAmount,\n                        currentCurrency,\n                        PaymentType.SavedCard,\n                        savedCardsModel,\n                        PaymentDataProvider().getSelectedCurrency()\n                    )\n\n                    // setDifferentPaymentsAction(paymentTypeEnum,savedCardsModel)\n                }\n                PaymentType.WEB -> {\n                    PaymentDataSource.setWebViewType(WebViewType.REDIRECT)\n                    if (savedCardsModel != null) {\n                        if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                            checkForExtraFees(\n                                selectedAmount,\n                                selectedCurrency,\n                                paymentTypeEnum,\n                                savedCardsModel,\n                                PaymentDataProvider().getSelectedCurrency()\n                            )\n                        } else checkForExtraFees(\n                            currentAmount,\n                            currentCurrency,\n                            paymentTypeEnum,\n                            savedCardsModel,\n                            PaymentDataProvider().getSelectedCurrency()\n                        )\n                    }\n                }\n                PaymentType.CARD -> {\n                    //activateActionButton()\n                    if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                        checkForExtraFees(\n                            selectedAmount,\n                            selectedCurrency,\n                            paymentTypeEnum,\n                            savedCardsModel,\n                            PaymentDataProvider().getSelectedCurrency()\n                        )\n                    } else checkForExtraFees(\n                        currentAmount,\n                        currentCurrency,\n                        paymentTypeEnum,\n                        savedCardsModel,\n                        PaymentDataProvider().getSelectedCurrency()\n                    )\n\n\n                }\n                PaymentType.telecom -> {\n                    checkForExtraFees(\n                        currentAmount,\n                        currentCurrency,\n                        paymentTypeEnum,\n                        savedCardsModel,\n                        PaymentDataProvider().getSelectedCurrency()\n                    )\n                }\n                PaymentType.GOOGLE_PAY -> {\n                    checkoutFragment.checkOutActivity?.handleGooglePayApiCall(savedCardsModel as PaymentOption)\n\n                }\n\n            }\n            //  false\n        }\n\n    }\n\n    fun changeButtonToLoading() {\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun checkForExtraFees(\n        selectedAmount: String,\n        selectedCurrency: String,\n        paymentTypeEnum: PaymentType,\n        savedCardsModel: Any?,\n        amountedCurrency: AmountedCurrency?\n    ) {\n        var extraFees: java.util.ArrayList<ExtraFee>? = null\n        var paymentOption: PaymentOption? = null\n\n\n\n        if (paymentTypeEnum == PaymentType.WEB) {\n            savedCardsModel as PaymentOption\n            extraFees = savedCardsModel.extraFees\n            fee = calculateExtraFeesAmount(savedCardsModel as PaymentOption, amountedCurrency)\n\n        } else {\n            for (i in paymentOptionsResponse.paymentOptions.indices) {\n                if (paymentOptionsResponse.paymentOptions[i].paymentType == paymentTypeEnum) {\n                    extraFees = paymentOptionsResponse.paymentOptions[i].extraFees\n                    paymentOption = paymentOptionsResponse.paymentOptions[i]\n                }\n            }\n            fee = calculateExtraFeesAmount(paymentOption, amountedCurrency)\n\n        }\n        val totalAmount: String\n        if (selectedTotalAmount != null) {\n            println(\"selectedTotalAmount is\" + selectedTotalAmount)\n            if (selectedAmount.contains(\",\")) {\n                totalAmount = CurrencyFormatter.currencyFormat(\n                    fee?.add(BigDecimal(selectedAmount.replace(\",\", \"\").toDouble())).toString()\n                )\n\n            } else\n                totalAmount = CurrencyFormatter.currencyFormat(\n                    fee?.add(\n                        selectedTotalAmount?.toDouble()?.let { BigDecimal.valueOf(it) }).toString()\n                )\n        } else {\n            totalAmount = CurrencyFormatter.currencyFormat(\n                fee?.add(\n                    amountedCurrency?.amount?.toDouble()?.let { BigDecimal.valueOf(it) }).toString()\n            )\n        }\n\n        if (calculateExtraFeesAmount(\n                extraFees,\n                paymentOptionsResponse.supportedCurrencies,\n                PaymentDataProvider().getSelectedCurrency()\n            )!! > BigDecimal.ZERO\n        ) {\n            showExtraFees(\n                totalAmount.toString(),\n                fee.toString(),\n                paymentTypeEnum,\n                savedCardsModel,\n                selectedCurrency\n            )\n        } else if (savedCardsModel != null) {\n\n            println(\"savedCardsModel after fees\" + savedCardsModel)\n            println(\"savedCardsModel after fees\" + paymentTypeEnum)\n\n            if (paymentTypeEnum == PaymentType.CARD || paymentTypeEnum == PaymentType.SavedCard) {\n                if (paymentInlineViewHolder.cardInputUIStatus == CardInputUIStatus.SavedCard) {\n                    savedCardsModel as SavedCard\n                    println(\"savedCardsModel after fees\" + savedCardsModel.paymentOptionIdentifier.toInt())\n                    if (savedCardsModel.paymentOptionIdentifier.toInt() == 3 || savedCardsModel.paymentOptionIdentifier.toInt() == 4) {\n                        setDifferentPaymentsAction(PaymentType.SavedCard, savedCardsModel)\n                    } else setDifferentPaymentsAction(PaymentType.SavedCard, savedCardsModel)\n\n                } else {\n                    //    savedCardsModel as PaymentOption\n                    setDifferentPaymentsAction(PaymentType.CARD, savedCardsModel)\n\n                }\n\n            } else setDifferentPaymentsAction(paymentTypeEnum, savedCardsModel)\n        } else setDifferentPaymentsAction(paymentTypeEnum, savedCardsModel)\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun payActionSavedCard(savedCardsModel: SavedCard?) {\n        println(\"payActionSavedCard??????\" + savedCardsModel)\n        var selectdSavedCard: PaymentOption? = null\n        selectdSavedCard = logicTogetPayOptions(savedCardsModel?.brand?.name)\n        if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains(\"dark\")) {\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(\n                backgroundColor = Color.parseColor(\n                    selectdSavedCard?.buttonStyle?.background?.darkModel?.baseColor\n                )\n            )\n\n        } else\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(\n                backgroundColor = Color.parseColor(selectdSavedCard?.buttonStyle?.background?.lightModel?.baseColor)\n            )\n\n        startSavedCardPaymentProcess(savedCardsModel as SavedCard)\n\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.getImageView(\n            R.drawable.loader,\n            8\n        ) {\n\n\n        }?.let { it1 ->\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.addChildView(\n                it1\n            )\n        }\n\n        PaymentDataSource.setWebViewType(WebViewType.THREE_DS_WEBVIEW)\n        amountViewHolder.view.amount_section?.tapChipPopup?.slideFromLeftToRight()\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n\n        doAfterSpecificTime {\n\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n\n            saveCardSwitchHolder?.view?.mainSwitch?.visibility = GONE\n            if (paymentInlineViewHolder.cardInputUIStatus == CardInputUIStatus.SavedCard) {\n                cardViewHolder.view.cardInfoHeaderText.visibility = VISIBLE\n                cardViewHolder.view.cardInfoHeaderText.text =\n                    LocalizationManager.getValue(\"savedCardSectionTitle\", \"TapCardInputKit\")\n\n                with(cardViewHolder.view.mainChipgroup) {\n                    val viewsToFadeOut = mutableListOf<View>(chipsRecycler, groupAction, groupName)\n                    cardViewHolder.view.cardInfoHeaderText?.let { viewsToFadeOut.add(it) }\n                    viewsToFadeOut.add(amountViewHolder.view)\n                    paymentInlineViewHolder.paymentInputContainer.applyBluryToView()\n\n                    doAfterSpecificTime(time = 100L) {\n                        viewsToFadeOut.addFadeOutAnimationToViews(\n                            durationTime = 500L, onAnimationStart = {\n                            }, onAnimationEnd = {\n                                translateHeightAnimationForWebViews()\n                            })\n\n                    }\n\n                }\n\n            }\n        }\n\n    }\n\n    private fun translateHeightAnimationForWebViews(): Unit {\n        animateBS(\n            fromView = bottomSheetLayout,\n            toView = sdkLayout,\n            transitionAnimation = 300L,\n            changeHeight = {})\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun startSavedCardPaymentProcess(savedCard: SavedCard?) {\n        val createTokenSavedCard =\n            CreateTokenSavedCard(savedCard?.id, PaymentDataSource.getCustomer().identifier)\n        cardViewModel.processEvent(\n            event = CardViewEvent.CreateTokenExistingCardEvent,\n            viewModel = this,\n            createTokenWithExistingCardRequest = createTokenSavedCard\n        )\n    }\n\n    private fun removeAllViews() {\n        if (::businessViewHolder.isInitialized && ::amountViewHolder.isInitialized && ::cardViewHolder.isInitialized && ::paymentInlineViewHolder.isInitialized &&\n            ::goPayViewsHolder.isInitialized && ::otpViewHolder.isInitialized\n        )\n            removeViews(\n                businessViewHolder,\n                amountViewHolder,\n                cardViewHolder,\n                paymentInlineViewHolder,\n                saveCardSwitchHolder,\n                goPayViewsHolder,\n                otpViewHolder,\n                tabAnimatedActionButtonViewHolder\n            )\n\n        if (::webViewHolder.isInitialized) removeViews(webViewHolder)\n    }\n\n    private fun setAllSeparatorTheme() {\n\n        val borderColor: String = ThemeManager.getValue(\"poweredByTap.backgroundColor\")\n        var borderOpacityVal: String? = null\n        var newBorderColor: String? = null\n        borderOpacityVal = borderColor.substring(borderColor.length - 2)\n        newBorderColor = \"#\" + borderOpacityVal + borderColor.substring(0, borderColor.length - 2)\n            .replace(\"#\", \"\")\n\n        /**\n         * Set the stroke width from json itself for business header*/\n        val separatorViewTheme = SeparatorViewTheme()\n        separatorViewTheme.strokeColor =\n            Color.parseColor(ThemeManager.getValue(\"tapSeparationLine.backgroundColor\"))\n        separatorViewTheme.strokeHeight = ThemeManager.getValue(\"tapSeparationLine.height\")\n        businessViewHolder.view.topSeparatorLinear.topSeparator.setTheme(separatorViewTheme)\n\n        if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains(\"dark\")) {\n            amountViewHolder.view.amountView_separator.visibility = GONE\n        } else amountViewHolder.view.amountView_separator.visibility = VISIBLE\n        amountViewHolder.view.amountView_separator.setTheme(separatorViewTheme)\n        //  cardViewHolder.view.tapSeparatorViewLinear1.separator_1.setTheme(separatorViewTheme)\n        goPaySavedCardHolder.view.tapSeparatorViewLinear.separator_.setTheme(separatorViewTheme)\n        /**\n         * set separator background\n         */\n        businessViewHolder.view.topSeparatorLinear.setBackgroundColor(\n            (Color.parseColor(\n                ThemeManager.getValue(\n                    \"merchantHeaderView.backgroundColor\"\n                )\n            ))\n        )\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onRecognitionSuccess(card: TapCard?) {\n//to be added for unembossed cards\n        /* if (card != null) {\n             if (card.cardNumber != null && card.cardHolder != null && card.expirationDate != null) {\n                onReadSuccess(card)\n             }\n         }*/\n\n        println(\"are you called here!!\")\n\n\n    }\n\n    override fun onRecognitionFailure(error: String?) {\n\n    }\n\n\n    private fun removeInlineScanner() {\n        if (isInlineOpened) {\n            if (fragmentManager.findFragmentById(R.id.inline_container) != null) {\n                fragmentManager.beginTransaction()\n                    .remove(fragmentManager?.findFragmentById(R.id.inline_container)!!)\n                    .commit()\n            }\n            // inlineCamerFragment.onDestroy()\n            isInlineOpened = false\n            checkoutFragment.isScannerOpened = false\n            inLineCardLayout.visibility = GONE\n            cardViewHolder.view.visibility = VISIBLE\n            amountViewHolder.readyToScanVisibility(false)\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                ActionButtonState.RESET\n            )\n            incrementalCount = 0\n        }\n\n    }\n\n    fun handleScanFailedResult(error: String?) {\n        println(\"handleScanFailedResult card is\")\n        removeInlineScanner()\n        //  removeViews(amountViewHolder, businessViewHolder)\n        addViews(\n            // businessViewHolder,\n            //  amountViewHolder,\n            cardViewHolder,\n            paymentInlineViewHolder,\n            saveCardSwitchHolder\n        )\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun handleScanSuccessResult(card: TapCard) {\n\n        //  removeViews(amountViewHolder, businessViewHolder)\n        addViews(\n            //   businessViewHolder,\n            //   amountViewHolder,\n            // cardViewHolder,\n            paymentInlineViewHolder,\n            saveCardSwitchHolder\n        )\n        callBinLookupApi(card.cardNumber?.trim()?.substring(0, 6))\n\n\n        Handler().postDelayed({\n            val binLookupResponse: BINLookupResponse? = PaymentDataSource.getBinLookupResponse()\n            if (PaymentDataSource.getCardType() != null && PaymentDataSource.getCardType() == CardType.ALL) {\n                setScannedCardDetails(card)\n\n            } else {\n                if (binLookupResponse != null) {\n                    paymentInlineViewHolder.checkAllowedCardTypes(binLookupResponse)\n                    setScannedCardDetails(card)\n                }\n\n            }\n        }, 1000)\n\n\n        // inlineCamerFragment.onDestroy()\n        removeInlineScanner()\n\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun setScannedCardDetails(card: TapCard) {\n\n\n        println(\"scanned card holder is${card.cardHolder}\")\n        println(\"scanned card number is${card.cardNumber}\")\n\n        /* paymentInlineViewHolder.tapCardInputView.setCardNumberMasked(\n             paymentInlineViewHolder.maskCardNumber(\n                 card.cardNumber\n             )\n         )*/\n        paymentInlineViewHolder.hideViewONScanNFC()\n        val dateParts: List<String>? = card.expirationDate?.split(\"/\")\n        val month = dateParts?.get(0)?.toInt()\n        val year = dateParts?.get(1)?.toInt()\n        if (month != null) {\n            if (year != null) {\n                paymentInlineViewHolder.setCardScanData(card, month, year)\n            }\n        }\n\n        // paymentInlineViewHolder.tapCardInputView.setCardHolderName(card.cardHolder)\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun callBinLookupApi(binLookUpStr: String?) {\n        cardViewModel.processEvent(\n            event = CardViewEvent.RetreiveBinLookupEvent,\n            viewModel = CheckoutViewModel(), binValue = binLookUpStr\n        )\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun handleNFCScannedResult(emvCard: TapEmvCard) {\n        println(\"emvCard>>\" + emvCard)\n        //   removeViews(amountViewHolder, businessViewHolder)\n        addViews(\n            //   businessViewHolder,\n            //   amountViewHolder,\n            // cardViewHolder,\n            paymentInlineViewHolder,\n            saveCardSwitchHolder\n        )\n        callBinLookupApi(emvCard.cardNumber?.substring(0, 6))\n\n        Handler().postDelayed({\n            val binLookupResponse: BINLookupResponse? = PaymentDataSource.getBinLookupResponse()\n            if (PaymentDataSource.getCardType() != null && PaymentDataSource.getCardType() == CardType.ALL) {\n                setNfcCardDetails(emvCard)\n\n            } else {\n                if (binLookupResponse != null) {\n                    paymentInlineViewHolder.checkAllowedCardTypes(binLookupResponse)\n                    setNfcCardDetails(emvCard)\n                }\n\n            }\n        }, 300)\n\n        removeNFCViewFragment()\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun setNfcCardDetails(emvCard: TapEmvCard) {\n        // auto slide added on scan to prevent overlap\n        paymentInlineViewHolder.hideViewONScanNFC()\n        convertDateString(emvCard)\n        paymentInlineViewHolder.onFocusChange(CardInputListener.FocusField.FOCUS_CVC)\n\n\n    }\n\n    private fun removeNFCViewFragment() {\n        if (isNFCOpened)\n            if (fragmentManager.findFragmentById(R.id.fragment_container_nfc_lib) != null)\n                fragmentManager.beginTransaction()\n                    .remove(fragmentManager.findFragmentById(R.id.fragment_container_nfc_lib)!!)\n                    .commit()\n        isNFCOpened = false\n        checkoutFragment.isNfcOpened = false\n        //  webFrameLayout.visibility = View.GONE\n        frameLayout.visibility = GONE\n        cardViewHolder.view.visibility = VISIBLE\n    }\n\n\n    private fun convertDateString(emvCard: TapEmvCard) {\n        //  println(\"emvCard.getExpireDate()\"+emvCard.getExpireDate())\n        val dateParts: CharSequence? = DateFormat.format(\"M/y\", emvCard.getExpireDate())\n        println(\"dateparts\" + dateParts?.length)\n        if (dateParts?.contains(\"/\") == true) {\n            if (dateParts.length <= 3) {\n                return\n            } else {\n                if (dateParts.length >= 5 || dateParts.length >= 4) {\n                    val month = (dateParts).substring(0, 1).toInt()\n\n                    val year = (dateParts).substring(2, 4)\n\n                    if (year.contains(\"/\")) {\n                        println(\"retuu>>\" + year)\n                        return\n                    } else {\n                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n                            paymentInlineViewHolder.setNFCCardData(emvCard, month, year.toInt())\n                        }\n\n\n                    }\n\n                }\n\n            }\n\n\n        }\n\n    }\n\n    private fun filteredByPaymentTypeAndCurrencyAndSortedList(\n        list: java.util.ArrayList<PaymentOption>, paymentType: PaymentType, currency: String\n    ): java.util.ArrayList<PaymentOption> {\n        var currencyFilter: String? = currency.toUpperCase()\n        val filters: java.util.ArrayList<Utils.List.Filter<PaymentOption>> =\n            java.util.ArrayList<Utils.List.Filter<PaymentOption>>()\n\n        /**\n         * if trx currency not included inside supported currencies <i.e Merchant pass transaction currency that he is not allowed for>\n         * set currency to first supported currency\n        </i.e> */\n        var trxCurrencySupported = false\n        for (amountedCurrency in paymentOptionsResponse.supportedCurrencies) {\n            if (amountedCurrency.currency == currencyFilter) {\n                trxCurrencySupported = true\n                break\n            }\n        }\n        if (!trxCurrencySupported) currencyFilter =\n            paymentOptionsResponse.supportedCurrencies[0].currency\n\n\n        if (currencyFilter != null) {\n            this.getCurrenciesFilter<PaymentOption>(currencyFilter)?.let { filters.add(it) }\n        }\n        //  filters.add(getPaymentOptionsFilter(paymentType))\n        //  val filter: CompoundFilter<PaymentOption> = CompoundFilter(filters)\n        //  val filtered: ArrayList<PaymentOption> = Utils.List.filter(list)\n\n        var filtered: ArrayList<PaymentOption> =\n            list.filter { items ->\n                items.paymentType == paymentType && items.getSupportedCurrencies()?.contains(\n                    currencyFilter\n                ) == true\n            } as ArrayList<PaymentOption>\n\n        return list.filter { items ->\n            items.paymentType == paymentType && items.getSupportedCurrencies()?.contains(\n                currencyFilter\n            ) == true\n        } as ArrayList<PaymentOption>\n    }\n\n    private fun <E : CurrenciesSupport> getCurrenciesFilter(\n        currency: String\n    ): Utils.List.Filter<E> {\n        return object : Utils.List.Filter<E> {\n            override fun isIncluded(`object`: E): Boolean {\n                return `object`.getSupportedCurrencies()!!.contains(currency)\n            }\n        }\n    }\n\n    private fun <E> filterByCurrenciesAndSortList(\n        list: ArrayList<E>,\n        currency: String\n    ): ArrayList<SavedCard> where E : CurrenciesSupport?, E : Comparable<E>? {\n        println(\"currency filterByCurrenciesAndSortList\" + currency)\n        println(\"list here\" + list.size)\n        println(\"list here\" + list)\n        //  val filter: Utils.List.Filter<E> = getCurrenciesFilter(currency)\n        // println(\"filter here\"+filter)\n\n\n        // var filtered: ArrayList<E> = Utils.List.filter(list, filter)\n        /**\n         * Stopped generic for now to work the functionality**/\n        return list.filter { items ->\n            items?.getSupportedCurrencies()?.contains(\n                currency\n            ) == true\n        } as ArrayList<SavedCard>\n        /* Collections.sort(filtered)\n          return filtered*/\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun filterViewModels(currency: String) {\n\n        if (paymentOptionsResponse.paymentOptions != null)\n            paymentOptionsWorker =\n                java.util.ArrayList<PaymentOption>(paymentOptionsResponse.paymentOptions)\n        if (paymentOptionsResponse.cards != null) {\n            val savedCardsWorker: java.util.ArrayList<SavedCard> =\n                java.util.ArrayList<SavedCard>(paymentOptionsResponse.cards)\n            savedCardsBasedCurr = filterByCurrenciesAndSortList(savedCardsWorker, currency)\n\n        }\n        println(\"savedCardsBasedCurr>>\" + savedCardsBasedCurr)\n        println(\"savedCardsBasedCurr>>\" + savedCardsBasedCurr?.size)\n\n\n        webPaymentOptions =\n            filteredByPaymentTypeAndCurrencyAndSortedList(\n                paymentOptionsWorker, PaymentType.WEB, currency\n            )\n\n        val cardPaymentOptions: java.util.ArrayList<PaymentOption> =\n            filteredByPaymentTypeAndCurrencyAndSortedList(\n                paymentOptionsWorker, PaymentType.CARD, currency\n            )\n\n        val googlePaymentOptions: java.util.ArrayList<PaymentOption> =\n            filteredByPaymentTypeAndCurrencyAndSortedList(\n                paymentOptionsWorker, PaymentType.GOOGLE_PAY, currency\n            )\n        //  println(\"googlePaymentOptions\"+googlePaymentOptions)\n        val hasWebPaymentOptions = webPaymentOptions.size > 0\n        val hasCardPaymentOptions = cardPaymentOptions.size > 0\n        val hasGooglePaymentOptions = googlePaymentOptions.size > 0\n\n        val hasSavedCards: Boolean = savedCardsBasedCurr.size > 0\n        // println(\"hasGooglePaymentOptions\"+hasGooglePaymentOptions)\n\n        //Added if else to update showing GooglePay button based on api\n        if (hasGooglePaymentOptions && googlePaymentOptions.isNotEmpty()) {\n            adapter.updateAdapterGooglePay(googlePaymentOptions)\n            PaymentDataSource.setGoogleCardPay(googlePaymentOptions)\n        } else {\n            adapter.updateAdapterGooglePay(googlePaymentOptions)\n            PaymentDataSource.setGoogleCardPay(googlePaymentOptions)\n        }\n        println(\"hasWebPaymentOptions\" + webPaymentOptions)\n        println(\"hasCardPaymentOptions\" + hasCardPaymentOptions)\n        println(\"savedCardList\" + savedCardList?.isNullOrEmpty())\n        if (webPaymentOptions.size == 0) {\n            adapter.updateAdapterData(ArrayList())\n            if (savedCardList.isNullOrEmpty()) {\n                cardViewHolder.view.mainChipgroup?.groupName?.visibility = View.GONE\n            } else {\n                cardViewHolder.view.mainChipgroup?.groupName?.visibility = VISIBLE\n            }\n\n\n        }\n\n        logicToHandlePaymentDataType(\n            webPaymentOptions,\n            cardPaymentOptions\n        )\n        if (savedCardsBasedCurr == null) savedCardsBasedCurr = ArrayList()\n        if (hasSavedCards) {\n            adapter.updateAdapterDataSavedCard(savedCardsBasedCurr)\n            // update RecentSectionViewModel data with only filtered cards. // added to fix filtering saved cards based on changed currency\n\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun logicToHandlePaymentDataType(\n        webPaymentOptions: ArrayList<PaymentOption>? = null,\n        cardPaymentOptions: ArrayList<PaymentOption>\n\n    ) {\n        cardViewHolder.view.mainChipgroup?.groupName?.visibility = VISIBLE\n        // println(\"webPaymentOptions in logic >>>>$webPaymentOptions\")\n        println(\"cardPaymentOptions in logic >>>>$cardPaymentOptions\")\n        println(\"payment data in logic >>>>\" + PaymentDataSource.getPaymentDataType())\n\n\n        if (PaymentDataSource.getPaymentDataType() != null && PaymentDataSource.getPaymentDataType() == \"WEB\" && PaymentDataSource.getTransactionMode() != TransactionMode.AUTHORIZE_CAPTURE) {\n            adapter.updateAdapterDataSavedCard(ArrayList())\n            if (webPaymentOptions != null) {\n                adapter.updateAdapterData(webPaymentOptions)\n            }\n            saveCardSwitchHolder?.view?.cardSwitch?.showOnlyPayButton()\n        } else if (PaymentDataSource.getPaymentDataType() != null && PaymentDataSource.getPaymentDataType() == \"CARD\") {\n            adapter.updateAdapterData(ArrayList())\n            paymentInlineViewHolder.setDataFromAPI(cardPaymentOptions)\n            saveCardSwitchHolder?.view?.cardSwitch?.showOnlyPayButton()\n        } else {\n            /**\n             * If TransactionMode is AUTHORIZE_CAPTURE then don't show webpayment options\n             * **/\n            if (PaymentDataSource.getTransactionMode() == TransactionMode.AUTHORIZE_CAPTURE) {\n                adapter.updateAdapterData(ArrayList())\n                paymentInlineViewHolder.setDataFromAPI(cardPaymentOptions)\n            } else {\n                if (webPaymentOptions != null) {\n                    adapter.updateAdapterData(webPaymentOptions)\n                }\n                if (!cardPaymentOptions.isEmpty()) {\n                    paymentInlineViewHolder.setDataFromAPI(cardPaymentOptions)\n\n\n                } else {\n                    saveCardSwitchHolder?.mainTextSave?.visibility = GONE\n                    removeViews(paymentInlineViewHolder)\n                }\n\n            }\n        }\n        if (LocalizationManager.currentLocalized.length() != 0) {\n            title = LocalizationManager.getValue(\"title\", \"ExtraFees\")\n\n        }\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun showExtraFees(\n        totalAmount: String,\n        extraFeesAmount: String,\n        paymentType: PaymentType, savedCardsModel: Any?, selectedCurrency: String\n    ) {\n\n        val extraFeesPart1: String = LocalizationManager.getValue<String>(\n            \"message\",\n            \"ExtraFees\"\n        ).replaceFirst(\"%@\", extraFeesAmount + selectedCurrency)\n        val extraFeesPart2: String = extraFeesPart1.replace(\"%@\", totalAmount + selectedCurrency)\n        // val leftToRight = \"\\u200F\"\n        //  val localizedMessage =\n        // extraFeesPart1 +\" \"+extraFeesAmount+PaymentDataProvider().getSelectedCurrency()?.currency +extraFeesPart2+\" \"+ totalAmount+ PaymentDataProvider().getSelectedCurrency()?.currency\n        //    \"$extraFeesPart1 $extraFeesAmount$selectedCurrency$extraFeesPart2 $totalAmount$selectedCurrency\"\n        CustomUtils.showDialog(\n            title,\n            extraFeesPart2,\n            context,\n            3,\n            this,\n            paymentType,\n            savedCardsModel, true\n        )\n\n\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun dialogueExecuteExtraFees(\n        response: String,\n        paymentType: PaymentType,\n        savedCardsModel: Any?\n    ) {\n        if (response == \"YES\") {\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n\n            println(\"savedCardsModel>>>>\" + savedCardsModel)\n            if (savedCardsModel != null) {\n                if (paymentType == PaymentType.CARD) {\n                    savedCardsModel as SavedCard\n                    if (savedCardsModel.paymentOptionIdentifier.toInt() == 3 || savedCardsModel.paymentOptionIdentifier.toInt() == 4) {\n                        setDifferentPaymentsAction(PaymentType.SavedCard, savedCardsModel)\n                    }\n                } else setDifferentPaymentsAction(paymentType, savedCardsModel)\n            } else setDifferentPaymentsAction(paymentType, savedCardsModel)\n        } else {\n            fee = BigDecimal.ZERO\n\n            when {\n                paymentType === PaymentType.WEB -> {\n                    // fireWebPaymentExtraFeesUserDecision(ExtraFeesStatus.REFUSE_EXTRA_FEES)\n                    selectedCurrencyPos = null\n                    selectedAmountPos = null\n\n\n                }\n                paymentType === PaymentType.CARD -> {\n                    selectedCurrencyPos = null\n                    selectedAmountPos = null\n//                    fireCardPaymentExtraFeesUserDecision(ExtraFeesStatus.REFUSE_EXTRA_FEES)\n                }\n                paymentType === PaymentType.SavedCard -> {\n                    selectedCurrencyPos = null\n                    selectedAmountPos = null\n                    //  fireSavedCardPaymentExtraFeesUserDecision(ExtraFeesStatus.REFUSE_EXTRA_FEES)\n                }\n            }\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun setDifferentPaymentsAction(\n        paymentType: PaymentType,\n        savedCardsModel: Any?\n    ) {\n        when {\n\n            paymentType === PaymentType.WEB -> {\n                if (savedCardsModel != null) {\n                    PaymentDataSource.setWebViewType(WebViewType.REDIRECT)\n                    //Added to disable click when button loading\n                    amountViewHolder.view.amount_section?.itemAmountLayout?.isEnabled = false\n                    amountViewHolder.view.amount_section?.itemAmountLayout?.isClickable = false\n                    onClickRedirect(savedCardsModel)\n                }\n            }\n            paymentType === PaymentType.CARD -> {\n                println(\"savedCardsModel fro card\" + savedCardsModel)\n\n                //Added to disable click when button loading\n                amountViewHolder.view.amount_section?.itemAmountLayout?.isEnabled = false\n                amountViewHolder.view.amount_section?.itemAmountLayout?.isClickable = false\n\n                if (savedCardsModel is PaymentOption) onClickCardPayment(savedCardsModel)\n\n\n            }\n            paymentType === PaymentType.SavedCard -> {\n                println(\"SavedCard fro card\" + savedCardsModel)\n                if (isSavedCardSelected == true) {\n                    PaymentDataSource.setWebViewType(WebViewType.THREE_DS_WEBVIEW)\n                    //Added to disable click when button loading\n                    amountViewHolder.view.amount_section?.itemAmountLayout?.isEnabled = false\n                    amountViewHolder.view.amount_section?.itemAmountLayout?.isClickable = false\n                    if (savedCardsModel != null)\n                        payActionSavedCard(savedCardsModel as SavedCard)\n\n                }\n            }\n        }\n    }\n\n    /**\n     * Calculate extra fees amount big decimal.\n     *\n     * @param paymentOption the payment option\n     * @return the big decimal\n     */\n    open fun calculateExtraFeesAmount(\n        paymentOption: PaymentOption?,\n        amountedCurrency: AmountedCurrency?\n    ): BigDecimal? {\n        return if (paymentOption != null) {\n\n            // val amount = PaymentDataProvider().getSelectedCurrency()\n            var extraFees: java.util.ArrayList<ExtraFee>? = paymentOption.extraFees\n            if (extraFees == null) extraFees = java.util.ArrayList()\n            val supportedCurrencies: java.util.ArrayList<SupportedCurrencies>? =\n                PaymentDataProvider().getSupportedCurrencies()\n            calculateExtraFeesAmount(extraFees, supportedCurrencies, amountedCurrency)\n        } else BigDecimal.ZERO\n    }\n\n    fun View.fadeVisibility(visibility: Int, duration: Long = 3000) {\n        val transition: Transition = Fade()\n        transition.duration = duration\n        transition.addTarget(this)\n        TransitionManager.beginDelayedTransition(this.parent as ViewGroup, transition)\n        this.visibility = visibility\n    }\n\n    fun closeAsynchView() {\n        checkoutFragment?.dismissBottomSheetDialog()\n    }\n\n    fun showOnlyButtonView(\n        status: ChargeStatus,\n        checkOutActivity: CheckOutActivity?,\n        _checkoutFragment: CheckoutFragment\n    ) {\n        removeAllViews()\n        addViews(saveCardSwitchHolder)\n        val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n        val nowString: String = LocalizationManager.getValue(\"now\", \"ActionButton\")\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n            false,\n            \"en\",\n            if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                payString + \" \" + nowString\n            } else {\n                payString + \" \" + nowString\n            },\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.paymentBackgroundColor\")),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.titleLabelColor\")),\n        )\n\n\n        when (status) {\n            ChargeStatus.CAPTURED, ChargeStatus.AUTHORIZED, ChargeStatus.VALID, ChargeStatus.IN_PROGRESS -> {\n                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setDisplayMetricsTheme(\n                    CustomUtils.getDeviceDisplayMetrics(\n                        context as Activity\n                    ), CustomUtils.getCurrentTheme()\n                )\n                Handler().postDelayed({\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                        ActionButtonState.SUCCESS\n                    )\n                }, 500)\n            }\n            ChargeStatus.CANCELLED, ChargeStatus.TIMEDOUT, ChargeStatus.FAILED, ChargeStatus.DECLINED, ChargeStatus.UNKNOWN,\n            ChargeStatus.RESTRICTED, ChargeStatus.ABANDONED, ChargeStatus.VOID, ChargeStatus.INVALID -> {\n                Handler().postDelayed({\n                    tabAnimatedActionButton?.setInValidBackground(\n                        false, Color.YELLOW\n                    )\n                    tabAnimatedActionButton?.changeButtonState(ActionButtonState.LOADING)\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(\n                        false, Color.YELLOW\n                    )\n\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n                        false,\n                        \"en\",\n                        null,\n                        Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n                        Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n\n                        )\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                        ActionButtonState.ERROR\n                    )\n                }, 500)\n                tabAnimatedActionButton?.changeButtonState(ActionButtonState.ERROR)\n            }\n            else -> {\n\n                if (status.equals(\"tokenized\")) {\n                    Handler().postDelayed({\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                            ActionButtonState.SUCCESS\n                        )\n                    }, 500)\n\n                } else {\n                    Handler().postDelayed({\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(\n                            false,\n                            Color.BLUE\n                        )\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n                            false,\n                            \"en\",\n                            null,\n                            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n                            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n\n                            )\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                            ActionButtonState.ERROR\n                        )\n                    }, 500)\n\n                }\n            }\n        }\n        /*   Handler().postDelayed({\n               checkOutActivity?.onBackPressed()\n\n               if (::bottomSheetDialog.isInitialized)\n                   bottomSheetDialog.dismiss()\n               _checkoutFragment.activity?.onBackPressed()\n\n           }, 12000)*/\n    }\n\n\n    /**\n     * handlePaymentSuccess handles the payment token obtained from GooglePay API\n     * **/\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun handlePaymentSuccess(paymentData: PaymentData, selectedPaymentOption: PaymentOption) {\n        removeViews(\n            //businessViewHolder,\n            amountViewHolder,\n            cardViewHolder,\n            // saveCardSwitchHolder,\n            paymentInlineViewHolder,\n            otpViewHolder,\n            goPaySavedCardHolder,\n            goPayViewsHolder\n        )\n        saveCardSwitchHolder?.view?.cardSwitch?.switchesLayout?.visibility = GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = VISIBLE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n\n        val paymentInformation = paymentData.toJson() ?: return\n\n        try {\n            // Token will be null if PaymentDataRequest was not constructed using fromJson(String).\n            val paymentMethodData =\n                JSONObject(paymentInformation).getJSONObject(\"paymentMethodData\")\n\n            // If the gateway is set to \"example\", no payment information is returned - instead, the\n            // token will only consist of \"examplePaymentMethodToken\".\n            val tokenizationData = paymentMethodData.getJSONObject(\"tokenizationData\")\n\n            val token = tokenizationData.getString(\"token\")\n            Bugfender.d(CustomUtils.tagEvent, \"Google pay raw token :\" + token)\n            val gson = Gson()\n            val jsonToken = gson.fromJson(token, JsonObject::class.java)\n\n\n            /**\n             * At this stage, Passing the googlePaylaod to Tap Backend TokenAPI call followed by chargeAPI.\n             * ***/\n            val createTokenGPayRequest = CreateTokenGPayRequest(\"googlepay\", jsonToken)\n            CardViewModel().processEvent(\n                event = CardViewEvent.CreateGoogleTokenEvent,\n                viewModel = this,\n                selectedPaymentOption = selectedPaymentOption,\n                context = context,\n                createTokenGPayRequest = createTokenGPayRequest\n            )\n            // Logging token string.\n            /* Log.e(\"GooglePaymentToken\", paymentMethodData\n                     .getJSONObject(\"tokenizationData\")\n                     .getString(\"token\"))\n    */\n        } catch (e: JSONException) {\n            Log.e(\"handlePaymentSuccess\", \"Error: \" + e.toString())\n        }\n\n    }\n\n    /**\n     * handleError handles the payment response obtained from GooglePay API\n     * **/\n    fun handleError(statusCode: Int) {\n        Log.e(\"loadPaymentData failed\", String.format(\"Error code: %d\", statusCode))\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onReadSuccess(card: TapCard?) {\n        incrementalCount += 1\n\n        println(\"incrementalCount val>>>>>\" + incrementalCount)\n        /*   if (card != null) {\n               if(card.cardNumber!=null)\n              handleScanSuccessResult(card)\n              *//* Log.d(\"checkOutViewModel\", \"onRecognitionSuccess: \" + card.cardNumber)\n            Log.d(\"checkOutViewModel\", \"onRecognitionSuccess: \" + card.expirationDate)\n            Log.d(\"checkOutViewModel\", \"onRecognitionSuccess: \" + card.cardHolder)*//*\n\n        }*/\n        if (card != null && incrementalCount == 3) {\n\n            if (card.cardNumber != null && card.cardHolder != null && card.expirationDate != null) {\n                handleScanSuccessResult(card)\n                incrementalCount = 0\n            }\n            return\n        }\n    }\n\n    override fun onReadFailure(error: String?) {\n        handleScanFailedResult(error)\n    }\n\n    private fun logicForLoyaltyProgram() {\n\n        loyaltyViewHolder.loyaltyView.switchLoyalty?.setOnCheckedChangeListener { buttonView, isChecked ->\n            loyaltyViewHolder.loyaltyView.switchTheme()\n\n            if (isChecked) {\n                loyaltyViewHolder.loyaltyView.linearLayout2?.visibility = VISIBLE\n                loyaltyViewHolder.loyaltyView.linearLayout3?.visibility = VISIBLE\n\n            } else {\n\n                loyaltyViewHolder.loyaltyView.linearLayout2?.visibility = GONE\n                loyaltyViewHolder.loyaltyView.linearLayout3?.visibility = GONE\n\n            }\n        }\n\n        loyaltyViewHolder.loyaltyView.setLoyaltyHeaderDataSource(\n            LoyaltyHeaderDataSource(\n                \"ADCB\",\n                \"https://is4-ssl.mzstatic.com/image/thumb/Purple112/v4/05/33/67/05336718-a6f6-8ca1-1ea0-0644f5071ce9/AppIcon-0-0-1x_U007emarketing-0-0-0-5-0-0-sRGB-0-0-0-GLES2_U002c0-512MB-85-220-0-0.png/1200x600wa.png\"\n            )\n        )\n\n        loyaltyViewHolder.loyaltyView.textViewClickable?.makeLinks(\n            Pair(\"(T&C)\", View.OnClickListener {\n                val url = \"https://www.adcb.com/en/tools-resources/adcb-privacy-policy/\"\n                val intent = Intent(Intent.ACTION_VIEW)\n                intent.data = Uri.parse(url)\n                context.startActivity(intent)\n\n            })\n        )\n    }\n\n\n    override fun onTransactionSuccess(p0: Transaction?) {\n        println(\"transaction is success $p0\")\n\n    }\n\n    override fun onTransactionFail(p0: Transaction?) {\n        println(\"onTransactionFail is  $p0\")\n    }\n\n    fun dismissBottomSheet() {\n        checkoutFragment.dismissBottomSheetDialog()\n    }\n\n    fun setTitleNormalCard() {\n        cardViewHolder.view.cardInfoHeaderText.text =\n            LocalizationManager.getValue(\"cardSectionTitleOr\", \"TapCardInputKit\")\n    }\n\n    fun getAssetName(paymentOptionOb: PaymentOption?): String {\n        println(\"paymentOptionOb\" + paymentOptionOb)\n        var lang: String = \"en\"\n        var theme: String = \"light\"\n        if (CustomUtils.getCurrentLocale(context) != null) {\n            lang = CustomUtils.getCurrentLocale(context)\n        } else lang = \"en\"\n\n        theme = CustomUtils.getCurrentTheme()\n\n        val assetToLoad: String = paymentOptionOb?.buttonStyle?.titleAssets.toString()\n        println(\n            \"<<<assetToLoad>>>\" + assetToLoad.replace(\"{theme}\", theme)\n                .replace(\"{lang}\", lang) + \".png\"\n        )\n        return assetToLoad.replace(\"{theme}\", theme).replace(\"{lang}\", lang) + \".png\"\n    }\n\n    override fun onMorphAnimationEnd() {\n        context.showToast(\"end\")\n    }\n\n    override fun onMorphAnimationReverted() {\n        context.showToast(\"revert\")\n    }\n\n    override fun onMorphAnimationStarted() {\n        context.showToast(\"start\")\n    }\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout/src/main/java/company/tap/checkout/internal/viewmodels/CheckoutViewModel.kt b/checkout/src/main/java/company/tap/checkout/internal/viewmodels/CheckoutViewModel.kt
--- a/checkout/src/main/java/company/tap/checkout/internal/viewmodels/CheckoutViewModel.kt	(revision 0178ff4538a3087120fee48003c4849f6743f525)
+++ b/checkout/src/main/java/company/tap/checkout/internal/viewmodels/CheckoutViewModel.kt	(date 1685624819033)
@@ -1583,16 +1583,6 @@
         }
     }
 
-    @RequiresApi(Build.VERSION_CODES.N)
-    fun filterCardTypes(list: ArrayList<PaymentOption>) {
-        var filteredCardList: List<PaymentOption> =
-            list.filter { items -> items.paymentType == PaymentType.CARD }
-
-        // println("filteredCardList value " + filteredCardList.size)
-        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.N) {
-            paymentInlineViewHolder.setDataFromAPI(filteredCardList)
-        }
-    }
 
     private fun filterSavedCardTypes(savedCardList: List<SavedCard>) {
         val filteredSavedCardList: List<SavedCard> =
@@ -2067,12 +2057,14 @@
         }
     }
 
+    @RequiresApi(Build.VERSION_CODES.N)
     private fun performResetToPaymentInline() {
         resetViewToPaymentInline()
         resetCardSelection()
         unActivateActionButton()
         if (paymentInlineViewHolder.cvvNumber?.length == 3) {
             with(paymentInlineViewHolder) {
+                context.showToast(cardBrandInString.toString())
                 if (this.savedCardsModel != null) {
                     onPayCardCompleteAction(
                         true,
@@ -2092,7 +2084,7 @@
                         expiryDate,
                         cvvNumber!!,
                         cardHolderName,
-                        PaymentDataSource?.getBinLookupResponse()?.scheme?.cardBrand?.rawValue,
+                        cardBrandInString,
                         this.savedCardsModel
                     )
                 }
