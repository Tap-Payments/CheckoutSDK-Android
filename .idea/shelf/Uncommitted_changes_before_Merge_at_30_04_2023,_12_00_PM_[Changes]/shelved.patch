Index: checkout/src/main/java/company/tap/checkout/internal/viewholders/AmountViewHolder.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package company.tap.checkout.internal.viewholders\n\nimport android.annotation.SuppressLint\nimport android.content.Context\nimport android.graphics.Color\nimport android.view.LayoutInflater\nimport android.view.MotionEvent\nimport android.view.View\nimport android.widget.LinearLayout\nimport company.tap.cardinputwidget.CardInputUIStatus\nimport company.tap.checkout.R\nimport company.tap.checkout.internal.enums.SectionType\nimport company.tap.checkout.internal.interfaces.AmountInterface\nimport company.tap.checkout.internal.interfaces.BaseLayoutManager\nimport company.tap.checkout.internal.utils.CurrencyFormatter\nimport company.tap.taplocalizationkit.LocalizationManager\nimport company.tap.tapuilibrary.themekit.ThemeManager\nimport company.tap.tapuilibrary.themekit.theme.TextViewTheme\nimport company.tap.tapuilibrary.uikit.atoms.TapChip\nimport company.tap.tapuilibrary.uikit.atoms.TapSeparatorView\nimport company.tap.tapuilibrary.uikit.atoms.TapTextView\nimport company.tap.tapuilibrary.uikit.datasource.AmountViewDataSource\nimport kotlinx.android.synthetic.main.amountview_layout.view.*\n\n\n/**\n *\n * Copyright Â© 2020 Tap Payments. All rights reserved.\n *\n */\nclass AmountViewHolder(context: Context, private val baseLayoutManager: BaseLayoutManager? = null) :\n    TapBaseViewHolder,\n    AmountInterface {\n\n\n    override val view: View = LayoutInflater.from(context).inflate(R.layout.amountview_layout, null)\n\n    override val type = SectionType.AMOUNT_ITEMS\n\n    private var itemCountt: String? = null\n    var originalAmount: String? = null\n    private var isOpenedList: Boolean = true\n    private var transactionCurrency: String? = null\n    private var scannerLinearView: LinearLayout = view.findViewById(R.id.scannerLinearView)\n    private var CustomCardViewStyle: TapChip = view.findViewById(R.id.CustomCardViewStyle)\n    private var readyToScanText: TapTextView = view.findViewById(R.id.cardscan_ready)\n    var scannerClicked: Boolean? = false\n\n    init {\n        bindViewComponents()\n    }\n\n    override fun bindViewComponents() {\n        view.amount_section.setAmountViewDataSource(getAmountDataSourceFromAPIs())\n        scanTextTheme()\n    }\n\n    private fun scanTextTheme() {\n        val readyToScanTextViewTheme = TextViewTheme()\n        readyToScanTextViewTheme.textColor =\n            Color.parseColor(ThemeManager.getValue(\"Hints.Default.textColor\"))\n        readyToScanTextViewTheme.textSize =\n            ThemeManager.getFontSize(\"Hints.Default.textFont\")\n        readyToScanTextViewTheme.font =\n            ThemeManager.getFontName(\"Hints.Default.textFont\")\n        readyToScanText.setTheme(readyToScanTextViewTheme)\n        scannerLinearView.setBackgroundColor( Color.parseColor(ThemeManager.getValue(\"Hints.Default.backgroundColor\")))\n        CustomCardViewStyle.setBackgroundColor( Color.parseColor(ThemeManager.getValue(\"Hints.Default.backgroundColor\")))\n    }\n\n    fun readyToScanVisibility(scannerClicked: Boolean) {\n        if (scannerClicked) {\n            scannerLinearView.visibility = View.VISIBLE\n            readyToScanText.text = LocalizationManager.getValue(\"Default\", \"Hints\", \"scan\")\n        } else {\n            scannerLinearView.visibility = View.GONE\n        }\n    }\n\n    private fun getAmountDataSourceFromAPIs(): AmountViewDataSource {\n        if (itemCountt?.equals(\"1\") == true) {\n            return AmountViewDataSource(\n                selectedCurr = originalAmount,\n                selectedCurrText = transactionCurrency,\n                itemCount = itemCountt + \"  \" + LocalizationManager.getValue(\"item\", \"Common\")\n            )\n        } else {\n            var items: String=\"\"\n            if(LocalizationManager.currentLocalized.length()!=0) {\n               items  = LocalizationManager.getValue(\"items\", \"Common\")\n            }\n            return AmountViewDataSource(\n                selectedCurr = originalAmount,\n                selectedCurrText = transactionCurrency,\n               itemCount = itemCountt + \"  \" +items\n            )\n        }\n    }\n\n    private fun changeDataSource(amountViewDataSource: AmountViewDataSource) {\n        view.amount_section.setAmountViewDataSource(amountViewDataSource)\n    }\n\n    override fun changeGroupAction(isOpen: Boolean) {\n        isOpenedList = isOpen\n        if (isOpen) {\n            if (itemCountt?.contentEquals(\"1\") == true) {\n                changeDataSource(\n                    AmountViewDataSource(\n                        selectedCurr = originalAmount,\n                        selectedCurrText = transactionCurrency,\n                        itemCount = itemCountt + \"  \" + LocalizationManager.getValue(\n                            \"item\",\n                            \"Common\"\n                        )\n                    )\n                )\n            } else changeDataSource(\n                AmountViewDataSource(\n                    selectedCurr = originalAmount,\n                    selectedCurrText = transactionCurrency,\n                    itemCount = itemCountt + \"  \" + LocalizationManager.getValue(\"items\", \"Common\")\n                )\n            )\n            view.amount_section.itemAmountText.visibility =View.VISIBLE\n            view.amount_section.viewSeparator.visibility =View.VISIBLE\n            view.amount_section.amountImageView.visibility =View.VISIBLE\n        } else {\n//            if (::originalAmount?.isInitialized)\n            changeDataSource(\n                AmountViewDataSource(\n                    selectedCurr = originalAmount,\n                    selectedCurrText = transactionCurrency,\n                    itemCount = LocalizationManager.getValue<String?>(\"confirm\", \"Common\")\n                )\n            )\n            view.amount_section.itemCountButton.text =\n                LocalizationManager.getValue(\"confirm\", \"Common\")\n\n            view.amount_section.itemAmountText.visibility =View.GONE\n            view.amount_section.viewSeparator.visibility =View.GONE\n            view.amount_section.amountImageView.visibility =View.GONE\n\n\n        }\n    }\n\n\n    @SuppressLint(\"ClickableViewAccessibility\")\n    fun setOnItemsClickListener() {\n       /* view.amount_section.itemAmountLayout.setOnClickListener {\n            //onItemsClickListener()\n            baseLayoutManager?.controlCurrency(isOpenedList)\n        }*/\n\n        /*view.amount_section.itemAmountLayout.setOnTouchListener(object : View.OnTouchListener {\n            override fun onTouch(v: View?, event: MotionEvent?): Boolean {\n                baseLayoutManager?.controlCurrency(isOpenedList)\n                return false\n            }\n        })*/\n view.amount_section.tapChipAmount.setOnTouchListener(object : View.OnTouchListener {\n            override fun onTouch(v: View?, event: MotionEvent?): Boolean {\n                baseLayoutManager?.controlCurrency(isOpenedList)\n                return false\n            }\n        })\n\n        /**Adding to get back to sdk when clicked closed ***/\n        view.amount_section.itemPopupLayout.setOnTouchListener(object : View.OnTouchListener {\n            override fun onTouch(v: View?, event: MotionEvent?): Boolean {\n                baseLayoutManager?.reOpenSDKState()\n                return false\n            }\n        })\n    }\n\n    fun updateSelectedCurrency(\n        isOpen: Boolean,\n        selectedAmount: String,\n        selectedCurrency: String,\n        currentAmount: String,\n        currentCurrency: String,\n        selectedCurrencySymbol: String? = null\n    ) {\n\n\n        isOpenedList = isOpen\n        if (selectedAmount == currentAmount && selectedCurrency == currentCurrency) {\n            view.amount_section.mainKDAmountValue.visibility = View.GONE\n        } else {\n            view.amount_section.mainKDAmountValue.visibility = View.VISIBLE\n        }\n        if (isOpen) {\n            if (selectedCurrencySymbol?.isNotBlank() == true || selectedCurrencySymbol?.isNotEmpty() == true) {\n                if (itemCountt?.equals(\"1\") == true) {\n                    changeDataSource(\n                        AmountViewDataSource(\n                            selectedCurr = selectedAmount,\n                            selectedCurrText = selectedCurrencySymbol,\n                            currentCurr = currentAmount,\n                            currentCurrText = currentCurrency,\n                            itemCount = itemCountt + \"  \" + LocalizationManager.getValue(\n                                \"item\",\n                                \"Common\"\n                            )\n                        )\n                    )\n                } else {\n                    changeDataSource(\n                        AmountViewDataSource(\n                            selectedCurr = selectedAmount,\n                            selectedCurrText = selectedCurrencySymbol,\n                            currentCurr = currentAmount,\n                            currentCurrText = currentCurrency,\n                            itemCount = itemCountt + \"  \" + LocalizationManager.getValue(\n                                \"items\",\n                                \"Common\"\n                            )\n                        )\n                    )\n                }\n\n            } else {\n                if (itemCountt?.equals(\"1\") == true) {\n                    changeDataSource(\n                        AmountViewDataSource(\n                            selectedCurr = selectedAmount,\n                            selectedCurrText = selectedCurrency,\n                            currentCurr = currentAmount,\n                            currentCurrText = currentCurrency,\n                            itemCount = itemCountt + \"  \" + LocalizationManager.getValue(\n                                \"item\",\n                                \"Common\"\n                            )\n                        )\n                    )\n                } else {\n                    changeDataSource(\n                        AmountViewDataSource(\n                            selectedCurr = selectedAmount,\n                            selectedCurrText = selectedCurrency,\n                            currentCurr = currentAmount,\n                            currentCurrText = currentCurrency,\n                            itemCount = itemCountt + \"  \" + LocalizationManager.getValue(\n                                \"items\",\n                                \"Common\"\n                            )\n                        )\n                    )\n                }\n            }\n\n\n        } else {\n            if (selectedCurrencySymbol?.isNotBlank() == true || selectedCurrencySymbol?.isNotEmpty() == true) {\n                changeDataSource(\n                    AmountViewDataSource(\n                        selectedCurr = selectedAmount,\n                        selectedCurrText = selectedCurrencySymbol,\n                        currentCurr = currentAmount,\n                        currentCurrText = currentCurrency,\n                        itemCount = LocalizationManager.getValue(\"confirm\", \"Common\")\n                    )\n                )\n            } else\n                changeDataSource(\n                    AmountViewDataSource(\n                        selectedCurr = selectedAmount,\n                        selectedCurrText = selectedCurrency,\n                        currentCurr = currentAmount,\n                        currentCurrText = currentCurrency,\n                        itemCount = LocalizationManager.getValue(\"confirm\", \"Common\")\n                    )\n                )\n        }\n\n    }\n\n\n    /**\n     * Sets data from API through LayoutManager\n     * @param transactionCurrencyApi represents the currency which by default.\n     * @param itemCountApi represents the itemsCount for the Merchant.\n     * @param originalAmountApi represents the default amount from API.\n     * */\n    fun setDataFromAPI(\n        originalAmountApi: String,\n        transactionCurrencyApi: String,\n        itemCountApi: String\n    ) {\n       // println(\"transactionCurrencyApi\" + transactionCurrencyApi)\n        itemCountt = itemCountApi\n        originalAmount = CurrencyFormatter.currencyFormat(originalAmountApi)\n        transactionCurrency = transactionCurrencyApi\n        bindViewComponents()\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout/src/main/java/company/tap/checkout/internal/viewholders/AmountViewHolder.kt b/checkout/src/main/java/company/tap/checkout/internal/viewholders/AmountViewHolder.kt
--- a/checkout/src/main/java/company/tap/checkout/internal/viewholders/AmountViewHolder.kt	(revision df257c08a25b965fa4d3bdfd4e11b7156b0c9bcc)
+++ b/checkout/src/main/java/company/tap/checkout/internal/viewholders/AmountViewHolder.kt	(date 1682848616175)
@@ -13,6 +13,7 @@
 import company.tap.checkout.internal.interfaces.AmountInterface
 import company.tap.checkout.internal.interfaces.BaseLayoutManager
 import company.tap.checkout.internal.utils.CurrencyFormatter
+import company.tap.checkout.internal.utils.addFadeOutAnimation
 import company.tap.taplocalizationkit.LocalizationManager
 import company.tap.tapuilibrary.themekit.ThemeManager
 import company.tap.tapuilibrary.themekit.theme.TextViewTheme
@@ -161,6 +162,7 @@
         })*/
  view.amount_section.tapChipAmount.setOnTouchListener(object : View.OnTouchListener {
             override fun onTouch(v: View?, event: MotionEvent?): Boolean {
+                view.amount_section.tapChipPopup.addFadeOutAnimation()
                 baseLayoutManager?.controlCurrency(isOpenedList)
                 return false
             }
