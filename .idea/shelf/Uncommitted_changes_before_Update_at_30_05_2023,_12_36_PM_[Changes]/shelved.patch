Index: checkout/src/main/java/company/tap/checkout/internal/viewmodels/CheckoutViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package company.tap.checkout.internal.viewmodels\n\nimport android.annotation.SuppressLint\nimport android.app.Activity\nimport android.content.Context\nimport android.content.Intent\nimport android.content.res.ColorStateList\nimport android.graphics.Color\nimport android.graphics.drawable.ShapeDrawable\nimport android.net.Uri\nimport android.os.Build\nimport android.os.Handler\nimport android.text.format.DateFormat\nimport android.util.Log\nimport android.view.View\nimport android.view.View.*\nimport android.view.ViewGroup\nimport android.view.animation.AnimationUtils\nimport android.widget.FrameLayout\nimport android.widget.ImageView\nimport android.widget.LinearLayout\nimport androidx.annotation.Nullable\nimport androidx.annotation.RequiresApi\nimport androidx.annotation.RestrictTo\nimport androidx.coordinatorlayout.widget.CoordinatorLayout\nimport androidx.core.view.isNotEmpty\nimport androidx.core.view.isVisible\nimport androidx.fragment.app.FragmentManager\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.ViewModel\nimport androidx.recyclerview.widget.DividerItemDecoration\nimport androidx.transition.*\nimport cards.pay.paycardsrecognizer.sdk.FrameManager\nimport cards.pay.paycardsrecognizer.sdk.ui.InlineViewCallback\nimport com.bugfender.sdk.Bugfender\nimport com.bumptech.glide.Glide\nimport com.bumptech.glide.load.engine.DiskCacheStrategy\nimport com.fasterxml.jackson.databind.ObjectMapper\nimport com.google.android.gms.wallet.PaymentData\nimport com.google.android.material.bottomsheet.BottomSheetBehavior\nimport com.google.android.material.bottomsheet.BottomSheetDialog\nimport com.google.gson.Gson\nimport com.google.gson.JsonObject\nimport company.tap.cardinputwidget2.CardBrandSingle\nimport company.tap.cardinputwidget2.CardInputUIStatus\nimport company.tap.cardinputwidget2.widget.CardInputListener\nimport company.tap.cardscanner.*\nimport company.tap.checkout.R\nimport company.tap.checkout.internal.PaymentDataProvider\nimport company.tap.checkout.internal.adapter.CardTypeAdapterUIKIT\nimport company.tap.checkout.internal.adapter.CurrencyTypeAdapter\nimport company.tap.checkout.internal.adapter.GoPayCardAdapterUIKIT\nimport company.tap.checkout.internal.adapter.ItemAdapter\nimport company.tap.checkout.internal.api.enums.ChargeStatus\nimport company.tap.checkout.internal.api.enums.PaymentType\nimport company.tap.checkout.internal.api.models.*\nimport company.tap.checkout.internal.api.requests.CreateTokenGPayRequest\nimport company.tap.checkout.internal.api.responses.DeleteCardResponse\nimport company.tap.checkout.internal.api.responses.MerchantData\nimport company.tap.checkout.internal.api.responses.PaymentOptionsResponse\nimport company.tap.checkout.internal.apiresponse.CardViewEvent\nimport company.tap.checkout.internal.apiresponse.CardViewModel\nimport company.tap.checkout.internal.apiresponse.testmodels.GoPaySavedCards\nimport company.tap.checkout.internal.cache.SharedPrefManager\nimport company.tap.checkout.internal.cache.UserSupportedLocaleForTransactions\nimport company.tap.checkout.internal.enums.PaymentTypeEnum\nimport company.tap.checkout.internal.enums.SectionType\nimport company.tap.checkout.internal.enums.WebViewType\nimport company.tap.checkout.internal.interfaces.*\nimport company.tap.checkout.internal.utils.*\nimport company.tap.checkout.internal.utils.AmountCalculator.calculateExtraFeesAmount\nimport company.tap.checkout.internal.viewholders.*\nimport company.tap.checkout.internal.webview.WebFragment\nimport company.tap.checkout.internal.webview.WebViewContract\nimport company.tap.checkout.open.CheckOutActivity\nimport company.tap.checkout.open.CheckoutFragment\nimport company.tap.checkout.open.controller.SDKSession\nimport company.tap.checkout.open.controller.SDKSession.tabAnimatedActionButton\nimport company.tap.checkout.open.controller.SessionManager\nimport company.tap.checkout.open.data_managers.PaymentDataSource\nimport company.tap.checkout.open.enums.CardType\nimport company.tap.checkout.open.enums.TransactionMode\nimport company.tap.checkout.open.models.ItemsModel\nimport company.tap.nfcreader.open.reader.TapEmvCard\nimport company.tap.taplocalizationkit.LocalizationManager\nimport company.tap.tapuilibraryy.themekit.ThemeManager\nimport company.tap.tapuilibraryy.themekit.theme.SeparatorViewTheme\nimport company.tap.tapuilibraryy.uikit.animation.MorphingAnimation\nimport company.tap.tapuilibraryy.uikit.datasource.LoyaltyHeaderDataSource\nimport company.tap.tapuilibraryy.uikit.enums.ActionButtonState\nimport company.tap.tapuilibraryy.uikit.enums.GoPayLoginMethod\nimport company.tap.tapuilibraryy.uikit.fragment.NFCFragment\nimport company.tap.tapuilibraryy.uikit.interfaces.TabAnimatedButtonListener\nimport company.tap.tapuilibraryy.uikit.ktx.loadAppThemManagerFromPath\nimport company.tap.tapuilibraryy.uikit.ktx.makeLinks\nimport company.tap.tapuilibraryy.uikit.ktx.setTopBorders\nimport company.tap.tapuilibraryy.uikit.utils.MetricsUtil\nimport company.tap.tapuilibraryy.uikit.views.TabAnimatedActionButton\nimport company.tap.tapuilibraryy.uikit.views.TapBrandView\nimport kotlinx.android.synthetic.main.amountview_layout.view.*\nimport kotlinx.android.synthetic.main.businessview_layout.view.*\nimport kotlinx.android.synthetic.main.cardviewholder_layout1.view.*\nimport kotlinx.android.synthetic.main.fragment_checkouttaps.view.*\nimport kotlinx.android.synthetic.main.gopaysavedcard_layout.view.*\nimport kotlinx.android.synthetic.main.itemviewholder_layout.view.*\nimport kotlinx.android.synthetic.main.loyalty_view_layout.view.*\nimport kotlinx.android.synthetic.main.otpview_layout.view.*\nimport kotlinx.android.synthetic.main.switch_layout.view.*\nimport mobi.foo.benefitinapp.data.Transaction\nimport mobi.foo.benefitinapp.listener.CheckoutListener\nimport mobi.foo.benefitinapp.utils.BenefitInAppCheckout\nimport org.json.JSONException\nimport org.json.JSONObject\nimport java.math.BigDecimal\nimport java.util.*\nimport kotlin.properties.Delegates\n\n\n/**\n *\n * Copyright Â© 2020 Tap Payments. All rights reserved.\n *\n */\n\n@RestrictTo(RestrictTo.Scope.LIBRARY)\nopen class CheckoutViewModel : ViewModel(), BaseLayoutManager, OnCardSelectedActionListener,\n    PaymentCardComplete, onCardNFCCallListener, OnCurrencyChangedActionListener, WebViewContract,\n    TapTextRecognitionCallBack, TapScannerCallback, CheckoutListener, TabAnimatedButtonListener,\n    MorphingAnimation.OnAnimationEndListener {\n    private var savedCardList: MutableList<SavedCard>? = mutableListOf()\n    private var arrayListSavedCardSize = ArrayList<SavedCard>()\n    private var supportedLoyalCards = MutableLiveData<List<LoyaltySupportedCurrency>>()\n    private var paymentOptionsList = MutableLiveData<List<PaymentOption>>()\n    private var goPayCardList = MutableLiveData<List<GoPaySavedCards>>()\n    private var selectedViewToBeDeletedFromCardViewHolder: ViewGroup? = null\n    private var viewToBeBlurCardViewHolder: View? = null\n    var newColorVal: Int? = null\n\n    private var allCurrencies = MutableLiveData<List<SupportedCurrencies>>()\n    private var selectedItemsDel by Delegates.notNull<Int>()\n    private var cardIDToBeDeleted: Int? = 0\n\n    private val isShaking = MutableLiveData<Boolean>()\n    val localCurrencyReturned = MutableLiveData<Boolean>()\n    val powerdByTapAnimationFinished = MutableLiveData<Boolean>()\n    val isItemsAreOpend = MutableLiveData<Boolean>()\n\n    private var deleteCard: Boolean = false\n    private var displayItemsOpen: Boolean = false\n    private var displayOtpIsOpen: Boolean = false\n    private var saveCardSwitchHolder: SwitchViewHolder? = null\n\n    private lateinit var title: String\n    private lateinit var paymentInlineViewHolder: PaymentInlineViewHolder\n    private lateinit var goPaySavedCardHolder: GoPaySavedCardHolder\n    private lateinit var businessViewHolder: BusinessViewHolder\n    private lateinit var amountViewHolder: AmountViewHolder\n    private lateinit var currencyAdapter: CurrencyTypeAdapter\n    private lateinit var goPayAdapter: GoPayCardAdapterUIKIT\n    private lateinit var goPayViewsHolder: GoPayViewsHolder\n    private lateinit var itemsViewHolder: ItemsViewHolder\n    private lateinit var cardViewHolder: CardViewHolder\n    private lateinit var webViewHolder: WebViewHolder\n    private lateinit var asynchronousPaymentViewHolder: AsynchronousPaymentViewHolder\n    private lateinit var loyaltyViewHolder: LoyaltyViewHolder\n\n    private var tabAnimatedActionButtonViewHolder: TabAnimatedActionButtonViewHolder? = null\n    private lateinit var bottomSheetDialog: BottomSheetDialog\n    private lateinit var fragmentManager: FragmentManager\n\n    @SuppressLint(\"StaticFieldLeak\")\n    private lateinit var bottomSheetLayout: FrameLayout\n\n    @Nullable\n    internal lateinit var selectedAmount: String\n\n    @Nullable\n    lateinit var selectedCurrency: String\n\n    companion object {\n        var currencySelectedForCheck: String = \"\"\n    }\n\n    private var fee: BigDecimal? = BigDecimal.ZERO\n    private var webPaymentOptions: java.util.ArrayList<PaymentOption> = ArrayList()\n\n    @JvmField\n    var currentCurrency: String = \"\"\n\n    @JvmField\n    var currentCurrencySymbol: String = \"\"\n\n\n    @JvmField\n    var finalCurrencySymbol: String = \"\"\n\n    @JvmField\n    var currentAmount: String = \"\"\n    private lateinit var adapter: CardTypeAdapterUIKIT\n    private lateinit var itemAdapter: ItemAdapter\n    private lateinit var otpViewHolder: OTPViewHolder\n\n    @SuppressLint(\"StaticFieldLeak\")\n    private lateinit var webFrameLayout: FrameLayout\n\n    @SuppressLint(\"StaticFieldLeak\")\n    private lateinit var frameLayout: FrameLayout\n\n    @SuppressLint(\"StaticFieldLeak\")\n    private lateinit var inLineCardLayout: FrameLayout\n\n    @SuppressLint(\"StaticFieldLeak\")\n    private lateinit var headerLayout: LinearLayout\n    private lateinit var background: LinearLayout\n\n    @SuppressLint(\"StaticFieldLeak\")\n    private lateinit var sdkLayout: LinearLayout\n\n    @SuppressLint(\"StaticFieldLeak\")\n    private lateinit var topHeaderView: TapBrandView\n\n\n    private lateinit var checkoutFragment: CheckoutFragment\n    private lateinit var itemList: List<ItemsModel>\n    private lateinit var unModifiedItemList: List<ItemsModel>\n    private lateinit var selectedPaymentOption: PaymentOption\n\n    @SuppressLint(\"StaticFieldLeak\")\n    private lateinit var context: Context\n    private lateinit var cardViewModel: CardViewModel\n    private var otpTypeString: PaymentTypeEnum = PaymentTypeEnum.SAVEDCARD\n    private lateinit var paymentActionType: PaymentType\n    private val nfcFragment = NFCFragment()\n\n\n    //  private val inlineViewFragment = InlineViewFragment()\n    private val inlineCamerFragment = CameraFragment()\n    private var isInlineOpened = false\n\n    @JvmField\n    var isNFCOpened = false\n    private var textRecognitionML: TapTextRecognitionML? = null\n    private lateinit var intent: Intent\n    private lateinit var inlineViewCallback: InlineViewCallback\n    lateinit var paymentOptionsResponse: PaymentOptionsResponse\n    lateinit var redirectURL: String\n    lateinit var cardId: String\n    var currencyOldRate: BigDecimal? = null\n    var lastSelectedCurrency: String? = null\n\n    @JvmField\n    var isSavedCardSelected: Boolean? = false\n\n    @JvmField\n    var globalChargeResponse: Charge? = null\n\n    @JvmField\n    var selectedTotalAmount: String? = null\n\n    @JvmField\n    var selectedAmountPos: BigDecimal? = null\n\n    @JvmField\n    var selectedCurrencyPos: String? = null\n\n    lateinit var paymentOptionsWorker: java.util.ArrayList<PaymentOption>\n\n\n    val appId: String = \"4530082749\"\n    val merchantId: String = \"00000101\"\n    val seceret: String = \"3l5e0cstdim11skgwoha8x9vx9zo0kxxi4droryjp4eqd\"\n    val countrycode: String = \"1001\"\n    val mcc: String = \"4816\"\n\n\n    private var colorBackGround: String? = null\n    private var intColorArray: IntArray? = null\n    private var startColor: String? = null\n    private var endColor: String? = null\n    private var middleColor: String? = null\n    private var image: ImageView? = null\n    var savedCardsBasedCurr: java.util.ArrayList<SavedCard> = java.util.ArrayList<SavedCard>()\n\n    @JvmField\n    var incrementalCount: Int = 0\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun initLayoutManager(\n        bottomSheetDialog: BottomSheetDialog,\n        context: Context,\n        fragmentManager: FragmentManager,\n        sdkLayout: LinearLayout,\n        frameLayout: FrameLayout,\n        webFrameLayout: FrameLayout,\n        inLineCardLayout: FrameLayout,\n        inlineViewCallback: InlineViewCallback,\n        intent: Intent,\n        cardViewModel: CardViewModel,\n        checkoutFragment: CheckoutFragment,\n        headerLayout: LinearLayout,\n         topHeaderView: TapBrandView?,\n    ) {\n        this.context = context\n        this.fragmentManager = fragmentManager\n        this.sdkLayout = sdkLayout\n        this.frameLayout = frameLayout\n        this.webFrameLayout = webFrameLayout\n        this.bottomSheetDialog = bottomSheetDialog\n        this.inLineCardLayout = inLineCardLayout\n        this.inlineViewCallback = inlineViewCallback\n        this.intent = intent\n        this.cardViewModel = cardViewModel\n        this.checkoutFragment = checkoutFragment\n        this.headerLayout = headerLayout\n        if (topHeaderView != null) {\n            this.topHeaderView = topHeaderView\n        }\n\n        initializeScanner(this)\n        initViewHolders()\n        initAmountAction()\n        initSwitchAction()\n        initOtpActionButton()\n        setAllSeparatorTheme()\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setTabAnimatedInterface(object :\n            TabAnimatedButtonListener {\n            override fun onTabAnimatedStarted() {\n                headerLayout.deepForEach { isEnabled = false }\n            }\n\n            override fun onTabAnimatedEnded() {\n                doAfterSpecificTime {\n                    headerLayout.deepForEach { isEnabled = true }\n                }\n\n            }\n\n        })\n//\n//        doAfterSpecificTime(50) {\n//            this.topHeaderView.startPoweredByAnimation(\n//                delayTime = Constants.PoweredByLayoutAnimationDelay,\n//                this.topHeaderView.poweredByImage, onAnimationEnd =\n//                {\n//                    if (isItemsAreOpend.value==false){\n//                        poweredByTapAnimationEnds()\n//                    }\n//                }\n//            )\n//\n//        }\n\n\n\n    }\n\n    private fun poweredByTapAnimationEnds() {\n        powerdByTapAnimationFinished.value = true\n    }\n\n    init {\n        powerdByTapAnimationFinished.value = false\n        isItemsAreOpend.value = false\n    }\n\n    private fun initLoyaltyView() {\n        if (SDKSession.enableLoyalty == true) {\n            /*removeViews(saveCardSwitchHolder)\n            addViews(loyaltyViewHolder,saveCardSwitchHolder)*/\n            removeAllViews()\n            addViews(\n                businessViewHolder,\n                amountViewHolder,\n                cardViewHolder,\n                paymentInlineViewHolder,\n                loyaltyViewHolder,\n                saveCardSwitchHolder\n            )\n            loyaltyViewHolder.view.loyaltyView.constraintLayout?.visibility = VISIBLE\n\n        } else\n            loyaltyViewHolder.view.loyaltyView.constraintLayout?.visibility = GONE\n    }\n\n    private fun initializeScanner(checkoutViewModel: CheckoutViewModel) {\n        textRecognitionML = TapTextRecognitionML(checkoutViewModel)\n        textRecognitionML?.addTapScannerCallback(checkoutViewModel)\n    }\n\n    override fun onTabAnimatedStarted() {\n        context.showToast(\"animation Started\")\n    }\n\n    override fun onTabAnimatedEnded() {\n        context.showToast(\"animation Ended\")\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun initOtpActionButton() {\n\n        otpViewHolder.otpView.otpViewActionButton.setOnClickListener {\n            //Added to hide keyboard if open\n            CustomUtils.hideKeyboardFrom(context as Activity, otpViewHolder.view)\n            when (otpTypeString) {\n                PaymentTypeEnum.GOPAY ->\n                    goPayViewsHolder.onOtpButtonConfirmationClick(otpViewHolder.otpView.otpViewInput1.text.toString())\n\n\n                PaymentTypeEnum.SAVEDCARD -> confirmOTPCode(otpViewHolder.otpView.otpViewInput1.text.toString())\n                else -> {\n\n                    removeViews(\n                        businessViewHolder,\n                        amountViewHolder,\n                        paymentInlineViewHolder,\n                        cardViewHolder,\n                        saveCardSwitchHolder,\n                        otpViewHolder\n                    )\n                    addViews(\n                        businessViewHolder,\n                        amountViewHolder,\n                        cardViewHolder,\n                        paymentInlineViewHolder,\n                        saveCardSwitchHolder\n                    )\n                    saveCardSwitchHolder?.view?.mainSwitch?.switchSaveMobile?.visibility =\n                        GONE\n                    val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n                    val nowString: String = LocalizationManager.getValue(\"now\", \"ActionButton\")\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n                        false,\n                        \"en\",\n                        if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                            payString + \" \" + nowString\n                        } else {\n                            payString + \" \" + nowString\n                        },\n                        Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.paymentBackgroundColor\")),\n                        Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.titleLabelColor\")),\n                    )\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = VISIBLE\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                        ActionButtonState.IDLE\n                    )\n                    paymentInlineViewHolder.tapMobileInputView.clearNumber()\n\n                }\n            }\n        }\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun confirmOTPCode(otpCode: String) {\n        otpViewHolder.view.otpView.otpViewActionButton.setDisplayMetricsTheme(\n            CustomUtils.getDeviceDisplayMetrics(\n                context as Activity\n            ), CustomUtils.getCurrentTheme()\n        )\n        otpViewHolder.view.otpView.otpViewActionButton.changeButtonState(ActionButtonState.LOADING)\n        val viewsToDisable = mutableListOf<View>(\n            cardViewHolder.view.mainChipgroup.chipsRecycler as View,\n            paymentInlineViewHolder.tapCardInputView.backArrow as View,\n            amountViewHolder.view.amount_section.constraint,\n            amountViewHolder.view.amount_section.tapChipAmount,\n            cardViewHolder.view,\n            cardViewHolder.view.mainChipgroup,\n            paymentInlineViewHolder.tapCardInputView,\n            paymentInlineViewHolder.view,\n            paymentInlineViewHolder.nfcButton as View,\n            paymentInlineViewHolder.scannerButton as View,\n            saveCardSwitchHolder?.view as View,\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton as View\n        )\n        viewsToDisable.disableViews()\n        when (PaymentDataSource.getTransactionMode()) {\n            TransactionMode.PURCHASE -> sendChargeOTPCode(otpCode)\n            TransactionMode.AUTHORIZE_CAPTURE -> sendAuthorizeOTPCode(otpCode)\n            else -> sendChargeOTPCode(otpCode)\n        }\n\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun sendAuthorizeOTPCode(otpCode: String) {\n        cardViewModel.processEvent(\n            CardViewEvent.AuthenticateAuthorizeTransaction,\n            this,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            otpCode\n        )\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun sendChargeOTPCode(otpCode: String) {\n        cardViewModel.processEvent(\n            CardViewEvent.AuthenticateChargeTransaction,\n            this,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            otpCode\n        )\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun initViewHolders() {\n        businessViewHolder = BusinessViewHolder(context, this)\n        amountViewHolder = AmountViewHolder(context, this, this)\n        tabAnimatedActionButtonViewHolder = TabAnimatedActionButtonViewHolder(context)\n        cardViewHolder = CardViewHolder(context, this)\n        goPaySavedCardHolder = GoPaySavedCardHolder(context, this, this)\n        saveCardSwitchHolder = SwitchViewHolder(context, this)\n\n        loyaltyViewHolder = LoyaltyViewHolder(context, this, this)\n\n\n        headerLayout.let { it1 ->\n            setTopBorders(\n                view = it1,\n                cornerRadius = 35f,\n                strokeWidth = 0.0f,\n                strokeColor = loadAppThemManagerFromPath(AppColorTheme.PoweredByTapBackgroundColor),// stroke color\n                tintColor = loadAppThemManagerFromPath(AppColorTheme.PoweredByTapBackgroundColor),// tint color\n                shadowColor = loadAppThemManagerFromPath(AppColorTheme.PoweredByTapBackgroundColor)\n            )\n\n        }//\n        paymentInlineViewHolder = PaymentInlineViewHolder(\n            context, this,\n            this,\n            this,\n            saveCardSwitchHolder,\n            this,\n            cardViewModel, checkoutFragment, loyaltyViewHolder,\n            sdkLayout, bottomSheetLayout, headerLayout\n        )\n\n        itemsViewHolder = ItemsViewHolder(context, this)\n\n        otpViewHolder = OTPViewHolder(context)\n        otpViewHolder.otpView.visibility = GONE\n        otpViewHolder.otpView.requestFocus()\n        otpViewHolder.otpView.otpViewInput1.cursorColor =\n            Color.parseColor(ThemeManager.getValue(\"TapOtpView.OtpController.activeBottomColor\"))\n        otpViewHolder.otpView.otpViewInput1.setLineColorInactive(\n            Color.parseColor(\n                ThemeManager.getValue(\n                    \"TapOtpView.OtpController.bottomLineColor\"\n                )\n            )\n        )\n        otpViewHolder.otpView.otpViewInput1.setLineColorActive(\n            Color.parseColor(\n                ThemeManager.getValue(\n                    \"TapOtpView.OtpController.activeBottomColor\"\n                )\n            )\n        )\n        otpViewHolder.otpView.otpViewInput1.isCursorVisible = true\n        goPayViewsHolder = GoPayViewsHolder(context, this, otpViewHolder)\n        asynchronousPaymentViewHolder = AsynchronousPaymentViewHolder(context, this)\n        logicForLoyaltyProgram()\n\n        amountViewHolder.view.amount_section.tapChipPopup.setOnClickListener {\n            amountViewHolder.view.amount_section.tapChipPopup.slideFromLeftToRight()\n            with(SharedPrefManager.getUserSupportedLocaleForTransactions(context)!!) {\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n                    submitNewLocalCurrency(\n                        currencySelected = currency.toString(),\n                        currencyRate = rate?.toBigDecimal()!!,\n                        totalSelectedAmount = amount,\n                        selectedCurrencySymbol = symbol ?: \"\"\n                    )\n                }\n            }\n        unActivateActionButton()\n\n        }\n        newColorVal = Color.parseColor(ThemeManager.getValue(\"horizontalList.backgroundColor\"))\n\n\n    }\n\n\n    private fun showCountryFlag(): String? {\n        val currency = SharedPrefManager.getUserSupportedLocaleForTransactions(context)\n        Log.e(\"localNeeded\", currency.toString())\n        if (ThemeManager.currentTheme.contains(\"dark\")) {\n            return currency?.logos?.dark?.png\n        } else {\n            return currency?.logos?.light?.png\n        }\n    }\n\n    private fun initSwitchAction() {\n        saveCardSwitchHolder?.view?.mainSwitch?.mainSwitch?.visibility = GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.switchGoPayCheckout?.isChecked = false\n        saveCardSwitchHolder?.view?.cardSwitch?.switchGoPayCheckout?.visibility = GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.saveGoPay?.visibility = GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.alertGoPaySignUp?.visibility = GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.switchSeparator?.visibility = GONE\n    }\n\n    private fun initAmountAction() {\n        amountViewHolder.setOnItemsClickListener()\n        amountViewHolder.view.amount_section.mainKDAmountValue.visibility = GONE\n    }\n\n\n    override fun displayStartupLayout(enabledSections: ArrayList<SectionType>) {\n        println(\"PaymentDataSource.getPaymentDataType()\" + PaymentDataSource.getPaymentDataType())\n        //Todo based on api response logic for switch case\n        when (PaymentDataSource.getTransactionMode()) {\n\n            TransactionMode.TOKENIZE_CARD -> {\n                addViews(\n                    businessViewHolder,\n                    paymentInlineViewHolder,\n                    saveCardSwitchHolder\n                )\n\n            }\n            TransactionMode.SAVE_CARD -> {\n                addViews(\n                    businessViewHolder,\n                    paymentInlineViewHolder,\n                    saveCardSwitchHolder\n                )\n            }\n            else -> {\n\n\n                if (PaymentDataSource.getPaymentDataType() == \"WEB\") {\n                    addViews(\n                        businessViewHolder,\n                        amountViewHolder,\n                        cardViewHolder,\n                        saveCardSwitchHolder\n                    )\n                    cardViewHolder.cardInfoHeaderText?.visibility = GONE\n                } else if (PaymentDataSource.getPaymentDataType() == \"CARD\") {\n\n                    addViews(\n                        businessViewHolder,\n                        amountViewHolder,\n                        cardViewHolder,\n                        paymentInlineViewHolder, saveCardSwitchHolder\n                    )\n                    cardViewHolder.cardInfoHeaderText.visibility = VISIBLE\n                } else\n                //Checkimg to be removed once loyalty enabled form api level onluy else will be there\n                    if (SDKSession.enableLoyalty == true) {\n                        addViews(\n                            businessViewHolder,\n                            amountViewHolder,\n                            cardViewHolder,\n                            paymentInlineViewHolder,\n                            loyaltyViewHolder,\n                            saveCardSwitchHolder\n                        )\n                    } else {\n                        addViews(\n                            businessViewHolder,\n                            amountViewHolder,\n                            cardViewHolder,\n                            paymentInlineViewHolder,\n                            saveCardSwitchHolder\n                        )\n                    }\n\n\n            }\n        }\n\n        saveCardSwitchHolder?.view?.mainSwitch?.mainSwitchLinear?.setBackgroundColor(\n            Color.parseColor(\n                ThemeManager.getValue(\n                    \"TapSwitchView.main.backgroundColor\"\n                )\n            )\n        )\n        inLineCardLayout.visibility = GONE\n        amountViewHolder.readyToScanVisibility(false)\n        saveCardSwitchHolder?.view?.cardviewSwitch?.cardElevation = 0f\n        SDKSession.activity?.let {\n            CustomUtils.getDeviceDisplayMetrics(\n                it\n            )\n        }?.let {\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setDisplayMetricsTheme(\n                it,\n                CustomUtils.getCurrentTheme()\n            )\n        }\n\n\n    }\n\n    fun setBottomSheetLayout(bottomSheetLayout: FrameLayout) {\n        this.bottomSheetLayout = bottomSheetLayout\n        bottomSheetLayout.clipToOutline = true\n//        bottomSheetLayout.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"horizontalList.backgroundColor\")))\n//        bottomSheetLayout.let { it1 ->\n//            setTopBorders(\n//                it1,\n//                40f,// corner raduis\n//                0.0f,\n//                Color.parseColor(ThemeManager.getValue(\"horizontalList.backgroundColor\")),// stroke color\n//                Color.parseColor(ThemeManager.getValue(\"horizontalList.backgroundColor\")),// tint color\n//                Color.parseColor(ThemeManager.getValue(\"horizontalList.backgroundColor\"))\n//            )\n//\n//\n//        }\n    }\n\n    override fun displayGoPayLogin() {\n        saveCardSwitchHolder?.let {\n            removeViews(\n                businessViewHolder, amountViewHolder,\n                cardViewHolder, paymentInlineViewHolder,\n                it, otpViewHolder,\n                goPayViewsHolder\n            )\n        }\n\n        addViews(businessViewHolder, amountViewHolder, goPayViewsHolder)\n        if (goPayViewsHolder.goPayopened) {\n            goPayViewsHolder.goPayLoginInput.inputType = GoPayLoginMethod.PHONE\n            goPayViewsHolder.goPayLoginInput.visibility = VISIBLE\n            saveCardSwitchHolder?.view?.cardSwitch?.switchGoPayCheckout?.visibility = VISIBLE\n        }\n        //TODO goPayAdapter.updateAdapterData(goPayCardList.value as List<GoPaySavedCards>)\n        amountViewHolder.changeGroupAction(false)\n        goPayViewsHolder.goPayopened = true\n    }\n\n\n    override fun displayGoPay() {\n\n        saveCardSwitchHolder?.let {\n            removeViews(\n                businessViewHolder,\n                amountViewHolder,\n                goPayViewsHolder,\n                cardViewHolder,\n                paymentInlineViewHolder,\n                it,\n                otpViewHolder\n            )\n        }\n\n        saveCardSwitchHolder?.let {\n            addViews(\n                businessViewHolder,\n                amountViewHolder,\n                goPaySavedCardHolder,\n                cardViewHolder,\n                paymentInlineViewHolder,\n                it\n            )\n        }\n\n        cardViewHolder.view.mainChipgroup.groupAction.visibility = View.INVISIBLE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = VISIBLE\n        saveCardSwitchHolder?.goPayisLoggedin = true\n        adapter.goPayOpenedfromMain(true)\n        adapter.removeItems()\n    }\n\n    override fun controlCurrency(display: Boolean) {\n        isItemsAreOpend.value = display\n        if (display) caseDisplayControlCurrency()\n        else caseNotDisplayControlCurrency()\n\n        displayItemsOpen = !display\n        amountViewHolder.changeGroupAction(!display)\n        //   if (this::currentAmount.isInitialized)\n        if (this::selectedAmount.isInitialized && this::selectedCurrency.isInitialized) {\n            if (selectedAmount == currentAmount && selectedCurrency == currentCurrency) {\n                amountViewHolder.view.amount_section.mainKDAmountValue.visibility = GONE\n\n\n            } else {\n                amountViewHolder.updateSelectedCurrency(\n                    displayItemsOpen,\n                    selectedAmount, selectedCurrency,\n                    currentAmount, finalCurrencySymbol, currentCurrencySymbol\n                )\n\n            }\n\n        }\n        if (otpViewHolder.otpView.isVisible) {\n            removeViews(otpViewHolder)\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.RESET)\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isClickable = true\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.stateListAnimator = null\n            val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n            val nowString: String = LocalizationManager.getValue(\"now\", \"ActionButton\")\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n                false,\n                \"en\",\n                if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                    payString + \" \" + nowString\n                } else {\n                    payString + \" \" + nowString\n                },\n                Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n                Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n            )\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isActivated = false\n        }\n        if (PaymentDataSource.getPaymentDataType() != null && PaymentDataSource.getPaymentDataType() == \"WEB\") {\n            removeViews(paymentInlineViewHolder)\n        }\n        removeInlineScanner()\n        removeNFCViewFragment()\n\n\n    }\n\n    override fun reOpenSDKState() {\n        //todo add back to sdk functionality\n\n        removeViews(otpViewHolder, amountViewHolder, paymentInlineViewHolder, saveCardSwitchHolder)\n        doAfterSpecificTime(time = 500L) {\n            with(cardViewHolder.view.mainChipgroup) {\n                mutableListOf<View>(\n                    chipsRecycler,\n                    groupAction,\n                    groupName\n                ).addFadeInAnimationToViews()\n            }\n\n        }\n\n        businessViewHolder.setDataFromAPI(\n            PaymentDataSource.getMerchantData()?.logo,\n            PaymentDataSource.getMerchantData()?.name\n        )\n        addViews(\n            amountViewHolder,\n            paymentInlineViewHolder,\n            saveCardSwitchHolder\n        )\n        amountViewHolder.view.amount_section.itemAmountLayout?.visibility = VISIBLE\n        amountViewHolder.view.amount_section.itemPopupLayout?.visibility = VISIBLE\n        amountViewHolder.view.amount_section.tapChipAmount?.visibility = VISIBLE\n        checkSelectedAmountInitiated()\n        amountViewHolder.changeGroupAction(false)\n        amountViewHolder.setOnItemsClickListener()\n        amountViewHolder.view.amount_section.flagImageView?.visibility = VISIBLE\n\n\n        saveCardSwitchHolder?.view?.visibility = VISIBLE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.RESET)\n        val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n        val nowString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n            false,\n            \"en\",\n            if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                payString + \" \" + nowString\n            } else {\n                payString + \" \" + nowString\n            },\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n        )\n\n    }\n\n\n    fun addTitlePaymentAndFlag() {\n        addDataToAmountView()\n        if (displayItemsOpen) {\n\n        }\n        amountViewHolder.view.amount_section.tapChipPopup.slidefromRightToLeft()\n        amountViewHolder.view.amount_section.itemPopupLayout.applyGlowingEffect(getCurrencyColors())\n\n    }\n\n    fun addDataToAmountView() {\n        val currencyAlert: String = LocalizationManager.getValue(\"currencyAlert\", \"Common\")\n        amountViewHolder.view.amount_section.popupTextView.text =\n            currencyAlert + \" \" + checkoutFragment.getSimIsoCountryCurrency()\n        Glide.with(context).load(showCountryFlag())\n            .into(amountViewHolder.view.amount_section.flagImageView);\n        amountViewHolder.view.amount_section.tapChipAmount.bringToFront()\n\n    }\n\n    fun removevisibiltyCurrency() {\n        amountViewHolder.view.amount_section.tapChipPopup.visibility = GONE\n    }\n\n    fun getCurrencyColors(): Pair<Int, Int> {\n        var pair: Pair<Int, Int>? = null\n        if (ThemeManager.currentTheme.contains(\"dark\")) {\n            /**\n             * dark theme colors\n             */\n            pair = Pair(Color.parseColor(\"#211F1F\"), Color.parseColor(\"#343232\"))\n        } else {\n            /**\n             * light theme colors\n             */\n\n            pair = Pair(Color.parseColor(\"#F4F4F4\"), Color.parseColor(\"#E1E1E1\"))\n        }\n        return pair\n    }\n\n\n    /**\n     * case displaying @TODO:EGP /\n     */\n\n    private fun caseDisplayControlCurrency() {\n\n\n        removeViews(\n            cardViewHolder,\n            paymentInlineViewHolder,\n            goPayViewsHolder,\n            otpViewHolder,\n        )\n        saveCardSwitchHolder?.view?.visibility = View.GONE\n        addViews(\n            itemsViewHolder\n        )\n\n\n        /**\n         * will be replaced by itemList coming from the API**/\n        if (PaymentDataSource.getItems() != null) {\n            itemsViewHolder.view.itemRecylerView.adapter = itemAdapter\n            itemAdapter.updateAdapterData(itemList)\n        }\n        currencyAdapter.updateAdapterData(allCurrencies.value as List<SupportedCurrencies>)\n\n        frameLayout.visibility = VISIBLE\n        itemsViewHolder.itemsdisplayed = true\n\n\n        //Hide keyboard of any open\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n            CustomUtils.hideKeyboardFrom(\n                paymentInlineViewHolder.view.context,\n                paymentInlineViewHolder.view\n            )\n        }\n    }\n\n    private fun caseNotDisplayControlCurrency() {\n\n        if (goPayViewsHolder.goPayopened || itemsViewHolder.itemsdisplayed) setActionGoPayOpenedItemsDisplayed()\n        else setActionNotGoPayOpenedNotItemsDisplayed()\n\n        itemAdapter.resetViewToInitialValue()\n\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun setActionGoPayOpenedItemsDisplayed() {\n\n        removeViews(\n            cardViewHolder,\n            paymentInlineViewHolder,\n            goPayViewsHolder,\n            otpViewHolder,\n            itemsViewHolder\n        )\n        if (::webViewHolder.isInitialized) {\n            removeViews(webViewHolder)\n        }\n        addViews(\n            cardViewHolder,\n            paymentInlineViewHolder,\n            saveCardSwitchHolder, afterAddingViews = {\n                saveCardSwitchHolder?.view?.visibility = VISIBLE\n            })\n\n\n        paymentInlineViewHolder.resetPaymentCardView()\n        frameLayout.visibility = GONE\n    }\n\n    private fun setActionNotGoPayOpenedNotItemsDisplayed() {\n        val originalHeight: Int = sdkLayout.height\n        saveCardSwitchHolder?.let {\n            removeViews(\n                cardViewHolder,\n                paymentInlineViewHolder,\n                it,\n                itemsViewHolder\n            )\n        }\n\n        if (::webViewHolder.isInitialized) removeViews(webViewHolder)\n\n        saveCardSwitchHolder?.let {\n            addViews(\n                cardViewHolder,\n                paymentInlineViewHolder,\n                it\n            )\n        }\n\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.IDLE)\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isEnabled = true\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isClickable = true\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isActivated = true\n        itemsViewHolder.view.mainCurrencyChip.chipsRecycler.adapter = currencyAdapter\n        frameLayout.visibility = GONE\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    @SuppressLint(\"SetTextI18n\")\n    override fun displayOTPView(\n        phoneNumber: PhoneNumber?,\n        otpType: String,\n        chargeResponse: Charge?\n    ) {\n\n\n        // amountViewHolder.changeGroupAction(false)\n        amountViewHolder.view.amount_section.itemCountButton.text = LocalizationManager.getValue(\n            \"close\",\n            \"Common\"\n        )\n        // amountViewHolder.view.amount_section.itemAmountLayout?.visibility = View.GONE\n        //  amountViewHolder.view.amount_section.itemPopupLayout?.visibility = View.GONE\n        amountViewHolder.view.amount_section.flagImageView?.visibility = GONE\n        amountViewHolder.view.amount_section.popupTextView.text = LocalizationManager.getValue(\n            \"close\",\n            \"Common\"\n        )\n\n\n        //  amountViewHolder.view.amount_section.itemCountButton?.visibility = View.GONE\n\n        displayOtpIsOpen = true\n        displayItemsOpen = false\n        when (otpType) {\n            PaymentTypeEnum.GOPAY.name -> {\n                displayOtpGoPay(phoneNumber)\n            }\n            PaymentTypeEnum.telecom.name -> {\n                displayOtpTelecoms(phoneNumber)\n            }\n            PaymentTypeEnum.SAVEDCARD.name -> {\n                displayOtpCharge(phoneNumber, chargeResponse)\n            }\n            else -> {\n                displayOtpCharge(phoneNumber, chargeResponse)\n            }\n        }\n    }\n\n    private fun displayOtpGoPay(phoneNumber: PhoneNumber?) {\n        // otpTypeString = PaymentTypeEnum.GOPAY //temporray\n        removeViews(\n            cardViewHolder,\n            paymentInlineViewHolder, saveCardSwitchHolder, amountViewHolder\n        )\n        addViews(amountViewHolder, otpViewHolder)\n\n        otpViewHolder.otpView.visibility = VISIBLE\n        setOtpPhoneNumber(phoneNumber)\n        otpViewHolder.otpView.changePhone.setOnClickListener {\n            goPayViewsHolder.onChangePhoneClicked()\n        }\n    }\n\n    @SuppressLint(\"SetTextI18n\")\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun displayOtpCharge(phoneNumber: PhoneNumber?, chargeResponse: Charge?) {\n        // otpTypeString = PaymentTypeEnum.GOPAY //temporray\n        println(\"mmmmmmmm\" + amountViewHolder?.originalAmount)\n        /*if(::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n            amountViewHolder.updateSelectedCurrency(\n                false,\n                selectedAmount,\n                selectedCurrency,\n                currentAmount,\n                currentCurrency\n            )\n            println(\"selectedAmount>>>>\" + selectedAmount)\n        }*/\n        removeViews(\n            paymentInlineViewHolder, otpViewHolder\n        )\n\n        saveCardSwitchHolder?.view?.mainSwitch?.visibility = GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n\n        //start counter on open otpview\n        otpViewHolder?.otpView?.startCounter()\n        amountViewHolder?.view?.amountView_separator?.visibility = View.GONE\n        //Replaced blur with below\n        otpViewHolder?.otpView?.otpLinearLayout.setBackgroundColor(\n            Color.parseColor(\n                ThemeManager.getValue(\n                    \"amountSectionView.backgroundColor\"\n                )\n            )\n        )\n        // otpViewHolder?.otpView?.otpLinearLayout.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"TapOtpView.backgroundColor\")))\n        doAfterSpecificTime(time = 700L) {\n            removeViews(cardViewHolder)\n            addViews(otpViewHolder)\n            otpViewHolder.otpView.visibility = VISIBLE\n\n        }\n        doAfterSpecificTime(time = 800L) { CustomUtils.showKeyboard(context) }\n        //Added to hide the Items-Amount button when OTP is opened\n        // amountViewHolder.view.amount_section.itemAmountLayout?.visibility = View.GONE\n        amountViewHolder.view.amount_section.tapChipAmount?.visibility = GONE\n\n        setOtpPhoneNumber(phoneNumber)\n        otpViewHolder.otpView.changePhone.visibility = View.INVISIBLE\n        otpViewHolder.otpView.timerText.setOnClickListener {\n            resendOTPCode(chargeResponse)\n            otpViewHolder.otpView.restartTimer()\n        }\n        amountViewHolder.view.amount_section.mainKDAmountValue.visibility = GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = GONE\n    }\n\n    private fun setOtpPhoneNumber(phoneNumber: PhoneNumber?) {\n\n        var replaced = \"\"\n        var countryCodeReplaced = \"\"\n        countryCodeReplaced = phoneNumber?.countryCode?.replace(\"0\", \"\").toString()\n        if (phoneNumber?.number?.length!! > 7)\n            replaced = (phoneNumber.number.toString()).replaceRange(1, 6, \"â¢â¢â¢â¢\")\n        otpViewHolder.otpView.mobileNumberText.text = \"+$countryCodeReplaced $replaced\"\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun resendOTPCode(chargeResponse: Charge?) {\n        if (chargeResponse != null) {\n            if (chargeResponse is Authorize) resendAuthorizeOTPCode(chargeResponse as Authorize?)\n            else resendChargeOTPCode(chargeResponse as Charge?)\n        }\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun resendAuthorizeOTPCode(authorize: Authorize?) {\n        cardViewModel.requestAuthenticateForAuthorizeTransaction(this, authorize)\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun resendChargeOTPCode(charge: Charge?) {\n        if (charge != null) {\n            cardViewModel.requestAuthenticateForChargeTransaction(this, charge)\n        }\n    }\n\n    private fun displayOtpTelecoms(phoneNumber: PhoneNumber?) {\n        otpTypeString = PaymentTypeEnum.telecom\n        removeViews(\n            businessViewHolder,\n            amountViewHolder,\n            paymentInlineViewHolder,\n            cardViewHolder,\n            saveCardSwitchHolder,\n            otpViewHolder\n        )\n        addViews(\n            businessViewHolder,\n            amountViewHolder,\n            cardViewHolder,\n            paymentInlineViewHolder,\n            saveCardSwitchHolder,\n            otpViewHolder\n        )\n        //Added check change listener to handle showing of extra save options\n        saveCardSwitchHolder?.view?.mainSwitch?.switchSaveMobile?.visibility = GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = GONE\n        saveCardSwitchHolder?.view?.mainSwitch?.switchSaveMobile?.setOnCheckedChangeListener { buttonView, isChecked ->\n            if (isChecked) saveCardSwitchHolder?.view?.cardSwitch?.switchesLayout?.visibility =\n                GONE\n        }\n        saveCardSwitchHolder?.setSwitchToggleData(PaymentType.telecom)\n        otpViewHolder.setMobileOtpView()\n        var replaced = \"\"\n        var countryCodeReplaced = \"\"\n        if (phoneNumber?.number?.length!! > 7)\n            replaced = (phoneNumber.number.toString()).replaceRange(1, 6, \"....\")\n        countryCodeReplaced =\n            goPayViewsHolder.goPayLoginInput.countryCodePicker.selectedCountryCode.replace(\n                \"+\",\n                \" \"\n            )\n        otpViewHolder.otpView.mobileNumberTextNormalPay.text = \"+$countryCodeReplaced$replaced\"\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.P)\n    override fun displayRedirect(url: String, authenticate: Charge?) {\n        this.redirectURL = url\n\n        println(\"redirectURL before display>>\" + url)\n        if (::redirectURL.isInitialized && ::fragmentManager.isInitialized) {\n            if (otpViewHolder.otpView.isVisible) {\n                removeViews(\n                    // businessViewHolder,\n                    cardViewHolder,\n                    paymentInlineViewHolder,\n                    otpViewHolder\n                )\n            }\n            // setSlideAnimation()\n            if (PaymentDataSource?.getWebViewType() != null && PaymentDataSource.getWebViewType() == WebViewType.REDIRECT) {\n\n                //Stopped showing closetext as requested\n                // checkoutFragment.closeText.visibility = View.VISIBLE\n                doAfterSpecificTime {\n                    removeViews(\n                        paymentInlineViewHolder,\n                        otpViewHolder,\n                        goPaySavedCardHolder,\n                        goPayViewsHolder,\n                        amountViewHolder,\n                        cardViewHolder,\n                        paymentInlineViewHolder,\n                        tabAnimatedActionButtonViewHolder\n                    )\n\n                }\n\n\n                val fragment = WebFragment.newInstance(\n                    redirectURL,\n                    this,\n                    cardViewModel,\n                    authenticate,\n                    this,\n                    isFirstTimeLoading = true,\n                    onLoadedWebView = {\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.addFadeOutAnimation(\n                            durationTime = 5,\n                            isGone = true\n                        )\n\n                        showWebView()\n                    }\n                )\n                if (!fragmentManager.isDestroyed)\n                    fragmentManager.beginTransaction()\n                        .replace(R.id.webFrameLayout, fragment, \"webFragment\")\n                        .addToBackStack(\"webFragment\")\n                        .commit()\n\n\n            } else if (PaymentDataSource?.getWebViewType() != null && PaymentDataSource.getWebViewType() == WebViewType.THREE_DS_WEBVIEW) {\n\n                webViewHolder = WebViewHolder(\n                    context,\n                    url,\n                    this,\n                    cardViewModel,\n                    authenticate,\n                    this,\n                    bottomSheetLayout,\n                    sdkLayout,\n                    saveCardSwitchHolder,\n                    paymentInlineViewHolder,\n                    cardViewHolder\n                )\n                removeViews(\n                    //  businessViewHolder,\n                    // amountViewHolder,\n                    //  cardViewHolder,\n                    //  saveCardSwitchHolder,\n                    // paymentInlineViewHolder,\n                    otpViewHolder,\n                    goPaySavedCardHolder,\n                    goPayViewsHolder\n                )\n\n                addViews(webViewHolder)\n\n\n                //            saveCardSwitchHolder?.view?.mainSwitch?.visibility = GONE\n                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                    ActionButtonState.LOADING\n                )\n                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = VISIBLE\n                saveCardSwitchHolder?.view?.cardSwitch?.tapLogoImage?.visibility = GONE\n                // checkoutFragment.closeText.visibility = GONE\n\n\n            }\n        }\n    }\n\n    private fun showWebView() {\n        animateBS(\n            fromView = bottomSheetLayout,\n            toView = sdkLayout,\n            transitionAnimation = 1000L,\n            changeHeight = {\n                webFrameLayout.visibility = VISIBLE\n            })\n    }\n\n\n    override fun displaySaveCardOptions() {\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun setBinLookupData(\n        binLookupResponse: BINLookupResponse,\n        context: Context,\n        cardViewModel: CardViewModel\n    ) {\n        paymentInlineViewHolder = PaymentInlineViewHolder(\n            context,\n            this,\n            this,\n            this,\n            saveCardSwitchHolder,\n            this,\n            cardViewModel,\n            checkoutFragment, loyaltyViewHolder, sdkLayout, bottomSheetLayout, headerLayout\n        )\n        //  paymentInlineViewHolder.tabLayout.setUnselectedAlphaLevel(1.0f)\n        if (::paymentInlineViewHolder.isInitialized)\n            paymentInlineViewHolder.setCurrentBinData(binLookupResponse)\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun getDatasfromAPIs(\n        merchantData: MerchantData?,\n        paymentOptionsResponse: PaymentOptionsResponse?\n    ) {\n        println(\"if(::businessViewHolder.isInitialized getpay\" + ::businessViewHolder.isInitialized)\n        println(\"merchantData name>>\" + merchantData?.name)\n        println(\"merchantData logo>>\" + merchantData?.logo)\n        if (paymentOptionsResponse != null) {\n            this.paymentOptionsResponse = paymentOptionsResponse\n        }\n        if (::businessViewHolder.isInitialized && PaymentDataSource.getTransactionMode() != TransactionMode.TOKENIZE_CARD) {\n            businessViewHolder.setDataFromAPI(\n                merchantData?.logo,\n                merchantData?.name\n            )\n            // TODO check\n            if (merchantData?.verifiedApplication == true) {\n\n            }\n        }\n        // println(\"PaymentOptionsResponse on get$paymentOptionsResponse\")\n        allCurrencies.value =\n            (paymentOptionsResponse?.supportedCurrencies as List<SupportedCurrencies>).sortedBy { it.orderBy }\n        Log.e(\n            \"supportedCurrencyUser\",\n            SharedPrefManager.getUserLocalCurrency(context).toString()\n        )\n        cacheUserLocalCurrency()\n\n\n\n\n        savedCardList = paymentOptionsResponse?.cards\n        currencyAdapter = CurrencyTypeAdapter(this)\n        if (paymentOptionsResponse.supportedCurrencies != null && ::amountViewHolder.isInitialized) {\n            currentCurrency = paymentOptionsResponse.currency\n            val sortedList: List<SupportedCurrencies> =\n                (paymentOptionsResponse.supportedCurrencies).sortedBy { it.orderBy }\n            for (i in sortedList.indices) {\n\n                if (sortedList[i].currency == currentCurrency) {\n                    currentAmount =\n                        CurrencyFormatter.currencyFormat(sortedList[i].amount.toString())\n                    currentCurrency =\n                        sortedList[i].symbol.toString()\n\n                    currentCurrency =\n                        sortedList[i].currency.toString()\n                    currentCurrencySymbol =\n                        sortedList[i].symbol.toString()\n                    finalCurrencySymbol =\n                        sortedList[i].symbol.toString()\n                    currencySelectedForCheck = currentCurrency\n\n                    currencyAdapter.updateSelectedPosition(i)\n                }\n\n            }\n            /**\n             *Note replacing all currency to be currency symbol as per ali 17jan23\n             * **/\n            amountViewHolder.setDataFromAPI(\n                currentAmount,\n                currentCurrencySymbol,\n                PaymentDataSource.getItems()?.size.toString()\n            )\n        }\n        /**\n         * <<<<<<< This items list is going to come from API response later now for loading the view we are taking the List from\n         * PaymentDatasource.getItems()  >>>>>>>> */\n        if (PaymentDataSource.getItems() != null) {\n            itemList = PaymentDataSource.getItems()!!\n            //  unModifiedItemList = itemList\n            unModifiedItemList = itemList.map { it.copy() }\n        }\n\n\n\n\n        if (::itemsViewHolder.isInitialized) {\n            paymentOptionsResponse?.supportedCurrencies?.let {\n                itemsViewHolder.setDataFromAPI(\n                    it,\n                    PaymentDataSource.getItems()\n                )\n            }\n            //  itemsViewHolder.setItemsRecylerView()\n            //  itemsViewHolder.setCurrencyRecylerView()\n\n\n        }\n\n        merchantData?.name?.let {\n            saveCardSwitchHolder?.setDataFromAPI(\n                it,\n                paymentInlineViewHolder.selectedType\n            )\n        }\n        paymentOptionsList.value = paymentOptionsResponse?.paymentOptions\n        //println(\"paymentOptions value\" + paymentOptionsResponse?.paymentOptions)\n        if (::context.isInitialized)\n            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.N) {\n                val divider = DividerItemDecoration(\n                    context,\n                    DividerItemDecoration.HORIZONTAL\n                )\n                divider.setDrawable(ShapeDrawable().apply {\n                    intrinsicWidth = 10\n                    paint.color = Color.TRANSPARENT\n                }) // note: currently (support version 28.0.0), we can not use tranparent color here, if we use transparent, we still see a small divider line. So if we want to display transparent space, we can set color = background color or we can create a custom ItemDecoration instead of DividerItemDecoration.\n                cardViewHolder.view.mainChipgroup.chipsRecycler.addItemDecoration(divider)\n                initAdaptersAction()\n\n            }\n\n        //PaymentDataSource.setSelectedCurrency(currentCurrency, null)\n        PaymentDataSource.setSelectedCurrency(currentCurrency, currentCurrencySymbol)\n        PaymentDataSource.setSelectedAmount(currentAmount.toBigDecimal())\n\n        if (::loyaltyViewHolder.isInitialized) {\n            val objectMapper = ObjectMapper()\n            val tapLoyaltyModel: TapLoyaltyModel =\n                objectMapper.readValue(\n                    context.resources.openRawResource(R.raw.loyalty),\n                    TapLoyaltyModel::class.java\n                )\n            supportedLoyalCards.value =\n                tapLoyaltyModel.supportedCurrencies as List<LoyaltySupportedCurrency>\n            //println(\"tapLoyaltyModel>>>\" + tapLoyaltyModel.bankLogo)\n            tapLoyaltyModel.bankLogo?.let {\n                tapLoyaltyModel.bankName?.let { it1 ->\n                    loyaltyViewHolder.setDataFromAPI(\n                        it,\n                        it1,\n                        tapLoyaltyModel,\n                        supportedLoyalCards.value as List<LoyaltySupportedCurrency>\n                    )\n                }\n            }\n\n        }\n        val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n        val nowString: String = LocalizationManager.getValue(\"now\", \"ActionButton\")\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n            false,\n            LocalizationManager.getLocale(context).toString(),\n            if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                payString + \" \" + nowString\n            } else {\n                payString + \" \" + nowString\n            },\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n        )\n\n    }\n\n    fun cacheUserLocalCurrency(): Boolean {\n        val suportedCurrencyForUser = allCurrencies.value?.find {\n            it.symbol == SharedPrefManager.getUserLocalCurrency(context)?.symbol\n        }\n        return SharedPrefManager.saveModelLocally(\n            context = context,\n            dataToBeSaved = suportedCurrencyForUser,\n            keyValueToBeSaved = UserSupportedLocaleForTransactions\n        )\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun initAdaptersAction() {\n        adapter = CardTypeAdapterUIKIT(this)\n        goPayAdapter = GoPayCardAdapterUIKIT(this)\n        itemAdapter = ItemAdapter(bottomSheetLayout, headerLayout, sdkLayout)\n        // adapter?.possiblyShowGooglePayButton()\n        // val arrayList = ArrayList<String>()//Creating an empty arraylist\n        //  arrayList.add(\"Google Pay\")//Adding object in arraylist\n\n\n        //adapter.updateAdapterGooglePay(arrayList)\n        //  goPayAdapter.updateAdapterData(goPayCardList.value as List<GoPaySavedCards>)\n        if (allCurrencies.value?.isNotEmpty() == true) {\n            currencyAdapter.updateAdapterData(allCurrencies.value as List<SupportedCurrencies>)\n        }\n        if (savedCardList?.isNotEmpty() == true) {\n            println(\"savedCardList.value\" + PaymentDataSource.getCardType())\n            if (PaymentDataSource.getCardType() != null && PaymentDataSource.getCardType() != CardType.ALL) {\n                filterSavedCardTypes(savedCardList as List<SavedCard>)\n            } else adapter.updateAdapterDataSavedCard(savedCardList as List<SavedCard>)\n        } else {\n            cardViewHolder.view.mainChipgroup.groupAction?.visibility = GONE\n        }\n        //  itemsViewHolder.view.itemRecylerView.adapter = itemAdapter\n        itemsViewHolder.view.mainCurrencyChip.chipsRecycler.adapter = currencyAdapter\n        if (PaymentDataSource.getItems() != null) {\n            PaymentDataSource.getItems()?.let { itemAdapter.updateAdapterData(it) }\n        }\n        cardViewHolder.view.mainChipgroup.chipsRecycler.adapter = adapter\n        cardViewHolder.view.mainChipgroup.chipsRecycler.animation =\n            AnimationUtils.loadAnimation(context, R.anim.fall_down_animation)\n\n        cardViewHolder.view.mainChipgroup.groupAction?.setOnClickListener {\n            setMainChipGroupActionListener()\n            paymentInlineViewHolder.tapCardInputView?.clear()\n            paymentInlineViewHolder.onFocusChange(\"\")\n            paymentInlineViewHolder.tapCardInputView.setSingleCardInput(\n                CardBrandSingle.Unknown, null\n            )\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n        }\n\n        paymentOptionsWorker =\n            java.util.ArrayList<PaymentOption>(paymentOptionsResponse.paymentOptions)\n\n        filterViewModels(currentCurrency)\n        // filterModels(PaymentDataSource.getCurrency()?.isoCode.toString())\n        //  filterCardTypes(PaymentDataSource.getCurrency()?.isoCode.toString(),paymentOptionsWorker)\n\n        //    goPaySavedCardHolder.view.goPayLoginView.groupAction.setOnClickListener {\n        //       setGoPayLoginViewGroupActionListener()\n        //   }\n        //paymentInlineViewHolder.tabLayout.setOnTouchListener { v, _ ->\n        touchHandlingForCardView()\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    @SuppressLint(\"ClickableViewAccessibility\")\n    private fun touchHandlingForCardView() {\n        saveCardSwitchHolder?.view?.setOnTouchListener { v, _ ->\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n            paymentInlineViewHolder.resetView = true\n            paymentInlineViewHolder.resetTouchView()\n\n            true\n        }\n        cardViewHolder.view.cardLinearLayout.setOnTouchListener { v, _ ->\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n            paymentInlineViewHolder.resetView = true\n            paymentInlineViewHolder.resetTouchView()\n\n            true\n        }\n        amountViewHolder.view.setOnTouchListener { v, _ ->\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n            paymentInlineViewHolder.resetView = true\n            paymentInlineViewHolder.resetTouchView()\n\n            true\n        }\n        paymentInlineViewHolder.tapAlertView?.setOnTouchListener { v, _ ->\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n            paymentInlineViewHolder.resetView = true\n            paymentInlineViewHolder.resetTouchView()\n\n            true\n        }\n        paymentInlineViewHolder.tabLayout.setOnTouchListener { v, _ ->\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n            paymentInlineViewHolder.resetView = true\n            paymentInlineViewHolder.resetTouchView()\n\n            true\n        }\n        businessViewHolder.view.setOnTouchListener { v, _ ->\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n            paymentInlineViewHolder.resetView = true\n            paymentInlineViewHolder.resetTouchView()\n\n            true\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun filterCardTypes(list: ArrayList<PaymentOption>) {\n        var filteredCardList: List<PaymentOption> =\n            list.filter { items -> items.paymentType == PaymentType.CARD }\n\n        // println(\"filteredCardList value \" + filteredCardList.size)\n        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.N) {\n            paymentInlineViewHolder.setDataFromAPI(filteredCardList)\n        }\n    }\n\n    private fun filterSavedCardTypes(savedCardList: List<SavedCard>) {\n        val filteredSavedCardList: List<SavedCard> =\n            savedCardList.filter { items ->\n                items.funding == PaymentDataSource?.getCardType().toString()\n            }\n\n        adapter.updateAdapterDataSavedCard(filteredSavedCardList)\n    }\n\n\n    private fun setMainChipGroupActionListener() {\n        if (cardViewHolder.view.mainChipgroup.groupAction?.text == LocalizationManager.getValue(\n                \"close\",\n                \"Common\"\n            )\n        ) {\n            isShaking.value = false\n            adapter.updateShaking(isShaking.value ?: false)\n            goPayAdapter.updateShaking(isShaking.value ?: false)\n            cardViewHolder.view.mainChipgroup.groupAction?.text =\n                LocalizationManager.getValue(\"edit\", \"Common\")\n        } else {\n            isShaking.value = true\n            adapter.updateShaking(isShaking.value ?: true)\n            goPayAdapter.updateShaking(isShaking.value ?: true)\n            goPayAdapter.updateShaking(false)\n            cardViewHolder.view.mainChipgroup.groupAction?.text =\n                LocalizationManager.getValue(\"close\", \"Common\")\n        }\n    }\n\n    private fun setGoPayLoginViewGroupActionListener() {\n        if (goPaySavedCardHolder.view.goPayLoginView.groupAction?.text == LocalizationManager.getValue(\n                \"close\",\n                \"Common\"\n            )\n        ) {\n            isShaking.value = false\n            adapter.updateShaking(isShaking.value ?: false)\n            goPayAdapter.updateShaking(isShaking.value ?: false)\n            goPaySavedCardHolder.view.goPayLoginView.groupAction?.text =\n                LocalizationManager.getValue(\"edit\", \"Common\")\n            goPayAdapter.updateSignOut(goPayCardList.value as List<GoPaySavedCards>, false)\n\n        } else {\n            isShaking.value = true\n            adapter.updateShaking(isShaking.value ?: true)\n            Log.d(\"isShaking.value\", isShaking.value.toString())\n            goPayAdapter.updateShaking(false)\n            goPaySavedCardHolder.view.goPayLoginView.groupAction?.text =\n                LocalizationManager.getValue(\"close\", \"Common\")\n            goPayAdapter.updateSignOut(goPayCardList.value as List<GoPaySavedCards>, true)\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    @SuppressLint(\"WrongConstant\")\n    override fun didDialogueExecute(response: String, cardTypeDialog: Boolean?) {\n        // println(\"response are$response\")\n        if (response == \"YES\") {\n            if (deleteCard) {\n                selectedViewToBeDeletedFromCardViewHolder?.addLoaderWithBlurryToView(invokeAfterLoad = {\n                    cardViewModel.processEvent(\n                        CardViewEvent.DeleteSaveCardEvent,\n                        this,\n                        null,\n                        null,\n                        null,\n                        null,\n                        PaymentDataSource.getCustomer().identifier,\n                        cardId\n                    )\n                }, viewToBeBLur = selectedViewToBeDeletedFromCardViewHolder)\n\n\n            } else {\n                // println(\"else block is calle are\")\n                removeViews(goPaySavedCardHolder)\n                //  adapter.updateAdapterDataSavedCard(savedCardList.value as List<SavedCard>)\n                goPayViewsHolder.goPayopened = false\n                adapter.goPayOpenedfromMain(true)\n                adapter.updateShaking(false)\n                //cardViewHolder.view.mainChipgroup.groupAction.visibility = View.VISIBLE\n            }\n        } else if (response == \"NO\") {\n            adapter.updateShaking(false)\n            deleteCard = false\n            sdkLayout.deepForEach { isEnabled = true }\n\n        } else if (response == \"DONE\") {\n            if (cardTypeDialog == true) {\n                paymentInlineViewHolder.tapCardInputView.clear()\n                paymentInlineViewHolder.tabLayout.resetBehaviour()\n                paymentInlineViewHolder.resetPaymentCardView()\n            } else {\n                bottomSheetDialog.dismissWithAnimation\n                bottomSheetDialog.dismiss()\n            }\n        }\n    }\n\n\n    override fun deleteSelectedCardListener(delSelectedCard: DeleteCardResponse) {\n        if (delSelectedCard.deleted) {\n            savedCardsBasedCurr?.removeAt(selectedItemsDel)\n            savedCardsBasedCurr?.let { adapter.updateAdapterDataSavedCard(it) }\n            cardViewHolder.view.mainChipgroup.chipsRecycler.adapter = adapter\n            deleteCard = false\n            adapter.updateShaking(false)\n            if (savedCardList.isNullOrEmpty()) cardViewHolder.view.mainChipgroup?.groupAction?.visibility =\n                GONE\n\n            sdkLayout.deepForEach { isEnabled = true }\n\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun handleSuccessFailureResponseButton(\n        response: String,\n        authenticate: Authenticate?,\n        chargeResponse: Charge?,\n        tabAnimatedActionButton: TabAnimatedActionButton?,\n        contextSDK: Context?\n    ) {\n\n        SessionManager.setActiveSession(false)\n        println(\"response val>>\" + response)\n        println(\"tabAnimatedActionButton val>>\" + tabAnimatedActionButton)\n        println(\"save val>>\" + saveCardSwitchHolder)\n\n        /* if(chargeResponse?.status == null && response == \"tokenized\"){\n             //todo replaced authorized with chargeresponse\n             SDKSession.getListener()?.getStatusSDK(response,chargeResponse)\n         }else{\n             SDKSession.getListener()?.getStatusSDK(response,chargeResponse)\n         }*/\n\n        /*saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setDisplayMetricsTheme(\n            CustomUtils.getDeviceDisplayMetrics(\n                contextSDK as Activity\n            )\n        )*/\n\n        /***\n         * This function is  working fine as expected in case when 3ds is false\n         * i.e.  sdkSession.isRequires3DSecure(false) as no loading of url occurs direct response\n         * from the API is available.\n         * WRONG OTP scenario also handled here as similar to old sdk show user error button and\n         * close the sdk.\n         * **/\n\n\n        if (::otpViewHolder.isInitialized)\n            if (otpViewHolder.otpView.isVisible) {\n                removeViews(\n                    businessViewHolder,\n                    amountViewHolder,\n                    cardViewHolder,\n                    paymentInlineViewHolder,\n                    otpViewHolder\n                )\n            }\n        if (saveCardSwitchHolder != null) {\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = INVISIBLE\n            saveCardSwitchHolder?.view?.visibility = VISIBLE\n        }\n//        if (::checkoutFragment.isInitialized)\n//            checkoutFragment.closeText.visibility = GONE\n        println(\"chargeResponse are>>>>\" + chargeResponse?.status)\n        if (response.contains(\"failure\") || response.contains(\"Cancelled Google Pay\") && chargeResponse == null) {\n\n            if (::webFrameLayout.isInitialized) {\n                provideBackgroundtoBsLayout(8300)\n                showAnimatedButtonRegardingWebViewDismiss(\n                    viewToFadeOut = webFrameLayout,\n                    isSuccess = false\n                )\n            } else {\n                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = VISIBLE\n                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                    ActionButtonState.ERROR\n                )\n            }\n        }\n        when (chargeResponse?.status) {\n            ChargeStatus.CAPTURED, ChargeStatus.AUTHORIZED, ChargeStatus.VALID, ChargeStatus.IN_PROGRESS -> {\n                if (::webViewHolder.isInitialized) {\n                    showAnimatedButtonRegardingWebViewDismiss(viewToFadeOut = webViewHolder.view)\n                } else if (::webFrameLayout.isInitialized && webFrameLayout.isVisible) {\n                    provideBackgroundtoBsLayout(8000)\n                    showAnimatedButtonRegardingWebViewDismiss(viewToFadeOut = webFrameLayout)\n                } else {\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = VISIBLE\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                        ActionButtonState.SUCCESS\n                    )\n                }\n\n            }\n            ChargeStatus.CANCELLED, ChargeStatus.TIMEDOUT, ChargeStatus.FAILED, ChargeStatus.DECLINED, ChargeStatus.UNKNOWN,\n            ChargeStatus.RESTRICTED, ChargeStatus.ABANDONED, ChargeStatus.VOID, ChargeStatus.INVALID -> {\n\n                if (::webFrameLayout.isInitialized) {\n                    provideBackgroundtoBsLayout(8300)\n                    showAnimatedButtonRegardingWebViewDismiss(\n                        viewToFadeOut = webFrameLayout,\n                        isSuccess = false\n                    )\n                }\n\n            }\n            else -> {\n\n                if (response == \"tokenized\") {\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                        ActionButtonState.SUCCESS\n                    )\n                } else {\n                    println(\"is this called>>>\")\n                    // removeAllViews()\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = VISIBLE\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                        ActionButtonState.ERROR\n                    )\n                    /*if (ThemeManager.currentTheme != null && chargeResponse != null)\n                        tabAnimatedActionButton?.setInValidBackground(\n                            false,\n                            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\"))\n                        )\n                    else\n                        tabAnimatedActionButton?.changeButtonState(\n                            ActionButtonState.ERROR\n                        )*/\n\n\n                }\n            }\n        }\n\n\n        SessionManager.setActiveSession(false)\n        doAfterSpecificTime(4500)\n        {\n            if (::bottomSheetDialog.isInitialized)\n                bottomSheetDialog.dismiss()\n        }\n\n\n    }\n\n\n    private fun showAnimatedButtonRegardingWebViewDismiss(\n        viewToFadeOut: View,\n        isSuccess: Boolean = true,\n        tranisitionDuration: Long = 500L\n    ) {\n\n        viewToFadeOut.addFadeOutAnimation {\n            animateBS(\n                fromView = bottomSheetLayout,\n                toView = sdkLayout,\n                transitionAnimation = tranisitionDuration,\n                changeHeight = {},\n                onTransitionEnd = {\n                    doAfterSpecificTime {\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = VISIBLE\n                        if (isSuccess) {\n                            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                                ActionButtonState.SUCCESS\n                            )\n                        } else {\n                            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                                ActionButtonState.ERROR\n                            )\n                        }\n                        provideBackgroundtoBsLayout()\n                    }\n\n                },\n            )\n        }\n\n    }\n\n\n    override fun displayAsynchronousPaymentView(chargeResponse: Charge) {\n        if (chargeResponse != null) {\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n\n            removeViews(\n                // businessViewHolder,\n                amountViewHolder,\n                cardViewHolder,\n                paymentInlineViewHolder,\n                saveCardSwitchHolder\n            )\n            /*  businessViewHolder.setDataFromAPI(\n                  selectedPaymentOption.image,\n                  selectedPaymentOption.brand?.name\n              )*/\n            addViews(asynchronousPaymentViewHolder)\n\n\n            asynchronousPaymentViewHolder.setDataFromAPI(chargeResponse)\n        }\n    }\n\n    override fun resetViewHolder() {\n        adapter.resetSelection()\n        cardViewHolder?.cardInfoHeaderText.text =\n            LocalizationManager.getValue(\"cardSectionTitleOr\", \"TapCardInputKit\")\n        unActivateActionButton()\n    }\n\n    private fun removeViews(vararg viewHolders: TapBaseViewHolder?, onRemoveEnd: () -> Unit = {}) {\n        animateBS(\n            fromView = bottomSheetLayout,\n            toView = sdkLayout,\n            transitionAnimation = 100L,\n            changeHeight = {\n                viewHolders.forEach {\n                    if (::sdkLayout.isInitialized) {\n                        sdkLayout.removeView(it?.view)\n                        provideBackgroundtoBsLayout()\n                        onRemoveEnd.invoke()\n\n                    }\n                }\n\n            })\n    }\n\n\n    private fun addViews(\n        vararg viewHolders: TapBaseViewHolder?,\n        afterAddingViews: () -> Unit = {}\n    ) {\n\n        animateBS(fromView = bottomSheetLayout, toView = sdkLayout, changeHeight = {\n            viewHolders.forEach {\n                if (::sdkLayout.isInitialized) {\n                    sdkLayout.removeView(it?.view)\n                    provideBackgroundtoBsLayout()\n                    sdkLayout.addView(it?.view)\n\n\n                }\n            }\n            afterAddingViews.invoke()\n        })\n\n    }\n\n    fun provideBackgroundtoSdkLayout() {\n        sdkLayout.setBackgroundDrawable(\n            createDrawableGradientForBlurry(\n                newColorVal?.let { it1 ->\n                    intArrayOf(\n                        it1,\n                        it1,\n                        it1\n                    )\n                }!!\n            )\n        )\n    }\n\n    fun provideBackgroundtoBsLayout(levelDuration: Int = 7500) {\n        /**\n         * needed to be enhanced according to the bottomSheetAnimation .\n         *\n         */\n        bottomSheetLayout.background = context.resources.getDrawable(R.drawable.bkgd_level)\n        bottomSheetLayout.backgroundTintList =\n            ColorStateList.valueOf(loadAppThemManagerFromPath(AppColorTheme.GlobalValuesColor))\n        bottomSheetLayout.background.level = levelDuration\n    }\n\n\n    fun unActivateActionButton() {\n        val payNowString: String\n\n        when (PaymentDataSource.getTransactionMode()) {\n            TransactionMode.TOKENIZE_CARD -> payNowString = LocalizationManager.getValue(\n                \"pay\",\n                \"ActionButton\"\n            )\n            //TODO stopped since checkout won't have SAVE_CARD -so not available in Localization\n            /*TransactionMode.SAVE_CARD -> payString = LocalizationManager.getValue(\n                \"savecard\",\n                \"ActionButton\"\n            )*/\n            TransactionMode.SAVE_CARD -> payNowString = \"SAVE CARD\"\n            else -> {\n                val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n                val nowString: String = LocalizationManager.getValue(\"now\", \"ActionButton\")\n                payNowString = payString + \" \" + nowString\n            }\n        }\n\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n            false,\n            LocalizationManager.getLocale(context).toString(),\n            if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                //payString + \" \" + currentCurrencySymbol + \" \" + selectedAmount\n                payNowString\n            } else {\n                // payString + \" \" + currentCurrencySymbol + \" \" + currentAmount\n                payNowString\n            },\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n        )\n\n        // saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.IDLE)\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isActivated = false\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isClickable = false\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isEnabled = false\n    }\n\n\n    fun resetCardSelection() {\n        adapter.resetSelection()\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onCardSelectedAction(isSelected: Boolean, savedCardsModel: Any?) {\n\n\n        /**\n         * Clear card input text auto focus\n         */\n        paymentInlineViewHolder.tapCardInputView.clear()\n        paymentInlineViewHolder.clearCardInputAction()\n        //  println(\"savedCardsModel is\" + savedCardsModel)\n        unActivateActionButton()\n        when (savedCardsModel) {\n            is SavedCard -> {\n                Bugfender.d(\n                    CustomUtils.tagEvent,\n                    \"Saved card selected :\" + savedCardsModel.lastFour + \"&\" + savedCardsModel.id\n                )\n                paymentInlineViewHolder.setDataForSavedCard(\n                    savedCardsModel,\n                    CardInputUIStatus.SavedCard\n                )\n\n                cardViewHolder.view.cardInfoHeaderText.visibility = VISIBLE\n                cardViewHolder.view.cardInfoHeaderText.text =\n                    LocalizationManager.getValue(\"savedCardSectionTitle\", \"TapCardInputKit\")\n\n                isSavedCardSelected = true\n                Bugfender.d(\n                    CustomUtils.tagEvent,\n                    \"Payment scheme selected: title :\" + savedCardsModel?.brand + \"& ID :\" + savedCardsModel.paymentOptionIdentifier\n                )\n                unActivateActionButton()\n            }\n            else -> {\n                if (savedCardsModel != null) {\n                    println(\"savedCardsModel is>>\" + PaymentType.GOOGLE_PAY)\n                    if ((savedCardsModel as PaymentOption).paymentType == PaymentType.WEB) {\n                        //  paymentInlineViewHolder.view.alpha = 0.95f\n\n                        PaymentDataSource.setWebViewType(WebViewType.REDIRECT)\n                        activateActionButton((savedCardsModel as PaymentOption))\n                        setPayButtonAction(PaymentType.WEB, savedCardsModel)\n                    } else if ((savedCardsModel as PaymentOption).paymentType == PaymentType.GOOGLE_PAY) {\n                        //  removeViews(amountViewHolder, cardViewHolder, paymentInlineViewHolder)\n                        // checkoutFragment.checkOutActivity?.handleGooglePayApiCall(savedCardsModel as PaymentOption)\n                        //activateActionButtonForGPay()\n                        activateActionButton((savedCardsModel as PaymentOption))\n                        setPayButtonAction(PaymentType.GOOGLE_PAY, savedCardsModel)\n                        PaymentDataSource.setWebViewType(WebViewType.REDIRECT)\n                    }\n                    Bugfender.d(\n                        CustomUtils.tagEvent,\n                        \"Payment scheme selected: title :\" + (savedCardsModel as PaymentOption).brand + \"& ID :\" + (savedCardsModel as PaymentOption).id\n                    )\n\n\n                } else\n\n                    displayGoPayLogin()\n            }\n        }\n    }\n\n    private fun activateActionButtonForGPay() {\n        val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isActivated\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n            true,\n            \"en\",\n            \"\",\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.paymentBackgroundColor\")),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.titleLabelColor\")),\n        )\n\n        saveCardSwitchHolder?.view?.cardSwitch?.showOnlyPayButton()\n\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isActivated\n        //saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n\n\n    }\n\n\n    private fun activateActionButton(\n        paymentOptObject: PaymentOption? = null,\n        cardBrandString: String? = null\n    ) {\n        val payStringButton: String\n\n        provideBackgroundtoBsLayout()\n        when (PaymentDataSource.getTransactionMode()) {\n            TransactionMode.TOKENIZE_CARD -> payStringButton = LocalizationManager.getValue(\n                \"pay\",\n                \"ActionButton\"\n            )\n            //TODO stopped since checkout won't have SAVE_CARD -so not available in Localization\n            /* TransactionMode.SAVE_CARD -> payString = LocalizationManager.getValue(\n                 \"savecard\",\n                 \"ActionButton\"\n             )*/  TransactionMode.SAVE_CARD -> payStringButton = \"SAVE CARD\"\n            else -> {\n                val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n                val nowString: String = LocalizationManager.getValue(\"now\", \"ActionButton\")\n\n                payStringButton = payString + \" \" + nowString\n            }\n        }\n\n        println(\"cardBrandString before \" + cardBrandString)\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n            logicTogetButtonStyle(paymentOptObject, payStringButton, cardBrandString)\n        }\n\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun logicTogetButtonStyle(\n        paymentOptObject: PaymentOption?,\n        payString: String,\n        cardBrandString: String?\n    ) {\n\n        var selectedPayOpt: PaymentOption? = null\n\n        if (cardBrandString != null) {\n            selectedPayOpt = logicTogetPayOptions(cardBrandString)\n\n        } else selectedPayOpt = paymentOptObject\n\n        //  println(\"selectedPayOpt are\"+selectedPayOpt)\n\n\n        if (CustomUtils.getCurrentTheme().contains(\"dark\")) {\n            if (selectedPayOpt?.buttonStyle?.background?.darkModel?.backgroundColors?.size == 1) {\n                colorBackGround =\n                    selectedPayOpt.buttonStyle?.background?.darkModel?.backgroundColors?.get(0)\n            }\n            intColorArray = null\n\n        } else {\n            val bgArrayList: ArrayList<String>? =\n                selectedPayOpt?.buttonStyle?.background?.lightModel?.backgroundColors\n            if (bgArrayList?.size == 1) {\n                colorBackGround = bgArrayList[0]\n                intColorArray = null\n            } else {\n\n                if (bgArrayList?.size == 2) {\n                    startColor = bgArrayList.get(0).replace(\"0x\", \"#\")\n                    endColor = bgArrayList.get(1).replace(\"0x\", \"#\")\n\n                    intColorArray =\n                        intArrayOf(Color.parseColor(startColor), Color.parseColor(endColor))\n                    colorBackGround = \"0\"\n\n                } else if (bgArrayList?.size == 3) {\n                    startColor = bgArrayList[2].replace(\"0x\", \"#\")\n\n                    middleColor = bgArrayList[1].replace(\"0x\", \"#\")\n                    endColor = bgArrayList[0].replace(\"0x\", \"#\")\n\n                    intColorArray = intArrayOf(\n                        Color.parseColor(startColor),\n                        Color.parseColor(middleColor),\n                        Color.parseColor(endColor)\n                    )\n                    colorBackGround = \"0\"\n\n                }\n            }\n        }\n\n\n\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.removeAllViewsInLayout()\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n            true,\n            LocalizationManager.getLocale(context).language,\n            payString,\n            if (colorBackGround.equals(\"0\") || colorBackGround == null) 0 else Color.parseColor(\n                colorBackGround\n            ),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.titleLabelColor\")),\n            intColorArray\n        )\n\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.clearFocus()\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.clearAnimation()\n\n        image = ImageView(context)\n        val params = LinearLayout.LayoutParams(\n            LinearLayout.LayoutParams.MATCH_PARENT,\n            LinearLayout.LayoutParams.MATCH_PARENT\n        )\n        /**\n         *work around condition for small logo of knet , set margins according to design figma*/\n        if (CustomUtils.getCurrentLocale(context).contains(\"ar\")) {\n\n            params.setMargins(\n                MetricsUtil.convertDpToPixel(100f, context).toInt(),\n                MetricsUtil.convertDpToPixel(5f, context).toInt(),\n                MetricsUtil.convertDpToPixel(100f, context).toInt(),\n                MetricsUtil.convertDpToPixel(5f, context).toInt()\n            )\n\n        } else {\n            if (selectedPayOpt?.brand?.contains(\"KNET\") == true) params.setMargins(\n                MetricsUtil.convertDpToPixel(\n                    80f,\n                    context\n                ).toInt(),\n                MetricsUtil.convertDpToPixel(5f, context).toInt(),\n                MetricsUtil.convertDpToPixel(80f, context).toInt(),\n                MetricsUtil.convertDpToPixel(5f, context).toInt()\n            )\n            else\n                params.setMargins(\n                    MetricsUtil.convertDpToPixel(108f, context).toInt(),\n                    MetricsUtil.convertDpToPixel(10f, context).toInt(),\n                    MetricsUtil.convertDpToPixel(108f, context).toInt(),\n                    MetricsUtil.convertDpToPixel(10f, context).toInt()\n                )\n\n\n        }\n\n        image?.layoutParams = params\n        Glide.with(context)\n            .load(\n                getAssetName(\n                    selectedPayOpt\n                )\n            ).fitCenter()\n            .diskCacheStrategy(DiskCacheStrategy.ALL)\n            .into(image!!)\n\n\n        //  println(\"asset size\"+getAssetName(selectedPaymentOption))\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.addChildView(image!!)\n\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isActivated = true\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isClickable = true\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isEnabled = true\n\n    }\n\n    private fun logicTogetPayOptions(cardBrandString: String?): PaymentOption? {\n        //  println(\"cardBrandString inn>>>>\"+cardBrandString)\n        var selectedPayOption: PaymentOption? = null\n        var slectedBrand: String? = null\n        for (i in 0 until paymentOptionsResponse.paymentOptions.size) {\n            slectedBrand = paymentOptionsResponse.paymentOptions[i].brand?.replace(\"_\", \"\")\n            if (slectedBrand == cardBrandString?.replace(\"_\", \"\")?.toUpperCase()) {\n                selectedPayOption = paymentOptionsResponse.paymentOptions[i]\n            }\n        }\n        // println(\"selectedPayOption>>\"+selectedPayOption)\n\n        return selectedPayOption\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    @SuppressLint(\"WrongConstant\")\n    private fun onClickRedirect(savedCardsModel: Any) {\n        /**\n         * on Click Redirect for Knet Redirection\n         */\n\n        amountViewHolder.view.amount_section?.tapChipPopup?.slideFromLeftToRight()\n        val viewsToDisable = mutableListOf<View>(\n            cardViewHolder.view.mainChipgroup.chipsRecycler as View,\n            paymentInlineViewHolder.tapCardInputView.backArrow as View,\n            amountViewHolder.view.amount_section.constraint,\n            amountViewHolder.view.amount_section.tapChipAmount,\n            cardViewHolder.view,\n            cardViewHolder.view.mainChipgroup,\n            paymentInlineViewHolder.tapCardInputView,\n            paymentInlineViewHolder.view,\n            paymentInlineViewHolder.nfcButton as View,\n            paymentInlineViewHolder.scannerButton as View,\n            saveCardSwitchHolder?.view as View,\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton as View\n        )\n\n        viewsToDisable.disableViews()\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n\n        doAfterSpecificTime {\n            selectedPaymentOption = savedCardsModel as PaymentOption\n            cardViewModel.processEvent(\n                CardViewEvent.ChargeEvent,\n                this,\n                selectedPaymentOption,\n                null,\n                null,\n                null\n            )\n            if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains(\"dark\")) {\n                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(\n                    backgroundColor = Color.parseColor(\n                        savedCardsModel.buttonStyle?.background?.darkModel?.baseColor\n                    )\n                )\n\n            } else saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(\n                backgroundColor = Color.parseColor(savedCardsModel.buttonStyle?.background?.lightModel?.baseColor)\n            )\n\n            saveCardSwitchHolder?.view?.mainSwitch?.mainTextSave?.visibility = View.INVISIBLE\n\n            mutableListOf(\n                amountViewHolder.view,\n                cardViewHolder.view,\n                paymentInlineViewHolder.view,\n                tabAnimatedActionButtonViewHolder!!.view\n            ).addFadeOutAnimationToViews {\n                translateHeightAnimationForWebViews()\n            }\n\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun onClickCardPayment(savedCardsModel: Any?) {\n        removeVisibilityOfSwitch()\n        PaymentDataSource.setWebViewType(WebViewType.THREE_DS_WEBVIEW)\n        amountViewHolder.view.amount_section?.tapChipPopup?.slideFromLeftToRight()\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n\n        doAfterSpecificTime {\n            savedCardsModel as PaymentOption\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n            if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains(\"dark\")) {\n                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(\n                    backgroundColor = Color.parseColor(\n                        savedCardsModel.buttonStyle?.background?.darkModel?.baseColor\n                    )\n                )\n            } else saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(\n                backgroundColor = Color.parseColor(savedCardsModel.buttonStyle?.background?.lightModel?.baseColor)\n            )\n            if (paymentInlineViewHolder.cardInputUIStatus == CardInputUIStatus.NormalCard) {\n                paymentInlineViewHolder.paymentInputContainer.applyBluryToView()\n                with(cardViewHolder.view.mainChipgroup) {\n                    val viewsToFadeOut = mutableListOf<View>(\n                        chipsRecycler,\n                        groupAction,\n                        groupName,\n                    )\n                    if (paymentInlineViewHolder.cardInputUIStatus == CardInputUIStatus.NormalCard) {\n                        viewsToFadeOut.add(amountViewHolder.view)\n                    }\n                    doAfterSpecificTime(time = 100L) {\n\n                        viewsToFadeOut.addFadeOutAnimationToViews(onAnimationStart = {\n                            paymentInlineViewHolder.paymentInputContainer.applyBluryToView()\n                        }, durationTime = 500, onAnimationEnd = {\n                            animateBS(\n                                fromView = bottomSheetLayout,\n                                toView = sdkLayout,\n                                transitionAnimation = 500, changeHeight = {})\n                        }, headerLayout = headerLayout)\n\n                        if (isSavedCardSelected == true) {\n                            cardViewModel.processEvent(\n                                CardViewEvent.CreateTokenExistingCardEvent,\n                                this@CheckoutViewModel,\n                                null,\n                                null,\n                                null,\n                                null,\n                                null,\n                                null,\n                                paymentInlineViewHolder.getSavedCardData()\n                            )\n\n                        } else {\n                            cardViewModel.processEvent(\n                                CardViewEvent.CreateTokenEvent,\n                                this@CheckoutViewModel,\n\n                                null,\n                                null,\n                                paymentInlineViewHolder.getCard(),\n                                null,\n                                saveCardValue = paymentInlineViewHolder.tapInlineCardSwitch?.switchSaveCard?.isChecked\n                            )\n                        }\n                    }\n\n                }\n\n            }\n\n        }\n\n\n    }\n\n    private fun removeVisibilityOfSwitch() {\n        saveCardSwitchHolder?.view?.mainSwitch?.visibility = GONE\n        paymentInlineViewHolder?.tapInlineCardSwitch?.addFadeOutAnimation()\n        animateBS(\n            fromView = bottomSheetLayout,\n            toView = sdkLayout,\n            transitionAnimation = 500, changeHeight = {})\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onDeleteIconClicked(\n        stopAnimation: Boolean,\n        itemId: Int,\n        cardId: String,\n        maskedCardNumber: String,\n        arrayListSavedCardSize: ArrayList<SavedCard>,\n        selectedViewToBeDeleted: ViewGroup,\n        viewtoBeBlur: View,\n        position: Int\n    ) {\n        this.cardId = cardId\n        selectedViewToBeDeletedFromCardViewHolder = selectedViewToBeDeleted\n        viewToBeBlurCardViewHolder = viewtoBeBlur\n        selectedItemsDel = itemId\n        cardIDToBeDeleted = position\n        if (stopAnimation) {\n            stopDeleteActionAnimation(itemId, maskedCardNumber, arrayListSavedCardSize)\n        } else {\n            cardViewHolder.view.mainChipgroup.groupAction?.text = LocalizationManager.getValue(\n                \"close\",\n                \"Common\"\n            )\n            deleteCard = false\n        }\n\n    }\n\n    private fun stopDeleteActionAnimation(\n        itemId: Int,\n        maskedCardNumber: String,\n        arrayListSavedCardSizes: ArrayList<SavedCard>\n    ) {\n        isShaking.value = false\n        cardViewHolder.view.mainChipgroup.groupAction?.text = LocalizationManager.getValue(\n            \"GatewayHeader\",\n            \"HorizontalHeaders\",\n            \"rightTitle\"\n        )\n        val title: String = LocalizationManager.getValue(\"title\", \"DeleteCard\")\n        val message: String = LocalizationManager.getValue(\n            \"message\",\n            \"DeleteCard\"\n        )\n        CustomUtils.showDialog(\n            \"$title\",\n            \"${message.replace(\"%@\", maskedCardNumber)} \",\n            context,\n            4,\n            this, null, null, false\n        )\n\n        selectedItemsDel = itemId\n        deleteCard = true\n        this.arrayListSavedCardSize = arrayListSavedCardSizes\n        sdkLayout.deepForEach { isEnabled = false }\n\n    }\n\n    override fun onGoPayLogoutClicked(isClicked: Boolean) {\n        if (isClicked) CustomUtils.showDialog(\n            LocalizationManager.getValue(\"goPaySignOut\", \"GoPay\"), LocalizationManager.getValue(\n                \"goPaySaveCards\",\n                \"GoPay\"\n            ), context, 2, this, null, null, false\n        )\n    }\n\n    override fun onEditClicked(isClicked: Boolean) {\n        if (isClicked) {\n            adapter.updateShaking(true)\n            goPayAdapter.updateShaking(true)\n        } else {\n            adapter.updateShaking(false)\n            goPayAdapter.updateShaking(false)\n        }\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onGooglePayClicked(isClicked: Boolean) {\n        println(\"onGooglePayClicked>>>\" + isClicked)\n        // checkoutFragment.checkOutActivity?.handleGooglePayApiCall(savedCardsModel as PaymentOption)\n\n    }\n\n\n    override fun onPayCardSwitchAction(\n        isCompleted: Boolean,\n        paymentType: PaymentType,\n        cardBrandString: String?\n    ) {\n        println(\"isCompleted???\" + isCompleted)\n        //todo add validations from api when cvv is valid the only  activate ActionButton\n        if (isCompleted) {\n            businessViewHolder.view?.headerView.constraint.visibility = VISIBLE\n            saveCardSwitchHolder?.view?.mainSwitch?.visibility = GONE\n            saveCardSwitchHolder?.view?.mainSwitch?.switchSaveMobile?.visibility = GONE\n            saveCardSwitchHolder?.setSwitchToggleData(paymentType)\n            loyaltyViewHolder.view.loyaltyView?.constraintLayout?.visibility = VISIBLE\n            // loyatFlag = true\n            /**\n             * @TODO:  Will be enabled when coming from API directly\n             */\n            //  initLoyaltyView() // Will be enabled when coming from API directly\n            activateActionButton(cardBrandString = cardBrandString)\n            paymentActionType = paymentType\n        } else {\n//            saveCardSwitchHolder11?.view?.mainSwitch?.visibility = View.GONE\n            saveCardSwitchHolder?.view?.mainSwitch?.switchSaveMobile?.visibility = GONE\n            saveCardSwitchHolder?.setSwitchToggleData(paymentType)\n            unActivateActionButton()\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onPayCardCompleteAction(\n        isCompleted: Boolean,\n        paymentType: PaymentType,\n        cardNumber: String?,\n        expiryDate: String?,\n        cvvNumber: String?, holderName: String?, cardBrandString: String?, savedCardsModel: Any?\n\n    ) {\n        println(\"isCompleted aaa\" + isCompleted)\n        println(\"cardBrandString aaa\" + cardBrandString)\n        println(\"cardNumber aaa\" + cardNumber)\n        println(\"cardInput status>>\" + paymentInlineViewHolder.cardInputUIStatus)\n        println(\"paymentTypeEnum status>>\" + paymentType)\n        println(\"savedCardsModel status>>\" + savedCardsModel)\n        if (isCompleted) {\n            activateActionButton(cardBrandString = cardBrandString)\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n        }\n        if (savedCardsModel != null) {\n            setPayButtonAction(paymentType, savedCardsModel)\n        } else {\n            val typedCardModel = logicTogetPayOptions(cardBrandString)\n            setPayButtonAction(paymentType, typedCardModel)\n        }\n\n    }\n\n    override fun onPaymentCardIsLoyaltyCard(isLoyaltyCard: Boolean) {\n        //Todo logic for loyalty card\n    }\n\n    // Override function to open NFC fragment and scan the card via NFC.\n    override fun onClickNFC() {\n\n        removeViews(\n            //businessViewHolder,\n            // amountViewHolder,\n            // cardViewHolder,\n            paymentInlineViewHolder,\n            saveCardSwitchHolder,\n            otpViewHolder,\n            goPaySavedCardHolder,\n            goPayViewsHolder\n        )\n        frameLayout.visibility = VISIBLE\n        //  addViews(businessViewHolder, amountViewHolder)\n\n        cardViewHolder.view.visibility = GONE\n        fragmentManager\n            .beginTransaction()\n            .replace(R.id.fragment_container_nfc_lib, nfcFragment)\n            .commit()\n        /* fragmentManager.beginTransaction().remove(InlineViewFragment()).replace(\n             R.id.fragment_container_nfc_lib,\n             nfcFragment\n         ).commit()*/\n        isNFCOpened = true\n        checkoutFragment.isNfcOpened = true\n        amountViewHolder.changeGroupAction(false)\n        val bottomSheet: FrameLayout? =\n            bottomSheetDialog.findViewById(com.google.android.material.R.id.design_bottom_sheet)\n        BottomSheetBehavior.from(bottomSheet as View).state = BottomSheetBehavior.STATE_EXPANDED\n        checkSelectedAmountInitiated()\n    }\n\n\n    // Override function to open card Scanner and scan the card.\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onClickCardScanner(scannerClicked: Boolean) {\n        //setSlideAnimation()\n        removeViews(\n            //businessViewHolder,\n            // amountViewHolder,\n            //cardViewHolder,\n            saveCardSwitchHolder,\n            paymentInlineViewHolder,\n            otpViewHolder,\n            goPaySavedCardHolder,\n            goPayViewsHolder\n        )\n        amountViewHolder.readyToScanVisibility(scannerClicked)\n        // addViews(businessViewHolder, amountViewHolder)\n        inLineCardLayout.visibility = VISIBLE\n        cardViewHolder.view.visibility = GONE\n        FrameManager.getInstance().frameColor = Color.WHITE\n        // Use\n        //  val bottomSheet: FrameLayout? = bottomSheetDialog.findViewById(com.google.android.material.R.id.design_bottom_sheet)\n        //  BottomSheetBehavior.from(bottomSheet as View).state = BottomSheetBehavior.STATE_EXPANDED\n        //   bottomSheetDialog.behavior.state = BottomSheetBehavior.STATE_EXPANDED\n\n        fragmentManager\n            .beginTransaction()\n            .replace(R.id.inline_container, inlineCamerFragment)\n            .commit()\n\n        isInlineOpened = true\n        checkoutFragment.isScannerOpened = true\n\n        amountViewHolder.changeGroupAction(false)\n        val bottomSheet: FrameLayout? =\n            bottomSheetDialog.findViewById(com.google.android.material.R.id.design_bottom_sheet)\n        BottomSheetBehavior.from(bottomSheet as View).state = BottomSheetBehavior.STATE_EXPANDED\n        checkSelectedAmountInitiated()\n    }\n\n    private fun checkSelectedAmountInitiated() {\n        if (this::selectedAmount.isInitialized && this::selectedCurrency.isInitialized) {\n            amountViewHolder.updateSelectedCurrency(\n                displayItemsOpen,\n                selectedAmount, selectedCurrency,\n                currentAmount, currentCurrency, currentCurrencySymbol\n            )\n        }\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onCurrencyClicked(\n        currencySelected: String,\n        currencyRate: BigDecimal,\n        totalSelectedAmount: BigDecimal,\n        previousSelectedCurrency: String,\n        selectedCurrencySymbol: String\n    ) {\n\n        /**\n         * case currencyClicked @TODO:EGP /\n         */\n\n        currencyOldRate = currencyRate\n        lastSelectedCurrency = previousSelectedCurrency\n        if (::unModifiedItemList.isInitialized)\n            println(\"unModifiedItemList\" + unModifiedItemList)\n        if (::itemList.isInitialized) {\n            for (i in itemList.indices) {\n                itemList[i].amount = unModifiedItemList[i].amount?.times(currencyRate)\n                //itemList[i].totalAmount = currencyOldRate?.div(currencyRate)\n                itemList[i].totalAmount =\n                    unModifiedItemList[i].getPlainAmount()?.times(currencyRate)\n\n\n                println(\"item per unit >>\" + itemList[i].amount)\n\n\n            }\n\n            itemsViewHolder.view.itemRecylerView.adapter = itemAdapter\n            itemAdapter.updateAdapterData(itemList)\n\n        }\n\n        //  itemList[i].amount = (list[i].amount.toLong())\n        //  itemList[i].currency = currencySelected\n\n        selectedAmount = CurrencyFormatter.currencyFormat(totalSelectedAmount.toString())\n        selectedCurrency = currencySelected\n        currencySelectedForCheck = currencySelected\n        selectedTotalAmount = selectedAmount\n        println(\"selectedAmount final>>\" + selectedAmount)\n        println(\"selectedCurrency final>>\" + selectedCurrency.length)\n        println(\"currentAmount final>>\" + currentAmount)\n        println(\"currentCurrency final>>\" + currentCurrency)\n        println(\"selectedCurrencySymbol final>>\" + selectedCurrencySymbol)\n        println(\"currentCurrencySymbol final>>\" + currentCurrencySymbol)\n        if (selectedCurrencySymbol.length == 2) {\n            amountViewHolder.updateSelectedCurrency(\n                displayItemsOpen,\n                selectedAmount, selectedCurrency,\n                currentAmount, currentCurrency, selectedCurrencySymbol\n            )\n            //  PaymentDataSource.setSelectedCurrency(selectedCurrency = selectedCurrency, null) // changed from null to symbol\n            PaymentDataSource.setSelectedCurrency(selectedCurrency, selectedCurrencySymbol)\n            //  PaymentDataSource.setSelectedCurrency(selectedCurrency = selectedCurrencySymbol, selectedCurrencySymbol) //commented\n\n        } else {\n            amountViewHolder.updateSelectedCurrency(\n                displayItemsOpen,\n                selectedAmount, selectedCurrency,\n                currentAmount, finalCurrencySymbol, selectedCurrencySymbol\n            )\n            PaymentDataSource.setSelectedCurrency(selectedCurrency, selectedCurrencySymbol)\n\n        }\n        currentCurrencySymbol = selectedCurrencySymbol\n\n\n        // PaymentDataSource.setSelectedCurrency(selectedCurrency = selectedCurrency)\n        PaymentDataSource.setSelectedAmount(currencyRate)\n        if (paymentInlineViewHolder.tapCardInputView.isNotEmpty()) {\n            paymentInlineViewHolder.tapCardInputView.clear()\n            paymentInlineViewHolder.tapAlertView?.fadeVisibility(GONE, 500)\n            paymentInlineViewHolder.acceptedCardText.visibility = VISIBLE\n            paymentInlineViewHolder.tabLayout.resetBehaviour()\n        }\n\n        adapter.resetSelection()\n\n        if (::selectedCurrency.isInitialized) {\n            println(\"selectedCurrency he\" + selectedCurrency)\n            Bugfender.d(CustomUtils.tagEvent, \"Currency changed to : \" + selectedCurrencySymbol)\n            filterViewModels(selectedCurrency)\n        } else {\n            filterViewModels(currentCurrency)\n            //Bugfender.d(\"Currency changed to : \"+currentCurrency ,CustomUtils.tagEvent)\n\n        }\n\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun submitNewLocalCurrency(\n        currencySelected: String,\n        currencyRate: BigDecimal,\n        totalSelectedAmount: BigDecimal,\n        selectedCurrencySymbol: String\n    ) {\n\n\n        currencyOldRate = currencyRate\n        if (::unModifiedItemList.isInitialized)\n            println(\"unModifiedItemList\" + unModifiedItemList)\n        if (::itemList.isInitialized) {\n            for (i in itemList.indices) {\n                itemList[i].amount = unModifiedItemList[i].amount?.times(currencyRate)\n                //itemList[i].totalAmount = currencyOldRate?.div(currencyRate)\n                itemList[i].totalAmount =\n                    unModifiedItemList[i].getPlainAmount()?.times(currencyRate)\n\n\n            }\n\n            itemsViewHolder.view.itemRecylerView.adapter = itemAdapter\n            itemAdapter.updateAdapterData(itemList)\n\n        }\n\n        //  itemList[i].amount = (list[i].amount.toLong())\n        //  itemList[i].currency = currencySelected\n\n        selectedAmount = CurrencyFormatter.currencyFormat(totalSelectedAmount.toString())\n        if (currencySelected != null) {\n            selectedCurrency = currencySelected\n        }\n        selectedTotalAmount = selectedAmount\n\n\n        /**\n         * Why this check present ??!!  :/\n         */\n        if (selectedCurrencySymbol.length == 2) {\n            amountViewHolder.updateSelectedCurrency(\n                displayItemsOpen,\n                selectedAmount,\n                selectedCurrency,\n                currentAmount,\n                currentCurrency,\n                selectedCurrencySymbol,\n                isChangingCurrencyFromOutside = true\n            )\n            //  PaymentDataSource.setSelectedCurrency(selectedCurrency = selectedCurrency, null) // changed from null to symbol\n            PaymentDataSource.setSelectedCurrency(selectedCurrency, selectedCurrencySymbol)\n            //  PaymentDataSource.setSelectedCurrency(selectedCurrency = selectedCurrencySymbol, selectedCurrencySymbol) //commented\n\n        } else {\n            amountViewHolder.updateSelectedCurrency(\n                true,\n                selectedAmount,\n                selectedCurrency,\n                currentAmount,\n                finalCurrencySymbol,\n                selectedCurrencySymbol,\n                isChangingCurrencyFromOutside = true\n            )\n            PaymentDataSource.setSelectedCurrency(selectedCurrency, selectedCurrencySymbol)\n\n        }\n        currentCurrencySymbol = selectedCurrencySymbol\n\n        Log.e(\"itemList\", itemList.toString())\n        val sortedList: List<SupportedCurrencies> =\n            (paymentOptionsResponse.supportedCurrencies).sortedBy { it.orderBy }\n        sortedList.forEachIndexed { index, supportedCurrencies ->\n            /**\n             * here we update selected currency flag to be rounded corner\n             */\n            if (supportedCurrencies.currency == selectedCurrency) {\n                currencyAdapter.updateSelectedPosition(index)\n            }\n            /**\n             * here we update currency selected check to avoid it's appearance when selected currency is same\n             */\n            CheckoutViewModel.currencySelectedForCheck = selectedCurrency\n        }\n\n\n//        if (paymentInlineViewHolder.tapCardInputView.isNotEmpty()) {\n//            paymentInlineViewHolder.tapCardInputView.clear()\n//            paymentInlineViewHolder.tapAlertView?.fadeVisibility(GONE, 500)\n//            paymentInlineViewHolder.acceptedCardText.visibility = VISIBLE\n//            paymentInlineViewHolder.tabLayout.resetBehaviour()\n//        }\n\n        adapter.resetSelection()\n\n        if (::selectedCurrency.isInitialized) {\n            Bugfender.d(CustomUtils.tagEvent, \"Currency changed to : \" + selectedCurrencySymbol)\n            filterViewModels(selectedCurrency)\n        } else {\n            filterViewModels(currentCurrency)\n            //Bugfender.d(\"Currency changed to : \"+currentCurrency ,CustomUtils.tagEvent)\n        }\n\n    }\n\n\n    @SuppressLint(\"ResourceType\")\n    override fun redirectLoadingFinished(\n        done: Boolean,\n        charge: Charge?,\n        contextSDK: Context?\n    ) {\n        //  checkoutFragment.dismiss()\n        println(\"done val\" + done + \"chargeResponse status\" + PaymentDataSource.getChargeOrAuthorize())\n        println(\"saveCardSwitchHolder val\" + saveCardSwitchHolder)\n        println(\"redirect val\" + charge?.response)\n        println(\"gatewayResponse val\" + charge?.gatewayResponse)\n\n        //  saveCardSwitchHolder?.view?.layoutParams= ViewGroup.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.MATCH_PARENT)\n\n        businessViewHolder = contextSDK?.let { BusinessViewHolder(it, this) }!!\n        // saveCardSwitchHolder = contextSDK.let { SwitchViewHolder(it,this) }\n        removeViews(businessViewHolder)\n\n\n\n        if (::amountViewHolder.isInitialized && ::cardViewHolder.isInitialized && ::cardViewHolder.isInitialized && ::paymentInlineViewHolder.isInitialized)\n            removeViews(\n                businessViewHolder,\n                amountViewHolder,\n                cardViewHolder,\n                paymentInlineViewHolder\n            )\n    }\n\n    override fun resultObtained(done: Boolean, contextSDK: Context?) {\n\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun setPayButtonAction(\n        paymentTypeEnum: PaymentType? = null,\n        savedCardsModel: Any? = null\n    ) {\n        println(\"setPayButtonAction >>\" + saveCardSwitchHolder?.view?.cardSwitch?.payButton)\n        println(\"paymentTypeEnum >>\" + paymentTypeEnum)\n        /**\n         * payment from onSelectPaymentOptionActionListener\n         */\n        WebFragment.isGooglePlayWebView = false\n\n\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setOnClickListener {\n            when (paymentTypeEnum) {\n                PaymentType.SavedCard -> {\n                    /**\n                     * Note PaymentType savedcard is changed to Card for saved card payments for extra fees and payment options*/\n                    if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                        checkForExtraFees(\n                            selectedAmount,\n                            selectedCurrency,\n                            PaymentType.SavedCard,\n                            savedCardsModel,\n                            PaymentDataProvider().getSelectedCurrency()\n                        )\n\n                    } else checkForExtraFees(\n                        currentAmount,\n                        currentCurrency,\n                        PaymentType.SavedCard,\n                        savedCardsModel,\n                        PaymentDataProvider().getSelectedCurrency()\n                    )\n\n                    // setDifferentPaymentsAction(paymentTypeEnum,savedCardsModel)\n                }\n                PaymentType.WEB -> {\n                    PaymentDataSource.setWebViewType(WebViewType.REDIRECT)\n                    if (savedCardsModel != null) {\n                        if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                            checkForExtraFees(\n                                selectedAmount,\n                                selectedCurrency,\n                                paymentTypeEnum,\n                                savedCardsModel,\n                                PaymentDataProvider().getSelectedCurrency()\n                            )\n                        } else checkForExtraFees(\n                            currentAmount,\n                            currentCurrency,\n                            paymentTypeEnum,\n                            savedCardsModel,\n                            PaymentDataProvider().getSelectedCurrency()\n                        )\n                    }\n                }\n                PaymentType.CARD -> {\n                    //activateActionButton()\n                    if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                        checkForExtraFees(\n                            selectedAmount,\n                            selectedCurrency,\n                            paymentTypeEnum,\n                            savedCardsModel,\n                            PaymentDataProvider().getSelectedCurrency()\n                        )\n                    } else checkForExtraFees(\n                        currentAmount,\n                        currentCurrency,\n                        paymentTypeEnum,\n                        savedCardsModel,\n                        PaymentDataProvider().getSelectedCurrency()\n                    )\n\n\n                }\n                PaymentType.telecom -> {\n                    checkForExtraFees(\n                        currentAmount,\n                        currentCurrency,\n                        paymentTypeEnum,\n                        savedCardsModel,\n                        PaymentDataProvider().getSelectedCurrency()\n                    )\n                }\n                PaymentType.GOOGLE_PAY -> {\n                    WebFragment.isGooglePlayWebView = true\n                    checkoutFragment.checkOutActivity?.handleGooglePayApiCall(savedCardsModel as PaymentOption)\n\n                }\n\n            }\n            //  false\n        }\n\n    }\n\n    fun changeButtonToLoading() {\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun checkForExtraFees(\n        selectedAmount: String,\n        selectedCurrency: String,\n        paymentTypeEnum: PaymentType,\n        savedCardsModel: Any?,\n        amountedCurrency: AmountedCurrency?\n    ) {\n        var extraFees: java.util.ArrayList<ExtraFee>? = null\n        var paymentOption: PaymentOption? = null\n\n\n\n        if (paymentTypeEnum == PaymentType.WEB) {\n            savedCardsModel as PaymentOption\n            extraFees = savedCardsModel.extraFees\n            fee = calculateExtraFeesAmount(savedCardsModel as PaymentOption, amountedCurrency)\n\n        } else {\n            for (i in paymentOptionsResponse.paymentOptions.indices) {\n                if (paymentOptionsResponse.paymentOptions[i].paymentType == paymentTypeEnum) {\n                    extraFees = paymentOptionsResponse.paymentOptions[i].extraFees\n                    paymentOption = paymentOptionsResponse.paymentOptions[i]\n                }\n            }\n            fee = calculateExtraFeesAmount(paymentOption, amountedCurrency)\n\n        }\n        val totalAmount: String\n        if (selectedTotalAmount != null) {\n            println(\"selectedTotalAmount is\" + selectedTotalAmount)\n            if (selectedAmount.contains(\",\")) {\n                totalAmount = CurrencyFormatter.currencyFormat(\n                    fee?.add(BigDecimal(selectedAmount.replace(\",\", \"\").toDouble())).toString()\n                )\n\n            } else\n                totalAmount = CurrencyFormatter.currencyFormat(\n                    fee?.add(\n                        selectedTotalAmount?.toDouble()?.let { BigDecimal.valueOf(it) }).toString()\n                )\n        } else {\n            totalAmount = CurrencyFormatter.currencyFormat(\n                fee?.add(\n                    amountedCurrency?.amount?.toDouble()?.let { BigDecimal.valueOf(it) }).toString()\n            )\n        }\n\n        if (calculateExtraFeesAmount(\n                extraFees,\n                paymentOptionsResponse.supportedCurrencies,\n                PaymentDataProvider().getSelectedCurrency()\n            )!! > BigDecimal.ZERO\n        ) {\n            showExtraFees(\n                totalAmount.toString(),\n                fee.toString(),\n                paymentTypeEnum,\n                savedCardsModel,\n                selectedCurrency\n            )\n        } else if (savedCardsModel != null) {\n\n            println(\"savedCardsModel after fees\" + savedCardsModel)\n            println(\"savedCardsModel after fees\" + paymentTypeEnum)\n\n            if (paymentTypeEnum == PaymentType.CARD || paymentTypeEnum == PaymentType.SavedCard) {\n                if (paymentInlineViewHolder.cardInputUIStatus == CardInputUIStatus.SavedCard) {\n                    savedCardsModel as SavedCard\n                    println(\"savedCardsModel after fees\" + savedCardsModel.paymentOptionIdentifier.toInt())\n                    if (savedCardsModel.paymentOptionIdentifier.toInt() == 3 || savedCardsModel.paymentOptionIdentifier.toInt() == 4) {\n                        setDifferentPaymentsAction(PaymentType.SavedCard, savedCardsModel)\n                    } else setDifferentPaymentsAction(PaymentType.SavedCard, savedCardsModel)\n\n                } else {\n                    //    savedCardsModel as PaymentOption\n                    setDifferentPaymentsAction(PaymentType.CARD, savedCardsModel)\n\n                }\n\n            } else setDifferentPaymentsAction(paymentTypeEnum, savedCardsModel)\n        } else setDifferentPaymentsAction(paymentTypeEnum, savedCardsModel)\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun payActionSavedCard(savedCardsModel: SavedCard?) {\n        println(\"payActionSavedCard??????\" + savedCardsModel)\n        var selectdSavedCard: PaymentOption? = null\n        selectdSavedCard = logicTogetPayOptions(savedCardsModel?.brand?.name)\n        if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains(\"dark\")) {\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(\n                backgroundColor = Color.parseColor(\n                    selectdSavedCard?.buttonStyle?.background?.darkModel?.baseColor\n                )\n            )\n\n        } else\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(\n                backgroundColor = Color.parseColor(selectdSavedCard?.buttonStyle?.background?.lightModel?.baseColor)\n            )\n\n        startSavedCardPaymentProcess(savedCardsModel as SavedCard)\n\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.getImageView(\n            R.drawable.loader,\n            8\n        ) {\n\n\n        }?.let { it1 ->\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.addChildView(\n                it1\n            )\n        }\n\n        PaymentDataSource.setWebViewType(WebViewType.THREE_DS_WEBVIEW)\n        amountViewHolder.view.amount_section?.tapChipPopup?.slideFromLeftToRight()\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n\n        doAfterSpecificTime {\n\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n\n            saveCardSwitchHolder?.view?.mainSwitch?.visibility = GONE\n            if (paymentInlineViewHolder.cardInputUIStatus == CardInputUIStatus.SavedCard) {\n                cardViewHolder.view.cardInfoHeaderText.visibility = VISIBLE\n                cardViewHolder.view.cardInfoHeaderText.text =\n                    LocalizationManager.getValue(\"savedCardSectionTitle\", \"TapCardInputKit\")\n\n                with(cardViewHolder.view.mainChipgroup) {\n                    val viewsToFadeOut = mutableListOf<View>(chipsRecycler, groupAction, groupName)\n                    cardViewHolder.view.cardInfoHeaderText?.let { viewsToFadeOut.add(it) }\n                    viewsToFadeOut.add(amountViewHolder.view)\n                    paymentInlineViewHolder.paymentInputContainer.applyBluryToView()\n\n                    doAfterSpecificTime(time = 100L) {\n                        viewsToFadeOut.addFadeOutAnimationToViews(\n                            durationTime = 500L, onAnimationStart = {\n                            }, onAnimationEnd = {\n                                translateHeightAnimationForWebViews()\n                            })\n\n                    }\n\n                }\n\n            }\n        }\n\n    }\n\n    private fun translateHeightAnimationForWebViews(): Unit {\n        animateBS(\n            fromView = bottomSheetLayout,\n            toView = sdkLayout,\n            transitionAnimation = 300L,\n            changeHeight = {})\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun startSavedCardPaymentProcess(savedCard: SavedCard?) {\n        val createTokenSavedCard =\n            CreateTokenSavedCard(savedCard?.id, PaymentDataSource.getCustomer().identifier)\n        cardViewModel.processEvent(\n            CardViewEvent.CreateTokenExistingCardEvent,\n            this,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            createTokenSavedCard\n        )\n    }\n\n    private fun removeAllViews() {\n        if (::businessViewHolder.isInitialized && ::amountViewHolder.isInitialized && ::cardViewHolder.isInitialized && ::paymentInlineViewHolder.isInitialized &&\n            ::goPayViewsHolder.isInitialized && ::otpViewHolder.isInitialized\n        )\n            removeViews(\n                businessViewHolder,\n                amountViewHolder,\n                cardViewHolder,\n                paymentInlineViewHolder,\n                saveCardSwitchHolder,\n                goPayViewsHolder,\n                otpViewHolder,\n                tabAnimatedActionButtonViewHolder\n            )\n\n        if (::webViewHolder.isInitialized) removeViews(webViewHolder)\n    }\n\n    private fun setAllSeparatorTheme() {\n\n        val borderColor: String = ThemeManager.getValue(\"poweredByTap.backgroundColor\")\n        var borderOpacityVal: String? = null\n        var newBorderColor: String? = null\n        borderOpacityVal = borderColor.substring(borderColor.length - 2)\n        newBorderColor = \"#\" + borderOpacityVal + borderColor.substring(0, borderColor.length - 2)\n            .replace(\"#\", \"\")\n\n        /**\n         * Set the stroke width from json itself for business header*/\n        val separatorViewTheme = SeparatorViewTheme()\n        separatorViewTheme.strokeColor =\n            Color.parseColor(ThemeManager.getValue(\"tapSeparationLine.backgroundColor\"))\n        separatorViewTheme.strokeHeight = ThemeManager.getValue(\"tapSeparationLine.height\")\n        businessViewHolder.view.topSeparatorLinear.topSeparator.setTheme(separatorViewTheme)\n\n        if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains(\"dark\")) {\n            amountViewHolder.view.amountView_separator.visibility = GONE\n        } else amountViewHolder.view.amountView_separator.visibility = VISIBLE\n        amountViewHolder.view.amountView_separator.setTheme(separatorViewTheme)\n        //  cardViewHolder.view.tapSeparatorViewLinear1.separator_1.setTheme(separatorViewTheme)\n        goPaySavedCardHolder.view.tapSeparatorViewLinear.separator_.setTheme(separatorViewTheme)\n        /**\n         * set separator background\n         */\n        businessViewHolder.view.topSeparatorLinear.setBackgroundColor(\n            (Color.parseColor(\n                ThemeManager.getValue(\n                    \"merchantHeaderView.backgroundColor\"\n                )\n            ))\n        )\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onRecognitionSuccess(card: TapCard?) {\n//to be added for unembossed cards\n        /* if (card != null) {\n             if (card.cardNumber != null && card.cardHolder != null && card.expirationDate != null) {\n                onReadSuccess(card)\n             }\n         }*/\n\n        println(\"are you called here!!\")\n\n\n    }\n\n    override fun onRecognitionFailure(error: String?) {\n\n    }\n\n\n    private fun removeInlineScanner() {\n        if (isInlineOpened) {\n            if (fragmentManager.findFragmentById(R.id.inline_container) != null) {\n                fragmentManager.beginTransaction()\n                    .remove(fragmentManager?.findFragmentById(R.id.inline_container)!!)\n                    .commit()\n            }\n            // inlineCamerFragment.onDestroy()\n            isInlineOpened = false\n            checkoutFragment.isScannerOpened = false\n            inLineCardLayout.visibility = GONE\n            cardViewHolder.view.visibility = VISIBLE\n            amountViewHolder.readyToScanVisibility(false)\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                ActionButtonState.RESET\n            )\n            incrementalCount = 0\n        }\n\n    }\n\n    fun handleScanFailedResult(error: String?) {\n        println(\"handleScanFailedResult card is\")\n        removeInlineScanner()\n        //  removeViews(amountViewHolder, businessViewHolder)\n        addViews(\n            // businessViewHolder,\n            //  amountViewHolder,\n            cardViewHolder,\n            paymentInlineViewHolder,\n            saveCardSwitchHolder\n        )\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun handleScanSuccessResult(card: TapCard) {\n\n        //  removeViews(amountViewHolder, businessViewHolder)\n        addViews(\n            //   businessViewHolder,\n            //   amountViewHolder,\n            // cardViewHolder,\n            paymentInlineViewHolder,\n            saveCardSwitchHolder\n        )\n        callBinLookupApi(card.cardNumber?.trim()?.substring(0, 6))\n\n\n        Handler().postDelayed({\n            val binLookupResponse: BINLookupResponse? = PaymentDataSource.getBinLookupResponse()\n            if (PaymentDataSource.getCardType() != null && PaymentDataSource.getCardType() == CardType.ALL) {\n                setScannedCardDetails(card)\n\n            } else {\n                if (binLookupResponse != null) {\n                    paymentInlineViewHolder.checkAllowedCardTypes(binLookupResponse)\n                    setScannedCardDetails(card)\n                }\n\n            }\n        }, 1000)\n\n\n        // inlineCamerFragment.onDestroy()\n        removeInlineScanner()\n\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun setScannedCardDetails(card: TapCard) {\n\n\n        println(\"scanned card holder is${card.cardHolder}\")\n        println(\"scanned card number is${card.cardNumber}\")\n\n        /* paymentInlineViewHolder.tapCardInputView.setCardNumberMasked(\n             paymentInlineViewHolder.maskCardNumber(\n                 card.cardNumber\n             )\n         )*/\n        paymentInlineViewHolder.hideViewONScanNFC()\n        val dateParts: List<String>? = card.expirationDate?.split(\"/\")\n        val month = dateParts?.get(0)?.toInt()\n        val year = dateParts?.get(1)?.toInt()\n        if (month != null) {\n            if (year != null) {\n                paymentInlineViewHolder.setCardScanData(card, month, year)\n            }\n        }\n\n        // paymentInlineViewHolder.tapCardInputView.setCardHolderName(card.cardHolder)\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun callBinLookupApi(binLookUpStr: String?) {\n        cardViewModel.processEvent(\n            CardViewEvent.RetreiveBinLookupEvent,\n            CheckoutViewModel(), null, binLookUpStr, null, null\n        )\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun handleNFCScannedResult(emvCard: TapEmvCard) {\n        println(\"emvCard>>\" + emvCard)\n        //   removeViews(amountViewHolder, businessViewHolder)\n        addViews(\n            //   businessViewHolder,\n            //   amountViewHolder,\n            // cardViewHolder,\n            paymentInlineViewHolder,\n            saveCardSwitchHolder\n        )\n        callBinLookupApi(emvCard.cardNumber?.substring(0, 6))\n\n        Handler().postDelayed({\n            val binLookupResponse: BINLookupResponse? = PaymentDataSource.getBinLookupResponse()\n            if (PaymentDataSource.getCardType() != null && PaymentDataSource.getCardType() == CardType.ALL) {\n                setNfcCardDetails(emvCard)\n\n            } else {\n                if (binLookupResponse != null) {\n                    paymentInlineViewHolder.checkAllowedCardTypes(binLookupResponse)\n                    setNfcCardDetails(emvCard)\n                }\n\n            }\n        }, 300)\n\n        removeNFCViewFragment()\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun setNfcCardDetails(emvCard: TapEmvCard) {\n        // auto slide added on scan to prevent overlap\n        paymentInlineViewHolder.hideViewONScanNFC()\n        convertDateString(emvCard)\n        paymentInlineViewHolder.onFocusChange(CardInputListener.FocusField.FOCUS_CVC)\n\n\n    }\n\n    private fun removeNFCViewFragment() {\n        if (isNFCOpened)\n            if (fragmentManager.findFragmentById(R.id.fragment_container_nfc_lib) != null)\n                fragmentManager.beginTransaction()\n                    .remove(fragmentManager.findFragmentById(R.id.fragment_container_nfc_lib)!!)\n                    .commit()\n        isNFCOpened = false\n        checkoutFragment.isNfcOpened = false\n        //  webFrameLayout.visibility = View.GONE\n        frameLayout.visibility = GONE\n        cardViewHolder.view.visibility = VISIBLE\n    }\n\n\n    private fun convertDateString(emvCard: TapEmvCard) {\n        //  println(\"emvCard.getExpireDate()\"+emvCard.getExpireDate())\n        val dateParts: CharSequence? = DateFormat.format(\"M/y\", emvCard.getExpireDate())\n        println(\"dateparts\" + dateParts?.length)\n        if (dateParts?.contains(\"/\") == true) {\n            if (dateParts.length <= 3) {\n                return\n            } else {\n                if (dateParts.length >= 5 || dateParts.length >= 4) {\n                    val month = (dateParts).substring(0, 1).toInt()\n\n                    val year = (dateParts).substring(2, 4)\n\n                    if (year.contains(\"/\")) {\n                        println(\"retuu>>\" + year)\n                        return\n                    } else {\n                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n                            paymentInlineViewHolder.setNFCCardData(emvCard, month, year.toInt())\n                        }\n\n\n                    }\n\n                }\n\n            }\n\n\n        }\n\n    }\n\n    private fun filteredByPaymentTypeAndCurrencyAndSortedList(\n        list: java.util.ArrayList<PaymentOption>, paymentType: PaymentType, currency: String\n    ): java.util.ArrayList<PaymentOption> {\n        var currencyFilter: String? = currency.toUpperCase()\n        val filters: java.util.ArrayList<Utils.List.Filter<PaymentOption>> =\n            java.util.ArrayList<Utils.List.Filter<PaymentOption>>()\n\n        /**\n         * if trx currency not included inside supported currencies <i.e Merchant pass transaction currency that he is not allowed for>\n         * set currency to first supported currency\n        </i.e> */\n        var trxCurrencySupported = false\n        for (amountedCurrency in paymentOptionsResponse.supportedCurrencies) {\n            if (amountedCurrency.currency == currencyFilter) {\n                trxCurrencySupported = true\n                break\n            }\n        }\n        if (!trxCurrencySupported) currencyFilter =\n            paymentOptionsResponse.supportedCurrencies[0].currency\n\n\n        if (currencyFilter != null) {\n            this.getCurrenciesFilter<PaymentOption>(currencyFilter)?.let { filters.add(it) }\n        }\n        //  filters.add(getPaymentOptionsFilter(paymentType))\n        //  val filter: CompoundFilter<PaymentOption> = CompoundFilter(filters)\n        //  val filtered: ArrayList<PaymentOption> = Utils.List.filter(list)\n\n        var filtered: ArrayList<PaymentOption> =\n            list.filter { items ->\n                items.paymentType == paymentType && items.getSupportedCurrencies()?.contains(\n                    currencyFilter\n                ) == true\n            } as ArrayList<PaymentOption>\n\n        return list.filter { items ->\n            items.paymentType == paymentType && items.getSupportedCurrencies()?.contains(\n                currencyFilter\n            ) == true\n        } as ArrayList<PaymentOption>\n    }\n\n    private fun <E : CurrenciesSupport> getCurrenciesFilter(\n        currency: String\n    ): Utils.List.Filter<E> {\n        return object : Utils.List.Filter<E> {\n            override fun isIncluded(`object`: E): Boolean {\n                return `object`.getSupportedCurrencies()!!.contains(currency)\n            }\n        }\n    }\n\n    private fun <E> filterByCurrenciesAndSortList(\n        list: ArrayList<E>,\n        currency: String\n    ): ArrayList<SavedCard> where E : CurrenciesSupport?, E : Comparable<E>? {\n        println(\"currency filterByCurrenciesAndSortList\" + currency)\n        println(\"list here\" + list.size)\n        println(\"list here\" + list)\n        //  val filter: Utils.List.Filter<E> = getCurrenciesFilter(currency)\n        // println(\"filter here\"+filter)\n\n\n        // var filtered: ArrayList<E> = Utils.List.filter(list, filter)\n        /**\n         * Stopped generic for now to work the functionality**/\n        return list.filter { items ->\n            items?.getSupportedCurrencies()?.contains(\n                currency\n            ) == true\n        } as ArrayList<SavedCard>\n        /* Collections.sort(filtered)\n          return filtered*/\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun filterViewModels(currency: String) {\n\n        if (paymentOptionsResponse.paymentOptions != null)\n            paymentOptionsWorker =\n                java.util.ArrayList<PaymentOption>(paymentOptionsResponse.paymentOptions)\n        if (paymentOptionsResponse.cards != null) {\n            val savedCardsWorker: java.util.ArrayList<SavedCard> =\n                java.util.ArrayList<SavedCard>(paymentOptionsResponse.cards)\n            savedCardsBasedCurr = filterByCurrenciesAndSortList(savedCardsWorker, currency)\n\n        }\n        println(\"savedCardsBasedCurr>>\" + savedCardsBasedCurr)\n        println(\"savedCardsBasedCurr>>\" + savedCardsBasedCurr?.size)\n\n\n        webPaymentOptions =\n            filteredByPaymentTypeAndCurrencyAndSortedList(\n                paymentOptionsWorker, PaymentType.WEB, currency\n            )\n\n        val cardPaymentOptions: java.util.ArrayList<PaymentOption> =\n            filteredByPaymentTypeAndCurrencyAndSortedList(\n                paymentOptionsWorker, PaymentType.CARD, currency\n            )\n\n        val googlePaymentOptions: java.util.ArrayList<PaymentOption> =\n            filteredByPaymentTypeAndCurrencyAndSortedList(\n                paymentOptionsWorker, PaymentType.GOOGLE_PAY, currency\n            )\n        //  println(\"googlePaymentOptions\"+googlePaymentOptions)\n        val hasWebPaymentOptions = webPaymentOptions.size > 0\n        val hasCardPaymentOptions = cardPaymentOptions.size > 0\n        val hasGooglePaymentOptions = googlePaymentOptions.size > 0\n\n        val hasSavedCards: Boolean = savedCardsBasedCurr.size > 0\n        // println(\"hasGooglePaymentOptions\"+hasGooglePaymentOptions)\n\n        //Added if else to update showing GooglePay button based on api\n        if (hasGooglePaymentOptions && googlePaymentOptions.isNotEmpty()) {\n            adapter.updateAdapterGooglePay(googlePaymentOptions)\n            PaymentDataSource.setGoogleCardPay(googlePaymentOptions)\n        } else {\n            adapter.updateAdapterGooglePay(googlePaymentOptions)\n            PaymentDataSource.setGoogleCardPay(googlePaymentOptions)\n        }\n        println(\"hasWebPaymentOptions\" + webPaymentOptions)\n        println(\"hasCardPaymentOptions\" + hasCardPaymentOptions)\n        println(\"savedCardList\" + savedCardList?.isNullOrEmpty())\n        if (webPaymentOptions.size == 0) {\n            adapter.updateAdapterData(ArrayList())\n            if (savedCardList.isNullOrEmpty()) {\n                cardViewHolder.view.mainChipgroup?.groupName?.visibility = View.GONE\n            } else {\n                cardViewHolder.view.mainChipgroup?.groupName?.visibility = VISIBLE\n            }\n\n\n        }\n\n        logicToHandlePaymentDataType(\n            webPaymentOptions,\n            cardPaymentOptions\n        )\n        if (savedCardsBasedCurr == null) savedCardsBasedCurr = ArrayList()\n        if (hasSavedCards) {\n            adapter.updateAdapterDataSavedCard(savedCardsBasedCurr)\n            // update RecentSectionViewModel data with only filtered cards. // added to fix filtering saved cards based on changed currency\n\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun logicToHandlePaymentDataType(\n        webPaymentOptions: ArrayList<PaymentOption>? = null,\n        cardPaymentOptions: ArrayList<PaymentOption>\n\n    ) {\n        cardViewHolder.view.mainChipgroup?.groupName?.visibility = VISIBLE\n        // println(\"webPaymentOptions in logic >>>>$webPaymentOptions\")\n        println(\"cardPaymentOptions in logic >>>>$cardPaymentOptions\")\n        println(\"payment data in logic >>>>\" + PaymentDataSource.getPaymentDataType())\n\n\n        if (PaymentDataSource.getPaymentDataType() != null && PaymentDataSource.getPaymentDataType() == \"WEB\" && PaymentDataSource.getTransactionMode() != TransactionMode.AUTHORIZE_CAPTURE) {\n            adapter.updateAdapterDataSavedCard(ArrayList())\n            if (webPaymentOptions != null) {\n                adapter.updateAdapterData(webPaymentOptions)\n            }\n            saveCardSwitchHolder?.view?.cardSwitch?.showOnlyPayButton()\n        } else if (PaymentDataSource.getPaymentDataType() != null && PaymentDataSource.getPaymentDataType() == \"CARD\") {\n            adapter.updateAdapterData(ArrayList())\n            paymentInlineViewHolder.setDataFromAPI(cardPaymentOptions)\n            saveCardSwitchHolder?.view?.cardSwitch?.showOnlyPayButton()\n        } else {\n            /**\n             * If TransactionMode is AUTHORIZE_CAPTURE then don't show webpayment options\n             * **/\n            if (PaymentDataSource.getTransactionMode() == TransactionMode.AUTHORIZE_CAPTURE) {\n                adapter.updateAdapterData(ArrayList())\n                paymentInlineViewHolder.setDataFromAPI(cardPaymentOptions)\n            } else {\n                if (webPaymentOptions != null) {\n                    adapter.updateAdapterData(webPaymentOptions)\n                }\n                if (!cardPaymentOptions.isEmpty()) {\n                    paymentInlineViewHolder.setDataFromAPI(cardPaymentOptions)\n\n\n                } else {\n                    saveCardSwitchHolder?.mainTextSave?.visibility = GONE\n                    removeViews(paymentInlineViewHolder)\n                }\n\n            }\n        }\n        if (LocalizationManager.currentLocalized.length() != 0) {\n            title = LocalizationManager.getValue(\"title\", \"ExtraFees\")\n\n        }\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun showExtraFees(\n        totalAmount: String,\n        extraFeesAmount: String,\n        paymentType: PaymentType, savedCardsModel: Any?, selectedCurrency: String\n    ) {\n\n        val extraFeesPart1: String = LocalizationManager.getValue<String>(\n            \"message\",\n            \"ExtraFees\"\n        ).replaceFirst(\"%@\", extraFeesAmount + selectedCurrency)\n        val extraFeesPart2: String = extraFeesPart1.replace(\"%@\", totalAmount + selectedCurrency)\n        // val leftToRight = \"\\u200F\"\n        //  val localizedMessage =\n        // extraFeesPart1 +\" \"+extraFeesAmount+PaymentDataProvider().getSelectedCurrency()?.currency +extraFeesPart2+\" \"+ totalAmount+ PaymentDataProvider().getSelectedCurrency()?.currency\n        //    \"$extraFeesPart1 $extraFeesAmount$selectedCurrency$extraFeesPart2 $totalAmount$selectedCurrency\"\n        CustomUtils.showDialog(\n            title,\n            extraFeesPart2,\n            context,\n            3,\n            this,\n            paymentType,\n            savedCardsModel, true\n        )\n\n\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun dialogueExecuteExtraFees(\n        response: String,\n        paymentType: PaymentType,\n        savedCardsModel: Any?\n    ) {\n        if (response == \"YES\") {\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n\n            println(\"savedCardsModel>>>>\" + savedCardsModel)\n            if (savedCardsModel != null) {\n                if (paymentType == PaymentType.CARD) {\n                    savedCardsModel as SavedCard\n                    if (savedCardsModel.paymentOptionIdentifier.toInt() == 3 || savedCardsModel.paymentOptionIdentifier.toInt() == 4) {\n                        setDifferentPaymentsAction(PaymentType.SavedCard, savedCardsModel)\n                    }\n                } else setDifferentPaymentsAction(paymentType, savedCardsModel)\n            } else setDifferentPaymentsAction(paymentType, savedCardsModel)\n        } else {\n            fee = BigDecimal.ZERO\n\n            when {\n                paymentType === PaymentType.WEB -> {\n                    // fireWebPaymentExtraFeesUserDecision(ExtraFeesStatus.REFUSE_EXTRA_FEES)\n                    selectedCurrencyPos = null\n                    selectedAmountPos = null\n\n\n                }\n                paymentType === PaymentType.CARD -> {\n                    selectedCurrencyPos = null\n                    selectedAmountPos = null\n//                    fireCardPaymentExtraFeesUserDecision(ExtraFeesStatus.REFUSE_EXTRA_FEES)\n                }\n                paymentType === PaymentType.SavedCard -> {\n                    selectedCurrencyPos = null\n                    selectedAmountPos = null\n                    //  fireSavedCardPaymentExtraFeesUserDecision(ExtraFeesStatus.REFUSE_EXTRA_FEES)\n                }\n            }\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun setDifferentPaymentsAction(\n        paymentType: PaymentType,\n        savedCardsModel: Any?\n    ) {\n        when {\n\n            paymentType === PaymentType.WEB -> {\n                if (savedCardsModel != null) {\n                    PaymentDataSource.setWebViewType(WebViewType.REDIRECT)\n                    //Added to disable click when button loading\n                    amountViewHolder.view.amount_section?.itemAmountLayout?.isEnabled = false\n                    amountViewHolder.view.amount_section?.itemAmountLayout?.isClickable = false\n                    onClickRedirect(savedCardsModel)\n                }\n            }\n            paymentType === PaymentType.CARD -> {\n                println(\"savedCardsModel fro card\" + savedCardsModel)\n\n                //Added to disable click when button loading\n                amountViewHolder.view.amount_section?.itemAmountLayout?.isEnabled = false\n                amountViewHolder.view.amount_section?.itemAmountLayout?.isClickable = false\n\n                if (savedCardsModel is PaymentOption) onClickCardPayment(savedCardsModel)\n\n\n            }\n            paymentType === PaymentType.SavedCard -> {\n                println(\"SavedCard fro card\" + savedCardsModel)\n                if (isSavedCardSelected == true) {\n                    PaymentDataSource.setWebViewType(WebViewType.THREE_DS_WEBVIEW)\n                    //Added to disable click when button loading\n                    amountViewHolder.view.amount_section?.itemAmountLayout?.isEnabled = false\n                    amountViewHolder.view.amount_section?.itemAmountLayout?.isClickable = false\n                    if (savedCardsModel != null)\n                        payActionSavedCard(savedCardsModel as SavedCard)\n\n                }\n            }\n        }\n    }\n\n    /**\n     * Calculate extra fees amount big decimal.\n     *\n     * @param paymentOption the payment option\n     * @return the big decimal\n     */\n    open fun calculateExtraFeesAmount(\n        paymentOption: PaymentOption?,\n        amountedCurrency: AmountedCurrency?\n    ): BigDecimal? {\n        return if (paymentOption != null) {\n\n            // val amount = PaymentDataProvider().getSelectedCurrency()\n            var extraFees: java.util.ArrayList<ExtraFee>? = paymentOption.extraFees\n            if (extraFees == null) extraFees = java.util.ArrayList()\n            val supportedCurrencies: java.util.ArrayList<SupportedCurrencies>? =\n                PaymentDataProvider().getSupportedCurrencies()\n            calculateExtraFeesAmount(extraFees, supportedCurrencies, amountedCurrency)\n        } else BigDecimal.ZERO\n    }\n\n    fun View.fadeVisibility(visibility: Int, duration: Long = 3000) {\n        val transition: Transition = Fade()\n        transition.duration = duration\n        transition.addTarget(this)\n        TransitionManager.beginDelayedTransition(this.parent as ViewGroup, transition)\n        this.visibility = visibility\n    }\n\n    fun closeAsynchView() {\n        checkoutFragment?.dismissBottomSheetDialog()\n    }\n\n    fun showOnlyButtonView(\n        status: ChargeStatus,\n        checkOutActivity: CheckOutActivity?,\n        _checkoutFragment: CheckoutFragment\n    ) {\n        removeAllViews()\n        addViews(saveCardSwitchHolder)\n        val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n        val nowString: String = LocalizationManager.getValue(\"now\", \"ActionButton\")\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n            false,\n            \"en\",\n            if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                payString + \" \" + nowString\n            } else {\n                payString + \" \" + nowString\n            },\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.paymentBackgroundColor\")),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.titleLabelColor\")),\n        )\n\n\n        when (status) {\n            ChargeStatus.CAPTURED, ChargeStatus.AUTHORIZED, ChargeStatus.VALID, ChargeStatus.IN_PROGRESS -> {\n                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setDisplayMetricsTheme(\n                    CustomUtils.getDeviceDisplayMetrics(\n                        context as Activity\n                    ), CustomUtils.getCurrentTheme()\n                )\n                Handler().postDelayed({\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                        ActionButtonState.SUCCESS\n                    )\n                }, 500)\n            }\n            ChargeStatus.CANCELLED, ChargeStatus.TIMEDOUT, ChargeStatus.FAILED, ChargeStatus.DECLINED, ChargeStatus.UNKNOWN,\n            ChargeStatus.RESTRICTED, ChargeStatus.ABANDONED, ChargeStatus.VOID, ChargeStatus.INVALID -> {\n                Handler().postDelayed({\n                    tabAnimatedActionButton?.setInValidBackground(\n                        false, Color.YELLOW\n                    )\n                    tabAnimatedActionButton?.changeButtonState(ActionButtonState.LOADING)\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(\n                        false, Color.YELLOW\n                    )\n\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n                        false,\n                        \"en\",\n                        null,\n                        Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n                        Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n\n                        )\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                        ActionButtonState.ERROR\n                    )\n                }, 500)\n                tabAnimatedActionButton?.changeButtonState(ActionButtonState.ERROR)\n            }\n            else -> {\n\n                if (status.equals(\"tokenized\")) {\n                    Handler().postDelayed({\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                            ActionButtonState.SUCCESS\n                        )\n                    }, 500)\n\n                } else {\n                    Handler().postDelayed({\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(\n                            false,\n                            Color.BLUE\n                        )\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n                            false,\n                            \"en\",\n                            null,\n                            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n                            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n\n                            )\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                            ActionButtonState.ERROR\n                        )\n                    }, 500)\n\n                }\n            }\n        }\n        /*   Handler().postDelayed({\n               checkOutActivity?.onBackPressed()\n\n               if (::bottomSheetDialog.isInitialized)\n                   bottomSheetDialog.dismiss()\n               _checkoutFragment.activity?.onBackPressed()\n\n           }, 12000)*/\n    }\n\n\n    /**\n     * handlePaymentSuccess handles the payment token obtained from GooglePay API\n     * **/\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun handlePaymentSuccess(paymentData: PaymentData, selectedPaymentOption: PaymentOption) {\n        removeViews(\n            //businessViewHolder,\n            amountViewHolder,\n            cardViewHolder,\n            // saveCardSwitchHolder,\n            paymentInlineViewHolder,\n            otpViewHolder,\n            goPaySavedCardHolder,\n            goPayViewsHolder\n        )\n        saveCardSwitchHolder?.view?.cardSwitch?.switchesLayout?.visibility = GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = VISIBLE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n\n        val paymentInformation = paymentData.toJson() ?: return\n\n        try {\n            // Token will be null if PaymentDataRequest was not constructed using fromJson(String).\n            val paymentMethodData =\n                JSONObject(paymentInformation).getJSONObject(\"paymentMethodData\")\n\n            // If the gateway is set to \"example\", no payment information is returned - instead, the\n            // token will only consist of \"examplePaymentMethodToken\".\n            val tokenizationData = paymentMethodData.getJSONObject(\"tokenizationData\")\n\n            val token = tokenizationData.getString(\"token\")\n            Bugfender.d(CustomUtils.tagEvent, \"Google pay raw token :\" + token)\n            val gson = Gson()\n            val jsonToken = gson.fromJson(token, JsonObject::class.java)\n\n\n            /**\n             * At this stage, Passing the googlePaylaod to Tap Backend TokenAPI call followed by chargeAPI.\n             * ***/\n            val createTokenGPayRequest = CreateTokenGPayRequest(\"googlepay\", jsonToken)\n            CardViewModel().processEvent(\n                CardViewEvent.CreateGoogleTokenEvent,\n                this,\n                selectedPaymentOption,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                context,\n                createTokenGPayRequest\n            )\n            // Logging token string.\n            /* Log.e(\"GooglePaymentToken\", paymentMethodData\n                     .getJSONObject(\"tokenizationData\")\n                     .getString(\"token\"))\n    */\n        } catch (e: JSONException) {\n            Log.e(\"handlePaymentSuccess\", \"Error: \" + e.toString())\n        }\n\n    }\n\n    /**\n     * handleError handles the payment response obtained from GooglePay API\n     * **/\n    fun handleError(statusCode: Int) {\n        Log.e(\"loadPaymentData failed\", String.format(\"Error code: %d\", statusCode))\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onReadSuccess(card: TapCard?) {\n        incrementalCount += 1\n\n        println(\"incrementalCount val>>>>>\" + incrementalCount)\n        /*   if (card != null) {\n               if(card.cardNumber!=null)\n              handleScanSuccessResult(card)\n              *//* Log.d(\"checkOutViewModel\", \"onRecognitionSuccess: \" + card.cardNumber)\n            Log.d(\"checkOutViewModel\", \"onRecognitionSuccess: \" + card.expirationDate)\n            Log.d(\"checkOutViewModel\", \"onRecognitionSuccess: \" + card.cardHolder)*//*\n\n        }*/\n        if (card != null && incrementalCount == 3) {\n\n            if (card.cardNumber != null && card.cardHolder != null && card.expirationDate != null) {\n                handleScanSuccessResult(card)\n                incrementalCount = 0\n            }\n            return\n        }\n    }\n\n    override fun onReadFailure(error: String?) {\n        handleScanFailedResult(error)\n    }\n\n    private fun logicForLoyaltyProgram() {\n\n        loyaltyViewHolder.loyaltyView.switchLoyalty?.setOnCheckedChangeListener { buttonView, isChecked ->\n            loyaltyViewHolder.loyaltyView.switchTheme()\n\n            if (isChecked) {\n                loyaltyViewHolder.loyaltyView.linearLayout2?.visibility = VISIBLE\n                loyaltyViewHolder.loyaltyView.linearLayout3?.visibility = VISIBLE\n\n            } else {\n\n                loyaltyViewHolder.loyaltyView.linearLayout2?.visibility = GONE\n                loyaltyViewHolder.loyaltyView.linearLayout3?.visibility = GONE\n\n            }\n        }\n\n        loyaltyViewHolder.loyaltyView.setLoyaltyHeaderDataSource(\n            LoyaltyHeaderDataSource(\n                \"ADCB\",\n                \"https://is4-ssl.mzstatic.com/image/thumb/Purple112/v4/05/33/67/05336718-a6f6-8ca1-1ea0-0644f5071ce9/AppIcon-0-0-1x_U007emarketing-0-0-0-5-0-0-sRGB-0-0-0-GLES2_U002c0-512MB-85-220-0-0.png/1200x600wa.png\"\n            )\n        )\n\n        loyaltyViewHolder.loyaltyView.textViewClickable?.makeLinks(\n            Pair(\"(T&C)\", View.OnClickListener {\n                val url = \"https://www.adcb.com/en/tools-resources/adcb-privacy-policy/\"\n                val intent = Intent(Intent.ACTION_VIEW)\n                intent.data = Uri.parse(url)\n                context.startActivity(intent)\n\n            })\n        )\n    }\n\n\n\n    override fun onTransactionSuccess(p0: Transaction?) {\n        println(\"transaction is success $p0\")\n\n    }\n\n    override fun onTransactionFail(p0: Transaction?) {\n        println(\"onTransactionFail is  $p0\")\n    }\n\n    fun dismissBottomSheet() {\n        checkoutFragment.dismissBottomSheetDialog()\n    }\n\n    fun setTitleNormalCard() {\n        cardViewHolder.view.cardInfoHeaderText.text =\n            LocalizationManager.getValue(\"cardSectionTitleOr\", \"TapCardInputKit\")\n    }\n\n    fun getAssetName(paymentOptionOb: PaymentOption?): String {\n        println(\"paymentOptionOb\" + paymentOptionOb)\n        var lang: String = \"en\"\n        var theme: String = \"light\"\n        if (CustomUtils.getCurrentLocale(context) != null) {\n            lang = CustomUtils.getCurrentLocale(context)\n        } else lang = \"en\"\n        if (CustomUtils.getCurrentTheme().contains(\"dark\")) {\n            theme = \"dark\"\n        } else theme = \"light\"\n        val assetToLoad: String = paymentOptionOb?.buttonStyle?.titleAssets.toString()\n        println(\n            \"<<<assetToLoad>>>\" + assetToLoad.replace(\"{theme}\", theme)\n                .replace(\"{lang}\", lang) + \".png\"\n        )\n        return assetToLoad.replace(\"{theme}\", theme).replace(\"{lang}\", lang) + \".png\"\n    }\n\n    override fun onMorphAnimationEnd() {\n        context.showToast(\"end\")\n    }\n\n    override fun onMorphAnimationReverted() {\n        context.showToast(\"revert\")\n    }\n\n    override fun onMorphAnimationStarted() {\n        context.showToast(\"start\")\n    }\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout/src/main/java/company/tap/checkout/internal/viewmodels/CheckoutViewModel.kt b/checkout/src/main/java/company/tap/checkout/internal/viewmodels/CheckoutViewModel.kt
--- a/checkout/src/main/java/company/tap/checkout/internal/viewmodels/CheckoutViewModel.kt	(revision 163e59352a830e8122d4aad1a2f93d88e69337a4)
+++ b/checkout/src/main/java/company/tap/checkout/internal/viewmodels/CheckoutViewModel.kt	(date 1685442947032)
@@ -19,10 +19,10 @@
 import android.widget.FrameLayout
 import android.widget.ImageView
 import android.widget.LinearLayout
+import android.widget.RelativeLayout
 import androidx.annotation.Nullable
 import androidx.annotation.RequiresApi
 import androidx.annotation.RestrictTo
-import androidx.coordinatorlayout.widget.CoordinatorLayout
 import androidx.core.view.isNotEmpty
 import androidx.core.view.isVisible
 import androidx.fragment.app.FragmentManager
@@ -108,7 +108,6 @@
 import kotlinx.android.synthetic.main.switch_layout.view.*
 import mobi.foo.benefitinapp.data.Transaction
 import mobi.foo.benefitinapp.listener.CheckoutListener
-import mobi.foo.benefitinapp.utils.BenefitInAppCheckout
 import org.json.JSONException
 import org.json.JSONObject
 import java.math.BigDecimal
@@ -298,7 +297,7 @@
         cardViewModel: CardViewModel,
         checkoutFragment: CheckoutFragment,
         headerLayout: LinearLayout,
-         topHeaderView: TapBrandView?,
+        topHeaderView: TapBrandView?,
     ) {
         this.context = context
         this.fragmentManager = fragmentManager
@@ -336,20 +335,6 @@
             }
 
         })
-//
-//        doAfterSpecificTime(50) {
-//            this.topHeaderView.startPoweredByAnimation(
-//                delayTime = Constants.PoweredByLayoutAnimationDelay,
-//                this.topHeaderView.poweredByImage, onAnimationEnd =
-//                {
-//                    if (isItemsAreOpend.value==false){
-//                        poweredByTapAnimationEnds()
-//                    }
-//                }
-//            )
-//
-//        }
-
 
 
     }
@@ -586,7 +571,7 @@
                     )
                 }
             }
-        unActivateActionButton()
+            unActivateActionButton()
 
         }
         newColorVal = Color.parseColor(ThemeManager.getValue("horizontalList.backgroundColor"))
@@ -4068,7 +4053,6 @@
     }
 
 
-
     override fun onTransactionSuccess(p0: Transaction?) {
         println("transaction is success $p0")
 
Index: checkout/src/main/res/layout/fragment_web.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:background=\"@color/whitebg\"\n    android:orientation=\"vertical\">\n\n\n\n\n\n    <RelativeLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:background=\"@color/whitebg\"\n        android:id=\"@+id/relative\"\n\n       >\n        <ProgressBar\n            android:id=\"@+id/progressBar\"\n            android:layout_width=\"60dp\"\n            android:layout_height=\"60dp\"\n            android:layout_centerInParent=\"true\"\n            android:indeterminate=\"true\"\n            android:indeterminateDrawable=\"@drawable/output_black_loader_nobg\" />\n\n        <WebView\n            android:id=\"@+id/web_view\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:scrollbars=\"vertical|horizontal\" />\n    </RelativeLayout>\n\n\n</LinearLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout/src/main/res/layout/fragment_web.xml b/checkout/src/main/res/layout/fragment_web.xml
--- a/checkout/src/main/res/layout/fragment_web.xml	(revision 163e59352a830e8122d4aad1a2f93d88e69337a4)
+++ b/checkout/src/main/res/layout/fragment_web.xml	(date 1685441569760)
@@ -1,38 +1,41 @@
 <?xml version="1.0" encoding="utf-8"?>
 
 <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
     xmlns:tools="http://schemas.android.com/tools"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
-    xmlns:app="http://schemas.android.com/apk/res-auto"
     android:background="@color/whitebg"
     android:orientation="vertical">
 
 
-
-
-
-    <RelativeLayout
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:background="@color/whitebg"
-        android:id="@+id/relative"
-
-       >
-        <ProgressBar
-            android:id="@+id/progressBar"
-            android:layout_width="60dp"
-            android:layout_height="60dp"
-            android:layout_centerInParent="true"
-            android:indeterminate="true"
-            android:indeterminateDrawable="@drawable/output_black_loader_nobg" />
+    <ProgressBar
+        android:id="@+id/progressBar"
+        android:layout_width="60dp"
+        android:layout_height="60dp"
+        android:layout_centerInParent="true"
+        android:indeterminate="true"
+        android:visibility="gone"
+        android:indeterminateDrawable="@drawable/output_black_loader_nobg" />
 
-        <WebView
+
+    <androidx.cardview.widget.CardView
+        android:id="@+id/webCardviewFrame"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="vertical"
+        android:visibility="visible"
+        app:cardCornerRadius="8dp"
+        android:animateLayoutChanges="true"
+        android:layout_margin="@dimen/margin_basic_16dp"
+        >
+        <company.tap.checkout.internal.TouchyWebView
             android:id="@+id/web_view"
             android:layout_width="match_parent"
-            android:layout_height="match_parent"
-            android:scrollbars="vertical|horizontal" />
-    </RelativeLayout>
+            android:layout_height="wrap_content" />
+
+    </androidx.cardview.widget.CardView>
+
 
 
 </LinearLayout>
\ No newline at end of file
Index: checkout/src/main/java/company/tap/checkout/open/CheckoutFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package company.tap.checkout.open\n\n\nimport android.annotation.SuppressLint\nimport android.app.Dialog\nimport android.content.Context\nimport android.graphics.*\nimport android.os.Build\nimport android.os.Bundle\nimport android.view.*\nimport android.widget.FrameLayout\nimport android.widget.LinearLayout\nimport androidx.annotation.RequiresApi\nimport androidx.fragment.app.viewModels\nimport cards.pay.paycardsrecognizer.sdk.Card\nimport cards.pay.paycardsrecognizer.sdk.ui.InlineViewCallback\nimport com.google.android.material.bottomsheet.BottomSheetDialog\nimport company.tap.checkout.R\nimport company.tap.checkout.internal.api.enums.ChargeStatus\nimport company.tap.checkout.internal.apiresponse.CardViewModel\nimport company.tap.checkout.internal.apiresponse.UserRepository\nimport company.tap.checkout.internal.cache.SharedPrefManager\nimport company.tap.checkout.internal.enums.SectionType\nimport company.tap.checkout.internal.utils.*\nimport company.tap.checkout.internal.utils.Constants.PoweredByLayoutAnimationDelay\nimport company.tap.checkout.internal.viewmodels.CheckoutViewModel\nimport company.tap.checkout.open.controller.SDKSession\nimport company.tap.checkout.open.controller.SDKSession.sessionDelegate\nimport company.tap.checkout.open.controller.SDKSession.tabAnimatedActionButton\nimport company.tap.checkout.open.data_managers.PaymentDataSource\nimport company.tap.taplocalizationkit.LocalizationManager\nimport company.tap.tapuilibraryy.themekit.ThemeManager\nimport company.tap.tapuilibraryy.uikit.enums.ActionButtonState\nimport company.tap.tapuilibraryy.uikit.interfaces.TapBottomDialogInterface\nimport company.tap.tapuilibraryy.uikit.views.TapBottomSheetDialog\nimport company.tap.tapuilibraryy.uikit.views.TapBrandView\nimport kotlinx.android.synthetic.main.fragment_checkouttaps.*\nimport org.json.JSONObject\nimport java.util.*\n\n\nclass CheckoutFragment : TapBottomSheetDialog(), TapBottomDialogInterface, InlineViewCallback {\n    val viewModel: CheckoutViewModel by viewModels()\n    val cardViewModel: CardViewModel by viewModels()\n    lateinit var userRepository: UserRepository\n    var checkOutActivity: CheckOutActivity? = null\n    var hideAllView = false\n    lateinit var status: ChargeStatus\n    private var _resetFragment: Boolean = true\n\n    @JvmField\n    var isNfcOpened: Boolean = false\n\n    @JvmField\n    var isScannerOpened: Boolean = false\n\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        dialog?.window?.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE)\n        dialog?.window?.attributes?.windowAnimations = R.style.DialogAnimation\n\n        return inflater.inflate(R.layout.fragment_checkouttaps, container, false)\n    }\n\n    @SuppressLint(\"ResourceType\")\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        cardViewModel.getContext(requireContext())\n        userRepository = UserRepository(requireContext(), viewModel)\n        userRepository.getUserIpAddress()\n        initViews(view)\n\n        sessionDelegate?.sessionHasStarted()\n\n\n        viewModel.localCurrencyReturned.observe(this, androidx.lifecycle.Observer {\n            with(viewModel) {\n                /**\n                 * check if data cached and different currency present\n                 * should put : @for check !isUserCurrencySameToMainCurrency()\n                 */\n                if (cacheUserLocalCurrency() && !requireActivity().isUserCurrencySameToMainCurrency()) {\n                    viewModel.powerdByTapAnimationFinished.observe(this@CheckoutFragment) {\n                        if (it == true) {\n                            doAfterSpecificTime {\n                                viewModel.addTitlePaymentAndFlag()\n                            }\n                        } else {\n                            viewModel.removevisibiltyCurrency()\n                        }\n                    }\n                } else {\n                    viewModel.removevisibiltyCurrency()\n                }\n            }\n\n        })\n\n        enableSections()\n\n\n    }\n\n\n    /**\n     * Logic to obtain ISO country code **/\n    fun getSimIsoCountryCurrency(): String? {\n        return SharedPrefManager.getUserSupportedLocaleForTransactions(requireContext())?.symbol\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun initViews(view: View) {\n        bottomSheetLayout = bottomSheetDialog.findViewById(R.id.design_bottom_sheet)\n        val topHeaderView: TapBrandView = view.findViewById(R.id.tab_brand_view)\n        val inLineCardLayout: FrameLayout = view.findViewById(R.id.inline_container)\n        val headerLayout: LinearLayout = view.findViewById(R.id.headerLayout)\n        val checkoutLayout: LinearLayout = view.findViewById(R.id.fragment_all)\n        val frameLayoutForNFc: FrameLayout = view.findViewById(R.id.fragment_container_nfc_lib)\n        val webFrameLayout: FrameLayout = view.findViewById(R.id.webFrameLayout)\n        webFrameLayout.layoutParams = LinearLayout.LayoutParams(\n            LinearLayout.LayoutParams.MATCH_PARENT,\n            requireContext().getDeviceSpecs().first - 100\n        )\n\n        bottomSheetLayout?.let {\n            viewModel.setBottomSheetLayout(it)\n        }\n        viewModel.initLayoutManager(\n            bottomSheetDialog,\n            requireContext(),\n            childFragmentManager,\n            checkoutLayout,\n            frameLayoutForNFc,\n            webFrameLayout,\n            inLineCardLayout,\n            this,\n            requireActivity().intent,\n            cardViewModel = cardViewModel, this,\n            headerLayout,\n            topHeaderView\n        )\n\n        topHeaderView.visibility = View.GONE\n        doAfterSpecificTime(50) {\n            topHeaderView.startPoweredByAnimation(\n                delayTime = Constants.PoweredByLayoutAnimationDelay,\n                topHeaderView.poweredByImage, onAnimationEnd =\n                {\n                    if (viewModel.isItemsAreOpend.value == false) {\n                        poweredByTapAnimationEnds()\n                    }\n                }\n            )\n        }\n\n\n\n    }\n\n    private fun poweredByTapAnimationEnds() {\n        viewModel.powerdByTapAnimationFinished.value = true\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onAttach(context: Context) {\n        super.onAttach(context)\n        LocalizationManager.setLocale(context, PaymentDataSource.getSDKLocale())\n\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun enableSections(): ArrayList<SectionType> {\n        val enabledSections = ArrayList<SectionType>()\n        enabledSections.add(SectionType.BUSINESS)\n        enabledSections.add(SectionType.AMOUNT_ITEMS)\n        enabledSections.add(SectionType.FRAGMENT)\n        enabledSections.add(SectionType.ActionButton)\n\n        if (_resetFragment) {\n            if (hideAllView) {\n                if (::status.isInitialized)\n                    viewModel.showOnlyButtonView(\n                        status,\n                        checkOutActivity,\n                        this\n                    )\n\n            } else {\n\n                viewModel.displayStartupLayout(enabledSections)\n                viewModel.getDatasfromAPIs(\n                    PaymentDataSource.getMerchantData(),\n                    PaymentDataSource.getPaymentOptionsResponse()\n                )\n\n            }\n        } else {\n            if (::status.isInitialized)\n                viewModel.showOnlyButtonView(status, checkOutActivity, this)\n        }\n\n        return enabledSections\n    }\n\n    override fun onScanCardFailed(e: Exception?) {\n    }\n\n    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {\n        val dialog = super.onCreateDialog(savedInstanceState)\n        (dialog as BottomSheetDialog).behavior.isFitToContents = true\n        return dialog\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onScanCardFinished(card: Card?, cardImage: ByteArray?) {\n    }\n\n\n    override fun onDetach() {\n        super.onDetach()\n        if (view == null) {\n            return\n        }\n        if (!isNfcOpened)\n            checkOutActivity?.onBackPressed()\n\n        if (!isScannerOpened)\n            checkOutActivity?.onBackPressed()\n\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun resetTabAnimatedButton() {\n        SDKSession.sessionActive = false\n        tabAnimatedActionButton?.changeButtonState(ActionButtonState.RESET)\n        if (checkOutActivity?.isGooglePayClicked == false) {\n            checkOutActivity?.overridePendingTransition(0, R.anim.slide_down_exit)\n            checkOutActivity?.finishAfterTransition()\n        }\n        tabAnimatedActionButton?.isClickable = true\n        tabAnimatedActionButton?.isEnabled = true\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun dismissBottomSheetDialog() {\n        resetSessionAndThemeManager()\n        resetTabAnimatedButton()\n\n    }\n\n    private fun resetSessionAndThemeManager() {\n        ThemeManager.currentTheme = \"\"\n        sessionDelegate?.sessionCancelled()\n        LocalizationManager.currentLocalized = JSONObject()\n        bottomSheetDialog.dismiss()\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onDestroy() {\n        super.onDestroy()\n        resetTabAnimatedButton()\n    }\n\n\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout/src/main/java/company/tap/checkout/open/CheckoutFragment.kt b/checkout/src/main/java/company/tap/checkout/open/CheckoutFragment.kt
--- a/checkout/src/main/java/company/tap/checkout/open/CheckoutFragment.kt	(revision 163e59352a830e8122d4aad1a2f93d88e69337a4)
+++ b/checkout/src/main/java/company/tap/checkout/open/CheckoutFragment.kt	(date 1685441569753)
@@ -14,6 +14,7 @@
 import androidx.fragment.app.viewModels
 import cards.pay.paycardsrecognizer.sdk.Card
 import cards.pay.paycardsrecognizer.sdk.ui.InlineViewCallback
+import com.google.android.material.bottomsheet.BottomSheetBehavior
 import com.google.android.material.bottomsheet.BottomSheetDialog
 import company.tap.checkout.R
 import company.tap.checkout.internal.api.enums.ChargeStatus
@@ -24,6 +25,7 @@
 import company.tap.checkout.internal.utils.*
 import company.tap.checkout.internal.utils.Constants.PoweredByLayoutAnimationDelay
 import company.tap.checkout.internal.viewmodels.CheckoutViewModel
+import company.tap.checkout.internal.webview.WebFragment.Companion.isWebViewOpened
 import company.tap.checkout.open.controller.SDKSession
 import company.tap.checkout.open.controller.SDKSession.sessionDelegate
 import company.tap.checkout.open.controller.SDKSession.tabAnimatedActionButton
@@ -74,7 +76,7 @@
         userRepository = UserRepository(requireContext(), viewModel)
         userRepository.getUserIpAddress()
         initViews(view)
-
+        isWebViewOpened = false
         sessionDelegate?.sessionHasStarted()
 
 
@@ -103,7 +105,6 @@
 
         enableSections()
 
-
     }
 
 
Index: checkout/src/main/java/company/tap/checkout/internal/webview/WebFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package company.tap.checkout.internal.webview\n\n/**\n * Created by OlaMonir on 7/27/20.\nCopyright (c) 2020    Tap Payments.\nAll rights reserved.\n **/\nimport android.annotation.SuppressLint\nimport android.app.Activity\nimport android.content.res.ColorStateList\nimport android.graphics.Color\nimport android.os.Bundle\nimport android.text.TextUtils\nimport android.util.DisplayMetrics\nimport android.util.Log\nimport android.view.KeyEvent\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.view.animation.AnimationUtils\nimport android.webkit.WebChromeClient\nimport android.webkit.WebSettings\nimport android.webkit.WebView\nimport android.widget.FrameLayout\nimport android.widget.LinearLayout\nimport android.widget.ProgressBar\nimport android.widget.RelativeLayout\nimport androidx.annotation.DrawableRes\nimport androidx.fragment.app.DialogFragment\nimport company.tap.checkout.R\nimport company.tap.checkout.internal.api.models.Charge\nimport company.tap.checkout.internal.apiresponse.CardViewModel\nimport company.tap.checkout.internal.utils.CustomUtils\nimport company.tap.checkout.internal.utils.showToast\nimport company.tap.checkout.internal.utils.twoThirdHeightView\nimport company.tap.checkout.internal.viewholders.SwitchViewHolder\nimport company.tap.checkout.internal.viewmodels.CheckoutViewModel\nimport company.tap.checkout.open.controller.SDKSession.contextSDK\nimport company.tap.checkout.open.data_managers.PaymentDataSource\nimport company.tap.tapuilibraryy.themekit.ThemeManager\nimport company.tap.tapuilibraryy.uikit.ktx.setBorderedView\nimport company.tap.tapuilibraryy.uikit.ktx.setTopBorders\nimport kotlinx.android.synthetic.main.fragment_web.*\nimport kotlinx.android.synthetic.main.fragment_web.web_view\nimport kotlinx.android.synthetic.main.switch_layout.view.*\nimport kotlinx.android.synthetic.main.web_view_layout.*\nimport kotlin.math.roundToInt\n\n\nclass WebFragment(\n    private val webViewContract: WebViewContract?,\n    private val cardViewModel: CardViewModel?,\n    private val checkoutViewModel: CheckoutViewModel,\n    private val isFirstTimeLoading: Boolean,\n    private val onLoadedWebView: () -> Unit\n) : DialogFragment(),\n    CustomWebViewClientContract {\n\n\n\n    private var webViewUrl: String? = null\n    private var chargeResponse: Charge? = null\n    val progressBar by lazy { view?.findViewById<ProgressBar>(R.id.progressBar) }\n    private var displayMetrics: Int? = 0\n    private var isFirstTimeLoadingInWeb = this.isFirstTimeLoading\n\n    @DrawableRes\n    val loaderGif: Int =\n        if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains(\"dark\")) R.drawable.reduced_loader_white else R.drawable.loader_black\n\n    override fun getTheme(): Int = R.style.DialogTheme\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        return inflater.inflate(R.layout.fragment_web, container, false)\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        progressBar?.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"merchantHeaderView.backgroundColor\")))\n        progressBar?.progressDrawable?.setColorFilter(\n            Color.RED, android.graphics.PorterDuff.Mode.SRC_IN\n        );\n        progressBar?.progressTintList = ColorStateList.valueOf(Color.RED);\n\n        webViewUrl = arguments?.getString(KEY_URL)\n        chargeResponse = arguments?.getSerializable(CHARGE) as Charge?\n        progressBar?.max = 100\n        progressBar?.progress = 10\n        displayMetrics = CustomUtils.getDeviceDisplayMetrics(context as Activity)\n        if (TextUtils.isEmpty(webViewUrl)) {\n            throw IllegalArgumentException(\"Empty URL passed to WebViewFragment!\")\n        }\n        if (displayMetrics == DisplayMetrics.DENSITY_400 || displayMetrics == DisplayMetrics.DENSITY_XXHIGH || displayMetrics == DisplayMetrics.DENSITY_450 || displayMetrics == DisplayMetrics.DENSITY_440) {\n            progressBar?.indeterminateDrawable =\n                (context as Activity).resources.getDrawable(loaderGif)\n        } else progressBar?.indeterminateDrawable =\n            (context as Activity).resources.getDrawable(loaderGif)\n\n        progressBar?.visibility = View.VISIBLE\n        web_view?.visibility = View.GONE\n        webViewUrl?.let { setUpWebView(it) }\n\n    }\n\n\n    @SuppressLint(\"SetJavaScriptEnabled\")\n    private fun setUpWebView(mUrl: String) {\n        web_view.settings.javaScriptEnabled = true\n        web_view.webChromeClient = WebChromeClient()\n        web_view.isVerticalScrollBarEnabled = true\n        web_view.isHorizontalScrollBarEnabled = true\n        web_view.settings.loadWithOverviewMode = true\n        web_view.settings.layoutAlgorithm = WebSettings.LayoutAlgorithm.NORMAL\n        web_view.settings.useWideViewPort = true\n        web_view.settings.domStorageEnabled = true\n        web_view.settings.mixedContentMode = WebSettings.MIXED_CONTENT_ALWAYS_ALLOW\n        web_view.webViewClient =\n            cardViewModel?.let { TapCustomWebViewClient(this, it, checkoutViewModel) }!!\n        //  web_view.webViewClient = cardViewModel?.let { TapCustomWebViewClient2(this, it) }!!\n\n\n        webViewUrl?.let { web_view.loadUrl(it) }\n\n        web_view.setOnKeyListener { _, keyCode, event ->\n            if (event.action == KeyEvent.ACTION_UP && keyCode == KeyEvent.KEYCODE_BACK) {\n\n                //if (web_view.canGoBack()) {\n                web_view.goBack()\n                /**\n                 * put here listener or delegate thT process cancelled **/\n                return@setOnKeyListener true\n                //  }\n                return@setOnKeyListener false\n            }\n            false\n        }\n\n\n\n        web_view.webChromeClient = object : WebChromeClient() {\n            /*\n                    public void onProgressChanged (WebView view, int newProgress)\n                        Tell the host application the current progress of loading a page.\n\n                    Parameters\n                        view : The WebView that initiated the callback.\n                        newProgress : Current page loading progress, represented by an integer\n                            between 0 and 100.\n                */\n            override fun onProgressChanged(view: WebView?, newProgress: Int) {\n                // Update the progress bar with page loading progress\n                progressBar?.progress = newProgress\n                if (newProgress == 100) {\n                    if (isFirstTimeLoadingInWeb) {\n                        onLoadedWebView.invoke()\n                        isFirstTimeLoadingInWeb = false\n                    }\n                    progressBar?.visibility = View.INVISIBLE\n                    web_view.visibility = View.VISIBLE\n                    if (isGooglePlayWebView){\n                        web_view.layoutParams = RelativeLayout.LayoutParams(\n                            RelativeLayout.LayoutParams.MATCH_PARENT,\n                            context?.twoThirdHeightView()?.roundToInt()!!\n                        )\n                    }\n\n                }\n            }\n\n\n            override fun onCloseWindow(window: WebView?) {\n                super.onCloseWindow(window)\n                Log.e(\"webview\", \"Window trying to close\");\n\n            }\n\n        }\n    }\n\n\n    override fun showLoading(showLoading: Boolean) {\n        // show tap loading until we receive success or failed\n//        if(showLoading) progressBar?.progress = 100\n//        else progressBar?.visibility = View.GONE\n    }\n\n    /**\n     * change action button status with success or failed\n    if success == true show success gif of action button\n    if success == false show error gif of action button\n     */\n    override fun submitResponseStatus(success: Boolean) {\n        /*  val intent = Intent(activity, CheckoutFragment::class.java)\n          startActivity(intent)*/\n        //    webViewContract?.redirectLoadingFinished(success, chargeResponse, contextSDK)\n    }\n\n    override fun getRedirectedURL(url: String) {\n        println(\"url are>>\" + PaymentDataSource.getChargeOrAuthorize())\n        println(\"url are>>\" + url)\n\n        // webViewContract.redirectLoadingFinished(url.contains(\"https://www.google.com/search?\"))\n        if (url.contains(\"gosellsdk://return_url\")) {\n            // webViewContract?.resultObtained(true, contextSDK)\n\n            webViewContract?.redirectLoadingFinished(\n                url.contains(\"gosellsdk://return_url\"), chargeResponse,\n                contextSDK\n            )\n        } else {\n\n//            webViewContract.directLoadingFinished(true)\n        }\n    }\n\n\n    companion object {\n        const val KEY_URL = \"key:url\"\n        const val CHARGE = \"charge_response\"\n        var isGooglePlayWebView = false\n\n        fun newInstance(\n            url: String,\n            webViewContract: WebViewContract,\n            cardViewModel: CardViewModel,\n            chargeResponse: Charge?,\n            checkoutViewModel: CheckoutViewModel,\n            isFirstTimeLoading: Boolean,\n            onLoadedWebView: () -> Unit\n        ): WebFragment {\n            val fragment = WebFragment(\n                webViewContract,\n                cardViewModel,\n                checkoutViewModel,\n                isFirstTimeLoading,\n                onLoadedWebView\n            )\n            val args = Bundle()\n            args.putString(KEY_URL, url)\n            args.putSerializable(CHARGE, chargeResponse)\n            fragment.arguments = args\n            println(\"fragment is\" + fragment)\n            return fragment\n        }\n    }\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout/src/main/java/company/tap/checkout/internal/webview/WebFragment.kt b/checkout/src/main/java/company/tap/checkout/internal/webview/WebFragment.kt
--- a/checkout/src/main/java/company/tap/checkout/internal/webview/WebFragment.kt	(revision 163e59352a830e8122d4aad1a2f93d88e69337a4)
+++ b/checkout/src/main/java/company/tap/checkout/internal/webview/WebFragment.kt	(date 1685441811404)
@@ -158,14 +158,16 @@
                         onLoadedWebView.invoke()
                         isFirstTimeLoadingInWeb = false
                     }
+                    isWebViewOpened = true
                     progressBar?.visibility = View.INVISIBLE
                     web_view.visibility = View.VISIBLE
-                    if (isGooglePlayWebView){
-                        web_view.layoutParams = RelativeLayout.LayoutParams(
-                            RelativeLayout.LayoutParams.MATCH_PARENT,
+                    webCardviewFrame.visibility = View.VISIBLE
+                //    if (isGooglePlayWebView){
+                    webCardviewFrame.layoutParams = LinearLayout.LayoutParams(
+                        LinearLayout.LayoutParams.MATCH_PARENT,
                             context?.twoThirdHeightView()?.roundToInt()!!
                         )
-                    }
+                  //  }
 
                 }
             }
@@ -221,6 +223,7 @@
         const val KEY_URL = "key:url"
         const val CHARGE = "charge_response"
         var isGooglePlayWebView = false
+        var isWebViewOpened=false
 
         fun newInstance(
             url: String,
Index: checkout/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.library'\napply plugin: 'kotlin-android'\napply plugin: 'kotlin-android-extensions'\napply plugin: 'kotlin-kapt'\n\nandroid {\n    compileSdkVersion 31\n   // buildToolsVersion \"31.0.3\"\n\n    defaultConfig {\n        minSdkVersion 22\n        targetSdkVersion 31\n        versionCode 1\n        versionName \"1.0\"\n        multiDexEnabled true\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n        consumerProguardFiles 'consumer-rules.pro'\n    }\n\n\n    buildTypes {\n        release {\n            minifyEnabled true\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\n        }\n        buildTypes.each {\n            it.buildConfigField 'String', 'EncryptAPIKEY', EncryptAPIKEY\n        }\n\n\n    }\n\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_8\n        targetCompatibility JavaVersion.VERSION_1_8\n    }\n\n    kotlinOptions {\n        jvmTarget = JavaVersion.VERSION_1_8.toString()\n    }\n}\n\ndependencies {\n    implementation 'com.google.android.material:material:1.6.1'\n    def koin_version = '2.2.0-alpha-1'\n\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\n    implementation(\"androidx.lifecycle:lifecycle-extensions:2.2.0@aar\") {\n        transitive = true\n    }\n    def lifecycle_version = \"2.4.1\"\n    implementation \"androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version\"\n    implementation \"androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version\"\n    implementation \"androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version\"\n    kapt \"androidx.lifecycle:lifecycle-common-java8:$lifecycle_version\"\n\n    implementation \"androidx.fragment:fragment-ktx:1.4.1\"\n\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\n    implementation files('libs/benefitinappsdk-1.0.23.aar')\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version\"\n    implementation 'androidx.appcompat:appcompat:1.4.1'\n    implementation 'androidx.core:core-ktx:1.7.0'\n    api 'com.github.Tap-Payments:LocalisationManager-Android:0.0.1.34'\n  //  api 'com.github.Tap-Payments:TapCardInputKit-Android:0.1.0.36.214'\n    implementation \"com.hbb20:ccp:2.5.0\"\n    api 'androidx.activity:activity-ktx:1.4.0'\n\n    testImplementation 'junit:junit:4.13.2'\n    androidTestImplementation 'androidx.test.ext:junit:1.1.5'\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'\n    implementation 'com.github.bumptech.glide:glide:4.12.0'\n    kapt 'com.github.bumptech.glide:compiler:4.12.0'\n    implementation 'com.github.Tap-Payments:TapCardScannerKit-Android:0.0.1.18.8'\n    api 'company.tap:PayCards-Tap-Android:0.1.6.4'\n    implementation(\"io.coil-kt:coil:1.2.0\")\n    implementation(\"io.coil-kt:coil-svg:1.2.0\")\n    implementation 'com.github.Tap-Payments:TapNFCCardReaderKit-Android:0.0.1.6.1'\n    implementation \"io.reactivex.rxjava2:rxjava:2.2.19\"\n    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'\n    api 'com.github.Tap-Payments:TapNetwrok-Android:0.2.2.25'\n    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.0'\n    api 'com.github.Tap-Payments:CommonDataModelsKit-Android:0.1.5'\n    api 'com.google.code.gson:gson:2.8.9'\n\n    implementation 'com.squareup.retrofit2:retrofit:2.9.0'\n    implementation 'androidx.multidex:multidex:2.0.1'\n    implementation 'androidx.recyclerview:recyclerview:1.2.1'\n    implementation \"androidx.fragment:fragment-ktx:1.5.7\"\n    implementation 'com.github.Tap-Payments:LocalisationManager-Android:0.0.1.34'\n    implementation 'com.koushikdutta.ion:ion:3.1.0'\n    implementation \"com.google.android.gms:play-services-wallet:19.1.0\"\n    implementation project(\":iosdialog\")\n    api project(\":cardinputwidget2\")\n    implementation 'com.google.android.material:material:1.6.1'\n\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\n    implementation(\"androidx.lifecycle:lifecycle-extensions:2.2.0@aar\") {\n        transitive = true\n    }\n    implementation \"androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version\"\n    implementation \"androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version\"\n    implementation \"androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version\"\n    kapt \"androidx.lifecycle:lifecycle-common-java8:$lifecycle_version\"\n\n    implementation \"androidx.fragment:fragment-ktx:1.4.1\"\n\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\n    implementation files('libs/benefitinappsdk-1.0.23.aar')\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version\"\n    implementation 'androidx.appcompat:appcompat:1.4.1'\n    implementation 'androidx.core:core-ktx:1.7.0'\n    api 'com.github.Tap-Payments:LocalisationManager-Android:0.0.1.34'\n    //  api 'com.github.Tap-Payments:TapCardInputKit-Android:0.1.0.36.214'\n    implementation \"com.hbb20:ccp:2.5.0\"\n    api 'androidx.activity:activity-ktx:1.4.0'\n\n    testImplementation 'junit:junit:4.13.2'\n    androidTestImplementation 'androidx.test.ext:junit:1.1.5'\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'\n    implementation 'com.github.bumptech.glide:glide:4.12.0'\n    kapt 'com.github.bumptech.glide:compiler:4.12.0'\n    implementation 'com.github.Tap-Payments:TapCardScannerKit-Android:0.0.1.18.8'\n    api 'company.tap:PayCards-Tap-Android:0.1.6.4'\n    implementation(\"io.coil-kt:coil:1.2.0\")\n    implementation(\"io.coil-kt:coil-svg:1.2.0\")\n    implementation 'com.github.Tap-Payments:TapNFCCardReaderKit-Android:0.0.1.6.1'\n    implementation \"io.reactivex.rxjava2:rxjava:2.2.19\"\n    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'\n    api 'com.github.Tap-Payments:TapNetwrok-Android:0.2.2.25'\n    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.0'\n    api 'com.github.Tap-Payments:CommonDataModelsKit-Android:0.1.5'\n    api 'com.google.code.gson:gson:2.8.9'\n\n    implementation 'com.squareup.retrofit2:retrofit:2.9.0'\n    implementation 'androidx.multidex:multidex:2.0.1'\n    implementation 'androidx.recyclerview:recyclerview:1.2.1'\n    implementation \"androidx.fragment:fragment-ktx:1.5.7\"\n    implementation 'com.github.Tap-Payments:LocalisationManager-Android:0.0.1.34'\n    implementation 'com.koushikdutta.ion:ion:3.1.0'\n    implementation \"com.google.android.gms:play-services-wallet:19.1.0\"\n    implementation project(\":iosdialog\")\n    api project(\":cardinputwidget2\")\n    api project(\":tapuilibraryy\")\n\n    implementation 'com.github.2coffees1team:GlideToVectorYou:v2.0.0'\n    implementation 'com.fasterxml.jackson.core:jackson-core:2.11.1'\n    implementation 'com.fasterxml.jackson.core:jackson-databind:2.11.1'\n    //implementation 'com.github.Tap-Payments:TapCardValidator-Android:2.1.11'\n//This is BungFender for logs\n    implementation 'com.bugfender.sdk:android:3.+'\n    implementation 'jp.wasabeef:blurry:4.0.1'\n    implementation 'com.github.blongho:worldCountryData:v1.5.4-alpha'\n\n    implementation 'com.squareup.retrofit2:retrofit:2.9.0'\n    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'\n\n    implementation 'com.github.2coffees1team:GlideToVectorYou:v2.0.0'\n    implementation 'com.fasterxml.jackson.core:jackson-core:2.11.1'\n    implementation 'com.fasterxml.jackson.core:jackson-databind:2.11.1'\n    //implementation 'com.github.Tap-Payments:TapCardValidator-Android:2.1.11'\n//This is BungFender for logs\n    implementation 'com.bugfender.sdk:android:3.+'\n    implementation 'jp.wasabeef:blurry:4.0.1'\n    implementation 'com.github.blongho:worldCountryData:v1.5.4-alpha'\n\n    implementation 'com.squareup.retrofit2:retrofit:2.9.0'\n    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout/build.gradle b/checkout/build.gradle
--- a/checkout/build.gradle	(revision 163e59352a830e8122d4aad1a2f93d88e69337a4)
+++ b/checkout/build.gradle	(date 1685437835554)
@@ -107,7 +107,7 @@
     implementation "androidx.fragment:fragment-ktx:1.4.1"
 
     implementation fileTree(dir: 'libs', include: ['*.jar'])
-    implementation files('libs/benefitinappsdk-1.0.23.aar')
+    //implementation files('libs/benefitinappsdk-1.0.23.aar')
     implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
     implementation 'androidx.appcompat:appcompat:1.4.1'
     implementation 'androidx.core:core-ktx:1.7.0'
Index: checkout/src/main/java/company/tap/checkout/internal/webViewEnhanced.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout/src/main/java/company/tap/checkout/internal/webViewEnhanced.kt b/checkout/src/main/java/company/tap/checkout/internal/webViewEnhanced.kt
new file mode 100644
--- /dev/null	(date 1685439891804)
+++ b/checkout/src/main/java/company/tap/checkout/internal/webViewEnhanced.kt	(date 1685439891804)
@@ -0,0 +1,23 @@
+package company.tap.checkout.internal
+
+import android.content.Context
+import android.util.AttributeSet
+import android.view.MotionEvent
+import android.webkit.WebView
+
+class TouchyWebView : WebView {
+    constructor(context: Context?) : super(context!!) {}
+    constructor(context: Context?, attrs: AttributeSet?) : super(context!!, attrs) {}
+    constructor(context: Context?, attrs: AttributeSet?, defStyle: Int) : super(
+        context!!,
+        attrs,
+        defStyle
+    ) {
+    }
+
+    override fun onTouchEvent(event: MotionEvent?): Boolean {
+        if(computeVerticalScrollRange() > measuredHeight)
+            requestDisallowInterceptTouchEvent(true);
+        return super.onTouchEvent(event)
+    }
+}
\ No newline at end of file
Index: checkout/src/main/res/layout/fragment_checkouttaps.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:windowSoftInputMode=\"adjustResize|adjustPan\"\n    tools:context=\".open.CheckoutFragment\">\n\n\n    <androidx.cardview.widget.CardView\n        android:id=\"@+id/sdkCardView\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:fillViewport=\"true\"\n        android:orientation=\"vertical\"\n        app:cardElevation=\"0dp\"\n\n        android:windowSoftInputMode=\"adjustResize|adjustPan\"\n        app:cardBackgroundColor=\"#07FFFFFF\"\n        tools:context=\".open.CheckoutFragment\">\n\n\n        <androidx.core.widget.NestedScrollView\n            android:id=\"@+id/scrollView\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            app:behavior_hideable=\"false\"\n            app:behavior_peekHeight=\"0dp\"\n            app:layout_behavior=\"com.google.android.material.bottomsheet.BottomSheetBehavior\">\n\n\n            <androidx.constraintlayout.widget.ConstraintLayout\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                >\n\n                <company.tap.tapuilibraryy.uikit.views.TapBrandView\n                    android:id=\"@+id/tab_brand_view\"\n                    android:layout_width=\"match_parent\"\n                    app:layout_constraintStart_toStartOf=\"parent\"\n                    app:layout_constraintTop_toTopOf=\"parent\"\n                    app:layout_constraintEnd_toEndOf=\"parent\"\n                    android:layout_height=\"wrap_content\"\n\n                    />\n\n\n                <LinearLayout\n                    android:id=\"@+id/headerLayout\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"wrap_content\"\n                    android:orientation=\"vertical\"\n                    android:layout_marginTop=\"-25dp\"\n                    app:layout_constraintVertical_bias=\"1\"\n                    app:layout_constraintBottom_toBottomOf=\"parent\"\n                    app:layout_constraintStart_toStartOf=\"parent\"\n                    app:layout_constraintTop_toBottomOf=\"@id/tab_brand_view\"\n                    app:layout_constraintEnd_toEndOf=\"parent\"\n                    tools:context=\".open.CheckoutFragment\">\n\n\n\n\n                        <LinearLayout\n                            android:id=\"@+id/fragment_all\"\n                            android:layout_width=\"match_parent\"\n                            android:layout_height=\"wrap_content\"\n                            android:orientation=\"vertical\"\n                            android:visibility=\"visible\" />\n\n                        <FrameLayout\n                            android:id=\"@+id/webFrameLayout\"\n                            android:layout_width=\"match_parent\"\n                            android:layout_height=\"match_parent\"\n                            android:layout_gravity=\"center\"\n                            android:visibility=\"gone\" />\n\n                        <FrameLayout\n                            android:id=\"@+id/fragment_container_nfc_lib\"\n                            android:layout_width=\"match_parent\"\n                            android:layout_height=\"match_parent\"\n                            android:layout_gravity=\"bottom\"\n                            android:gravity=\"bottom\"\n                            android:orientation=\"vertical\"\n                            android:visibility=\"gone\" />\n\n\n                        <FrameLayout\n                            android:id=\"@+id/inline_container\"\n                            android:layout_width=\"match_parent\"\n                            android:layout_height=\"500dp\"\n                            android:visibility=\"gone\" />\n\n\n                    </LinearLayout>\n\n            </androidx.constraintlayout.widget.ConstraintLayout>\n\n\n        </androidx.core.widget.NestedScrollView>\n\n\n    </androidx.cardview.widget.CardView>\n</androidx.coordinatorlayout.widget.CoordinatorLayout>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout/src/main/res/layout/fragment_checkouttaps.xml b/checkout/src/main/res/layout/fragment_checkouttaps.xml
--- a/checkout/src/main/res/layout/fragment_checkouttaps.xml	(revision 163e59352a830e8122d4aad1a2f93d88e69337a4)
+++ b/checkout/src/main/res/layout/fragment_checkouttaps.xml	(date 1685439328166)
@@ -66,7 +66,7 @@
                         <LinearLayout
                             android:id="@+id/fragment_all"
                             android:layout_width="match_parent"
-                            android:layout_height="wrap_content"
+                            android:layout_height="match_parent"
                             android:orientation="vertical"
                             android:visibility="visible" />
 
Index: tapuilibraryy/src/main/java/company/tap/tapuilibraryy/uikit/views/TapBottomSheetDialog.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package company.tap.tapuilibraryy.uikit.views\n\nimport android.app.Dialog\nimport android.content.DialogInterface\nimport android.content.Intent\nimport android.graphics.Color\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.FrameLayout\nimport androidx.annotation.Nullable\nimport androidx.fragment.app.DialogFragment\nimport com.google.android.material.bottomsheet.BottomSheetBehavior\nimport com.google.android.material.bottomsheet.BottomSheetDialog\nimport com.google.android.material.bottomsheet.BottomSheetDialogFragment\nimport company.tap.tapuilibraryy.R\nimport company.tap.tapuilibraryy.themekit.ThemeManager\nimport company.tap.tapuilibraryy.themekit.theme.SeparatorViewTheme\nimport company.tap.tapuilibraryy.uikit.interfaces.TapBottomDialogInterface\nimport kotlinx.android.synthetic.main.modal_bottom_sheet.*\n\n\n/**\n *\n * Created on 6/3/20\n * Copyright Â© 2020 Tap Payments. All rights reserved.\n *\n */\nopen class TapBottomSheetDialog : BottomSheetDialogFragment() {\n\n    private var topLeftCorner = 16f\n    private var topRightCorner = 16f\n    private var bottomRightCorner = 0f\n    private var bottomLeftCorner = 0f\n    var backgroundColor = Color.TRANSPARENT\n    var windowRatio = 0.5f\n\n\n    var bottomSheetLayout: FrameLayout? = null\n    lateinit var bottomSheetDialog: BottomSheetDialog\n    private var tapBottomDialogInterface: TapBottomDialogInterface? = null\n\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setStyle(DialogFragment.STYLE_NORMAL, R.style.DialogStyle)\n\n    }\n\n    override fun onCreateView(\n        inflater: LayoutInflater,\n        container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? = inflater.inflate(R.layout.modal_bottom_sheet, container, false)\n\n    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {\n        bottomSheetDialog = super.onCreateDialog(savedInstanceState) as BottomSheetDialog\n        bottomSheetDialog.setOnShowListener {\n            bottomSheetDialog.behavior.state = BottomSheetBehavior.STATE_EXPANDED\n            bottomSheetDialog.setCancelable(false)\n        }\n        return bottomSheetDialog\n    }\n\n    override fun onActivityCreated(@Nullable savedInstanceState: Bundle?) {\n        super.onActivityCreated(savedInstanceState)\n        (view?.parent as View).setBackgroundColor(Color.TRANSPARENT)\n    }\n\n\n    fun setBottomSheetInterface(tapBottomDialogInterface: TapBottomDialogInterface) {\n        this.tapBottomDialogInterface = tapBottomDialogInterface\n    }\n\n\n    override fun onDismiss(dialog: DialogInterface) {\n        super.onDismiss(dialog)\n    }\n\n    companion object {\n        const val TAG = \"ModalBottomSheet\"\n    }\n\n    open fun onNewIntent(intent: Intent?) {}\n\n\n    fun setSeparatorTheme() {\n        topLinear.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"merchantHeaderView.backgroundColor\")))\n        val separatorViewTheme = SeparatorViewTheme()\n        separatorViewTheme.strokeColor =\n            Color.parseColor(ThemeManager.getValue(\"tapSeparationLine.backgroundColor\"))\n        separatorViewTheme.strokeHeight = ThemeManager.getValue(\"tapSeparationLine.height\")\n        indicatorSeparator.setTheme(separatorViewTheme)\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tapuilibraryy/src/main/java/company/tap/tapuilibraryy/uikit/views/TapBottomSheetDialog.kt b/tapuilibraryy/src/main/java/company/tap/tapuilibraryy/uikit/views/TapBottomSheetDialog.kt
--- a/tapuilibraryy/src/main/java/company/tap/tapuilibraryy/uikit/views/TapBottomSheetDialog.kt	(revision 163e59352a830e8122d4aad1a2f93d88e69337a4)
+++ b/tapuilibraryy/src/main/java/company/tap/tapuilibraryy/uikit/views/TapBottomSheetDialog.kt	(date 1685441366367)
@@ -58,7 +58,10 @@
         bottomSheetDialog = super.onCreateDialog(savedInstanceState) as BottomSheetDialog
         bottomSheetDialog.setOnShowListener {
             bottomSheetDialog.behavior.state = BottomSheetBehavior.STATE_EXPANDED
+            bottomSheetDialog.behavior.isDraggable = false
+
             bottomSheetDialog.setCancelable(false)
+
         }
         return bottomSheetDialog
     }
