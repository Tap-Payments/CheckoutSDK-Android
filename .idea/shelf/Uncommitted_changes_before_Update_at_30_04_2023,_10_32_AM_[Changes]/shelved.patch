Index: checkout/src/main/java/company/tap/checkout/internal/viewmodels/CheckoutViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package company.tap.checkout.internal.viewmodels\n\nimport android.annotation.SuppressLint\nimport android.app.Activity\nimport android.content.Context\nimport android.content.Intent\nimport android.content.res.Resources\nimport android.graphics.Color\nimport android.graphics.drawable.ShapeDrawable\nimport android.net.Uri\nimport android.os.Build\nimport android.os.Handler\nimport android.os.Looper\nimport android.text.format.DateFormat\nimport android.util.Log\nimport android.view.View\nimport android.view.ViewGroup\nimport android.view.animation.AnimationUtils\nimport android.widget.FrameLayout\nimport android.widget.LinearLayout\nimport androidx.annotation.Nullable\nimport androidx.annotation.RequiresApi\nimport androidx.annotation.RestrictTo\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.core.view.isNotEmpty\nimport androidx.core.view.isVisible\nimport androidx.fragment.app.FragmentManager\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.ViewModel\nimport androidx.recyclerview.widget.DividerItemDecoration\nimport androidx.transition.Fade\nimport androidx.transition.Scene\nimport androidx.transition.Transition\nimport androidx.transition.TransitionManager\nimport cards.pay.paycardsrecognizer.sdk.FrameManager\nimport cards.pay.paycardsrecognizer.sdk.ui.InlineViewCallback\nimport com.bugfender.sdk.Bugfender\nimport com.bumptech.glide.Glide\nimport com.fasterxml.jackson.databind.ObjectMapper\nimport com.google.android.gms.wallet.PaymentData\nimport com.google.android.material.bottomsheet.BottomSheetBehavior\nimport com.google.android.material.bottomsheet.BottomSheetDialog\nimport com.google.gson.Gson\nimport com.google.gson.JsonObject\nimport company.tap.cardinputwidget.CardBrandSingle\nimport company.tap.cardinputwidget.CardInputUIStatus\nimport company.tap.cardinputwidget.widget.CardInputListener\nimport company.tap.cardscanner.*\nimport company.tap.checkout.R\nimport company.tap.checkout.internal.PaymentDataProvider\nimport company.tap.checkout.internal.adapter.CardTypeAdapterUIKIT\nimport company.tap.checkout.internal.adapter.CurrencyTypeAdapter\nimport company.tap.checkout.internal.adapter.GoPayCardAdapterUIKIT\nimport company.tap.checkout.internal.adapter.ItemAdapter\nimport company.tap.checkout.internal.api.enums.ChargeStatus\nimport company.tap.checkout.internal.api.enums.PaymentType\nimport company.tap.checkout.internal.api.models.*\nimport company.tap.checkout.internal.api.requests.CreateTokenGPayRequest\nimport company.tap.checkout.internal.api.responses.DeleteCardResponse\nimport company.tap.checkout.internal.api.responses.InitResponseModel\nimport company.tap.checkout.internal.api.responses.MerchantData\nimport company.tap.checkout.internal.api.responses.PaymentOptionsResponse\nimport company.tap.checkout.internal.apiresponse.CardViewEvent\nimport company.tap.checkout.internal.apiresponse.CardViewModel\nimport company.tap.checkout.internal.apiresponse.UserRepository\nimport company.tap.checkout.internal.apiresponse.testmodels.GoPaySavedCards\nimport company.tap.checkout.internal.apiresponse.testmodels.TapCardPhoneListDataSource\nimport company.tap.checkout.internal.cache.SharedPrefManager\nimport company.tap.checkout.internal.cache.UserSupportedLocaleForTransactions\nimport company.tap.checkout.internal.enums.PaymentTypeEnum\nimport company.tap.checkout.internal.enums.SectionType\nimport company.tap.checkout.internal.enums.WebViewType\nimport company.tap.checkout.internal.interfaces.*\nimport company.tap.checkout.internal.utils.*\nimport company.tap.checkout.internal.utils.AmountCalculator.calculateExtraFeesAmount\nimport company.tap.checkout.internal.viewholders.*\nimport company.tap.checkout.internal.webview.WebFragment\nimport company.tap.checkout.internal.webview.WebViewContract\nimport company.tap.checkout.open.CheckOutActivity\nimport company.tap.checkout.open.CheckoutFragment\nimport company.tap.checkout.open.controller.SDKSession\nimport company.tap.checkout.open.controller.SDKSession.supportFragmentManager\nimport company.tap.checkout.open.controller.SDKSession.tabAnimatedActionButton\nimport company.tap.checkout.open.controller.SessionManager\nimport company.tap.checkout.open.data_managers.PaymentDataSource\nimport company.tap.checkout.open.enums.CardType\nimport company.tap.checkout.open.enums.TransactionMode\nimport company.tap.checkout.open.models.ItemsModel\nimport company.tap.nfcreader.open.reader.TapEmvCard\nimport company.tap.taplocalizationkit.LocalizationManager\nimport company.tap.tapuilibrary.themekit.ThemeManager\nimport company.tap.tapuilibrary.themekit.theme.SeparatorViewTheme\nimport company.tap.tapuilibrary.uikit.datasource.LoyaltyHeaderDataSource\nimport company.tap.tapuilibrary.uikit.enums.ActionButtonState\nimport company.tap.tapuilibrary.uikit.enums.GoPayLoginMethod\nimport company.tap.tapuilibrary.uikit.fragment.NFCFragment\nimport company.tap.tapuilibrary.uikit.ktx.loadAppThemManagerFromPath\nimport company.tap.tapuilibrary.uikit.ktx.makeLinks\nimport company.tap.tapuilibrary.uikit.ktx.setTopBorders\nimport company.tap.tapuilibrary.uikit.views.TabAnimatedActionButton\nimport kotlinx.android.synthetic.main.amountview_layout.view.*\nimport kotlinx.android.synthetic.main.businessview_layout.view.*\nimport kotlinx.android.synthetic.main.cardviewholder_layout1.view.*\nimport kotlinx.android.synthetic.main.gopaysavedcard_layout.view.*\nimport kotlinx.android.synthetic.main.itemviewholder_layout.view.*\nimport kotlinx.android.synthetic.main.loyalty_view_layout.view.*\nimport kotlinx.android.synthetic.main.otpview_layout.view.*\nimport kotlinx.android.synthetic.main.switch_layout.view.*\nimport mobi.foo.benefitinapp.data.Transaction\nimport mobi.foo.benefitinapp.listener.CheckoutListener\nimport mobi.foo.benefitinapp.utils.BenefitInAppCheckout\nimport org.json.JSONException\nimport org.json.JSONObject\nimport java.math.BigDecimal\nimport kotlin.properties.Delegates\n\n\n/**\n *\n * Copyright Â© 2020 Tap Payments. All rights reserved.\n *\n */\n@RestrictTo(RestrictTo.Scope.LIBRARY)\nopen class CheckoutViewModel : ViewModel(), BaseLayoutManager, OnCardSelectedActionListener,\n    PaymentCardComplete, onCardNFCCallListener, OnCurrencyChangedActionListener, WebViewContract,\n    TapTextRecognitionCallBack, TapScannerCallback, CheckoutListener {\n    private var savedCardList: MutableList<SavedCard>? = mutableListOf()\n    private var arrayListSavedCardSize = ArrayList<SavedCard>()\n    private var supportedLoyalCards = MutableLiveData<List<LoyaltySupportedCurrency>>()\n    private var paymentOptionsList = MutableLiveData<List<PaymentOption>>()\n    private var goPayCardList = MutableLiveData<List<GoPaySavedCards>>()\n    private var selectedViewToBeDeletedFromCardViewHolder: ViewGroup? = null\n    private var viewToBeBlurCardViewHolder: View? = null\n\n    private var allCurrencies = MutableLiveData<List<SupportedCurrencies>>()\n    private var selectedItemsDel by Delegates.notNull<Int>()\n    private var cardIDToBeDeleted: Int? = 0\n\n    private val isShaking = MutableLiveData<Boolean>()\n    val localCurrencyReturned = MutableLiveData<Boolean>()\n\n    private var deleteCard: Boolean = false\n    private var isCardDeletedSuccessfully: Boolean = false\n    private var displayItemsOpen: Boolean = false\n    private var displayOtpIsOpen: Boolean = false\n    private var saveCardSwitchHolder: SwitchViewHolder? = null\n    lateinit var userRepository: UserRepository\n\n    private lateinit var title: String\n    private lateinit var paymentInlineViewHolder: PaymentInlineViewHolder\n    private lateinit var goPaySavedCardHolder: GoPaySavedCardHolder\n    private lateinit var businessViewHolder: BusinessViewHolder\n    private lateinit var amountViewHolder: AmountViewHolder\n    private lateinit var currencyAdapter: CurrencyTypeAdapter\n    private lateinit var goPayAdapter: GoPayCardAdapterUIKIT\n    private lateinit var goPayViewsHolder: GoPayViewsHolder\n    private lateinit var itemsViewHolder: ItemsViewHolder\n    private lateinit var cardViewHolder: CardViewHolder\n    private lateinit var webViewHolder: WebViewHolder\n    private lateinit var asynchronousPaymentViewHolder: AsynchronousPaymentViewHolder\n    private lateinit var loyaltyViewHolder: LoyaltyViewHolder\n\n    private var tabAnimatedActionButtonViewHolder: TabAnimatedActionButtonViewHolder? = null\n    private lateinit var bottomSheetDialog: BottomSheetDialog\n    private lateinit var fragmentManager: FragmentManager\n\n    @SuppressLint(\"StaticFieldLeak\")\n    private lateinit var bottomSheetLayout: FrameLayout\n\n    @Nullable\n    internal lateinit var selectedAmount: String\n\n    @Nullable\n    private lateinit var selectedCurrency: String\n    private var fee: BigDecimal? = BigDecimal.ZERO\n    val provider: IPaymentDataProvider = PaymentDataProvider()\n\n    @JvmField\n    var currentCurrency: String = \"\"\n\n    @JvmField\n    var currentCurrencySymbol: String = \"\"\n\n\n    @JvmField\n    var finalCurrencySymbol: String = \"\"\n\n    @JvmField\n    var currentAmount: String = \"\"\n    private lateinit var adapter: CardTypeAdapterUIKIT\n    private lateinit var itemAdapter: ItemAdapter\n    private lateinit var otpViewHolder: OTPViewHolder\n\n    @SuppressLint(\"StaticFieldLeak\")\n    private lateinit var webFrameLayout: FrameLayout\n\n    @SuppressLint(\"StaticFieldLeak\")\n    private lateinit var frameLayout: FrameLayout\n\n    @SuppressLint(\"StaticFieldLeak\")\n    private lateinit var inLineCardLayout: FrameLayout\n\n    @SuppressLint(\"StaticFieldLeak\")\n    private lateinit var headerLayout: LinearLayout\n\n    @SuppressLint(\"StaticFieldLeak\")\n    private lateinit var sdkLayout: LinearLayout\n    private lateinit var checkoutFragment: CheckoutFragment\n    private lateinit var itemList: List<ItemsModel>\n    private lateinit var unModifiedItemList: List<ItemsModel>\n    private lateinit var selectedPaymentOption: PaymentOption\n\n    @SuppressLint(\"StaticFieldLeak\")\n    private lateinit var context: Context\n    private lateinit var cardViewModel: CardViewModel\n    private var otpTypeString: PaymentTypeEnum = PaymentTypeEnum.SAVEDCARD\n    private lateinit var paymentActionType: PaymentType\n    private val nfcFragment = NFCFragment()\n\n\n    //  private val inlineViewFragment = InlineViewFragment()\n    private val inlineCamerFragment = CameraFragment()\n    private var isInlineOpened = false\n\n    @JvmField\n    var isNFCOpened = false\n    private var textRecognitionML: TapTextRecognitionML? = null\n    private lateinit var intent: Intent\n    private lateinit var inlineViewCallback: InlineViewCallback\n    lateinit var tapCardPhoneListDataSource: ArrayList<TapCardPhoneListDataSource>\n    lateinit var paymentOptionsResponse: PaymentOptionsResponse\n    lateinit var initResponseModel: InitResponseModel\n    lateinit var redirectURL: String\n    lateinit var cardId: String\n    var currencyOldRate: BigDecimal? = null\n    var currentCalculatedAmount: BigDecimal? = null\n    var lastSelectedCurrency: String? = null\n    var loyatFlag: Boolean? = false\n\n    @JvmField\n    var isSavedCardSelected: Boolean? = false\n\n    @JvmField\n    var globalChargeResponse: Charge? = null\n\n    @JvmField\n    var selectedTotalAmount: String? = null\n\n    @JvmField\n    var selectedAmountPos: BigDecimal? = null\n\n    @JvmField\n    var selectedCurrencyPos: String? = null\n\n    lateinit var paymentOptionsWorker: java.util.ArrayList<PaymentOption>\n\n\n    val appId: String = \"4530082749\"\n    val merchantId: String = \"00000101\"\n    val seceret: String = \"3l5e0cstdim11skgwoha8x9vx9zo0kxxi4droryjp4eqd\"\n    val countrycode: String = \"1001\"\n    val mcc: String = \"4816\"\n\n    @JvmField\n    var incrementalCount: Int = 0\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun initLayoutManager(\n        bottomSheetDialog: BottomSheetDialog,\n        context: Context,\n        fragmentManager: FragmentManager,\n        sdkLayout: LinearLayout,\n        frameLayout: FrameLayout,\n        webFrameLayout: FrameLayout,\n        inLineCardLayout: FrameLayout,\n        inlineViewCallback: InlineViewCallback,\n        intent: Intent,\n        cardViewModel: CardViewModel,\n        checkoutFragment: CheckoutFragment,\n        headerLayout: LinearLayout\n    ) {\n        this.context = context\n        this.fragmentManager = fragmentManager\n        this.sdkLayout = sdkLayout\n        this.frameLayout = frameLayout\n        this.webFrameLayout = webFrameLayout\n        this.bottomSheetDialog = bottomSheetDialog\n        this.inLineCardLayout = inLineCardLayout\n        this.inlineViewCallback = inlineViewCallback\n        this.intent = intent\n        this.cardViewModel = cardViewModel\n        this.checkoutFragment = checkoutFragment\n        this.headerLayout = headerLayout\n\n        val aScene: Scene? = Scene.getCurrentScene(sdkLayout)\n        aScene?.setEnterAction {\n            AnimationUtils.loadAnimation(context, R.anim.slide_down)\n        }\n        initializeScanner(this)\n        initViewHolders()\n        initAmountAction()\n        initSwitchAction()\n        initOtpActionButton()\n        setAllSeparatorTheme()\n\n\n    }\n\n    private fun initLoyaltyView() {\n        if (SDKSession.enableLoyalty == true) {\n            /*removeViews(saveCardSwitchHolder)\n            addViews(loyaltyViewHolder,saveCardSwitchHolder)*/\n            removeAllViews()\n            addViews(\n                businessViewHolder,\n                amountViewHolder,\n                cardViewHolder,\n                paymentInlineViewHolder,\n                loyaltyViewHolder,\n                saveCardSwitchHolder\n            )\n            loyaltyViewHolder.view.loyaltyView.constraintLayout?.visibility = View.VISIBLE\n\n        } else\n            loyaltyViewHolder.view.loyaltyView.constraintLayout?.visibility = View.GONE\n    }\n\n    private fun initializeScanner(checkoutViewModel: CheckoutViewModel) {\n        textRecognitionML = TapTextRecognitionML(checkoutViewModel)\n        textRecognitionML?.addTapScannerCallback(checkoutViewModel)\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun initOtpActionButton() {\n        otpViewHolder.otpView.otpViewActionButton.setOnClickListener {\n            //Added to hide keyboard if open\n            CustomUtils.hideKeyboardFrom(context as Activity, otpViewHolder.view)\n            when (otpTypeString) {\n                PaymentTypeEnum.GOPAY ->\n                    goPayViewsHolder.onOtpButtonConfirmationClick(otpViewHolder.otpView.otpViewInput1.text.toString())\n\n\n                PaymentTypeEnum.SAVEDCARD -> confirmOTPCode(otpViewHolder.otpView.otpViewInput1.text.toString())\n                else -> {\n\n                    removeViews(\n                        businessViewHolder,\n                        amountViewHolder,\n                        paymentInlineViewHolder,\n                        cardViewHolder,\n                        saveCardSwitchHolder,\n                        otpViewHolder\n                    )\n                    addViews(\n                        businessViewHolder,\n                        amountViewHolder,\n                        cardViewHolder,\n                        paymentInlineViewHolder,\n                        saveCardSwitchHolder\n                    )\n                    saveCardSwitchHolder?.view?.mainSwitch?.switchSaveMobile?.visibility =\n                        View.GONE\n                    val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n                        false,\n                        \"en\",\n                        if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                            payString + \" \" + currentCurrencySymbol + \" \" + selectedAmount\n                        } else {\n                            payString + \" \" + currentCurrencySymbol + \" \" + currentAmount\n                        },\n                        Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.paymentBackgroundColor\")),\n                        Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.titleLabelColor\")),\n                    )\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = View.VISIBLE\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                        ActionButtonState.IDLE\n                    )\n                    paymentInlineViewHolder.tapMobileInputView.clearNumber()\n\n                }\n            }\n        }\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun confirmOTPCode(otpCode: String) {\n        otpViewHolder.view.otpView.otpViewActionButton.setDisplayMetrics(\n            CustomUtils.getDeviceDisplayMetrics(\n                context as Activity\n            )\n        )\n        otpViewHolder.view.otpView.otpViewActionButton.changeButtonState(ActionButtonState.LOADING)\n        when (PaymentDataSource.getTransactionMode()) {\n            TransactionMode.PURCHASE -> sendChargeOTPCode(otpCode)\n            TransactionMode.AUTHORIZE_CAPTURE -> sendAuthorizeOTPCode(otpCode)\n            else -> sendChargeOTPCode(otpCode)\n        }\n\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun sendAuthorizeOTPCode(otpCode: String) {\n        cardViewModel.processEvent(\n            CardViewEvent.AuthenticateAuthorizeTransaction,\n            this,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            otpCode\n        )\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun sendChargeOTPCode(otpCode: String) {\n        cardViewModel.processEvent(\n            CardViewEvent.AuthenticateChargeTransaction,\n            this,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            otpCode\n        )\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun initViewHolders() {\n        businessViewHolder = BusinessViewHolder(context, this)\n        amountViewHolder = AmountViewHolder(context, this)\n        tabAnimatedActionButtonViewHolder = TabAnimatedActionButtonViewHolder(context)\n        cardViewHolder = CardViewHolder(context, this)\n        goPaySavedCardHolder = GoPaySavedCardHolder(context, this, this)\n        saveCardSwitchHolder = SwitchViewHolder(context, this)\n        loyaltyViewHolder = LoyaltyViewHolder(context, this, this)\n\n        headerLayout.let { it1 ->\n            setTopBorders(\n                view = it1,\n                cornerRadius = 35f,\n                strokeWidth = 0.0f,\n                strokeColor = loadAppThemManagerFromPath(AppColorTheme.PoweredByTapBackgroundColor),// stroke color\n                tintColor = loadAppThemManagerFromPath(AppColorTheme.PoweredByTapBackgroundColor),// tint color\n                shadowColor = loadAppThemManagerFromPath(AppColorTheme.PoweredByTapBackgroundColor)\n            )\n\n        }//\n        paymentInlineViewHolder = PaymentInlineViewHolder(\n            context, this,\n            this,\n            this,\n            saveCardSwitchHolder,\n            this,\n            cardViewModel, checkoutFragment, loyaltyViewHolder\n        )\n\n        itemsViewHolder = ItemsViewHolder(context, this)\n        otpViewHolder = OTPViewHolder(context)\n        otpViewHolder.otpView.visibility = View.GONE\n        otpViewHolder.otpView.requestFocus()\n        otpViewHolder.otpView.otpViewInput1.cursorColor =\n            Color.parseColor(ThemeManager.getValue(\"TapOtpView.OtpController.activeBottomColor\"))\n        otpViewHolder.otpView.otpViewInput1.setLineColorInactive(\n            Color.parseColor(\n                ThemeManager.getValue(\n                    \"TapOtpView.OtpController.bottomLineColor\"\n                )\n            )\n        )\n        otpViewHolder.otpView.otpViewInput1.setLineColorActive(\n            Color.parseColor(\n                ThemeManager.getValue(\n                    \"TapOtpView.OtpController.activeBottomColor\"\n                )\n            )\n        )\n        otpViewHolder.otpView.otpViewInput1.isCursorVisible = true\n        goPayViewsHolder = GoPayViewsHolder(context, this, otpViewHolder)\n        asynchronousPaymentViewHolder = AsynchronousPaymentViewHolder(context, this)\n        logicForLoyaltyProgram()\n        addTitlePaymentAndFlag()\n    }\n\n    private fun showCountryFlag(): String? {\n        val currency = SharedPrefManager.getUserSupportedLocaleForTransactions(context)\n        Log.e(\"localNeeded\", currency.toString())\n        if (ThemeManager.currentTheme.contains(\"dark\")) {\n            return currency?.logos?.dark?.png\n        } else {\n            return currency?.logos?.light?.png\n        }\n    }\n\n    private fun initSwitchAction() {\n        saveCardSwitchHolder?.view?.mainSwitch?.mainSwitch?.visibility = View.GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.switchGoPayCheckout?.isChecked = false\n        saveCardSwitchHolder?.view?.cardSwitch?.switchGoPayCheckout?.visibility = View.GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.saveGoPay?.visibility = View.GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.alertGoPaySignUp?.visibility = View.GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.switchSeparator?.visibility = View.GONE\n    }\n\n    private fun initAmountAction() {\n        amountViewHolder.setOnItemsClickListener()\n        amountViewHolder.view.amount_section.mainKDAmountValue.visibility = View.GONE\n    }\n\n\n    override fun displayStartupLayout(enabledSections: ArrayList<SectionType>) {\n        //Todo based on api response logic for switch case\n        when (PaymentDataSource.getTransactionMode()) {\n\n            TransactionMode.TOKENIZE_CARD -> {\n                addViews(\n                    businessViewHolder,\n                    paymentInlineViewHolder,\n                    saveCardSwitchHolder\n                )\n\n            }\n            TransactionMode.SAVE_CARD -> {\n                addViews(\n                    businessViewHolder,\n                    paymentInlineViewHolder,\n                    saveCardSwitchHolder\n                )\n            }\n            else -> {\n\n\n                if (PaymentDataSource.getPaymentDataType() == \"WEB\") {\n                    addViews(\n                        businessViewHolder,\n                        amountViewHolder,\n                        cardViewHolder,\n                        saveCardSwitchHolder\n                    )\n                    cardViewHolder.cardInfoHeaderText?.visibility = View.GONE\n                } else if (PaymentDataSource.getPaymentDataType() == \"CARD\") {\n                    addViews(\n                        businessViewHolder,\n                        paymentInlineViewHolder, saveCardSwitchHolder\n                    )\n                    cardViewHolder.cardInfoHeaderText.visibility = View.VISIBLE\n                } else\n                //Checkimg to be removed once loyalty enabled form api level onluy else will be there\n                    if (SDKSession.enableLoyalty == true) {\n                        addViews(\n                            businessViewHolder,\n                            amountViewHolder,\n                            cardViewHolder,\n                            paymentInlineViewHolder,\n                            loyaltyViewHolder,\n                            saveCardSwitchHolder\n                        )\n                    } else {\n                        addViews(\n                            businessViewHolder,\n                            amountViewHolder,\n                            cardViewHolder,\n                            paymentInlineViewHolder,\n                            saveCardSwitchHolder\n                        )\n                    }\n\n\n            }\n        }\n\n        saveCardSwitchHolder?.view?.mainSwitch?.mainSwitchLinear?.setBackgroundColor(\n            Color.parseColor(\n                ThemeManager.getValue(\n                    \"TapSwitchView.main.backgroundColor\"\n                )\n            )\n        )\n        inLineCardLayout.visibility = View.GONE\n        amountViewHolder.readyToScanVisibility(false)\n        saveCardSwitchHolder?.view?.cardviewSwitch?.cardElevation = 0f\n        SDKSession.activity?.let {\n            CustomUtils.getDeviceDisplayMetrics(\n                it\n            )\n        }?.let { saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setDisplayMetrics(it) }\n\n\n    }\n\n    fun setBottomSheetLayout(bottomSheetLayout: FrameLayout) {\n        this.bottomSheetLayout = bottomSheetLayout\n        bottomSheetLayout.clipToOutline = true\n        bottomSheetLayout.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"horizontalList.backgroundColor\")))\n        // bottomSheetLayout.setBackgroundColor(Color.RED)\n        bottomSheetLayout.let { it1 ->\n            setTopBorders(\n                it1,\n                40f,// corner raduis\n                0.0f,\n                Color.parseColor(ThemeManager.getValue(\"horizontalList.backgroundColor\")),// stroke color\n                Color.parseColor(ThemeManager.getValue(\"horizontalList.backgroundColor\")),// tint color\n                Color.parseColor(ThemeManager.getValue(\"horizontalList.backgroundColor\"))\n            )\n\n\n        }\n    }\n\n    override fun displayGoPayLogin() {\n        saveCardSwitchHolder?.let {\n            removeViews(\n                businessViewHolder, amountViewHolder,\n                cardViewHolder, paymentInlineViewHolder,\n                it, otpViewHolder,\n                goPayViewsHolder\n            )\n        }\n\n        addViews(businessViewHolder, amountViewHolder, goPayViewsHolder)\n        if (goPayViewsHolder.goPayopened) {\n            goPayViewsHolder.goPayLoginInput.inputType = GoPayLoginMethod.PHONE\n            goPayViewsHolder.goPayLoginInput.visibility = View.VISIBLE\n            saveCardSwitchHolder?.view?.cardSwitch?.switchGoPayCheckout?.visibility = View.VISIBLE\n        }\n        //TODO goPayAdapter.updateAdapterData(goPayCardList.value as List<GoPaySavedCards>)\n        amountViewHolder.changeGroupAction(false)\n        goPayViewsHolder.goPayopened = true\n    }\n\n\n    override fun displayGoPay() {\n\n        saveCardSwitchHolder?.let {\n            removeViews(\n                businessViewHolder,\n                amountViewHolder,\n                goPayViewsHolder,\n                cardViewHolder,\n                paymentInlineViewHolder,\n                it,\n                otpViewHolder\n            )\n        }\n\n        saveCardSwitchHolder?.let {\n            addViews(\n                businessViewHolder,\n                amountViewHolder,\n                goPaySavedCardHolder,\n                cardViewHolder,\n                paymentInlineViewHolder,\n                it\n            )\n        }\n\n        cardViewHolder.view.mainChipgroup.groupAction.visibility = View.INVISIBLE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = View.VISIBLE\n        saveCardSwitchHolder?.goPayisLoggedin = true\n        adapter.goPayOpenedfromMain(true)\n        adapter.removeItems()\n    }\n\n    override fun controlCurrency(display: Boolean) {\n        if (display) caseDisplayControlCurrency()\n        else caseNotDisplayControlCurrency()\n\n        displayItemsOpen = !display\n        amountViewHolder.changeGroupAction(!display)\n        // if (this::currentAmount.isInitialized)\n        if (this::selectedAmount.isInitialized && this::selectedCurrency.isInitialized) {\n            if (selectedAmount == currentAmount && selectedCurrency == currentCurrency) {\n                amountViewHolder.view.amount_section.mainKDAmountValue.visibility = View.GONE\n\n            } else {\n                amountViewHolder.updateSelectedCurrency(\n                    displayItemsOpen,\n                    selectedAmount, selectedCurrency,\n                    currentAmount, finalCurrencySymbol, currentCurrencySymbol\n                )\n\n            }\n        }\n        if (otpViewHolder.otpView.isVisible) {\n            removeViews(otpViewHolder)\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.RESET)\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isClickable = true\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.stateListAnimator = null\n            val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n                false,\n                \"en\",\n                if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                    payString + \" \" + currentCurrencySymbol + \" \" + selectedAmount\n                } else {\n                    payString + \" \" + currentCurrencySymbol + \" \" + currentAmount\n                },\n                Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n                Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n            )\n//            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isActivated = false\n        }\n        if (PaymentDataSource.getPaymentDataType() != null && PaymentDataSource.getPaymentDataType() == \"WEB\") {\n            removeViews(paymentInlineViewHolder)\n        }\n        removeInlineScanner()\n        removeNFCViewFragment()\n\n        /*  Handler().postDelayed({\n              translateViewToNewHeight(bottomSheetLayout.measuredHeight,false)\n          },400)*/\n    }\n\n    override fun reOpenSDKState() {\n        //todo add back to sdk functionality\n\n        removeViews(otpViewHolder, amountViewHolder, paymentInlineViewHolder, saveCardSwitchHolder)\n        doAfterSpecificTime(time = 500L) {\n            with(cardViewHolder.view.mainChipgroup) {\n                mutableListOf<View>(\n                    chipsRecycler,\n                    groupAction,\n                    groupName\n                ).addFadeInAnimationToViews()\n            }\n\n        }\n\n        businessViewHolder.setDataFromAPI(\n            PaymentDataSource.getMerchantData()?.logo,\n            PaymentDataSource.getMerchantData()?.name\n        )\n        addViews(\n            amountViewHolder,\n            paymentInlineViewHolder,\n            saveCardSwitchHolder\n        )\n        amountViewHolder.view.amount_section.itemAmountLayout?.visibility = View.VISIBLE\n        amountViewHolder.view.amount_section.itemPopupLayout?.visibility = View.VISIBLE\n        amountViewHolder.view.amount_section.tapChipAmount?.visibility = View.VISIBLE\n        checkSelectedAmountInitiated()\n        amountViewHolder.changeGroupAction(false)\n        amountViewHolder.setOnItemsClickListener()\n        amountViewHolder.view.amount_section.flagImageView?.visibility = View.VISIBLE\n\n        addTitlePaymentAndFlag()\n\n        saveCardSwitchHolder?.view?.visibility = View.VISIBLE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.RESET)\n        val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n            false,\n            \"en\",\n            if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                payString + \" \" + currentCurrencySymbol + \" \" + selectedAmount\n            } else {\n                payString + \" \" + currentCurrencySymbol + \" \" + currentAmount\n            },\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n        )\n    }\n\n    fun addTitlePaymentAndFlag() {\n            val currencyAlert: String = LocalizationManager.getValue(\"currencyAlert\", \"Common\")\n            amountViewHolder.view.amount_section.popupTextView.text =\n                currencyAlert + \" \" + checkoutFragment.getSimIsoCountryCurrency()\n            Glide.with(context).load(showCountryFlag())\n                .into(amountViewHolder.view.amount_section.flagImageView);\n        amountViewHolder.view.amount_section.itemPopupLayout.addFadeInAnimation(durationTime = 2000)\n        amountViewHolder.view.amount_section.itemPopupLayout.slidefromRightToLeft()\n\n\n    }\n\n\n    private fun caseDisplayControlCurrency() {\n        /*  val newHeight = (context as Activity).window?.decorView?.measuredHeight\n          val viewGroupLayoutParams = bottomSheetLayout.layoutParams\n          viewGroupLayoutParams.height = newHeight ?: 0\n          bottomSheetLayout.layoutParams = viewGroupLayoutParams\n  */\n        val originalHeight: Int = sdkLayout.height\n\n        removeViews(\n            //  businessViewHolder,\n            // amountViewHolder,\n            cardViewHolder,\n            paymentInlineViewHolder,\n        )\n        addViews(\n            itemsViewHolder\n        )\n        //replaced original height with bottomSheetLayout height\n        Handler().postDelayed({\n            if (::bottomSheetLayout.isInitialized)\n                translateViewToNewHeight(bottomSheetLayout.measuredHeight, true)\n\n        }, 400)\n\n        // removeAllViews()\n\n\n        // checkoutFragment?.isFullscreen =true\n\n        /**\n         * will be replaced by itemList coming from the API**/\n        if (PaymentDataSource.getItems() != null) {\n            itemsViewHolder.view.itemRecylerView.adapter = itemAdapter\n            itemAdapter.updateAdapterData(itemList)\n        }\n        currencyAdapter.updateAdapterData(allCurrencies.value as List<SupportedCurrencies>)\n\n        frameLayout.visibility = View.VISIBLE\n        itemsViewHolder.itemsdisplayed = true\n\n        removeViews(\n            saveCardSwitchHolder,\n            goPayViewsHolder,\n            otpViewHolder,\n            // itemsViewHolder\n        )\n        //Hide keyboard of any open\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n            CustomUtils.hideKeyboardFrom(\n                paymentInlineViewHolder.view.context,\n                paymentInlineViewHolder.view\n            )\n        }\n    }\n\n    private fun caseNotDisplayControlCurrency() {\n        if (goPayViewsHolder.goPayopened || itemsViewHolder.itemsdisplayed) setActionGoPayOpenedItemsDisplayed()\n        else setActionNotGoPayOpenedNotItemsDisplayed()\n        Handler().postDelayed({\n            if (::bottomSheetLayout.isInitialized)\n                translateViewToNewHeight(bottomSheetLayout.measuredHeight, false)\n        }, 400)\n\n    }\n\n    private fun translateViewToNewHeight(originalHeight: Int, expandHeightBool: Boolean) {\n        val sdkLayoutHeight = sdkLayout.height\n        val bottomSheetLayoutHeight = bottomSheetLayout.height\n        println(\"sdkLayoutHeight>>\" + sdkLayoutHeight)\n        println(\"originalHeight>>\" + originalHeight)\n        val resizeAnimation = ResizeAnimation(\n            bottomSheetLayout,\n            sdkLayoutHeight,\n            originalHeight, expandHeightBool\n        )\n        resizeAnimation.duration = 350\n        bottomSheetLayout.startAnimation(resizeAnimation)\n\n\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun setActionGoPayOpenedItemsDisplayed() {\n        removeViews(\n\n            cardViewHolder,\n            paymentInlineViewHolder,\n            saveCardSwitchHolder,\n            goPayViewsHolder,\n\n            otpViewHolder,\n            itemsViewHolder\n        )\n        if (::webViewHolder.isInitialized) {\n            removeViews(webViewHolder)\n        }\n        addViews(\n            cardViewHolder,\n            paymentInlineViewHolder,\n            saveCardSwitchHolder\n        )\n        paymentInlineViewHolder.resetPaymentCardView()\n        //itemsViewHolder.resetView()\n        //I comment   itemsViewHolder.setItemsRecylerView()\n        //  itemsViewHolder?.view?.itemRecylerView?.adapter = itemAdapter\n        frameLayout.visibility = View.GONE\n    }\n\n    private fun setActionNotGoPayOpenedNotItemsDisplayed() {\n        val originalHeight: Int = sdkLayout.height\n        saveCardSwitchHolder?.let {\n            removeViews(\n                cardViewHolder,\n                paymentInlineViewHolder,\n                it,\n                itemsViewHolder\n            )\n        }\n\n        if (::webViewHolder.isInitialized) removeViews(webViewHolder)\n\n        saveCardSwitchHolder?.let {\n            addViews(\n\n                cardViewHolder,\n                paymentInlineViewHolder,\n                it\n            )\n        }\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.IDLE)\n        // itemsViewHolder.resetView()\n        //  itemsViewHolder.setItemsRecylerView()\n        //   itemsViewHolder.setCurrencyRecylerView()\n        itemsViewHolder.view.mainCurrencyChip.chipsRecycler.adapter = currencyAdapter\n        //  itemsViewHolder.view.itemRecylerView.adapter =itemAdapter\n        frameLayout.visibility = View.GONE\n\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    @SuppressLint(\"SetTextI18n\")\n    override fun displayOTPView(\n        phoneNumber: PhoneNumber?,\n        otpType: String,\n        chargeResponse: Charge?\n    ) {\n\n\n        // amountViewHolder.changeGroupAction(false)\n        amountViewHolder.view.amount_section.itemCountButton.text = LocalizationManager.getValue(\n            \"close\",\n            \"Common\"\n        )\n        // amountViewHolder.view.amount_section.itemAmountLayout?.visibility = View.GONE\n        //  amountViewHolder.view.amount_section.itemPopupLayout?.visibility = View.GONE\n        amountViewHolder.view.amount_section.flagImageView?.visibility = View.GONE\n        amountViewHolder.view.amount_section.popupTextView.text = LocalizationManager.getValue(\n            \"close\",\n            \"Common\"\n        )\n\n\n        //  amountViewHolder.view.amount_section.itemCountButton?.visibility = View.GONE\n\n        displayOtpIsOpen = true\n        displayItemsOpen = false\n        when (otpType) {\n            PaymentTypeEnum.GOPAY.name -> {\n                displayOtpGoPay(phoneNumber)\n            }\n            PaymentTypeEnum.telecom.name -> {\n                displayOtpTelecoms(phoneNumber)\n            }\n            PaymentTypeEnum.SAVEDCARD.name -> {\n                displayOtpCharge(phoneNumber, chargeResponse)\n            }\n            else -> {\n                displayOtpCharge(phoneNumber, chargeResponse)\n            }\n        }\n    }\n\n    private fun displayOtpGoPay(phoneNumber: PhoneNumber?) {\n        // otpTypeString = PaymentTypeEnum.GOPAY //temporray\n        removeViews(\n            cardViewHolder,\n            paymentInlineViewHolder, saveCardSwitchHolder, amountViewHolder\n        )\n        addViews(amountViewHolder, otpViewHolder)\n\n        otpViewHolder.otpView.visibility = View.VISIBLE\n        setOtpPhoneNumber(phoneNumber)\n        otpViewHolder.otpView.changePhone.setOnClickListener {\n            goPayViewsHolder.onChangePhoneClicked()\n        }\n    }\n\n    @SuppressLint(\"SetTextI18n\")\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun displayOtpCharge(phoneNumber: PhoneNumber?, chargeResponse: Charge?) {\n        // otpTypeString = PaymentTypeEnum.GOPAY //temporray\n        println(\"mmmmmmmm\" + amountViewHolder?.originalAmount)\n        /*if(::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n            amountViewHolder.updateSelectedCurrency(\n                false,\n                selectedAmount,\n                selectedCurrency,\n                currentAmount,\n                currentCurrency\n            )\n            println(\"selectedAmount>>>>\" + selectedAmount)\n        }*/\n        removeViews(\n            cardViewHolder,\n            paymentInlineViewHolder, saveCardSwitchHolder, otpViewHolder\n        )\n        paymentInlineViewHolder.paymentInputContainer.applyBluryToView(showOriginalView = true)\n        // bottomSheetDialog.dismissWithAnimation\n        //start counter on open otpview\n        otpViewHolder?.otpView?.startCounter()\n        addViews(otpViewHolder)\n        otpViewHolder.otpView.visibility = View.VISIBLE\n        //Added to hide the Items-Amount button when OTP is opened\n        // amountViewHolder.view.amount_section.itemAmountLayout?.visibility = View.GONE\n        amountViewHolder.view.amount_section.tapChipAmount?.visibility = View.GONE\n        CustomUtils.showKeyboard(context)\n        setOtpPhoneNumber(phoneNumber)\n        otpViewHolder.otpView.changePhone.visibility = View.INVISIBLE\n        otpViewHolder.otpView.timerText.setOnClickListener {\n            resendOTPCode(chargeResponse)\n            otpViewHolder.otpView.restartTimer()\n        }\n        amountViewHolder.view.amount_section.mainKDAmountValue.visibility = View.GONE\n    }\n\n    private fun setOtpPhoneNumber(phoneNumber: PhoneNumber?) {\n\n        var replaced = \"\"\n        var countryCodeReplaced = \"\"\n        countryCodeReplaced = phoneNumber?.countryCode?.replace(\"0\", \"\").toString()\n        if (phoneNumber?.number?.length!! > 7)\n            replaced = (phoneNumber.number.toString()).replaceRange(1, 6, \"â¢â¢â¢â¢\")\n        otpViewHolder.otpView.mobileNumberText.text = \"+$countryCodeReplaced $replaced\"\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun resendOTPCode(chargeResponse: Charge?) {\n        if (chargeResponse != null) {\n            if (chargeResponse is Authorize) resendAuthorizeOTPCode(chargeResponse as Authorize?)\n            else resendChargeOTPCode(chargeResponse as Charge?)\n        }\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun resendAuthorizeOTPCode(authorize: Authorize?) {\n        cardViewModel.requestAuthenticateForAuthorizeTransaction(this, authorize)\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun resendChargeOTPCode(charge: Charge?) {\n        if (charge != null) {\n            cardViewModel.requestAuthenticateForChargeTransaction(this, charge)\n        }\n    }\n\n    private fun displayOtpTelecoms(phoneNumber: PhoneNumber?) {\n        otpTypeString = PaymentTypeEnum.telecom\n        removeViews(\n            businessViewHolder,\n            amountViewHolder,\n            paymentInlineViewHolder,\n            cardViewHolder,\n            saveCardSwitchHolder,\n            otpViewHolder\n        )\n        addViews(\n            businessViewHolder,\n            amountViewHolder,\n            cardViewHolder,\n            paymentInlineViewHolder,\n            saveCardSwitchHolder,\n            otpViewHolder\n        )\n        //Added check change listener to handle showing of extra save options\n        saveCardSwitchHolder?.view?.mainSwitch?.switchSaveMobile?.visibility = View.GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = View.GONE\n        saveCardSwitchHolder?.view?.mainSwitch?.switchSaveMobile?.setOnCheckedChangeListener { buttonView, isChecked ->\n            if (isChecked) saveCardSwitchHolder?.view?.cardSwitch?.switchesLayout?.visibility =\n                View.GONE\n        }\n        saveCardSwitchHolder?.setSwitchToggleData(PaymentType.telecom)\n        otpViewHolder.setMobileOtpView()\n        var replaced = \"\"\n        var countryCodeReplaced = \"\"\n        if (phoneNumber?.number?.length!! > 7)\n            replaced = (phoneNumber.number.toString()).replaceRange(1, 6, \"....\")\n        countryCodeReplaced =\n            goPayViewsHolder.goPayLoginInput.countryCodePicker.selectedCountryCode.replace(\n                \"+\",\n                \" \"\n            )\n        otpViewHolder.otpView.mobileNumberTextNormalPay.text = \"+$countryCodeReplaced$replaced\"\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.P)\n    override fun displayRedirect(url: String, authenticate: Charge?) {\n        this.redirectURL = url\n\n        println(\"redirectURL before display>>\" + url)\n        if (::redirectURL.isInitialized && ::fragmentManager.isInitialized) {\n            if (otpViewHolder.otpView.isVisible) {\n                removeViews(\n                    // businessViewHolder,\n                    cardViewHolder,\n                    paymentInlineViewHolder,\n                    otpViewHolder\n                )\n            }\n            // setSlideAnimation()\n            if (PaymentDataSource?.getWebViewType() != null && PaymentDataSource.getWebViewType() == WebViewType.REDIRECT) {\n                businessViewHolder.view.headerView.constraint.visibility = View.GONE\n                businessViewHolder.view.topSeparatorLinear.visibility = View.GONE\n                //Stopped showing closetext as requested\n                // checkoutFragment.closeText.visibility = View.VISIBLE\n                removeViews(\n                    // businessViewHolder,\n                    amountViewHolder,\n                    cardViewHolder,\n                    // saveCardSwitchHolder,\n                    paymentInlineViewHolder,\n                    otpViewHolder,\n                    goPaySavedCardHolder,\n                    goPayViewsHolder\n                )\n\n                /**\n                 * apply Background Drawable to switchView\n                 */\n                saveCardSwitchHolder?.view?.background = getViewShapeDrawable()\n\n\n\n                saveCardSwitchHolder?.view?.mainSwitch?.visibility = View.GONE\n                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                    ActionButtonState.LOADING\n                )\n                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = View.GONE\n                saveCardSwitchHolder?.view?.cardSwitch?.tapLogoImage?.visibility = View.GONE\n\n                Handler(Looper.getMainLooper()).postDelayed({\n\n                    val fragment = WebFragment.newInstance(\n                        redirectURL,\n                        this, cardViewModel, authenticate, this\n                    )\n\n                    fragmentManager.beginTransaction()\n                        .replace(R.id.webFrameLayout, fragment, \"webFragment\")\n                        .addToBackStack(\"webFragment\")\n                        .commit()\n                    //  checkoutFragment.closeText.visibility = View.VISIBLE\n                    webFrameLayout.visibility = View.VISIBLE\n                    println(\"fragment hh\" + Resources.getSystem().displayMetrics.heightPixels)\n                    if (::bottomSheetLayout.isInitialized)\n                        translateHeightRedirect(sdkLayout)\n\n                }, 500)\n\n\n            } else if (PaymentDataSource?.getWebViewType() != null && PaymentDataSource.getWebViewType() == WebViewType.THREE_DS_WEBVIEW) {\n\n                webViewHolder = WebViewHolder(\n                    context,\n                    url,\n                    this,\n                    cardViewModel,\n                    authenticate,\n                    this,\n                    bottomSheetLayout,\n                    sdkLayout,\n                    saveCardSwitchHolder,\n                    paymentInlineViewHolder,\n                    cardViewHolder\n                )\n                removeViews(\n                    //  businessViewHolder,\n                    amountViewHolder,\n                    //  cardViewHolder,\n                    //  saveCardSwitchHolder,\n                    // paymentInlineViewHolder,\n                    otpViewHolder,\n                    goPaySavedCardHolder,\n                    goPayViewsHolder\n                )\n\n                //Added to hide the Items-Amount button when 3ds is opened within\n                addViews(webViewHolder)\n                saveCardSwitchHolder?.view?.mainSwitch?.visibility = View.GONE\n                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                    ActionButtonState.LOADING\n                )\n                saveCardSwitchHolder?.view?.cardSwitch?.tapLogoImage?.visibility = View.GONE\n                checkoutFragment?.closeText?.visibility = View.GONE\n\n                /**Stopped showing cancel button and poweredby for 3ds**/\n                /*    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n                 true,\n                 LocalizationManager.getLocale(context).toString(),LocalizationManager.getValue(\"deleteSavedCardButtonCancel\", \"SavedCardTitle\"),\n                        Color.parseColor(ThemeManager.getValue(\"actionButton.Cancel.backgroundColor\")),\n                        Color.parseColor(ThemeManager.getValue(\"actionButton.Cancel.titleLabelColor\")))\n\n                   saveCardSwitchHolder?.view?.cardSwitch?.payButton?.let {\n                       setBorderedView(\n                           it,\n                           100.0f,\n                           2.0f,\n                           Color.parseColor(ThemeManager.getValue(\"actionButton.Cancel.borderColor\")),\n                           Color.parseColor(ThemeManager.getValue(\"actionButton.Cancel.backgroundColor\")),\n                           Color.parseColor(ThemeManager.getValue(\"actionButton.Cancel.backgroundColor\"))\n                       )\n                   }\n             saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.RESET)\n\n             saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setOnClickListener {\n                 this.dismissBottomSheet()\n\n             }*/\n            }\n\n\n        }\n\n        // removeViews(amountViewHolder, businessViewHolder)\n        // tabAnimatedActionButtonViewHolder?.view?.actionButton?.visibility = View.INVISIBLE\n    }\n\n    private fun translateHeightRedirect(sdkLayout: LinearLayout) {\n        val resizeAnimation = ResizeAnimation(\n            bottomSheetLayout,\n            Resources.getSystem().displayMetrics.heightPixels,\n            sdkLayout.height, true\n        )\n        resizeAnimation.duration = 350\n        bottomSheetLayout.startAnimation(resizeAnimation)\n    }\n\n    override fun displaySaveCardOptions() {\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun setBinLookupData(\n        binLookupResponse: BINLookupResponse,\n        context: Context,\n        cardViewModel: CardViewModel\n    ) {\n        paymentInlineViewHolder = PaymentInlineViewHolder(\n            context,\n            this,\n            this,\n            this,\n            saveCardSwitchHolder,\n            this,\n            cardViewModel,\n            checkoutFragment, loyaltyViewHolder\n        )\n        //  paymentInlineViewHolder.tabLayout.setUnselectedAlphaLevel(1.0f)\n        if (::paymentInlineViewHolder.isInitialized)\n            paymentInlineViewHolder.setCurrentBinData(binLookupResponse)\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun getDatasfromAPIs(\n        merchantData: MerchantData?,\n        paymentOptionsResponse: PaymentOptionsResponse?\n    ) {\n        println(\"if(::businessViewHolder.isInitialized getpay\" + ::businessViewHolder.isInitialized)\n        println(\"merchantData name>>\" + merchantData?.name)\n        println(\"merchantData logo>>\" + merchantData?.logo)\n        if (paymentOptionsResponse != null) {\n            this.paymentOptionsResponse = paymentOptionsResponse\n        }\n        if (::businessViewHolder.isInitialized && PaymentDataSource.getTransactionMode() != TransactionMode.TOKENIZE_CARD) {\n            businessViewHolder.setDataFromAPI(\n                merchantData?.logo,\n                merchantData?.name\n            )\n            // TODO check\n            if (merchantData?.verifiedApplication == true) {\n\n            }\n        }\n        // println(\"PaymentOptionsResponse on get$paymentOptionsResponse\")\n        allCurrencies.value = paymentOptionsResponse?.supportedCurrencies\n        Log.e(\n            \"supportedCurrencyUser\",\n            SharedPrefManager.getUserLocalCurrency(context).toString()\n        )\n        cacheUserLocalCurrency()\n\n\n\n\n        savedCardList = paymentOptionsResponse?.cards\n        currencyAdapter = CurrencyTypeAdapter(this)\n        if (paymentOptionsResponse?.supportedCurrencies != null && ::amountViewHolder.isInitialized) {\n            currentCurrency = paymentOptionsResponse.currency\n            for (i in paymentOptionsResponse.supportedCurrencies.indices) {\n\n                if (paymentOptionsResponse.supportedCurrencies[i].currency == currentCurrency) {\n                    println(\"current amount value>>\" + paymentOptionsResponse.supportedCurrencies[i].amount)\n                    currentAmount =\n                        CurrencyFormatter.currencyFormat(paymentOptionsResponse.supportedCurrencies[i].amount.toString())\n                    currentCurrency =\n                        paymentOptionsResponse.supportedCurrencies[i].symbol.toString()\n\n                    /* if (currentCurrency.length == 2) {\n                         currentCurrency =\n                             paymentOptionsResponse.supportedCurrencies[i].currency.toString()\n                     } else {\n                         currentCurrency =\n                             paymentOptionsResponse.supportedCurrencies[i].symbol.toString()\n                         currentCurrencySymbol =\n                             paymentOptionsResponse.supportedCurrencies[i].symbol.toString()\n                     }*/\n                    currentCurrency =\n                        paymentOptionsResponse.supportedCurrencies[i].currency.toString()\n                    currentCurrencySymbol =\n                        paymentOptionsResponse.supportedCurrencies[i].symbol.toString()\n                    finalCurrencySymbol =\n                        paymentOptionsResponse.supportedCurrencies[i].symbol.toString()\n                    currencyAdapter.updateSelectedPosition(i)\n                }\n\n            }\n            /**\n             *Note replacing all currency to be currency symbol as per ali 17jan23\n             * **/\n            amountViewHolder.setDataFromAPI(\n                currentAmount,\n                currentCurrencySymbol,\n                PaymentDataSource.getItems()?.size.toString()\n            )\n        }\n        /**\n         * <<<<<<< This items list is going to come from API response later now for loading the view we are taking the List from\n         * PaymentDatasource.getItems()  >>>>>>>> */\n        if (PaymentDataSource.getItems() != null) {\n            itemList = PaymentDataSource.getItems()!!\n            //  unModifiedItemList = itemList\n            unModifiedItemList = itemList.map { it.copy() }\n        }\n\n\n\n\n        if (::itemsViewHolder.isInitialized) {\n            paymentOptionsResponse?.supportedCurrencies?.let {\n                itemsViewHolder.setDataFromAPI(\n                    it,\n                    PaymentDataSource.getItems()\n                )\n            }\n            //  itemsViewHolder.setItemsRecylerView()\n            //  itemsViewHolder.setCurrencyRecylerView()\n\n\n        }\n\n        merchantData?.name?.let {\n            saveCardSwitchHolder?.setDataFromAPI(\n                it,\n                paymentInlineViewHolder.selectedType\n            )\n        }\n        paymentOptionsList.value = paymentOptionsResponse?.paymentOptions\n        //println(\"paymentOptions value\" + paymentOptionsResponse?.paymentOptions)\n        if (::context.isInitialized)\n            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.N) {\n                val divider = DividerItemDecoration(\n                    context,\n                    DividerItemDecoration.HORIZONTAL\n                )\n                divider.setDrawable(ShapeDrawable().apply {\n                    intrinsicWidth = 10\n                    paint.color = Color.TRANSPARENT\n                }) // note: currently (support version 28.0.0), we can not use tranparent color here, if we use transparent, we still see a small divider line. So if we want to display transparent space, we can set color = background color or we can create a custom ItemDecoration instead of DividerItemDecoration.\n                cardViewHolder.view.mainChipgroup.chipsRecycler.addItemDecoration(divider)\n                initAdaptersAction()\n\n            }\n\n        //PaymentDataSource.setSelectedCurrency(currentCurrency, null)\n        PaymentDataSource.setSelectedCurrency(currentCurrency, currentCurrencySymbol)\n        PaymentDataSource.setSelectedAmount(currentAmount.toBigDecimal())\n\n        if (::loyaltyViewHolder.isInitialized) {\n            val objectMapper = ObjectMapper()\n            val tapLoyaltyModel: TapLoyaltyModel =\n                objectMapper.readValue(\n                    context.resources.openRawResource(R.raw.loyalty),\n                    TapLoyaltyModel::class.java\n                )\n            supportedLoyalCards.value =\n                tapLoyaltyModel.supportedCurrencies as List<LoyaltySupportedCurrency>\n            //println(\"tapLoyaltyModel>>>\" + tapLoyaltyModel.bankLogo)\n            tapLoyaltyModel.bankLogo?.let {\n                tapLoyaltyModel.bankName?.let { it1 ->\n                    loyaltyViewHolder.setDataFromAPI(\n                        it,\n                        it1,\n                        tapLoyaltyModel,\n                        supportedLoyalCards.value as List<LoyaltySupportedCurrency>\n                    )\n                }\n            }\n\n        }\n        val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n            false,\n            LocalizationManager.getLocale(context).toString(),\n            if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                payString + \" \" + currentCurrencySymbol + \" \" + selectedAmount\n            } else {\n                payString + \" \" + currentCurrencySymbol + \" \" + currentAmount\n            },\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n        )\n\n    }\n\n     fun cacheUserLocalCurrency() : Boolean {\n        val suportedCurrencyForUser = allCurrencies.value?.find {\n            it.symbol == SharedPrefManager.getUserLocalCurrency(context)?.symbol\n        }\n       return SharedPrefManager.saveModelLocally(\n            context = context,\n            dataToBeSaved = suportedCurrencyForUser,\n            keyValueToBeSaved = UserSupportedLocaleForTransactions\n        )\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun initAdaptersAction() {\n        adapter = CardTypeAdapterUIKIT(this)\n        goPayAdapter = GoPayCardAdapterUIKIT(this)\n        itemAdapter = ItemAdapter()\n        // adapter?.possiblyShowGooglePayButton()\n        // val arrayList = ArrayList<String>()//Creating an empty arraylist\n        //  arrayList.add(\"Google Pay\")//Adding object in arraylist\n\n\n        //adapter.updateAdapterGooglePay(arrayList)\n        //  goPayAdapter.updateAdapterData(goPayCardList.value as List<GoPaySavedCards>)\n        if (allCurrencies.value?.isNotEmpty() == true) {\n            currencyAdapter.updateAdapterData(allCurrencies.value as List<SupportedCurrencies>)\n        }\n        if (savedCardList?.isNotEmpty() == true) {\n            println(\"savedCardList.value\" + PaymentDataSource.getCardType())\n            if (PaymentDataSource.getCardType() != null && PaymentDataSource.getCardType() != CardType.ALL) {\n                filterSavedCardTypes(savedCardList as List<SavedCard>)\n            } else adapter.updateAdapterDataSavedCard(savedCardList as List<SavedCard>)\n        } else {\n            cardViewHolder.view.mainChipgroup.groupAction?.visibility = View.GONE\n        }\n        //  itemsViewHolder.view.itemRecylerView.adapter = itemAdapter\n        itemsViewHolder.view.mainCurrencyChip.chipsRecycler.adapter = currencyAdapter\n        if (PaymentDataSource.getItems() != null) {\n            PaymentDataSource.getItems()?.let { itemAdapter.updateAdapterData(it) }\n        }\n        cardViewHolder.view.mainChipgroup.chipsRecycler.adapter = adapter\n        cardViewHolder.view.mainChipgroup.chipsRecycler.animation =\n            AnimationUtils.loadAnimation(context, R.anim.fall_down_animation)\n        cardViewHolder.view.mainChipgroup.groupAction?.visibility = View.VISIBLE\n        cardViewHolder.view.mainChipgroup.groupAction?.setOnClickListener {\n            setMainChipGroupActionListener()\n            paymentInlineViewHolder.tapCardInputView?.clear()\n            paymentInlineViewHolder.onFocusChange(\"\")\n            paymentInlineViewHolder.tapCardInputView.setSingleCardInput(\n                CardBrandSingle.Unknown, null\n            )\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n        }\n\n        paymentOptionsWorker =\n            java.util.ArrayList<PaymentOption>(paymentOptionsResponse.paymentOptions)\n\n        filterViewModels(currentCurrency)\n        // filterModels(PaymentDataSource.getCurrency()?.isoCode.toString())\n        //  filterCardTypes(PaymentDataSource.getCurrency()?.isoCode.toString(),paymentOptionsWorker)\n\n        //    goPaySavedCardHolder.view.goPayLoginView.groupAction.setOnClickListener {\n        //       setGoPayLoginViewGroupActionListener()\n        //   }\n        //paymentInlineViewHolder.tabLayout.setOnTouchListener { v, _ ->\n        touchHandlingForCardView()\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    @SuppressLint(\"ClickableViewAccessibility\")\n    private fun touchHandlingForCardView() {\n        saveCardSwitchHolder?.view?.setOnTouchListener { v, _ ->\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n            paymentInlineViewHolder.resetView = true\n            paymentInlineViewHolder.resetTouchView()\n\n            true\n        }\n        cardViewHolder.view.cardLinearLayout.setOnTouchListener { v, _ ->\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n            paymentInlineViewHolder.resetView = true\n            paymentInlineViewHolder.resetTouchView()\n\n            true\n        }\n        amountViewHolder.view.setOnTouchListener { v, _ ->\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n            paymentInlineViewHolder.resetView = true\n            paymentInlineViewHolder.resetTouchView()\n\n            true\n        }\n        paymentInlineViewHolder.tapAlertView?.setOnTouchListener { v, _ ->\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n            paymentInlineViewHolder.resetView = true\n            paymentInlineViewHolder.resetTouchView()\n\n            true\n        }\n        paymentInlineViewHolder.tabLayout.setOnTouchListener { v, _ ->\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n            paymentInlineViewHolder.resetView = true\n            paymentInlineViewHolder.resetTouchView()\n\n            true\n        }\n        businessViewHolder.view.setOnTouchListener { v, _ ->\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n            paymentInlineViewHolder.resetView = true\n            paymentInlineViewHolder.resetTouchView()\n\n            true\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun filterCardTypes(list: ArrayList<PaymentOption>) {\n        var filteredCardList: List<PaymentOption> =\n            list.filter { items -> items.paymentType == PaymentType.CARD }\n\n        // println(\"filteredCardList value \" + filteredCardList.size)\n        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.N) {\n            paymentInlineViewHolder.setDataFromAPI(filteredCardList)\n        }\n    }\n\n    private fun filterSavedCardTypes(savedCardList: List<SavedCard>) {\n        val filteredSavedCardList: List<SavedCard> =\n            savedCardList.filter { items ->\n                items.funding == PaymentDataSource?.getCardType().toString()\n            }\n\n        adapter.updateAdapterDataSavedCard(filteredSavedCardList)\n    }\n\n\n    private fun setMainChipGroupActionListener() {\n        if (cardViewHolder.view.mainChipgroup.groupAction?.text == LocalizationManager.getValue(\n                \"close\",\n                \"Common\"\n            )\n        ) {\n            isShaking.value = false\n            adapter.updateShaking(isShaking.value ?: false)\n            goPayAdapter.updateShaking(isShaking.value ?: false)\n            cardViewHolder.view.mainChipgroup.groupAction?.text =\n                LocalizationManager.getValue(\"edit\", \"Common\")\n        } else {\n            isShaking.value = true\n            adapter.updateShaking(isShaking.value ?: true)\n            goPayAdapter.updateShaking(isShaking.value ?: true)\n            goPayAdapter.updateShaking(false)\n            cardViewHolder.view.mainChipgroup.groupAction?.text =\n                LocalizationManager.getValue(\"close\", \"Common\")\n        }\n    }\n\n    private fun setGoPayLoginViewGroupActionListener() {\n        if (goPaySavedCardHolder.view.goPayLoginView.groupAction?.text == LocalizationManager.getValue(\n                \"close\",\n                \"Common\"\n            )\n        ) {\n            isShaking.value = false\n            adapter.updateShaking(isShaking.value ?: false)\n            goPayAdapter.updateShaking(isShaking.value ?: false)\n            goPaySavedCardHolder.view.goPayLoginView.groupAction?.text =\n                LocalizationManager.getValue(\"edit\", \"Common\")\n            goPayAdapter.updateSignOut(goPayCardList.value as List<GoPaySavedCards>, false)\n\n        } else {\n            isShaking.value = true\n            adapter.updateShaking(isShaking.value ?: true)\n            Log.d(\"isShaking.value\", isShaking.value.toString())\n            goPayAdapter.updateShaking(false)\n            goPaySavedCardHolder.view.goPayLoginView.groupAction?.text =\n                LocalizationManager.getValue(\"close\", \"Common\")\n            goPayAdapter.updateSignOut(goPayCardList.value as List<GoPaySavedCards>, true)\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    @SuppressLint(\"WrongConstant\")\n    override fun didDialogueExecute(response: String, cardTypeDialog: Boolean?) {\n        // println(\"response are$response\")\n        if (response == \"YES\") {\n            if (deleteCard) {\n                selectedViewToBeDeletedFromCardViewHolder?.addLoaderWithBlurryToView(invokeAfterLoad = {\n                    cardViewModel.processEvent(\n                        CardViewEvent.DeleteSaveCardEvent,\n                        this,\n                        null,\n                        null,\n                        null,\n                        null,\n                        PaymentDataSource.getCustomer().identifier,\n                        cardId\n                    )\n                }, viewToBeBLur = viewToBeBlurCardViewHolder)\n\n\n            } else {\n                // println(\"else block is calle are\")\n                removeViews(goPaySavedCardHolder)\n                //  adapter.updateAdapterDataSavedCard(savedCardList.value as List<SavedCard>)\n                goPayViewsHolder.goPayopened = false\n                adapter.goPayOpenedfromMain(true)\n                adapter.updateShaking(false)\n                cardViewHolder.view.mainChipgroup.groupAction.visibility = View.VISIBLE\n            }\n        } else if (response == \"NO\") {\n            adapter.updateShaking(false)\n            deleteCard = false\n\n        } else if (response == \"OK\") {\n            if (cardTypeDialog == true) {\n                paymentInlineViewHolder.tapCardInputView.clear()\n                paymentInlineViewHolder.tabLayout.resetBehaviour()\n                paymentInlineViewHolder.resetPaymentCardView()\n            } else {\n                bottomSheetDialog.dismissWithAnimation\n                bottomSheetDialog.dismiss()\n            }\n        }\n    }\n\n\n    override fun deleteSelectedCardListener(delSelectedCard: DeleteCardResponse) {\n        if (delSelectedCard.deleted) {\n            savedCardList?.removeAt(selectedItemsDel)\n            savedCardList?.let { adapter.updateAdapterDataSavedCard(it) }\n            cardViewHolder.view.mainChipgroup.chipsRecycler.adapter = adapter\n            deleteCard = false\n            adapter.updateShaking(false)\n\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun handleSuccessFailureResponseButton(\n        response: String,\n        authenticate: Authenticate?,\n        chargeResponse: Charge?,\n        tabAnimatedActionButton: TabAnimatedActionButton?,\n        contextSDK: Context?\n    ) {\n        SessionManager.setActiveSession(false)\n        println(\"response val>>\" + response)\n        println(\"tabAnimatedActionButton val>>\" + tabAnimatedActionButton)\n        println(\"save val>>\" + saveCardSwitchHolder)\n        /* if(chargeResponse?.status == null && response == \"tokenized\"){\n             //todo replaced authorized with chargeresponse\n             SDKSession.getListener()?.getStatusSDK(response,chargeResponse)\n         }else{\n             SDKSession.getListener()?.getStatusSDK(response,chargeResponse)\n         }*/\n\n        /*saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setDisplayMetrics(\n            CustomUtils.getDeviceDisplayMetrics(\n                contextSDK as Activity\n            )\n        )*/\n        saveCardSwitchHolder?.view?.mainSwitch?.visibility = View.GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = View.VISIBLE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setDisplayMetrics(\n            CustomUtils.getDeviceDisplayMetrics(\n                context as Activity\n            )\n        )\n\n        //  addViews(saveCardSwitchHolder)\n        /***\n         * This function is  working fine as expected in case when 3ds is false\n         * i.e.  sdkSession.isRequires3DSecure(false) as no loading of url occurs direct response\n         * from the API is available.\n         * WRONG OTP scenario also handled here as similar to old sdk show user error button and\n         * close the sdk.\n         * **/\n\n        addTitlePaymentAndFlag()\n        // tabAnimatedActionButton?.clearAnimation()\n        if (::webFrameLayout.isInitialized) {\n            if (fragmentManager.findFragmentById(R.id.webFrameLayout) != null)\n                fragmentManager.beginTransaction()\n                    .hide(fragmentManager.findFragmentById(R.id.webFrameLayout)!!)\n                    .commitNow()\n            webFrameLayout.visibility = View.GONE\n            supportFragmentManager?.popBackStack()\n        }\n        if (::webViewHolder.isInitialized) {\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                ActionButtonState.LOADING, 100\n            )\n            removeViews(webViewHolder)\n        }\n        doAfterSpecificTime(250) {\n            if (::bottomSheetLayout.isInitialized) {\n                bottomSheetLayout.resizeAnimation(\n                    startHeight = bottomSheetLayout.measuredHeight,\n                    endHeight = sdkLayout.height,\n                    durationTime = 250, isExpanding = false\n                )\n            }\n        }\n\n\n\n        if (::otpViewHolder.isInitialized)\n            if (otpViewHolder.otpView.isVisible) {\n                removeViews(\n                    businessViewHolder,\n                    amountViewHolder,\n                    cardViewHolder,\n                    paymentInlineViewHolder,\n                    otpViewHolder\n                )\n            }\n        if (saveCardSwitchHolder != null) {\n            // removeAllViews()\n            //   addViews(saveCardSwitchHolder)\n            saveCardSwitchHolder?.view?.visibility = View.VISIBLE\n            saveCardSwitchHolder?.view?.mainSwitch?.visibility = View.GONE\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = View.VISIBLE\n        }\n\n        if (::checkoutFragment.isInitialized)\n            checkoutFragment.closeText.visibility = View.GONE\n        println(\"chargeResponse are>>>>\" + chargeResponse?.status)\n        // println(\"saveCardSwitchHolder are>>>>\"+saveCardSwitchHolder)\n        if (response.contains(\"failure\") && chargeResponse == null) {\n\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(\n                false,\n                Color.MAGENTA\n            )\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n                false,\n                \"en\",\n                null,\n                Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n                Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n            )\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.ERROR)\n        }\n        println(\"chargeResponse to handle\" + chargeResponse?.status)\n        when (chargeResponse?.status) {\n            ChargeStatus.CAPTURED, ChargeStatus.AUTHORIZED, ChargeStatus.VALID, ChargeStatus.IN_PROGRESS -> {\n                doAfterSpecificTime(2000) {\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                        ActionButtonState.SUCCESS\n                    )\n                }\n//                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n//                    true,\n//                    \"en\", \"\",\n//                    loadAppThemManagerFromPath(AppColorTheme.ActionButtonBackgroundColor),\n//                    loadAppThemManagerFromPath(AppColorTheme.ActionButtonValidTitleLabelColor),\n//                )\n\n            }\n            ChargeStatus.CANCELLED, ChargeStatus.TIMEDOUT, ChargeStatus.FAILED, ChargeStatus.DECLINED, ChargeStatus.UNKNOWN,\n            ChargeStatus.RESTRICTED, ChargeStatus.ABANDONED, ChargeStatus.VOID, ChargeStatus.INVALID -> {\n                println(\"CANCELLED 2>>>\" + saveCardSwitchHolder?.view?.cardSwitch?.payButton)\n                Handler().postDelayed({\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                        ActionButtonState.ERROR\n                    )\n                }, 400)\n\n                tabAnimatedActionButton?.changeButtonState(\n                    ActionButtonState.ERROR\n                )\n\n                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n                    false,\n                    \"en\",\n                    \"\",\n                    Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n                    Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n                )\n\n            }\n            else -> {\n\n                if (response == \"tokenized\") {\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                        ActionButtonState.SUCCESS\n                    )\n                } else {\n                    println(\"is this called>>>\")\n                    removeAllViews()\n                    if (ThemeManager.currentTheme != null && chargeResponse != null)\n                        tabAnimatedActionButton?.setInValidBackground(\n                            false,\n                            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\"))\n                        )\n                    else\n                        tabAnimatedActionButton?.changeButtonState(\n                            ActionButtonState.ERROR\n                        )\n\n                    if (::businessViewHolder.isInitialized && saveCardSwitchHolder != null) {\n                        addViews(businessViewHolder, saveCardSwitchHolder)\n                        businessViewHolder.view.headerView.constraint.visibility = View.GONE\n                        businessViewHolder.view.topSeparatorLinear.visibility = View.GONE\n                        saveCardSwitchHolder?.view?.visibility = View.VISIBLE\n                        saveCardSwitchHolder?.view?.mainSwitch?.visibility = View.GONE\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(\n                            false,\n                            Color.RED\n                        )\n\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n                            false,\n                            \"en\",\n                            null,\n                            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n                            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n\n                            )\n\n                        /*tabAnimatedActionButton?.setButtonDataSource(\n                             false,\n                             \"en\",\n                             null,\n                             Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n                             Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n\n                             )*/\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                            ActionButtonState.ERROR\n                        )\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isEnabled = true\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isClickable = true\n                    }\n                }\n            }\n        }\n\n        doAfterSpecificTime(4000) {\n            if (chargeResponse != null)\n                tabAnimatedActionButton?.setButtonDataSource(\n                    true,\n                    \"en\",\n                    null,\n                    loadAppThemManagerFromPath(AppColorTheme.ActionButtonBackgroundColor),\n                    loadAppThemManagerFromPath(AppColorTheme.ActionButtonValidTitleLabelColor),\n                )\n            SDKSession.sessionActive = false\n        }\n        SessionManager.setActiveSession(false)\n        tabAnimatedActionButton?.setOnClickListener {\n            // if(::fragmentManager.isInitialized)\n            tabAnimatedActionButton.changeButtonState(ActionButtonState.LOADING)\n            SDKSession.startSDK(\n                (tabAnimatedActionButton.context as AppCompatActivity).supportFragmentManager,\n                tabAnimatedActionButton.context,\n                tabAnimatedActionButton.context as AppCompatActivity\n            )\n        }\n        //removeAllViews()\n        doAfterSpecificTime(4500) {\n            if (::bottomSheetDialog.isInitialized)\n                bottomSheetDialog.dismiss()\n        }\n\n\n    }\n\n\n    override fun displayAsynchronousPaymentView(chargeResponse: Charge) {\n        if (chargeResponse != null) {\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n            removeViews(\n                // businessViewHolder,\n                amountViewHolder,\n                cardViewHolder,\n                paymentInlineViewHolder,\n                saveCardSwitchHolder\n            )\n            /*  businessViewHolder.setDataFromAPI(\n                  selectedPaymentOption.image,\n                  selectedPaymentOption.brand?.name\n              )*/\n            addViews(asynchronousPaymentViewHolder)\n            Handler().postDelayed({\n                translateViewToNewHeight(bottomSheetLayout.measuredHeight, true)\n            }, 400)\n            asynchronousPaymentViewHolder.setDataFromAPI(chargeResponse)\n        }\n    }\n\n    override fun resetViewHolder() {\n        adapter.resetSelection()\n        unActivateActionButton()\n    }\n\n    private fun removeViews(vararg viewHolders: TapBaseViewHolder?) {\n\n        viewHolders.forEach {\n            Handler(Looper.getMainLooper()).postDelayed(Runnable {\n                //  it?.view?.visibility =View.INVISIBLE\n                if (::context.isInitialized) {\n                    val animation = AnimationUtils.loadAnimation(context, R.anim.fade_out)\n                    it?.view?.startAnimation(animation)\n\n                }\n                Handler().postDelayed({\n                    if (::sdkLayout.isInitialized) {\n                        //it?.view?.visibility = View.INVISIBLE\n                        sdkLayout.removeView(it?.view)\n\n                    }\n                }, 150)\n\n\n            }, 0)\n        }\n\n    }\n\n\n    private fun addViews(vararg viewHolders: TapBaseViewHolder?) {\n\n        viewHolders.forEach {\n            Handler(Looper.getMainLooper()).postDelayed(Runnable {\n                // it?.view?.visibility =View.VISIBLE\n                if (::context.isInitialized) {\n                    val animation = AnimationUtils.loadAnimation(context, R.anim.fade_in)\n                    it?.view?.startAnimation(animation)\n                }\n\n                Handler().postDelayed({\n                    if (::sdkLayout.isInitialized) {\n                        // it?.view?.visibility = View.VISIBLE\n                        sdkLayout.removeView(it?.view)\n                        sdkLayout.addView(it?.view)\n\n                    }\n                }, 200)\n\n\n            }, 0)\n            BottomSheetBehavior.STATE_HALF_EXPANDED\n        }\n\n\n    }\n\n\n    private fun unActivateActionButton() {\n        val payString: String\n\n        when (PaymentDataSource.getTransactionMode()) {\n            TransactionMode.TOKENIZE_CARD -> payString = LocalizationManager.getValue(\n                \"pay\",\n                \"ActionButton\"\n            )\n            //TODO stopped since checkout won't have SAVE_CARD -so not available in Localization\n            /*TransactionMode.SAVE_CARD -> payString = LocalizationManager.getValue(\n                \"savecard\",\n                \"ActionButton\"\n            )*/\n            TransactionMode.SAVE_CARD -> payString = \"SAVE CARD\"\n            else -> payString = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n        }\n\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n            false,\n            LocalizationManager.getLocale(context).toString(),\n            if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                payString + \" \" + currentCurrencySymbol + \" \" + selectedAmount\n            } else {\n                payString + \" \" + currentCurrencySymbol + \" \" + currentAmount\n            },\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n        )\n\n        // saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.IDLE)\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isActivated = false\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isClickable = false\n    }\n\n\n    fun resetCardSelection() {\n        adapter.resetSelection()\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onCardSelectedAction(isSelected: Boolean, savedCardsModel: Any?) {\n\n        /**\n         * Clear card input text\n         */\n        println(\"focussss\" + paymentInlineViewHolder.tapCardInputView.hasFocus())\n        println(\"isSelected\" + isSelected)\n        paymentInlineViewHolder.tapCardInputView.clear()\n        paymentInlineViewHolder.clearCardInputAction()\n\n        println(\"savedCardsModel\" + savedCardsModel)\n        unActivateActionButton()\n        when (savedCardsModel) {\n            is SavedCard -> {\n                Bugfender.d(\n                    CustomUtils.tagEvent,\n                    \"Saved card selected :\" + savedCardsModel.lastFour + \"&\" + savedCardsModel.id\n                )\n                paymentInlineViewHolder.setDataForSavedCard(\n                    savedCardsModel,\n                    CardInputUIStatus.SavedCard\n                )\n\n                isSavedCardSelected = true\n                Bugfender.d(\n                    CustomUtils.tagEvent,\n                    \"Payment scheme selected: title :\" + savedCardsModel?.brand + \"& ID :\" + savedCardsModel.paymentOptionIdentifier\n                )\n                activateActionButton(cardBrandString = savedCardsModel?.brand.rawValue)\n            }\n            else -> {\n                if (savedCardsModel != null) {\n                    println(\"paymentType\" + (savedCardsModel as PaymentOption).brand)\n                    if ((savedCardsModel as PaymentOption).paymentType == PaymentType.WEB) {\n                        //  paymentInlineViewHolder.view.alpha = 0.95f\n\n                        PaymentDataSource.setWebViewType(WebViewType.REDIRECT)\n                        activateActionButton((savedCardsModel as PaymentOption))\n                        setPayButtonAction(PaymentType.WEB, savedCardsModel)\n                    } else if ((savedCardsModel as PaymentOption).paymentType == PaymentType.GOOGLE_PAY) {\n                        removeViews(amountViewHolder, cardViewHolder, paymentInlineViewHolder)\n                        checkoutFragment.checkOutActivity?.handleGooglePayApiCall()\n                        activateActionButtonForGPay()\n                        //setPayButtonAction(PaymentType.WEB, savedCardsModel)\n                        PaymentDataSource.setWebViewType(WebViewType.REDIRECT)\n                    }\n                    Bugfender.d(\n                        CustomUtils.tagEvent,\n                        \"Payment scheme selected: title :\" + (savedCardsModel as PaymentOption).brand + \"& ID :\" + (savedCardsModel as PaymentOption).id\n                    )\n\n\n                } else\n\n                    displayGoPayLogin()\n            }\n        }\n    }\n\n    private fun activateActionButtonForGPay() {\n        val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isActivated\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n            true,\n            \"en\",\n            \"\",\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.paymentBackgroundColor\")),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.titleLabelColor\")),\n        )\n\n        saveCardSwitchHolder?.view?.cardSwitch?.showOnlyPayButton()\n\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isActivated\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n    }\n\n\n    private fun activateActionButton(\n        paymentOptObject: PaymentOption? = null,\n        cardBrandString: String? = null\n    ) {\n        val payStringButton: String\n        when (PaymentDataSource.getTransactionMode()) {\n            TransactionMode.TOKENIZE_CARD -> payStringButton = LocalizationManager.getValue(\n                \"pay\",\n                \"ActionButton\"\n            )\n            //TODO stopped since checkout won't have SAVE_CARD -so not available in Localization\n            /* TransactionMode.SAVE_CARD -> payString = LocalizationManager.getValue(\n                 \"savecard\",\n                 \"ActionButton\"\n             )*/  TransactionMode.SAVE_CARD -> payStringButton = \"SAVE CARD\"\n            else -> {\n                val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n                val nowString: String = LocalizationManager.getValue(\"now\", \"ActionButton\")\n\n                payStringButton = payString + \" \" + nowString\n            }\n        }\n\n\n        println(\"cardBrandString before \" + cardBrandString)\n        logicTogetButtonStyle(paymentOptObject, payStringButton, cardBrandString)\n\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun logicTogetButtonStyle(\n        paymentOptObject: PaymentOption?,\n        payString: String,\n        cardBrandString: String?\n    ) {\n        println(\"paymentOptObject is\" + paymentOptObject?.buttonStyle?.background?.darkModel?.backgroundColors?.size)\n        var selectedPayOpt: PaymentOption? = null\n\n        if (cardBrandString != null) {\n            selectedPayOpt = logicTogetPayOptions(cardBrandString)\n\n        } else selectedPayOpt = paymentOptObject\n\n        var colorBackGround: String? = null\n        var intColorArray: IntArray? = null\n        if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains(\"dark\")) {\n            if (selectedPayOpt?.buttonStyle?.background?.darkModel?.backgroundColors?.size == 1) {\n                colorBackGround =\n                    selectedPayOpt?.buttonStyle?.background?.darkModel?.backgroundColors?.get(0)\n            }\n            intColorArray = null\n\n        } else {\n            if (selectedPayOpt?.buttonStyle?.background?.lightModel?.backgroundColors?.size == 1) {\n                colorBackGround =\n                    selectedPayOpt?.buttonStyle?.background?.lightModel?.backgroundColors?.get(0)\n                intColorArray = null\n            } else {\n\n                if (selectedPayOpt?.buttonStyle?.background?.lightModel?.backgroundColors?.size == 2) {\n                    val startColor =\n                        selectedPayOpt?.buttonStyle?.background?.lightModel?.backgroundColors?.get(1)\n                            ?.replace(\"0x\", \"#\")\n\n                    val endColor =\n                        selectedPayOpt?.buttonStyle?.background?.lightModel?.backgroundColors?.get(0)\n                            ?.replace(\"0x\", \"#\")\n\n                    intColorArray =\n                        intArrayOf(Color.parseColor(startColor), Color.parseColor(endColor))\n                    colorBackGround = \"0\"\n\n                } else if (paymentOptObject?.buttonStyle?.background?.lightModel?.backgroundColors?.size == 3) {\n                    val startColor =\n                        selectedPayOpt?.buttonStyle?.background?.lightModel?.backgroundColors?.get(2)\n                            ?.replace(\"0x\", \"#\")\n\n                    val middleColor =\n                        selectedPayOpt?.buttonStyle?.background?.lightModel?.backgroundColors?.get(1)\n                            ?.replace(\"0x\", \"#\")\n                    val endColor =\n                        selectedPayOpt?.buttonStyle?.background?.lightModel?.backgroundColors?.get(0)\n                            ?.replace(\"0x\", \"#\")\n\n                    intColorArray = intArrayOf(\n                        Color.parseColor(startColor),\n                        Color.parseColor(middleColor),\n                        Color.parseColor(endColor)\n                    )\n                    colorBackGround = \"0\"\n\n                }\n\n            }\n\n\n        }\n\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n            true,\n            LocalizationManager.getLocale(context).language,\n            payString,\n            if (colorBackGround.equals(\"0\") || colorBackGround == null) 0 else Color.parseColor(\n                colorBackGround\n            ),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.titleLabelColor\")),\n            intColorArray\n        )\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.removeAllViews()\n\n        Handler().postDelayed({\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.getImageViewUrl(\n                getAssetName(\n                    selectedPayOpt\n                )\n            )\n                ?.let { saveCardSwitchHolder?.view?.cardSwitch?.payButton?.addChildView(it) }\n            saveCardSwitchHolder?.view?.cardSwitch?.showOnlyPayButton()\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isActivated\n        }, 500)\n\n\n    }\n\n    private fun logicTogetPayOptions(cardBrandString: String?): PaymentOption? {\n        var selectedPayOption: PaymentOption? = null\n\n        for (i in 0 until paymentOptionsResponse.paymentOptions?.size) {\n            if (paymentOptionsResponse.paymentOptions[i].brand == cardBrandString?.toUpperCase()) {\n                selectedPayOption = paymentOptionsResponse.paymentOptions[i]\n            }\n        }\n\n        return selectedPayOption\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    @SuppressLint(\"WrongConstant\")\n    private fun onClickRedirect(savedCardsModel: Any) {\n        selectedPaymentOption = savedCardsModel as PaymentOption\n        cardViewModel.processEvent(\n            CardViewEvent.ChargeEvent,\n            this,\n            selectedPaymentOption,\n            null,\n            null,\n            null\n        )\n\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n        if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains(\"dark\")) {\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(\n                backgroundColor = Color.parseColor(\n                    savedCardsModel.buttonStyle?.background?.darkModel?.baseColor\n                )\n            )\n\n        } else saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(\n            backgroundColor = Color.parseColor(savedCardsModel.buttonStyle?.background?.lightModel?.baseColor)\n        )\n\n        saveCardSwitchHolder?.view?.mainSwitch?.mainTextSave?.visibility = View.INVISIBLE\n\n        //Commented to try the flow of redirect\n        removeViews(\n            //    businessViewHolder,\n            amountViewHolder,\n            cardViewHolder,\n            paymentInlineViewHolder,\n            tabAnimatedActionButtonViewHolder\n        )\n        businessViewHolder.view.headerView.constraint.visibility = View.GONE\n        Handler().postDelayed({\n            if (::bottomSheetLayout.isInitialized)\n                translateViewToNewHeight(bottomSheetLayout.measuredHeight, true)\n        }, 400)\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun onClickCardPayment() {\n        println(\"onClickCardPayment\")\n\n\n        CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n        saveCardSwitchHolder?.view?.mainSwitch?.visibility = View.GONE\n\n\n        with(cardViewHolder.view.mainChipgroup) {\n            val viewsToFadeOut = mutableListOf<View>(chipsRecycler, groupAction, groupName)\n            if (paymentInlineViewHolder.cardInputUIStatus == CardInputUIStatus.NormalCard) {\n                viewsToFadeOut.add(amountViewHolder.view)\n            }\n            doAfterSpecificTime(time = 500L) {\n                viewsToFadeOut.addFadeOutAnimationToViews(onAnimationEnd = {})\n                //doAfterSpecificTime {\n                paymentInlineViewHolder.paymentInputContainer.applyBluryToView()\n                //  }\n            }\n\n        }\n\n\n        if (paymentInlineViewHolder.cardInputUIStatus == CardInputUIStatus.SavedCard) {\n            cardViewHolder.view.cardInfoHeaderText.visibility = View.VISIBLE\n            cardViewHolder.view.cardInfoHeaderText.text =\n                LocalizationManager.getValue(\"savedCardSectionTitle\", \"TapCardInputKit\")\n        }\n\n\n        if (isSavedCardSelected == true) {\n            cardViewModel.processEvent(\n                CardViewEvent.CreateTokenExistingCardEvent,\n                this,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                paymentInlineViewHolder.getSavedCardData()\n            )\n\n        } else {\n            cardViewModel.processEvent(\n                CardViewEvent.CreateTokenEvent,\n                this,\n\n                null,\n                null,\n                paymentInlineViewHolder.getCard(),\n                null\n            )\n        }\n\n\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onDeleteIconClicked(\n        stopAnimation: Boolean,\n        itemId: Int,\n        cardId: String,\n        maskedCardNumber: String,\n        arrayListSavedCardSize: ArrayList<SavedCard>,\n        selectedViewToBeDeleted: ViewGroup,\n        viewtoBeBlur: View,\n        position: Int\n    ) {\n        this.cardId = cardId\n        selectedViewToBeDeletedFromCardViewHolder = selectedViewToBeDeleted\n        viewToBeBlurCardViewHolder = viewtoBeBlur\n        selectedItemsDel = itemId\n        cardIDToBeDeleted = position\n        if (stopAnimation) {\n            stopDeleteActionAnimation(itemId, maskedCardNumber, arrayListSavedCardSize)\n        } else {\n            cardViewHolder.view.mainChipgroup.groupAction?.text = LocalizationManager.getValue(\n                \"close\",\n                \"Common\"\n            )\n            deleteCard = false\n        }\n\n    }\n\n    private fun stopDeleteActionAnimation(\n        itemId: Int,\n        maskedCardNumber: String,\n        arrayListSavedCardSizes: ArrayList<SavedCard>\n    ) {\n        isShaking.value = false\n        cardViewHolder.view.mainChipgroup.groupAction?.text = LocalizationManager.getValue(\n            \"GatewayHeader\",\n            \"HorizontalHeaders\",\n            \"rightTitle\"\n        )\n        val title: String = LocalizationManager.getValue(\"title\", \"DeleteCard\")\n        val message: String = LocalizationManager.getValue(\n            \"message\",\n            \"DeleteCard\"\n        )\n        CustomUtils.showDialog(\n            \"$title\",\n            \"${message.replace(\"%@\", maskedCardNumber)} \",\n            context,\n            4,\n            this, null, null, false\n        )\n\n        selectedItemsDel = itemId\n        deleteCard = true\n        this.arrayListSavedCardSize = arrayListSavedCardSizes\n\n    }\n\n    override fun onGoPayLogoutClicked(isClicked: Boolean) {\n        if (isClicked) CustomUtils.showDialog(\n            LocalizationManager.getValue(\"goPaySignOut\", \"GoPay\"), LocalizationManager.getValue(\n                \"goPaySaveCards\",\n                \"GoPay\"\n            ), context, 2, this, null, null, false\n        )\n    }\n\n    override fun onEditClicked(isClicked: Boolean) {\n        if (isClicked) {\n            adapter.updateShaking(true)\n            goPayAdapter.updateShaking(true)\n        } else {\n            adapter.updateShaking(false)\n            goPayAdapter.updateShaking(false)\n        }\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onGooglePayClicked(isClicked: Boolean) {\n        println(\"onGooglePayClicked>>>\" + isClicked)\n        checkoutFragment.checkOutActivity?.handleGooglePayApiCall()\n\n    }\n\n\n    override fun onPayCardSwitchAction(\n        isCompleted: Boolean,\n        paymentType: PaymentType,\n        cardBrandString: String?\n    ) {\n        println(\"isCompleted???\" + isCompleted)\n        //todo add validations from api when cvv is valid the only  activate ActionButton\n        if (isCompleted) {\n            businessViewHolder.view?.headerView.constraint.visibility = View.VISIBLE\n            saveCardSwitchHolder?.view?.mainSwitch?.visibility = View.GONE\n            saveCardSwitchHolder?.view?.mainSwitch?.switchSaveMobile?.visibility = View.GONE\n            saveCardSwitchHolder?.setSwitchToggleData(paymentType)\n            loyaltyViewHolder.view.loyaltyView?.constraintLayout?.visibility = View.VISIBLE\n            // loyatFlag = true\n            /**\n             * @TODO:  Will be enabled when coming from API directly\n             */\n            //  initLoyaltyView() // Will be enabled when coming from API directly\n            activateActionButton(cardBrandString = cardBrandString)\n            paymentActionType = paymentType\n        } else {\n//            saveCardSwitchHolder11?.view?.mainSwitch?.visibility = View.GONE\n            saveCardSwitchHolder?.view?.mainSwitch?.switchSaveMobile?.visibility = View.GONE\n            saveCardSwitchHolder?.setSwitchToggleData(paymentType)\n            unActivateActionButton()\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onPayCardCompleteAction(\n        isCompleted: Boolean,\n        paymentType: PaymentType,\n        cardNumber: String,\n        expiryDate: String,\n        cvvNumber: String, holderName: String?, cardBrandString: String?\n    ) {\n        activateActionButton(cardBrandString = cardBrandString)\n        setPayButtonAction(paymentType, null)\n\n    }\n\n    override fun onPaymentCardIsLoyaltyCard(isLoyaltyCard: Boolean) {\n        //Todo logic for loyalty card\n    }\n\n    // Override function to open NFC fragment and scan the card via NFC.\n    override fun onClickNFC() {\n\n        removeViews(\n            //businessViewHolder,\n            // amountViewHolder,\n            cardViewHolder,\n            saveCardSwitchHolder,\n            paymentInlineViewHolder,\n            otpViewHolder,\n            goPaySavedCardHolder,\n            goPayViewsHolder\n        )\n        //  addViews(businessViewHolder, amountViewHolder)\n        frameLayout.visibility = View.VISIBLE\n        fragmentManager\n            .beginTransaction()\n            .replace(R.id.fragment_container_nfc_lib, nfcFragment)\n            .commit()\n        /* fragmentManager.beginTransaction().remove(InlineViewFragment()).replace(\n             R.id.fragment_container_nfc_lib,\n             nfcFragment\n         ).commit()*/\n        isNFCOpened = true\n        checkoutFragment.isNfcOpened = true\n        amountViewHolder.changeGroupAction(false)\n        val bottomSheet: FrameLayout? =\n            bottomSheetDialog.findViewById(com.google.android.material.R.id.design_bottom_sheet)\n        BottomSheetBehavior.from(bottomSheet as View).state = BottomSheetBehavior.STATE_EXPANDED\n        Handler().postDelayed({\n            if (::bottomSheetLayout.isInitialized)\n                translateViewToNewHeight(bottomSheetLayout.measuredHeight, false)\n        }, 400)\n        checkSelectedAmountInitiated()\n    }\n\n\n    // Override function to open card Scanner and scan the card.\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onClickCardScanner(scannerClicked: Boolean) {\n        //setSlideAnimation()\n        removeViews(\n            //businessViewHolder,\n            // amountViewHolder,\n            cardViewHolder,\n            saveCardSwitchHolder,\n            paymentInlineViewHolder,\n            otpViewHolder,\n            goPaySavedCardHolder,\n            goPayViewsHolder\n        )\n        amountViewHolder.readyToScanVisibility(scannerClicked)\n        // addViews(businessViewHolder, amountViewHolder)\n        inLineCardLayout.visibility = View.VISIBLE\n        FrameManager.getInstance().frameColor = Color.WHITE\n        // Use\n        //  val bottomSheet: FrameLayout? = bottomSheetDialog.findViewById(com.google.android.material.R.id.design_bottom_sheet)\n        //  BottomSheetBehavior.from(bottomSheet as View).state = BottomSheetBehavior.STATE_EXPANDED\n        //   bottomSheetDialog.behavior.state = BottomSheetBehavior.STATE_EXPANDED\n\n        fragmentManager\n            .beginTransaction()\n            .replace(R.id.inline_container, inlineCamerFragment)\n            .commit()\n\n        isInlineOpened = true\n        checkoutFragment.isScannerOpened = true\n\n        amountViewHolder.changeGroupAction(false)\n        val bottomSheet: FrameLayout? =\n            bottomSheetDialog.findViewById(com.google.android.material.R.id.design_bottom_sheet)\n        BottomSheetBehavior.from(bottomSheet as View).state = BottomSheetBehavior.STATE_EXPANDED\n        Handler().postDelayed({\n            if (::bottomSheetLayout.isInitialized)\n                translateViewToNewHeight(bottomSheetLayout.measuredHeight, false)\n        }, 400)\n        checkSelectedAmountInitiated()\n    }\n\n    private fun checkSelectedAmountInitiated() {\n        if (this::selectedAmount.isInitialized && this::selectedCurrency.isInitialized) {\n            amountViewHolder.updateSelectedCurrency(\n                displayItemsOpen,\n                selectedAmount, selectedCurrency,\n                currentAmount, currentCurrency, currentCurrencySymbol\n            )\n        }\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onCurrencyClicked(\n        currencySelected: String,\n        currencyRate: BigDecimal,\n        totalSelectedAmount: BigDecimal,\n        previousSelectedCurrency: String,\n        selectedCurrencySymbol: String\n    ) {\n\n        currencyOldRate = currencyRate\n        lastSelectedCurrency = previousSelectedCurrency\n        if (::unModifiedItemList.isInitialized)\n            println(\"unModifiedItemList\" + unModifiedItemList)\n        if (::itemList.isInitialized) {\n            for (i in itemList.indices) {\n                itemList[i].amount = unModifiedItemList[i].amount?.times(currencyRate)\n                //itemList[i].totalAmount = currencyOldRate?.div(currencyRate)\n                itemList[i].totalAmount =\n                    unModifiedItemList[i].getPlainAmount()?.times(currencyRate)\n\n                // if( currencySelected !=\"KWD\" && lastSelectedCurrency !=\"KWD\"){\n                /*   if( currencySelected !=PaymentDataSource.getCurrency()?.isoCode && lastSelectedCurrency !=PaymentDataSource.getCurrency()?.isoCode){\n                     //   itemList[i].amountPerUnit = currencyOldRate?.div(currencyRate)!!\n                        itemList[i].amountPerUnit = unModifiedItemList[i].amountPerUnit.times(currencyRate)\n                            //itemList[i].totalAmount = currencyOldRate?.div(currencyRate)\n                       itemList[i].totalAmount =  unModifiedItemList[i].totalAmount?.times(currencyRate)\n\n\n\n                 //  }  else if(currencySelected == PaymentDataSource.getSelectedCurrency()){\n                   }  else if(currencySelected == PaymentDataSource.getCurrency()?.isoCode){\n                       // currentCalculatedAmount = itemList[i].amountPerUnit\n                       // itemList[i].amountPerUnit = (currencyOldRate?.div(currencyRate)!!)\n                        itemList[i].amountPerUnit = unModifiedItemList[i].amountPerUnit.div(currencyRate)\n                       itemList[i].totalAmount = unModifiedItemList[i].totalAmount?.div(currencyRate)\n\n\n                   }*/\n                println(\"item per unit >>\" + itemList[i].amount)\n\n\n            }\n\n            itemsViewHolder.view.itemRecylerView.adapter = itemAdapter\n            itemAdapter.updateAdapterData(itemList)\n\n        }\n\n        //  itemList[i].amount = (list[i].amount.toLong())\n        //  itemList[i].currency = currencySelected\n\n        selectedAmount = CurrencyFormatter.currencyFormat(totalSelectedAmount.toString())\n        selectedCurrency = currencySelected\n        selectedTotalAmount = selectedAmount\n        println(\"selectedAmount final>>\" + selectedAmount)\n        println(\"selectedCurrency final>>\" + selectedCurrency.length)\n        println(\"currentAmount final>>\" + currentAmount)\n        println(\"currentCurrency final>>\" + currentCurrency)\n        println(\"selectedCurrencySymbol final>>\" + selectedCurrencySymbol)\n        println(\"currentCurrencySymbol final>>\" + currentCurrencySymbol)\n        if (selectedCurrencySymbol.length == 2) {\n            amountViewHolder.updateSelectedCurrency(\n                displayItemsOpen,\n                selectedAmount, selectedCurrency,\n                currentAmount, currentCurrency, selectedCurrencySymbol\n            )\n            //  PaymentDataSource.setSelectedCurrency(selectedCurrency = selectedCurrency, null) // changed from null to symbol\n            PaymentDataSource.setSelectedCurrency(selectedCurrency, selectedCurrencySymbol)\n            //  PaymentDataSource.setSelectedCurrency(selectedCurrency = selectedCurrencySymbol, selectedCurrencySymbol) //commented\n\n        } else {\n            amountViewHolder.updateSelectedCurrency(\n                displayItemsOpen,\n                selectedAmount, selectedCurrency,\n                currentAmount, finalCurrencySymbol, selectedCurrencySymbol\n            )\n            PaymentDataSource.setSelectedCurrency(selectedCurrency, selectedCurrencySymbol)\n\n        }\n        currentCurrencySymbol = selectedCurrencySymbol\n\n\n        // PaymentDataSource.setSelectedCurrency(selectedCurrency = selectedCurrency)\n        PaymentDataSource.setSelectedAmount(currencyRate)\n        if (paymentInlineViewHolder.tapCardInputView.isNotEmpty()) {\n            paymentInlineViewHolder.tapCardInputView.clear()\n            paymentInlineViewHolder.tapAlertView?.fadeVisibility(View.GONE, 500)\n            paymentInlineViewHolder.acceptedCardText.visibility = View.VISIBLE\n            paymentInlineViewHolder.tabLayout.resetBehaviour()\n        }\n\n        adapter.resetSelection()\n\n        if (::selectedCurrency.isInitialized) {\n            Bugfender.d(CustomUtils.tagEvent, \"Currency changed to : \" + selectedCurrencySymbol)\n            filterViewModels(selectedCurrency)\n        } else {\n            filterViewModels(currentCurrency)\n            //Bugfender.d(\"Currency changed to : \"+currentCurrency ,CustomUtils.tagEvent)\n\n        }\n\n    }\n\n    fun cancelledCall() {\n        println(\"cancelledCall from webview\")\n    }\n\n    @SuppressLint(\"ResourceType\")\n    override fun redirectLoadingFinished(\n        done: Boolean,\n        charge: Charge?,\n        contextSDK: Context?\n    ) {\n        //  checkoutFragment.dismiss()\n        println(\"done val\" + done + \"chargeResponse status\" + PaymentDataSource.getChargeOrAuthorize())\n        println(\"saveCardSwitchHolder val\" + saveCardSwitchHolder)\n        println(\"redirect val\" + charge?.response)\n        println(\"gatewayResponse val\" + charge?.gatewayResponse)\n\n        businessViewHolder = contextSDK?.let { BusinessViewHolder(it, this) }!!\n        // saveCardSwitchHolder = contextSDK.let { SwitchViewHolder(it,this) }\n        removeViews(businessViewHolder)\n        if (::webFrameLayout.isInitialized) {\n            if (fragmentManager.findFragmentById(R.id.webFrameLayout) != null)\n                fragmentManager.beginTransaction()\n                    .hide(fragmentManager.findFragmentById(R.id.webFrameLayout)!!)\n                    .commit()\n            webFrameLayout.visibility = View.GONE\n            sdkLayout.visibility = View.VISIBLE\n            supportFragmentManager?.popBackStack()\n\n        }\n        //  sdkLayout.visibility =View.VISIBLE\n        if (::amountViewHolder.isInitialized && ::cardViewHolder.isInitialized && ::cardViewHolder.isInitialized && ::paymentInlineViewHolder.isInitialized)\n            removeViews(\n                businessViewHolder,\n                amountViewHolder,\n                cardViewHolder,\n                paymentInlineViewHolder\n            )\n\n\n        Handler().postDelayed({\n            // checkoutFragment.dismiss()\n            /*if (::bottomSheetDialog.isInitialized)\n                bottomSheetDialog.dismiss()*/\n\n        }, 3000)\n\n\n    }\n\n    override fun resultObtained(done: Boolean, contextSDK: Context?) {\n\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun setPayButtonAction(paymentTypeEnum: PaymentType, savedCardsModel: Any?) {\n\n        /**\n         * payment from onSelectPaymentOptionActionListener\n         */\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setOnClickListener {\n            when (paymentTypeEnum) {\n                PaymentType.SavedCard -> {\n                    /**\n                     * Note PaymentType savedcard is changed to Card for saved card payments for extra fees and payment options*/\n                    if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                        checkForExtraFees(\n                            selectedAmount,\n                            selectedCurrency,\n                            PaymentType.CARD,\n                            savedCardsModel,\n                            PaymentDataProvider().getSelectedCurrency()\n                        )\n\n                    } else checkForExtraFees(\n                        currentAmount,\n                        currentCurrency,\n                        PaymentType.CARD,\n                        savedCardsModel,\n                        PaymentDataProvider().getSelectedCurrency()\n                    )\n\n                    // setDifferentPaymentsAction(paymentTypeEnum,savedCardsModel)\n                }\n                PaymentType.WEB -> {\n                    PaymentDataSource.setWebViewType(WebViewType.REDIRECT)\n                    if (savedCardsModel != null) {\n                        if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                            checkForExtraFees(\n                                selectedAmount,\n                                selectedCurrency,\n                                paymentTypeEnum,\n                                savedCardsModel,\n                                PaymentDataProvider().getSelectedCurrency()\n                            )\n                        } else checkForExtraFees(\n                            currentAmount,\n                            currentCurrency,\n                            paymentTypeEnum,\n                            savedCardsModel,\n                            PaymentDataProvider().getSelectedCurrency()\n                        )\n                    }\n                }\n                PaymentType.CARD -> {\n                    //activateActionButton()\n                    if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                        checkForExtraFees(\n                            selectedAmount,\n                            selectedCurrency,\n                            paymentTypeEnum,\n                            savedCardsModel,\n                            PaymentDataProvider().getSelectedCurrency()\n                        )\n                    } else checkForExtraFees(\n                        currentAmount,\n                        currentCurrency,\n                        paymentTypeEnum,\n                        savedCardsModel,\n                        PaymentDataProvider().getSelectedCurrency()\n                    )\n\n\n                }\n                PaymentType.telecom -> {\n                    checkForExtraFees(\n                        currentAmount,\n                        currentCurrency,\n                        paymentTypeEnum,\n                        savedCardsModel,\n                        PaymentDataProvider().getSelectedCurrency()\n                    )\n                }\n            }\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun checkForExtraFees(\n        selectedAmount: String,\n        selectedCurrency: String,\n        paymentTypeEnum: PaymentType,\n        savedCardsModel: Any?,\n        amountedCurrency: AmountedCurrency?\n    ) {\n        var extraFees: java.util.ArrayList<ExtraFee>? = null\n        var paymentOption: PaymentOption? = null\n\n\n        if (paymentTypeEnum == PaymentType.WEB) {\n            savedCardsModel as PaymentOption\n            extraFees = savedCardsModel.extraFees\n            fee = calculateExtraFeesAmount(savedCardsModel as PaymentOption, amountedCurrency)\n\n        } else {\n            for (i in paymentOptionsResponse.paymentOptions.indices) {\n                if (paymentOptionsResponse.paymentOptions[i].paymentType == paymentTypeEnum) {\n                    extraFees = paymentOptionsResponse.paymentOptions[i].extraFees\n                    paymentOption = paymentOptionsResponse.paymentOptions[i]\n                }\n            }\n            fee = calculateExtraFeesAmount(paymentOption, amountedCurrency)\n\n        }\n        val totalAmount: String\n        if (selectedTotalAmount != null) {\n            println(\"selectedTotalAmount is\" + selectedTotalAmount)\n            if (selectedAmount.contains(\",\")) {\n                totalAmount = CurrencyFormatter.currencyFormat(\n                    fee?.add(BigDecimal(selectedAmount.replace(\",\", \"\").toDouble())).toString()\n                )\n\n            } else\n                totalAmount = CurrencyFormatter.currencyFormat(\n                    fee?.add(\n                        selectedTotalAmount?.toDouble()?.let { BigDecimal.valueOf(it) }).toString()\n                )\n        } else {\n            totalAmount = CurrencyFormatter.currencyFormat(\n                fee?.add(\n                    amountedCurrency?.amount?.toDouble()?.let { BigDecimal.valueOf(it) }).toString()\n            )\n        }\n\n        if (calculateExtraFeesAmount(\n                extraFees,\n                paymentOptionsResponse.supportedCurrencies,\n                PaymentDataProvider().getSelectedCurrency()\n            )!! > BigDecimal.ZERO\n        ) {\n            showExtraFees(\n                totalAmount.toString(),\n                fee.toString(),\n                paymentTypeEnum,\n                savedCardsModel,\n                selectedCurrency\n            )\n        } else if (savedCardsModel != null) {\n            if (paymentTypeEnum == PaymentType.CARD || paymentTypeEnum == PaymentType.SavedCard) {\n                savedCardsModel as SavedCard\n                if (savedCardsModel.paymentOptionIdentifier.toInt() == 3 || savedCardsModel.paymentOptionIdentifier.toInt() == 4) {\n                    setDifferentPaymentsAction(PaymentType.SavedCard, savedCardsModel)\n                }\n\n            } else setDifferentPaymentsAction(paymentTypeEnum, savedCardsModel)\n        } else setDifferentPaymentsAction(paymentTypeEnum, savedCardsModel)\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun payActionSavedCard(savedCardsModel: SavedCard?) {\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n            ActionButtonState.LOADING\n        )\n        startSavedCardPaymentProcess(savedCardsModel as SavedCard)\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.getImageView(\n            R.drawable.loader,\n            8\n        ) {\n\n\n        }?.let { it1 ->\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.addChildView(\n                it1\n            )\n        }\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun startSavedCardPaymentProcess(savedCard: SavedCard?) {\n        val createTokenSavedCard =\n            CreateTokenSavedCard(savedCard?.id, PaymentDataSource.getCustomer().identifier)\n        cardViewModel.processEvent(\n            CardViewEvent.CreateTokenExistingCardEvent,\n            this,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            createTokenSavedCard\n        )\n    }\n\n    private fun removeAllViews() {\n        if (::businessViewHolder.isInitialized && ::amountViewHolder.isInitialized && ::cardViewHolder.isInitialized && ::paymentInlineViewHolder.isInitialized &&\n            ::goPayViewsHolder.isInitialized && ::otpViewHolder.isInitialized\n        )\n            removeViews(\n                businessViewHolder,\n                amountViewHolder,\n                cardViewHolder,\n                paymentInlineViewHolder,\n                saveCardSwitchHolder,\n                goPayViewsHolder,\n                otpViewHolder,\n                tabAnimatedActionButtonViewHolder\n            )\n\n        if (::webViewHolder.isInitialized) removeViews(webViewHolder)\n    }\n\n    private fun setAllSeparatorTheme() {\n\n        val borderColor: String = ThemeManager.getValue(\"poweredByTap.backgroundColor\")\n        var borderOpacityVal: String? = null\n        var newBorderColor: String? = null\n        borderOpacityVal = borderColor.substring(borderColor.length - 2)\n        newBorderColor = \"#\" + borderOpacityVal + borderColor.substring(0, borderColor.length - 2)\n            .replace(\"#\", \"\")\n\n        sdkLayout.setBackgroundColor(Color.parseColor(newBorderColor))\n        sdkLayout.let { it1 ->\n            setTopBorders(\n                it1,\n                35f,// corner raduis\n                0.0f,\n                Color.parseColor(\n                    newBorderColor\n                ),// stroke color\n                Color.parseColor(\n                    newBorderColor\n                ),// tint color\n                Color.parseColor(\n                    newBorderColor\n                )\n            )\n        }\n        val separatorViewTheme = SeparatorViewTheme()\n        separatorViewTheme.strokeColor =\n            Color.parseColor(ThemeManager.getValue(\"tapSeparationLine.backgroundColor\"))\n        separatorViewTheme.strokeHeight = ThemeManager.getValue(\"tapSeparationLine.height\")\n        businessViewHolder.view.topSeparatorLinear.topSeparator.setTheme(separatorViewTheme)\n\n        if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains(\"dark\")) {\n            amountViewHolder.view.amountView_separator.visibility = View.GONE\n        } else amountViewHolder.view.amountView_separator.visibility = View.VISIBLE\n        amountViewHolder.view.amountView_separator.setTheme(separatorViewTheme)\n        //  cardViewHolder.view.tapSeparatorViewLinear1.separator_1.setTheme(separatorViewTheme)\n        goPaySavedCardHolder.view.tapSeparatorViewLinear.separator_.setTheme(separatorViewTheme)\n        /**\n         * set separator background\n         */\n        businessViewHolder.view.topSeparatorLinear.setBackgroundColor(\n            (Color.parseColor(\n                ThemeManager.getValue(\n                    \"merchantHeaderView.backgroundColor\"\n                )\n            ))\n        )\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onRecognitionSuccess(card: TapCard?) {\n//to be added for unembossed cards\n        /* if (card != null) {\n             if (card.cardNumber != null && card.cardHolder != null && card.expirationDate != null) {\n                onReadSuccess(card)\n             }\n         }*/\n\n        println(\"are you called here!!\")\n\n\n    }\n\n    override fun onRecognitionFailure(error: String?) {\n\n    }\n\n\n    private fun removeInlineScanner() {\n        if (isInlineOpened) {\n            if (fragmentManager.findFragmentById(R.id.inline_container) != null) {\n                fragmentManager.beginTransaction()\n                    .remove(fragmentManager?.findFragmentById(R.id.inline_container)!!)\n                    .commit()\n            }\n            // inlineCamerFragment.onDestroy()\n            isInlineOpened = false\n            checkoutFragment.isScannerOpened = false\n            inLineCardLayout.visibility = View.GONE\n            amountViewHolder.readyToScanVisibility(false)\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                ActionButtonState.RESET\n            )\n\n        }\n\n    }\n\n    fun handleScanFailedResult(error: String?) {\n        println(\"handleScanFailedResult card is\")\n        removeInlineScanner()\n        //  removeViews(amountViewHolder, businessViewHolder)\n        addViews(\n            // businessViewHolder,\n            //  amountViewHolder,\n            cardViewHolder,\n            paymentInlineViewHolder,\n            saveCardSwitchHolder\n        )\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun handleScanSuccessResult(card: TapCard) {\n\n        //  removeViews(amountViewHolder, businessViewHolder)\n        addViews(\n            // businessViewHolder,\n            /// amountViewHolder,\n            cardViewHolder,\n            paymentInlineViewHolder,\n            saveCardSwitchHolder\n        )\n\n        if (card != null && card.cardNumber?.trim() != null && card.cardNumber.trim().length == 6) {\n            callBinLookupApi(card.cardNumber.trim().substring(0, 6))\n        }\n\n\n        Handler().postDelayed({\n            val binLookupResponse: BINLookupResponse? = PaymentDataSource.getBinLookupResponse()\n            if (PaymentDataSource.getCardType() != null && PaymentDataSource.getCardType() == CardType.ALL) {\n                setScannedCardDetails(card)\n\n            } else {\n                if (binLookupResponse != null) {\n                    paymentInlineViewHolder.checkAllowedCardTypes(binLookupResponse)\n                    setScannedCardDetails(card)\n                }\n\n            }\n        }, 300)\n\n\n        // inlineCamerFragment.onDestroy()\n        removeInlineScanner()\n\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun setScannedCardDetails(card: TapCard) {\n        /* if(CardUtils.isValidCardNumber(card.cardNumber)){\n             paymentInlineViewHolder.tapCardInputView.onTouchView()\n         }else {\n             paymentInlineViewHolder.tapCardInputView.onTouchCardField()\n         }*/\n        //paymentInlineViewHolder.tapCardInputView.onTouchCardField()\n        println(\"scanned card holder is${card.cardHolder}\")\n        println(\"scanned card number is${card.cardNumber}\")\n\n        paymentInlineViewHolder.tapCardInputView.setCardNumberMasked(\n            paymentInlineViewHolder.maskCardNumber(\n                card.cardNumber\n            )\n        )\n        val dateParts: List<String>? = card.expirationDate?.split(\"/\")\n        val month = dateParts?.get(0)?.toInt()\n        val year = dateParts?.get(1)?.toInt()\n        if (month != null) {\n            if (year != null) {\n                paymentInlineViewHolder.tapCardInputView.setExpiryDate(month, year)\n            }\n        }\n\n\n        // paymentInlineViewHolder.tapCardInputView.setCardHolderName(card.cardHolder)\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun callBinLookupApi(binLookUpStr: String?) {\n        cardViewModel.processEvent(\n            CardViewEvent.RetreiveBinLookupEvent,\n            CheckoutViewModel(), null, binLookUpStr, null, null\n        )\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun handleNFCScannedResult(emvCard: TapEmvCard) {\n        println(\"emvCard>>\" + emvCard)\n        //   removeViews(amountViewHolder, businessViewHolder)\n        addViews(\n            //   businessViewHolder,\n            //   amountViewHolder,\n            cardViewHolder,\n            paymentInlineViewHolder,\n            saveCardSwitchHolder\n        )\n\n        callBinLookupApi(emvCard.cardNumber?.substring(0, 6))\n\n        Handler().postDelayed({\n            val binLookupResponse: BINLookupResponse? = PaymentDataSource.getBinLookupResponse()\n            if (PaymentDataSource.getCardType() != null && PaymentDataSource.getCardType() == CardType.ALL) {\n                setNfcCardDetails(emvCard)\n\n            } else {\n                if (binLookupResponse != null) {\n                    paymentInlineViewHolder.checkAllowedCardTypes(binLookupResponse)\n                    setNfcCardDetails(emvCard)\n                }\n\n            }\n        }, 300)\n\n        removeNFCViewFragment()\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun setNfcCardDetails(emvCard: TapEmvCard) {\n        // auto slide added on scan to prevent overlap\n        paymentInlineViewHolder.hideViewONScanNFC()\n        println(\"maskCardNumber\" + paymentInlineViewHolder.maskCardNumber(emvCard.cardNumber))\n        paymentInlineViewHolder.tapCardInputView.setCardNumber(emvCard.cardNumber, false)\n        convertDateString(emvCard)\n        paymentInlineViewHolder.onFocusChange(CardInputListener.FocusField.FOCUS_CVC)\n\n\n    }\n\n    private fun removeNFCViewFragment() {\n        if (isNFCOpened)\n            if (fragmentManager.findFragmentById(R.id.fragment_container_nfc_lib) != null)\n                fragmentManager.beginTransaction()\n                    .remove(fragmentManager.findFragmentById(R.id.fragment_container_nfc_lib)!!)\n                    .commit()\n        isNFCOpened = false\n        checkoutFragment.isNfcOpened = false\n        //  webFrameLayout.visibility = View.GONE\n        frameLayout.visibility = View.GONE\n\n    }\n\n\n    private fun convertDateString(emvCard: TapEmvCard) {\n        //  println(\"emvCard.getExpireDate()\"+emvCard.getExpireDate())\n        val dateParts: CharSequence? = DateFormat.format(\"M/y\", emvCard.getExpireDate())\n        println(\"dateparts\" + dateParts?.length)\n        if (dateParts?.contains(\"/\") == true) {\n            if (dateParts.length <= 3) {\n                return\n            } else {\n                if (dateParts.length >= 5 || dateParts.length >= 4) {\n                    val month = (dateParts).substring(0, 1).toInt()\n\n                    val year = (dateParts).substring(2, 4)\n\n                    if (year.contains(\"/\")) {\n                        println(\"retuu>>\" + year)\n                        return\n                    } else {\n                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n                            paymentInlineViewHolder.tapCardInputView.setExpiryDate(\n                                month,\n                                year.toInt()\n                            )\n                        }\n                        // paymentInlineViewHolder.tapCardInputVie\n\n                    }\n\n                }\n\n            }\n\n\n        }\n    }\n\n    private fun filteredByPaymentTypeAndCurrencyAndSortedList(\n        list: java.util.ArrayList<PaymentOption>, paymentType: PaymentType, currency: String\n    ): java.util.ArrayList<PaymentOption> {\n        var currencyFilter: String? = currency.toUpperCase()\n        val filters: java.util.ArrayList<Utils.List.Filter<PaymentOption>> =\n            java.util.ArrayList<Utils.List.Filter<PaymentOption>>()\n\n        /**\n         * if trx currency not included inside supported currencies <i.e Merchant pass transaction currency that he is not allowed for>\n         * set currency to first supported currency\n        </i.e> */\n        var trxCurrencySupported = false\n        for (amountedCurrency in paymentOptionsResponse.supportedCurrencies) {\n            if (amountedCurrency.currency == currencyFilter) {\n                trxCurrencySupported = true\n                break\n            }\n        }\n        if (!trxCurrencySupported) currencyFilter =\n            paymentOptionsResponse.supportedCurrencies[0].currency\n\n\n        if (currencyFilter != null) {\n            this.getCurrenciesFilter<PaymentOption>(currencyFilter)?.let { filters.add(it) }\n        }\n        //  filters.add(getPaymentOptionsFilter(paymentType))\n        //  val filter: CompoundFilter<PaymentOption> = CompoundFilter(filters)\n        //  val filtered: ArrayList<PaymentOption> = Utils.List.filter(list)\n\n        var filtered: ArrayList<PaymentOption> =\n            list.filter { items ->\n                items.paymentType == paymentType && items.getSupportedCurrencies()?.contains(\n                    currencyFilter\n                ) == true\n            } as ArrayList<PaymentOption>\n\n        return list.filter { items ->\n            items.paymentType == paymentType && items.getSupportedCurrencies()?.contains(\n                currencyFilter\n            ) == true\n        } as ArrayList<PaymentOption>\n    }\n\n    private fun <E : CurrenciesSupport?> getCurrenciesFilter(\n        currency: String\n    ): Utils.List.Filter<E>? {\n        return object : Utils.List.Filter<E> {\n            override fun isIncluded(`object`: E): Boolean {\n                return `object`?.getSupportedCurrencies()!!.contains(currency)\n            }\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun filterViewModels(currency: String) {\n        if (paymentOptionsResponse.paymentOptions != null)\n            paymentOptionsWorker =\n                java.util.ArrayList<PaymentOption>(paymentOptionsResponse.paymentOptions)\n        if (paymentOptionsResponse.cards != null) {\n            val savedCardsWorker: java.util.ArrayList<SavedCard> =\n                java.util.ArrayList<SavedCard>(paymentOptionsResponse.cards)\n        }\n        val webPaymentOptions: java.util.ArrayList<PaymentOption> =\n            filteredByPaymentTypeAndCurrencyAndSortedList(\n                paymentOptionsWorker, PaymentType.WEB, currency\n            )\n\n        val cardPaymentOptions: java.util.ArrayList<PaymentOption> =\n            filteredByPaymentTypeAndCurrencyAndSortedList(\n                paymentOptionsWorker, PaymentType.CARD, currency\n            )\n\n        val googlePaymentOptions: java.util.ArrayList<PaymentOption> =\n            filteredByPaymentTypeAndCurrencyAndSortedList(\n                paymentOptionsWorker, PaymentType.GOOGLE_PAY, currency\n            )\n        //  println(\"googlePaymentOptions\"+googlePaymentOptions)\n        val hasWebPaymentOptions = webPaymentOptions.size > 0\n        val hasCardPaymentOptions = cardPaymentOptions.size > 0\n        val hasGooglePaymentOptions = googlePaymentOptions.size > 0\n        // println(\"hasGooglePaymentOptions\"+hasGooglePaymentOptions)\n\n        //Added if else to update showing GooglePay button based on api\n        if (hasGooglePaymentOptions && googlePaymentOptions.isNotEmpty()) {\n            adapter.updateAdapterGooglePay(googlePaymentOptions)\n            PaymentDataSource.setGoogleCardPay(googlePaymentOptions)\n        } else {\n            adapter.updateAdapterGooglePay(googlePaymentOptions)\n            PaymentDataSource.setGoogleCardPay(googlePaymentOptions)\n        }\n        logicToHandlePaymentDataType(webPaymentOptions, cardPaymentOptions)\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun logicToHandlePaymentDataType(\n        webPaymentOptions: ArrayList<PaymentOption>,\n        cardPaymentOptions: ArrayList<PaymentOption>\n\n    ) {\n        // println(\"webPaymentOptions in logic >>>>$webPaymentOptions\")\n        //  println(\"cardPaymentOptions in logic >>>>$cardPaymentOptions\")\n\n        if (PaymentDataSource.getPaymentDataType() != null && PaymentDataSource.getPaymentDataType() == \"WEB\" && PaymentDataSource.getTransactionMode() != TransactionMode.AUTHORIZE_CAPTURE) {\n            adapter.updateAdapterDataSavedCard(ArrayList())\n            adapter.updateAdapterData(webPaymentOptions)\n            saveCardSwitchHolder?.view?.cardSwitch?.showOnlyPayButton()\n        } else if (PaymentDataSource.getPaymentDataType() != null && PaymentDataSource.getPaymentDataType() == \"CARD\") {\n            adapter.updateAdapterData(ArrayList())\n            paymentInlineViewHolder.setDataFromAPI(cardPaymentOptions)\n            saveCardSwitchHolder?.view?.cardSwitch?.showOnlyPayButton()\n        } else {\n            /**\n             * If TransactionMode is AUTHORIZE_CAPTURE then don't show webpayment options\n             * **/\n            if (PaymentDataSource.getTransactionMode() == TransactionMode.AUTHORIZE_CAPTURE) {\n                adapter.updateAdapterData(ArrayList())\n                paymentInlineViewHolder.setDataFromAPI(cardPaymentOptions)\n            } else {\n                adapter.updateAdapterData(webPaymentOptions)\n                if (!cardPaymentOptions.isEmpty()) {\n                    paymentInlineViewHolder.setDataFromAPI(cardPaymentOptions)\n\n\n                } else {\n                    saveCardSwitchHolder?.mainTextSave?.visibility = View.GONE\n                    removeViews(paymentInlineViewHolder)\n                }\n\n            }\n        }\n        if (LocalizationManager.currentLocalized.length() != 0) {\n            title = LocalizationManager.getValue(\"title\", \"ExtraFees\")\n\n        }\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun showExtraFees(\n        totalAmount: String,\n        extraFeesAmount: String,\n        paymentType: PaymentType, savedCardsModel: Any?, selectedCurrency: String\n    ) {\n\n        val extraFeesPart1: String = LocalizationManager.getValue<String>(\n            \"message\",\n            \"ExtraFees\"\n        ).replaceFirst(\"%@\", extraFeesAmount + selectedCurrency)\n        val extraFeesPart2: String = extraFeesPart1.replace(\"%@\", totalAmount + selectedCurrency)\n        // val leftToRight = \"\\u200F\"\n        //  val localizedMessage =\n        // extraFeesPart1 +\" \"+extraFeesAmount+PaymentDataProvider().getSelectedCurrency()?.currency +extraFeesPart2+\" \"+ totalAmount+ PaymentDataProvider().getSelectedCurrency()?.currency\n        //    \"$extraFeesPart1 $extraFeesAmount$selectedCurrency$extraFeesPart2 $totalAmount$selectedCurrency\"\n        CustomUtils.showDialog(\n            title,\n            extraFeesPart2,\n            context,\n            3,\n            this,\n            paymentType,\n            savedCardsModel, true\n        )\n\n\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun dialogueExecuteExtraFees(\n        response: String,\n        paymentType: PaymentType,\n        savedCardsModel: Any?\n    ) {\n        if (response == \"YES\") {\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n            println(\"savedCardsModel>>>>\" + savedCardsModel)\n            if (savedCardsModel != null) {\n                if (paymentType == PaymentType.CARD) {\n                    savedCardsModel as SavedCard\n                    if (savedCardsModel.paymentOptionIdentifier.toInt() == 3 || savedCardsModel.paymentOptionIdentifier.toInt() == 4) {\n                        setDifferentPaymentsAction(PaymentType.SavedCard, savedCardsModel)\n                    }\n                } else setDifferentPaymentsAction(paymentType, savedCardsModel)\n            } else setDifferentPaymentsAction(paymentType, savedCardsModel)\n        } else {\n            fee = BigDecimal.ZERO\n\n            when {\n                paymentType === PaymentType.WEB -> {\n                    // fireWebPaymentExtraFeesUserDecision(ExtraFeesStatus.REFUSE_EXTRA_FEES)\n                    selectedCurrencyPos = null\n                    selectedAmountPos = null\n\n\n                }\n                paymentType === PaymentType.CARD -> {\n                    selectedCurrencyPos = null\n                    selectedAmountPos = null\n//                    fireCardPaymentExtraFeesUserDecision(ExtraFeesStatus.REFUSE_EXTRA_FEES)\n                }\n                paymentType === PaymentType.SavedCard -> {\n                    selectedCurrencyPos = null\n                    selectedAmountPos = null\n                    //  fireSavedCardPaymentExtraFeesUserDecision(ExtraFeesStatus.REFUSE_EXTRA_FEES)\n                }\n            }\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun setDifferentPaymentsAction(\n        paymentType: PaymentType,\n        savedCardsModel: Any?\n    ) {\n        when {\n\n            paymentType === PaymentType.WEB -> {\n                if (savedCardsModel != null) {\n                    PaymentDataSource.setWebViewType(WebViewType.REDIRECT)\n                    //Added to disable click when button loading\n                    amountViewHolder.view.amount_section?.itemAmountLayout?.isEnabled = false\n                    amountViewHolder.view.amount_section?.itemAmountLayout?.isClickable = false\n                    onClickRedirect(savedCardsModel)\n                }\n            }\n            paymentType === PaymentType.CARD -> {\n                /* paymentInlineViewHolder.view.alpha = 0.9f\n                 if (::context.isInitialized) {\n                     val animation = AnimationUtils.loadAnimation(context, R.anim.fade_out)\n                     paymentInlineViewHolder.view.startAnimation(animation)\n\n                 }*/\n                PaymentDataSource.setWebViewType(WebViewType.THREE_DS_WEBVIEW)\n                //Added to disable click when button loading\n                amountViewHolder.view.amount_section?.itemAmountLayout?.isEnabled = false\n                amountViewHolder.view.amount_section?.itemAmountLayout?.isClickable = false\n\n\n                onClickCardPayment()\n\n\n            }\n            paymentType === PaymentType.SavedCard -> {\n                if (isSavedCardSelected == true) {\n                    //Added to disable click when button loading\n                    amountViewHolder.view.amount_section?.itemAmountLayout?.isEnabled = false\n                    amountViewHolder.view.amount_section?.itemAmountLayout?.isClickable = false\n                    payActionSavedCard(savedCardsModel as SavedCard)\n\n                }\n            }\n        }\n    }\n\n    /**\n     * Calculate extra fees amount big decimal.\n     *\n     * @param paymentOption the payment option\n     * @return the big decimal\n     */\n    open fun calculateExtraFeesAmount(\n        paymentOption: PaymentOption?,\n        amountedCurrency: AmountedCurrency?\n    ): BigDecimal? {\n        return if (paymentOption != null) {\n\n            // val amount = PaymentDataProvider().getSelectedCurrency()\n            var extraFees: java.util.ArrayList<ExtraFee>? = paymentOption.extraFees\n            if (extraFees == null) extraFees = java.util.ArrayList()\n            val supportedCurrencies: java.util.ArrayList<SupportedCurrencies>? =\n                PaymentDataProvider().getSupportedCurrencies()\n            calculateExtraFeesAmount(extraFees, supportedCurrencies, amountedCurrency)\n        } else BigDecimal.ZERO\n    }\n\n    fun View.fadeVisibility(visibility: Int, duration: Long = 3000) {\n        val transition: Transition = Fade()\n        transition.duration = duration\n        transition.addTarget(this)\n        TransitionManager.beginDelayedTransition(this.parent as ViewGroup, transition)\n        this.visibility = visibility\n    }\n\n    fun closeAsynchView() {\n        /*   removeViews(businessViewHolder, asynchronousPaymentViewHolder)\n           businessViewHolder.setDataFromAPI(\n               PaymentDataSource.getMerchantData()?.logo,\n               PaymentDataSource.getMerchantData()?.name\n           )\n           addViews(\n               businessViewHolder,\n               amountViewHolder,\n               cardViewHolder,\n               paymentInlineViewHolder,\n               saveCardSwitchHolder\n           )\n           saveCardSwitchHolder?.view?.visibility = View.VISIBLE\n           saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.RESET)\n           val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n           saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n               false,\n               \"en\",\n               if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                   payString+\" \"+currentCurrencySymbol+\" \"+selectedAmount\n               }else{ payString+\" \"+currentCurrencySymbol+\" \"+currentAmount},\n               Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n               Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n           )*/\n        //  Stopped reset view and dismiss it.\n        checkoutFragment?.dismissBottomSheetDialog()\n    }\n\n    fun showOnlyButtonView(\n        status: ChargeStatus,\n        checkOutActivity: CheckOutActivity?,\n        _checkoutFragment: CheckoutFragment\n    ) {\n        println(\"checkoutFragment>>>.\" + _checkoutFragment)\n        println(\"checkOutActivity>>>.\" + checkOutActivity)\n        removeAllViews()\n        addViews(saveCardSwitchHolder)\n        val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n            false,\n            \"en\",\n            if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                payString + \" \" + currentCurrencySymbol + \" \" + selectedAmount\n            } else {\n                payString + \" \" + currentCurrencySymbol + \" \" + currentAmount\n            },\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.paymentBackgroundColor\")),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.titleLabelColor\")),\n        )\n\n\n        when (status) {\n            ChargeStatus.CAPTURED, ChargeStatus.AUTHORIZED, ChargeStatus.VALID, ChargeStatus.IN_PROGRESS -> {\n                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setDisplayMetrics(\n                    CustomUtils.getDeviceDisplayMetrics(\n                        context as Activity\n                    )\n                )\n                Handler().postDelayed({\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                        ActionButtonState.SUCCESS\n                    )\n                }, 500)\n            }\n            ChargeStatus.CANCELLED, ChargeStatus.TIMEDOUT, ChargeStatus.FAILED, ChargeStatus.DECLINED, ChargeStatus.UNKNOWN,\n            ChargeStatus.RESTRICTED, ChargeStatus.ABANDONED, ChargeStatus.VOID, ChargeStatus.INVALID -> {\n                Handler().postDelayed({\n                    tabAnimatedActionButton?.setInValidBackground(\n                        false, Color.YELLOW\n                    )\n                    tabAnimatedActionButton?.changeButtonState(ActionButtonState.LOADING)\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(\n                        false, Color.YELLOW\n                    )\n\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n                        false,\n                        \"en\",\n                        null,\n                        Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n                        Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n\n                        )\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                        ActionButtonState.ERROR\n                    )\n                }, 500)\n                tabAnimatedActionButton?.changeButtonState(ActionButtonState.ERROR)\n            }\n            else -> {\n\n                if (status.equals(\"tokenized\")) {\n                    Handler().postDelayed({\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                            ActionButtonState.SUCCESS\n                        )\n                    }, 500)\n\n                } else {\n                    Handler().postDelayed({\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(\n                            false,\n                            Color.BLUE\n                        )\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n                            false,\n                            \"en\",\n                            null,\n                            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n                            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n\n                            )\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                            ActionButtonState.ERROR\n                        )\n                    }, 500)\n\n                }\n            }\n        }\n        /*   Handler().postDelayed({\n               checkOutActivity?.onBackPressed()\n\n               if (::bottomSheetDialog.isInitialized)\n                   bottomSheetDialog.dismiss()\n               _checkoutFragment.activity?.onBackPressed()\n\n           }, 12000)*/\n    }\n\n\n    /**\n     * handlePaymentSuccess handles the payment token obtained from GooglePay API\n     * **/\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun handlePaymentSuccess(paymentData: PaymentData) {\n        removeViews(\n            //businessViewHolder,\n            amountViewHolder,\n            cardViewHolder,\n            // saveCardSwitchHolder,\n            paymentInlineViewHolder,\n            otpViewHolder,\n            goPaySavedCardHolder,\n            goPayViewsHolder\n        )\n        saveCardSwitchHolder?.view?.cardSwitch?.switchesLayout?.visibility = View.GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = View.VISIBLE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n\n        val paymentInformation = paymentData.toJson() ?: return\n\n        try {\n            // Token will be null if PaymentDataRequest was not constructed using fromJson(String).\n            val paymentMethodData =\n                JSONObject(paymentInformation).getJSONObject(\"paymentMethodData\")\n\n            // If the gateway is set to \"example\", no payment information is returned - instead, the\n            // token will only consist of \"examplePaymentMethodToken\".\n            val tokenizationData = paymentMethodData.getJSONObject(\"tokenizationData\")\n\n            val token = tokenizationData.getString(\"token\")\n            Bugfender.d(CustomUtils.tagEvent, \"Google pay raw token :\" + token)\n            val gson = Gson()\n            val jsonToken = gson.fromJson(token, JsonObject::class.java)\n\n\n            /**\n             * At this stage, Passing the googlePaylaod to Tap Backend TokenAPI call followed by chargeAPI.\n             * ***/\n            val createTokenGPayRequest = CreateTokenGPayRequest(\"googlepay\", jsonToken)\n            CardViewModel().processEvent(\n                CardViewEvent.CreateGoogleTokenEvent,\n                this,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                context,\n                createTokenGPayRequest\n            )\n            // Logging token string.\n            /* Log.e(\"GooglePaymentToken\", paymentMethodData\n                     .getJSONObject(\"tokenizationData\")\n                     .getString(\"token\"))\n    */\n        } catch (e: JSONException) {\n            Log.e(\"handlePaymentSuccess\", \"Error: \" + e.toString())\n        }\n\n    }\n\n    /**\n     * handleError handles the payment response obtained from GooglePay API\n     * **/\n    fun handleError(statusCode: Int) {\n        Log.e(\"loadPaymentData failed\", String.format(\"Error code: %d\", statusCode))\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onReadSuccess(card: TapCard?) {\n        incrementalCount += 1\n\n        println(\"incrementalCount val>>>>>\" + incrementalCount)\n        /*   if (card != null) {\n               if(card.cardNumber!=null)\n              handleScanSuccessResult(card)\n              *//* Log.d(\"checkOutViewModel\", \"onRecognitionSuccess: \" + card.cardNumber)\n            Log.d(\"checkOutViewModel\", \"onRecognitionSuccess: \" + card.expirationDate)\n            Log.d(\"checkOutViewModel\", \"onRecognitionSuccess: \" + card.cardHolder)*//*\n\n        }*/\n        if (card != null && incrementalCount == 3) {\n\n            if (card.cardNumber != null && card.cardHolder != null && card.expirationDate != null) {\n                handleScanSuccessResult(card)\n            }\n            return\n        }\n    }\n\n    override fun onReadFailure(error: String?) {\n        handleScanFailedResult(error)\n    }\n\n    private fun logicForLoyaltyProgram() {\n\n        loyaltyViewHolder.loyaltyView.switchLoyalty?.setOnCheckedChangeListener { buttonView, isChecked ->\n            loyaltyViewHolder.loyaltyView.switchTheme()\n\n            if (isChecked) {\n                loyaltyViewHolder.loyaltyView.linearLayout2?.visibility = View.VISIBLE\n                loyaltyViewHolder.loyaltyView.linearLayout3?.visibility = View.VISIBLE\n\n            } else {\n\n                loyaltyViewHolder.loyaltyView.linearLayout2?.visibility = View.GONE\n                loyaltyViewHolder.loyaltyView.linearLayout3?.visibility = View.GONE\n\n            }\n        }\n\n        loyaltyViewHolder.loyaltyView.setLoyaltyHeaderDataSource(\n            LoyaltyHeaderDataSource(\n                \"ADCB\",\n                \"https://is4-ssl.mzstatic.com/image/thumb/Purple112/v4/05/33/67/05336718-a6f6-8ca1-1ea0-0644f5071ce9/AppIcon-0-0-1x_U007emarketing-0-0-0-5-0-0-sRGB-0-0-0-GLES2_U002c0-512MB-85-220-0-0.png/1200x600wa.png\"\n            )\n        )\n\n        loyaltyViewHolder.loyaltyView.textViewClickable?.makeLinks(\n            Pair(\"(T&C)\", View.OnClickListener {\n                val url = \"https://www.adcb.com/en/tools-resources/adcb-privacy-policy/\"\n                val intent = Intent(Intent.ACTION_VIEW)\n                intent.data = Uri.parse(url)\n                context.startActivity(intent)\n\n            })\n        )\n    }\n\n    fun onButtonClicked() {\n        println(\"onButtonClicked\")\n        BenefitInAppCheckout.newInstance(\n            context as Activity,\n            appId,\n            \"448544\",\n            merchantId,\n            seceret,\n            \"20.0\",\n            \"BH\",\n            \"048\",\n            mcc,\n            \"Tap\",\n            \"Manama\",\n            this\n        )\n    }\n\n\n    override fun onTransactionSuccess(p0: Transaction?) {\n        println(\"transaction is success $p0\")\n\n    }\n\n    override fun onTransactionFail(p0: Transaction?) {\n        println(\"onTransactionFail is  $p0\")\n    }\n\n    fun dismissBottomSheet() {\n        checkoutFragment?.dismissBottomSheetDialog()\n    }\n\n    fun setTitleNormalCard() {\n        cardViewHolder.view.cardInfoHeaderText.text =\n            LocalizationManager.getValue(\"cardSectionTitleOr\", \"TapCardInputKit\")\n    }\n\n    fun getAssetName(paymentOptionOb: PaymentOption?): String {\n        println(\"paymentOptionOb\" + paymentOptionOb)\n        var lang: String = \"en\"\n        var theme: String = \"light\"\n        if (LocalizationManager.getLocale(context).language != null) {\n            lang = LocalizationManager.getLocale(context).language\n        } else lang = \"en\"\n        if (ThemeManager.currentTheme != null && ThemeManager.currentTheme.contains(\"dark\")) {\n            theme = \"dark\"\n        } else theme = \"light\"\n        val assetToLoad: String = paymentOptionOb?.buttonStyle?.titleAssets.toString()\n        println(\"oppp\" + assetToLoad.replace(\"{theme}\", theme).replace(\"{lang}\", lang) + \".png\")\n        return assetToLoad.replace(\"{theme}\", theme).replace(\"{lang}\", lang) + \".png\"\n    }\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout/src/main/java/company/tap/checkout/internal/viewmodels/CheckoutViewModel.kt b/checkout/src/main/java/company/tap/checkout/internal/viewmodels/CheckoutViewModel.kt
--- a/checkout/src/main/java/company/tap/checkout/internal/viewmodels/CheckoutViewModel.kt	(revision 8a208e294010508ec2e90c21e02a0567bea1267e)
+++ b/checkout/src/main/java/company/tap/checkout/internal/viewmodels/CheckoutViewModel.kt	(date 1682843346450)
@@ -774,7 +774,6 @@
                 currencyAlert + " " + checkoutFragment.getSimIsoCountryCurrency()
             Glide.with(context).load(showCountryFlag())
                 .into(amountViewHolder.view.amount_section.flagImageView);
-        amountViewHolder.view.amount_section.itemPopupLayout.addFadeInAnimation(durationTime = 2000)
         amountViewHolder.view.amount_section.itemPopupLayout.slidefromRightToLeft()
 
 
Index: checkout/src/main/java/company/tap/checkout/internal/utils/ViewsExtension.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package company.tap.checkout.internal.utils\n\nimport android.annotation.SuppressLint\nimport android.app.Activity\nimport android.content.Context\nimport android.graphics.BlendMode\nimport android.graphics.BlendModeColorFilter\nimport android.graphics.drawable.Drawable\nimport android.graphics.drawable.GradientDrawable\nimport android.graphics.drawable.ShapeDrawable\nimport android.graphics.drawable.shapes.RoundRectShape\nimport android.os.Build\nimport android.os.Handler\nimport android.os.Looper\nimport android.util.DisplayMetrics\nimport android.view.*\nimport android.view.animation.Animation\nimport android.view.animation.Animation.AnimationListener\nimport android.view.animation.AnimationUtils\nimport android.view.animation.TranslateAnimation\nimport android.webkit.WebChromeClient\nimport android.webkit.WebSettings\nimport android.webkit.WebView\nimport android.widget.FrameLayout\nimport android.widget.ImageView\nimport android.widget.Toast\nimport androidx.annotation.DrawableRes\nimport androidx.core.os.postDelayed\nimport com.bumptech.glide.Glide\nimport company.tap.checkout.R\nimport company.tap.tapuilibrary.themekit.ThemeManager\nimport company.tap.tapuilibrary.uikit.ktx.loadAppThemManagerFromPath\nimport jp.wasabeef.blurry.Blurry\nimport kotlinx.android.synthetic.main.switch_layout.view.*\n\n\nprivate var targetHeight: Int? = 0\nprivate var animationDelayForResizeAnimation = 1500L\nprivate var topLeftCorner = 16f\nprivate var topRightCorner = 16f\nprivate var bottomRightCorner = 0f\nprivate var bottomLeftCorner = 0f\nconst val progressBarSize =45\n\nfun View.startPoweredByAnimation(delayTime: Long, poweredByLogo: View?) {\n    Handler(Looper.getMainLooper()).postDelayed({\n        poweredByLogo?.visibility = View.GONE\n        this.visibility = View.VISIBLE\n        doAfterSpecificTime(execute = {\n            poweredByLogo?.addFadeInAnimation()\n        })\n    }, delayTime)\n    val resizeAnimation =\n        targetHeight?.let {\n            ResizeAnimation(\n                this,\n                it,\n                0, true\n            )\n        }\n\n    resizeAnimation?.duration = animationDelayForResizeAnimation\n    this.startAnimation(resizeAnimation)\n\n\n}\n\nfun doAfterSpecificTime(time: Long = 1000L, execute: () -> Unit) =\n    Handler(Looper.getMainLooper()).postDelayed(time) {\n        execute.invoke()\n    }\n\nfun View.addFadeInAnimation(durationTime: Long = 1000L) {\n    this.visibility = View.VISIBLE\n    val animation = AnimationUtils.loadAnimation(context, R.anim.fade_in)\n    animation.duration = durationTime\n    this.startAnimation(animation)\n}\n\nfun View.slidefromRightToLeft() {\n    val animate: TranslateAnimation\n    if (this.height == 0) {\n        animate = TranslateAnimation(\n            (this.width / 2).toFloat(),\n            0f, 0f, 0f\n        )\n    } else {\n        animate = TranslateAnimation(this.width.toFloat(), 0f, 0f, 0f) // View for animation\n    }\n    animate.duration = 1000\n    animate.fillAfter = true\n    this.startAnimation(animate)\n    this.visibility = View.VISIBLE // Change visibility VISIBLE or GONE\n}\n\nfun MutableList<View>.addFadeInAnimationForViews(durationTime: Long = 1000L) {\n    this.forEachIndexed { index, view ->\n        view.visibility = View.VISIBLE\n        val animation = AnimationUtils.loadAnimation(view.context, R.anim.fade_in)\n        animation.duration = durationTime\n        view.startAnimation(animation)\n    }\n\n}\n\nfun Context.twoThirdHeightView(): Double {\n    return getDeviceSpecs().first.times(2.3) / 3\n}\n\n@SuppressLint(\"SetJavaScriptEnabled\")\nfun WebView.applyConfigurationForWebView(\n    url: String,\n    onProgressWebViewFinishedLoading: () -> Unit\n) {\n    with(this) {\n        settings.javaScriptEnabled = true\n        settings.mixedContentMode = WebSettings.MIXED_CONTENT_ALWAYS_ALLOW\n        settings.loadWithOverviewMode = true\n        isVerticalScrollBarEnabled = true\n        isHorizontalScrollBarEnabled = true\n        setInitialScale(1)\n        settings.defaultZoom = WebSettings.ZoomDensity.FAR;\n        settings.useWideViewPort = true\n        loadUrl(url)\n        setOnKeyListener { _, keyCode, event ->\n            if (event.action == KeyEvent.ACTION_UP && keyCode == KeyEvent.KEYCODE_BACK) {\n                if (this.canGoBack()) {\n                    this.goBack()\n                    /**\n                     * put here listener or delegate thT process cancelled **/\n                    return@setOnKeyListener true\n                }\n                return@setOnKeyListener false\n            }\n            false\n        }\n\n        this.webChromeClient = object : WebChromeClient() {\n            override fun onProgressChanged(view: WebView?, newProgress: Int) {\n                if (newProgress == 100) {\n                    onProgressWebViewFinishedLoading.invoke()\n                }\n\n            }\n        }\n    }\n\n\n}\n\nfun View.resizeAnimation(\n    durationTime: Long = 1000L,\n    startHeight: Int = 1000,\n    endHeight: Int = 1000, isExpanding: Boolean = false\n) {\n    val resizeAnimation = ResizeAnimation(\n        this,\n        endHeight,\n        startHeight, isExpanding\n    )\n    resizeAnimation.duration = durationTime\n    this.startAnimation(resizeAnimation)\n}\n\n\n/**\n * This function return specs of device height && width\n */\nfun Context.getDeviceSpecs(): Pair<Int, Int> {\n    val displayMetrics = DisplayMetrics()\n    (this as Activity).windowManager.defaultDisplay.getMetrics(displayMetrics)\n    val height = displayMetrics.heightPixels\n    val width = displayMetrics.widthPixels\n    val pair: Pair<Int, Int> = Pair(height, width)\n    return pair\n}\n\nfun getViewShapeDrawable(\n    isRoundedCorners: Boolean = false,\n    shapeColor: String = AppColorTheme.MerchantHeaderViewColor\n): Drawable {\n    val shape = when (isRoundedCorners) {\n        true ->\n            ShapeDrawable(\n                RoundRectShape(\n                    floatArrayOf(\n                        topLeftCorner, topLeftCorner,\n                        topRightCorner, topRightCorner,\n                        bottomRightCorner, bottomRightCorner,\n                        bottomLeftCorner, bottomLeftCorner\n                    ),\n                    null, null\n                )\n            )\n        false ->\n            ShapeDrawable()\n    }\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {\n        shape.colorFilter = BlendModeColorFilter(\n            loadAppThemManagerFromPath(shapeColor),\n            BlendMode.SRC_ATOP\n        )\n    }\n\n\n    return shape\n}\n\nfun View.addFadeOutAnimation(durationTime: Long = 500L) {\n    val animation = AnimationUtils.loadAnimation(context, R.anim.fade_out)\n    animation.duration = durationTime\n    this.startAnimation(animation)\n    this.animation.setAnimationListener(object : AnimationListener {\n        override fun onAnimationStart(p0: Animation?) {\n        }\n\n        override fun onAnimationEnd(p0: Animation?) {\n            this@addFadeOutAnimation.visibility = View.GONE\n        }\n\n        override fun onAnimationRepeat(p0: Animation?) {\n        }\n\n    })\n\n}\n\nfun MutableList<View>.addFadeOutAnimationToViews(\n    durationTime: Long = 500L,\n    onAnimationEnd: () -> Unit?\n) {\n    this.forEachIndexed { index, view ->\n//        val animation = AnimationUtils.loadAnimation(view.context, R.anim.fade_out)\n//        animation.duration = durationTime\n//        view.startAnimation(animation)\n        view.visibility = View.GONE\n//        view.animation.setAnimationListener(object : AnimationListener {\n//            override fun onAnimationStart(p0: Animation?) {\n//            }\n//\n//            override fun onAnimationEnd(p0: Animation?) {\n//                view.visibility = View.GONE\n//                onAnimationEnd.invoke()\n//\n//            }\n//\n//            override fun onAnimationRepeat(p0: Animation?) {\n//            }\n//\n//        })\n    }\n\n\n}\n\nfun MutableList<View>.addFadeInAnimationToViews(durationTime: Long = 500L) {\n    this.forEachIndexed { index, view ->\n\n        val animation = AnimationUtils.loadAnimation(view.context, R.anim.fade_in)\n        animation.duration = durationTime\n        view.startAnimation(animation)\n        view.animation.setAnimationListener(object : AnimationListener {\n            override fun onAnimationStart(p0: Animation?) {\n            }\n\n            override fun onAnimationEnd(p0: Animation?) {\n                view.visibility = View.VISIBLE\n\n\n            }\n\n            override fun onAnimationRepeat(p0: Animation?) {\n            }\n\n        })\n    }\n\n\n}\n\n\nfun View.applyBluryToView(\n    radiusNeeded: Int = 8,\n    sampling: Int = 2,\n    animationDuration: Int = 1000,\n    showOriginalView: Boolean = false\n) {\n    Blurry.with(context).radius(radiusNeeded).sampling(sampling).animate(animationDuration)\n        .onto(this as ViewGroup).apply {\n            when (showOriginalView) {\n                true -> this@applyBluryToView.getChildAt(0).visibility = View.VISIBLE\n                false -> this@applyBluryToView.getChildAt(0).visibility = View.GONE\n            }\n\n        }\n\n\n}\n\n\n\nfun ViewGroup.addLoaderWithBlurryToView(invokeAfterLoad: () -> Unit,viewToBeBLur:View?) {\n\n    @DrawableRes\n    val loaderGif: Int =\n        if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains(\"dark\")) {\n            R.drawable.loader\n        } else if (ThemeManager.currentTheme.isNotEmpty() && !ThemeManager.currentTheme.contains(\"dark\")) {\n            R.drawable.output_black_loader_nobg\n        } else R.drawable.loader\n\n\n\n    viewToBeBLur?.applyBluryToView()\n    val progressImage = ImageView(context)\n    val params = FrameLayout.LayoutParams(progressBarSize, progressBarSize)\n    params.gravity = Gravity.CENTER\n    progressImage.layoutParams = params\n    Glide.with(context).asGif().load(loaderGif).into(progressImage)\n    this.addView(progressImage)\n    doAfterSpecificTime(2000) {\n        invokeAfterLoad.invoke()\n    }\n\n}\n\nfun Context.showToast(message: String) {\n    return Toast.makeText(this, message, Toast.LENGTH_SHORT).show()\n}\n\nfun adjustHeightAccToDensity(displayMetrics: Int?) {\n    if (displayMetrics == DisplayMetrics.DENSITY_260 || displayMetrics == DisplayMetrics.DENSITY_280 || displayMetrics == DisplayMetrics.DENSITY_300 || displayMetrics == DisplayMetrics.DENSITY_XHIGH || displayMetrics == DisplayMetrics.DENSITY_340 || displayMetrics == DisplayMetrics.DENSITY_360) {\n        targetHeight = 90\n    } else if (displayMetrics == DisplayMetrics.DENSITY_450 || displayMetrics == DisplayMetrics.DENSITY_420 || displayMetrics == DisplayMetrics.DENSITY_400) {\n        targetHeight = 120\n    } else targetHeight = 140\n}\n\n\nfun createDrawableGradientForBlurry(colorsArrayList: IntArray): GradientDrawable {\n    val gradientDrawable = GradientDrawable(\n        GradientDrawable.Orientation.BL_TR,\n        colorsArrayList\n    )\n    gradientDrawable.gradientRadius = 100f\n    gradientDrawable.cornerRadii = floatArrayOf(\n        topLeftCorner, topLeftCorner,\n        topRightCorner, topRightCorner,\n        bottomRightCorner, bottomRightCorner,\n        bottomLeftCorner, bottomLeftCorner\n    )\n    return gradientDrawable\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout/src/main/java/company/tap/checkout/internal/utils/ViewsExtension.kt b/checkout/src/main/java/company/tap/checkout/internal/utils/ViewsExtension.kt
--- a/checkout/src/main/java/company/tap/checkout/internal/utils/ViewsExtension.kt	(revision 8a208e294010508ec2e90c21e02a0567bea1267e)
+++ b/checkout/src/main/java/company/tap/checkout/internal/utils/ViewsExtension.kt	(date 1682843511823)
@@ -82,10 +82,10 @@
     if (this.height == 0) {
         animate = TranslateAnimation(
             (this.width / 2).toFloat(),
-            0f, 0f, 0f
+            0f, 150f, 0f
         )
     } else {
-        animate = TranslateAnimation(this.width.toFloat(), 0f, 0f, 0f) // View for animation
+        animate = TranslateAnimation(this.width.toFloat(), 0f, 150f, 0f) // View for animation
     }
     animate.duration = 1000
     animate.fillAfter = true
