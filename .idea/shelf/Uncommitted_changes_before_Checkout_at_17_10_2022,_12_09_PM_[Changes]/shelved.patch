Index: checkout/src/main/java/company/tap/checkout/open/CheckoutFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package company.tap.checkout.open\n\n\nimport android.annotation.SuppressLint\nimport android.app.Activity\nimport android.content.Context\nimport android.content.res.Resources\nimport android.graphics.Color\nimport android.os.Build\nimport android.os.Bundle\nimport android.os.Handler\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.view.WindowManager\nimport android.widget.FrameLayout\nimport android.widget.LinearLayout\nimport androidx.annotation.RequiresApi\nimport androidx.core.widget.NestedScrollView\nimport androidx.fragment.app.DialogFragment\nimport androidx.fragment.app.Fragment\nimport androidx.fragment.app.viewModels\nimport cards.pay.paycardsrecognizer.sdk.Card\nimport cards.pay.paycardsrecognizer.sdk.ui.InlineViewCallback\nimport com.bumptech.glide.Glide\nimport com.google.android.material.bottomsheet.BottomSheetBehavior\nimport company.tap.checkout.R\nimport company.tap.checkout.internal.api.enums.ChargeStatus\nimport company.tap.checkout.internal.apiresponse.CardViewModel\nimport company.tap.checkout.internal.apiresponse.CardViewState\nimport company.tap.checkout.internal.apiresponse.Resource\nimport company.tap.checkout.internal.enums.SectionType\nimport company.tap.checkout.internal.viewmodels.CheckoutViewModel\nimport company.tap.checkout.open.controller.SDKSession\nimport company.tap.checkout.open.controller.SDKSession.sessionDelegate\nimport company.tap.checkout.open.controller.SDKSession.tabAnimatedActionButton\nimport company.tap.checkout.open.data_managers.PaymentDataSource\nimport company.tap.taplocalizationkit.LocalizationManager\nimport company.tap.tapuilibrary.themekit.ThemeManager\nimport company.tap.tapuilibrary.uikit.atoms.TapImageView\nimport company.tap.tapuilibrary.uikit.atoms.TapTextView\nimport company.tap.tapuilibrary.uikit.interfaces.TapBottomDialogInterface\nimport company.tap.tapuilibrary.uikit.views.TapBottomSheetDialog\n\n\n/**\n * A simple [Fragment] subclass.\n// * Use the [CheckoutFragment.newInstance] factory method to\n * create an instance of this fragment.\n */\nclass CheckoutFragment : TapBottomSheetDialog(),TapBottomDialogInterface, InlineViewCallback {\n\n    private var _Context: Context? = null\n    @JvmField\n     var _viewModel: CheckoutViewModel?=null\n    private lateinit var cardViewModel: CardViewModel\n    var _activity: Activity? = null\n    var checkOutActivity: CheckOutActivity? = null\n    lateinit var closeText: TapTextView\n    lateinit var closeImage: TapImageView\n    var hideAllView =false\n    lateinit var status :ChargeStatus\n    private  var _resetFragment :Boolean = true\n    @JvmField\n      var scrollView :NestedScrollView ?= null\n    @JvmField\n    var isNfcOpened:Boolean=false\n    @JvmField\n     var isFullscreen = false\n    var heightIn :Int=0\n   private var inLineCardLayout: FrameLayout?=null\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        _activity = activity?.parent\n        this._Context = context\n\n\n    }\n\n  /*  @RequiresApi(Build.VERSION_CODES.N)\n    override fun onDestroyView() {\n        println(\"onDestroyView>>>\")\n        *//*if (view?.parent != null) {\n            (view?.parent as ViewGroup).removeView(view)\n        }*//*\n        resetTabAnimatedButton()\n        super.onDestroyView()\n    }*/\n\n\n    override fun onDestroy() {\n        super.onDestroy()\n\n       // if (!this.isDestroyed()) {\n            Glide.with(this).pauseRequests()\n       // }\n        resetTabAnimatedButton()\n\n    }\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        setStyle(DialogFragment.STYLE_NORMAL, R.style.DialogStyle)\n        dialog?.window?.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE)\n\n        return inflater.inflate(R.layout.fragment_checkouttaps, container, false)\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        val viewModel: CheckoutViewModel by viewModels()\n        val cardViewModel: CardViewModel by viewModels()\n        this._viewModel = viewModel\n        _Context?.let { cardViewModel.getContext(it) }\n        backgroundColor = (Color.parseColor(ThemeManager.getValue(\"GlobalValues.Colors.clear\")))\n        setStyle(DialogFragment.STYLE_NORMAL, R.style.DialogStyle)\n        bottomSheetDialog.behavior.isDraggable= true\n        val checkoutLayout: LinearLayout? = view.findViewById(R.id.fragment_all)\n        val frameLayout: FrameLayout? = view.findViewById(R.id.fragment_container_nfc_lib)\n        val webFrameLayout: FrameLayout? = view.findViewById(R.id.webFrameLayout)\n       inLineCardLayout = view.findViewById(R.id.inline_container)\n        val headerLayout: LinearLayout? = view.findViewById(R.id.headerLayout)\n        bottomSheetLayout = bottomSheetDialog.findViewById(R.id.design_bottom_sheet)\n         closeText = view.findViewById(R.id.closeText)\n         closeImage= view.findViewById(R.id.closeImage)\n        scrollView = view.findViewById(R.id.scrollView)\n        val  heightscreen: Int = Resources.getSystem().getDisplayMetrics().heightPixels;\n       // bottomSheetDialog.behavior.peekHeight = heightscreen\n\n        println(\"heightscreen\"+heightscreen)\n        println(\"sdkLayoutheight\"+checkoutLayout?.height)\n        println(\"bottomSheetLayout\"+bottomSheetLayout)\n\n\n\n        closeText?.text = LocalizationManager.getValue(\"close\", \"Common\")\n\n\n\n        if (SDKSession.showCloseImage ==true) {\n\n            if(!hideAllView) {\n                Handler().postDelayed({\n                    closeImage.visibility = View.GONE\n\n                }, 3000)\n            }\n\n        } else {\n            if(!hideAllView) {\n                Handler().postDelayed({\n                    closeText.visibility = View.GONE\n\n                }, 3000)\n            }\n\n        }\n        closeText.setOnClickListener {\n            bottomSheetDialog.dismissWithAnimation\n            bottomSheetDialog.hide()\n            bottomSheetDialog.dismiss()\n            resetTabAnimatedButton()\n\n        }\n        closeImage.setOnClickListener {\n            bottomSheetDialog.dismissWithAnimation\n            bottomSheetDialog.hide()\n            bottomSheetDialog.dismiss()\n            resetTabAnimatedButton()\n\n        }\n\n\n\n        LocalizationManager.loadTapLocale(resources, R.raw.lang)\n        sessionDelegate?.sessionIsStarting()\n        bottomSheetLayout?.let {\n            viewModel.setBottomSheetLayout(it)\n        }\n        if (checkoutLayout != null) {\n            context?.let {\n                if (frameLayout != null) {\n                    webFrameLayout?.let { it1 ->\n                        if (inLineCardLayout != null) {\n                            activity?.intent?.let { it2 ->\n                                if (headerLayout != null) {\n                                    viewModel.initLayoutManager(\n                                        bottomSheetDialog,\n                                        it,\n                                        childFragmentManager,\n                                        checkoutLayout,\n                                        frameLayout,\n                                        it1,\n                                        inLineCardLayout!!,\n                                        this,\n                                        it2,\n                                        cardViewModel, this,headerLayout\n                                    )\n                                }\n                            }\n\n                        }\n                    }\n                }\n            }\n        }\n        inLineCardLayout?.minimumHeight= heightscreen - checkoutLayout?.height!!\n\n        enableSections()\n\n        dialog?.window?.attributes?.windowAnimations = R.style.DialogAnimation\n\n        bottomSheetDialog.setOnShowListener {\n            //Handler().postDelayed({\n                bottomSheetDialog.behavior.setState(BottomSheetBehavior.STATE_EXPANDED)\n          //  }, 0)\n        }\n\n\n        bottomSheetDialog.behavior.setBottomSheetCallback(object:BottomSheetBehavior.BottomSheetCallback(){\n\n            override fun onStateChanged(bottomSheet: View, newState: Int) {\n              /*  println(\"111heightscreen>>>>\"+heightscreen)\n                println(\"1111sdkLayoutheight>>>>>\"+checkoutLayout?.height)\n                println(\"1111newState>>>>>\"+newState)\n                println(\"1111difff>>>>>\"+ checkoutLayout?.height?.let { heightscreen.minus(it) })\n                println(\"1111peek>>>>>\"+bottomSheetDialog.behavior.peekHeight)\n                var diff = checkoutLayout?.height?.let { heightscreen.minus(it) }*/\n\n\n                if (newState == BottomSheetBehavior.STATE_HIDDEN) {\n                   resetTabAnimatedButton()\n                    dismiss()\n                }\n\n                    if (newState == BottomSheetBehavior.STATE_EXPANDED) {\n                        bottomSheetDialog.behavior.peekHeight = heightscreen\n\n                   bottomSheetDialog.behavior.state = BottomSheetBehavior.STATE_EXPANDED\n                  // bottomSheetDialog.behavior.saveFlags = BottomSheetBehavior.SAVE_FIT_TO_CONTENTS\n                  scrollView?.smoothScrollTo(0, heightscreen)\n                   bottomSheetDialog.behavior.isDraggable = true\n\n                }\n            }\n\n            override fun onSlide(view: View, slideOffset: Float) {\n               // println(\"onSlide\"+p1)\n              //  bottomSheetDialog.behavior.state = BottomSheetBehavior.STATE_EXPANDED\n                scrollView?.smoothScrollTo(0, heightscreen)\n            }\n        })\n\n\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun enableSections(): ArrayList<SectionType> {\n        val enabledSections = ArrayList<SectionType>()\n        enabledSections.add(SectionType.BUSINESS)\n        enabledSections.add(SectionType.AMOUNT_ITEMS)\n        enabledSections.add(SectionType.FRAGMENT)\n        enabledSections.add(SectionType.ActionButton)\n\n        println(\"_resetFragment>>\" + _resetFragment)\n        println(\"hideAllView>>\" + hideAllView)\nif(_resetFragment) {\n    if (hideAllView) {\n        if (::status.isInitialized)\n            _viewModel?.showOnlyButtonView(status, checkOutActivity as CheckOutActivity?, this)\n\n    } else {\n        _viewModel?.displayStartupLayout(enabledSections)\n        _viewModel?.getDatasfromAPIs(\n            PaymentDataSource.getMerchantData(),\n            PaymentDataSource.getPaymentOptionsResponse()\n        )\n\n    }\n}else{\n    if (::status.isInitialized)\n        _viewModel?.showOnlyButtonView(status, checkOutActivity as CheckOutActivity?, this)\n}\n\n        setBottomSheetInterface(this)\n\n        return enabledSections\n    }\n\n\n\n\n\n    companion object {\n        // TODO: Rename and change types and number of parameters\n        const val RESET_FRAG = \"resetFragment\"\n        @JvmStatic\n        fun newInstance(context: Context, activity: Activity?, resetFragment: Boolean) =\n            CheckoutFragment().apply {\n                arguments = Bundle().apply {}\n                _Context = context\n                _activity = activity\n                _resetFragment =resetFragment\nrequireArguments().putBoolean(RESET_FRAG, resetFragment)\n            }\n    }\n\n    override fun onScanCardFailed(e: Exception?) {\n        println(\"onScanCardFailed\")\n       // _viewModel?.handleScanFailedResult()\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onScanCardFinished(card: Card?, cardImage: ByteArray?) {\n        if (card != null) {\n            println(\"scanned card is$card\")\n          //  _viewModel?.handleScanSuccessResult(card)\n\n        }\n    }\n\n\n\n\n    private fun consumeResponse(response: Resource<CardViewState>) {\n        println(\"response value is\" + response.data?.configResponseModel)\n        when (response) {\n            is Resource.Loading -> concatText(\"Loading\")\n            is Resource.Finished -> renderView(response.data)\n            is Error -> response.message?.let { concatText(it) }\n            is Resource.Success -> renderView(response.data)\n\n        }\n    }\n\n    private fun renderView(data: CardViewState?) {\n\n    }\n    @SuppressLint(\"SetTextI18n\")\n    private fun concatText(newText: String) {\n        println(\"newText respoonse$newText\")\n\n    }\n\n\n\n    override fun onDetach() {\n        super.onDetach()\n     if (view == null) {\n            return\n        }\n        if(isNfcOpened){\n        }else {\n            checkOutActivity?.onBackPressed()\n        }\n\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n     fun resetTabAnimatedButton(){\n        checkOutActivity?.displayMetrics?.let { tabAnimatedActionButton?.setDisplayMetrics(it) }\n        SDKSession.sessionActive = false\n        //tabAnimatedActionButton?.changeButtonState(ActionButtonState.RESET)\nif(checkOutActivity?.isGooglePayClicked == false){\n    checkOutActivity?.finish()\n}\n      //  checkOutActivity?.finish()\n        tabAnimatedActionButton?.setButtonDataSource(\n            true,\n            context.let {\n                if (it != null) {\n                    LocalizationManager.getLocale(it).language\n                }\n            }.toString(),\n            LocalizationManager.getValue(\"pay\", \"ActionButton\"),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.paymentBackgroundColor\")),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.titleLabelColor\"))\n        )\n      /*  tabAnimatedActionButton?.setOnClickListener {\n            requireActivity().supportFragmentManager.let { it1 -> SDKSession.contextSDK?.let { it2 ->\n                SDKSession.startSDK(it1,\n                    it2,SDKSession.contextSDK as Activity)\n            } }\n        }*/\n        tabAnimatedActionButton?.isClickable=true\n    }\n\n\n  /*  private fun initKeyBoardListener() {\n        // Минимальное значение клавиатуры.\n        // Threshold for minimal keyboard height.\n        val MIN_KEYBOARD_HEIGHT_PX = 150\n        // Окно верхнего уровня view.\n        // Top-level window decor view.\n            // val decorView: View = netscape.javascript.JSObject.getWindow().getDecorView()\n        // Регистрируем глобальный слушатель. Register global layout listener.\n        decorView.viewTreeObserver.addOnGlobalLayoutListener(object : OnGlobalLayoutListener {\n            // Видимый прямоугольник внутри окна.\n            // Retrieve visible rectangle inside window.\n            private val windowVisibleDisplayFrame: Rect = Rect()\n            private var lastVisibleDecorViewHeight = 0\n            override fun onGlobalLayout() {\n                decorView.getWindowVisibleDisplayFrame(windowVisibleDisplayFrame)\n                val visibleDecorViewHeight: Int = windowVisibleDisplayFrame.height()\n                if (lastVisibleDecorViewHeight != 0) {\n                    if (lastVisibleDecorViewHeight > visibleDecorViewHeight + MIN_KEYBOARD_HEIGHT_PX) {\n\n                    } else if (lastVisibleDecorViewHeight + MIN_KEYBOARD_HEIGHT_PX < visibleDecorViewHeight) {\n\n                    }\n                }\n                // Сохраняем текущую высоту view до следующего вызова.\n                // Save current decor view height for the next call.\n                lastVisibleDecorViewHeight = visibleDecorViewHeight\n            }\n        })\n    }*/\n\n    fun  dismissBottomSheetDialog(){\n        bottomSheetDialog.dismissWithAnimation\n        bottomSheetDialog.hide()\n        bottomSheetDialog.dismiss()\n        resetTabAnimatedButton()\n\n    }\n\n\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout/src/main/java/company/tap/checkout/open/CheckoutFragment.kt b/checkout/src/main/java/company/tap/checkout/open/CheckoutFragment.kt
--- a/checkout/src/main/java/company/tap/checkout/open/CheckoutFragment.kt	(revision 6419543f1db06d4e77ca44174bf5fb7662c51b65)
+++ b/checkout/src/main/java/company/tap/checkout/open/CheckoutFragment.kt	(date 1665664766909)
@@ -116,7 +116,7 @@
         val cardViewModel: CardViewModel by viewModels()
         this._viewModel = viewModel
         _Context?.let { cardViewModel.getContext(it) }
-        backgroundColor = (Color.parseColor(ThemeManager.getValue("GlobalValues.Colors.clear")))
+        backgroundColor =  (Color.parseColor(ThemeManager.getValue("GlobalValues.Colors.clear")))
         setStyle(DialogFragment.STYLE_NORMAL, R.style.DialogStyle)
         bottomSheetDialog.behavior.isDraggable= true
         val checkoutLayout: LinearLayout? = view.findViewById(R.id.fragment_all)
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"DesignSurface\">\n    <option name=\"filePathToZoomLevelMap\">\n      <map>\n        <entry key=\"app/src/main/res/menu/menumain.xml\" value=\"0.10912162162162162\" />\n        <entry key=\"app/src/main/res/xml/root_preferences.xml\" value=\"0.10912162162162162\" />\n        <entry key=\"checkout/src/main/res/drawable/cc.xml\" value=\"0.2335\" />\n        <entry key=\"checkout/src/main/res/drawable/close_ic.xml\" value=\"0.2335\" />\n        <entry key=\"checkout/src/main/res/layout/activity_check_out.xml\" value=\"0.1437841530054645\" />\n        <entry key=\"checkout/src/main/res/layout/cardviewholder_layout1.xml\" value=\"0.1\" />\n        <entry key=\"checkout/src/main/res/layout/fragment_checkouttaps.xml\" value=\"0.1437841530054645\" />\n        <entry key=\"checkout/src/main/res/layout/item_saved_card.xml\" value=\"0.1445945945945946\" />\n        <entry key=\"checkout/src/main/res/layout/loyalty_view_layout.xml\" value=\"0.1437841530054645\" />\n        <entry key=\"checkout/src/main/res/layout/payment_inputt_layout.xml\" value=\"0.1437841530054645\" />\n        <entry key=\"checkout/src/main/res/layout/switch_layout.xml\" value=\"0.14290540540540542\" />\n      </map>\n    </option>\n  </component>\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_11\" default=\"true\" project-jdk-name=\"11\" project-jdk-type=\"JavaSDK\" />\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 6419543f1db06d4e77ca44174bf5fb7662c51b65)
+++ b/.idea/misc.xml	(date 1665652988634)
@@ -3,10 +3,12 @@
   <component name="DesignSurface">
     <option name="filePathToZoomLevelMap">
       <map>
+        <entry key="app/src/main/res/layout/activity_main.xml" value="0.15307971014492755" />
         <entry key="app/src/main/res/menu/menumain.xml" value="0.10912162162162162" />
         <entry key="app/src/main/res/xml/root_preferences.xml" value="0.10912162162162162" />
         <entry key="checkout/src/main/res/drawable/cc.xml" value="0.2335" />
         <entry key="checkout/src/main/res/drawable/close_ic.xml" value="0.2335" />
+        <entry key="checkout/src/main/res/drawable/layout_bb.xml" value="0.173" />
         <entry key="checkout/src/main/res/layout/activity_check_out.xml" value="0.1437841530054645" />
         <entry key="checkout/src/main/res/layout/cardviewholder_layout1.xml" value="0.1" />
         <entry key="checkout/src/main/res/layout/fragment_checkouttaps.xml" value="0.1437841530054645" />
@@ -18,5 +20,5 @@
     </option>
   </component>
   <component name="ExternalStorageConfigurationManager" enabled="true" />
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="11" project-jdk-type="JavaSDK" />
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" project-jdk-name="11" project-jdk-type="JavaSDK" />
 </project>
\ No newline at end of file
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"CompilerConfiguration\">\n    <bytecodeTargetLevel target=\"11\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
--- a/.idea/compiler.xml	(revision 6419543f1db06d4e77ca44174bf5fb7662c51b65)
+++ b/.idea/compiler.xml	(date 1665651208465)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="CompilerConfiguration">
-    <bytecodeTargetLevel target="11" />
+    <bytecodeTargetLevel target="1.8" />
   </component>
 </project>
\ No newline at end of file
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\n  <component name=\"GradleSettings\">\n    <option name=\"linkedExternalProjectsSettings\">\n      <GradleProjectSettings>\n        <option name=\"testRunner\" value=\"GRADLE\" />\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\n        <option name=\"gradleJvm\" value=\"#JAVA_HOME\" />\n        <option name=\"modules\">\n          <set>\n            <option value=\"$PROJECT_DIR$\" />\n            <option value=\"$PROJECT_DIR$/app\" />\n            <option value=\"$PROJECT_DIR$/checkout\" />\n          </set>\n        </option>\n        <option name=\"resolveModulePerSourceSet\" value=\"false\" />\n      </GradleProjectSettings>\n    </option>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
--- a/.idea/gradle.xml	(revision 6419543f1db06d4e77ca44174bf5fb7662c51b65)
+++ b/.idea/gradle.xml	(date 1665651208467)
@@ -7,7 +7,8 @@
         <option name="testRunner" value="GRADLE" />
         <option name="distributionType" value="DEFAULT_WRAPPED" />
         <option name="externalProjectPath" value="$PROJECT_DIR$" />
-        <option name="gradleJvm" value="#JAVA_HOME" />
+        <option name="gradleHome" value="/usr/local/Cellar/gradle/6.7.1/libexec" />
+        <option name="gradleJvm" value="1.8" />
         <option name="modules">
           <set>
             <option value="$PROJECT_DIR$" />
@@ -15,7 +16,6 @@
             <option value="$PROJECT_DIR$/checkout" />
           </set>
         </option>
-        <option name="resolveModulePerSourceSet" value="false" />
       </GradleProjectSettings>
     </option>
   </component>
Index: checkout/src/main/res/layout/fragment_checkouttaps.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.cardview.widget.CardView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:windowSoftInputMode=\"adjustResize|adjustPan\"\n    android:orientation=\"vertical\"\n    android:fillViewport=\"true\"\n    android:clipToOutline=\"true\"\n    app:cardCornerRadius=\"1.5dp\"\n    app:cardBackgroundColor=\"#10ffffff\"\n\n\n\n    tools:context=\".open.CheckoutFragment\">\n    <androidx.core.widget.NestedScrollView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        app:behavior_hideable=\"false\"\n        app:behavior_peekHeight=\"0dp\"\n        android:clipToOutline=\"true\"\n        app:layout_behavior=\"com.google.android.material.bottomsheet.BottomSheetBehavior\"\n        android:id=\"@+id/scrollView\">\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n\n        android:orientation=\"vertical\"\n        android:windowSoftInputMode=\"adjustResize|adjustPan\"\n\n        tools:context=\".open.CheckoutFragment\">\n\n        <FrameLayout\n            android:id=\"@+id/webFrameLayout\"\n            android:layout_width=\"match_parent\"\n            android:visibility=\"gone\"\n            android:layout_marginTop=\"12dp\"\n            android:layout_height=\"match_parent\" />\n<RelativeLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:clipToOutline=\"true\"\n\n    android:gravity=\"center\">\n  <!--  android:background=\"@drawable/layout_bg\"-->\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"vertical\"\n        android:id=\"@+id/headerLayout\"\n\n        tools:context=\".open.CheckoutFragment\">\n\n        <LinearLayout\n            android:id=\"@+id/fragment_all\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n\n            android:visibility=\"visible\"\n\n            android:orientation=\"vertical\" />\n\n        <!-- <LinearLayout\n             android:id=\"@+id/sdkContainer\"\n             android:layout_width=\"match_parent\"\n             android:layout_height=\"wrap_content\"\n             android:orientation=\"vertical\"\n            >\n         </LinearLayout>-->\n\n\n        <FrameLayout\n            android:id=\"@+id/fragment_container_nfc_lib\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:layout_gravity=\"bottom\"\n            android:orientation=\"vertical\"\n            android:visibility=\"gone\"\n            android:gravity=\"bottom\"/>\n\n\n\n        <FrameLayout\n            android:id=\"@+id/inline_container\"\n            android:layout_width=\"match_parent\"\n            android:visibility=\"gone\"\n            android:layout_height=\"500dp\"\n            android:layout_margin=\"20dp\" />\n\n\n    </LinearLayout>\n    <!--Kept webframelayout outside so that it takes full screen-->\n\n\n    <company.tap.tapuilibrary.uikit.atoms.TapTextView\n        android:id=\"@+id/closeText\"\n        android:layout_width=\"48dp\"\n        android:layout_height=\"40dp\"\n        android:layout_alignParentEnd=\"true\"\n        android:layout_gravity=\"end\"\n        android:layout_marginEnd=\"10dp\"\n        android:gravity=\"center\"\n        android:text=\"CLOSE\"\n        android:textColor=\"@color/dark_gray\"\n        android:textSize=\"12sp\"\n        android:visibility=\"gone\" />\n\n    <company.tap.tapuilibrary.uikit.atoms.TapImageView\n        android:layout_width=\"40dp\"\n        android:layout_height=\"40dp\"\n        android:id=\"@+id/closeImage\"\n        android:src=\"@drawable/ic_close\"\n        android:gravity=\"center\"\n        android:layout_marginEnd=\"10dp\"\n        android:text=\"close\"\n        android:visibility=\"gone\"\n        android:layout_alignParentEnd=\"true\"\n        android:layout_gravity=\"end\"/>\n\n\n</RelativeLayout>\n    </LinearLayout>\n        </androidx.core.widget.NestedScrollView>\n\n\n</androidx.cardview.widget.CardView>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout/src/main/res/layout/fragment_checkouttaps.xml b/checkout/src/main/res/layout/fragment_checkouttaps.xml
--- a/checkout/src/main/res/layout/fragment_checkouttaps.xml	(revision 6419543f1db06d4e77ca44174bf5fb7662c51b65)
+++ b/checkout/src/main/res/layout/fragment_checkouttaps.xml	(date 1665651199740)
@@ -29,7 +29,6 @@
 
         android:orientation="vertical"
         android:windowSoftInputMode="adjustResize|adjustPan"
-
         tools:context=".open.CheckoutFragment">
 
         <FrameLayout
