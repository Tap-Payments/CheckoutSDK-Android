Index: checkout/src/main/java/company/tap/checkout/internal/viewmodels/CheckoutViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package company.tap.checkout.internal.viewmodels\n\nimport android.annotation.SuppressLint\nimport android.app.Activity\nimport android.content.Context\nimport android.content.Intent\nimport android.content.res.Resources\nimport android.graphics.Color\nimport android.graphics.drawable.ShapeDrawable\nimport android.net.Uri\nimport android.os.Build\nimport android.os.Handler\nimport android.os.Looper\nimport android.text.format.DateFormat\nimport android.util.Log\nimport android.view.View\nimport android.view.View.GONE\nimport android.view.ViewGroup\nimport android.view.animation.AnimationUtils\nimport android.widget.FrameLayout\nimport android.widget.LinearLayout\nimport androidx.annotation.Nullable\nimport androidx.annotation.RequiresApi\nimport androidx.annotation.RestrictTo\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.core.view.isNotEmpty\nimport androidx.core.view.isVisible\nimport androidx.fragment.app.FragmentManager\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.ViewModel\nimport androidx.recyclerview.widget.DividerItemDecoration\nimport androidx.transition.Fade\nimport androidx.transition.Scene\nimport androidx.transition.Transition\nimport androidx.transition.TransitionManager\nimport cards.pay.paycardsrecognizer.sdk.FrameManager\nimport cards.pay.paycardsrecognizer.sdk.ui.InlineViewCallback\nimport com.bugfender.sdk.Bugfender\nimport com.bumptech.glide.Glide\nimport com.fasterxml.jackson.databind.ObjectMapper\nimport com.google.android.gms.wallet.PaymentData\nimport com.google.android.material.bottomsheet.BottomSheetBehavior\nimport com.google.android.material.bottomsheet.BottomSheetDialog\nimport com.google.gson.Gson\nimport com.google.gson.JsonObject\nimport company.tap.cardinputwidget.CardBrandSingle\nimport company.tap.cardinputwidget.CardInputUIStatus\nimport company.tap.cardinputwidget.widget.CardInputListener\nimport company.tap.cardscanner.*\nimport company.tap.checkout.R\nimport company.tap.checkout.internal.PaymentDataProvider\nimport company.tap.checkout.internal.adapter.CardTypeAdapterUIKIT\nimport company.tap.checkout.internal.adapter.CurrencyTypeAdapter\nimport company.tap.checkout.internal.adapter.GoPayCardAdapterUIKIT\nimport company.tap.checkout.internal.adapter.ItemAdapter\nimport company.tap.checkout.internal.api.enums.ChargeStatus\nimport company.tap.checkout.internal.api.enums.PaymentType\nimport company.tap.checkout.internal.api.models.*\nimport company.tap.checkout.internal.api.requests.CreateTokenGPayRequest\nimport company.tap.checkout.internal.api.responses.DeleteCardResponse\nimport company.tap.checkout.internal.api.responses.InitResponseModel\nimport company.tap.checkout.internal.api.responses.MerchantData\nimport company.tap.checkout.internal.api.responses.PaymentOptionsResponse\nimport company.tap.checkout.internal.apiresponse.CardViewEvent\nimport company.tap.checkout.internal.apiresponse.CardViewModel\nimport company.tap.checkout.internal.apiresponse.UserRepository\nimport company.tap.checkout.internal.apiresponse.testmodels.GoPaySavedCards\nimport company.tap.checkout.internal.apiresponse.testmodels.TapCardPhoneListDataSource\nimport company.tap.checkout.internal.cache.SharedPrefManager\nimport company.tap.checkout.internal.cache.UserSupportedLocaleForTransactions\nimport company.tap.checkout.internal.enums.PaymentTypeEnum\nimport company.tap.checkout.internal.enums.SectionType\nimport company.tap.checkout.internal.enums.WebViewType\nimport company.tap.checkout.internal.interfaces.*\nimport company.tap.checkout.internal.utils.*\nimport company.tap.checkout.internal.utils.AmountCalculator.calculateExtraFeesAmount\nimport company.tap.checkout.internal.viewholders.*\nimport company.tap.checkout.internal.webview.WebFragment\nimport company.tap.checkout.internal.webview.WebViewContract\nimport company.tap.checkout.open.CheckOutActivity\nimport company.tap.checkout.open.CheckoutFragment\nimport company.tap.checkout.open.controller.SDKSession\nimport company.tap.checkout.open.controller.SDKSession.supportFragmentManager\nimport company.tap.checkout.open.controller.SDKSession.tabAnimatedActionButton\nimport company.tap.checkout.open.controller.SessionManager\nimport company.tap.checkout.open.data_managers.PaymentDataSource\nimport company.tap.checkout.open.enums.CardType\nimport company.tap.checkout.open.enums.TransactionMode\nimport company.tap.checkout.open.models.ItemsModel\nimport company.tap.nfcreader.open.reader.TapEmvCard\nimport company.tap.taplocalizationkit.LocalizationManager\nimport company.tap.tapuilibrary.themekit.ThemeManager\nimport company.tap.tapuilibrary.themekit.theme.SeparatorViewTheme\nimport company.tap.tapuilibrary.uikit.datasource.LoyaltyHeaderDataSource\nimport company.tap.tapuilibrary.uikit.enums.ActionButtonState\nimport company.tap.tapuilibrary.uikit.enums.GoPayLoginMethod\nimport company.tap.tapuilibrary.uikit.fragment.NFCFragment\nimport company.tap.tapuilibrary.uikit.ktx.loadAppThemManagerFromPath\nimport company.tap.tapuilibrary.uikit.ktx.makeLinks\nimport company.tap.tapuilibrary.uikit.ktx.setTopBorders\nimport company.tap.tapuilibrary.uikit.views.TabAnimatedActionButton\nimport kotlinx.android.synthetic.main.amountview_layout.view.*\nimport kotlinx.android.synthetic.main.businessview_layout.view.*\nimport kotlinx.android.synthetic.main.cardviewholder_layout1.view.*\nimport kotlinx.android.synthetic.main.gopaysavedcard_layout.view.*\nimport kotlinx.android.synthetic.main.itemviewholder_layout.view.*\nimport kotlinx.android.synthetic.main.loyalty_view_layout.view.*\nimport kotlinx.android.synthetic.main.otpview_layout.view.*\nimport kotlinx.android.synthetic.main.switch_layout.view.*\nimport mobi.foo.benefitinapp.data.Transaction\nimport mobi.foo.benefitinapp.listener.CheckoutListener\nimport mobi.foo.benefitinapp.utils.BenefitInAppCheckout\nimport org.json.JSONException\nimport org.json.JSONObject\nimport java.math.BigDecimal\nimport kotlin.properties.Delegates\n\n\n/**\n *\n * Copyright Â© 2020 Tap Payments. All rights reserved.\n *\n */\n\nconst val animationSpeed = 50L\n@RestrictTo(RestrictTo.Scope.LIBRARY)\nopen class CheckoutViewModel : ViewModel(), BaseLayoutManager, OnCardSelectedActionListener,\n    PaymentCardComplete, onCardNFCCallListener, OnCurrencyChangedActionListener, WebViewContract,\n    TapTextRecognitionCallBack, TapScannerCallback, CheckoutListener {\n    private var savedCardList: MutableList<SavedCard>? = mutableListOf()\n    private var arrayListSavedCardSize = ArrayList<SavedCard>()\n    private var supportedLoyalCards = MutableLiveData<List<LoyaltySupportedCurrency>>()\n    private var paymentOptionsList = MutableLiveData<List<PaymentOption>>()\n    private var goPayCardList = MutableLiveData<List<GoPaySavedCards>>()\n    private var selectedViewToBeDeletedFromCardViewHolder: ViewGroup? = null\n    private var viewToBeBlurCardViewHolder: View? = null\n\n    private var allCurrencies = MutableLiveData<List<SupportedCurrencies>>()\n    private var selectedItemsDel by Delegates.notNull<Int>()\n    private var cardIDToBeDeleted: Int? = 0\n\n    private val isShaking = MutableLiveData<Boolean>()\n    val localCurrencyReturned = MutableLiveData<Boolean>()\n    val powerdByTapAnimationFinished = MutableLiveData<Boolean>()\n\n    private var deleteCard: Boolean = false\n    private var isCardDeletedSuccessfully: Boolean = false\n    private var displayItemsOpen: Boolean = false\n    private var displayOtpIsOpen: Boolean = false\n    private var saveCardSwitchHolder: SwitchViewHolder? = null\n    lateinit var userRepository: UserRepository\n\n    private lateinit var title: String\n    private lateinit var paymentInlineViewHolder: PaymentInlineViewHolder\n    private lateinit var goPaySavedCardHolder: GoPaySavedCardHolder\n    private lateinit var businessViewHolder: BusinessViewHolder\n    private lateinit var amountViewHolder: AmountViewHolder\n    private lateinit var currencyAdapter: CurrencyTypeAdapter\n    private lateinit var goPayAdapter: GoPayCardAdapterUIKIT\n    private lateinit var goPayViewsHolder: GoPayViewsHolder\n    private lateinit var itemsViewHolder: ItemsViewHolder\n    private lateinit var cardViewHolder: CardViewHolder\n    private lateinit var webViewHolder: WebViewHolder\n    private lateinit var asynchronousPaymentViewHolder: AsynchronousPaymentViewHolder\n    private lateinit var loyaltyViewHolder: LoyaltyViewHolder\n\n    private var tabAnimatedActionButtonViewHolder: TabAnimatedActionButtonViewHolder? = null\n    private lateinit var bottomSheetDialog: BottomSheetDialog\n    private lateinit var fragmentManager: FragmentManager\n\n    @SuppressLint(\"StaticFieldLeak\")\n    private lateinit var bottomSheetLayout: FrameLayout\n\n    @Nullable\n    internal lateinit var selectedAmount: String\n\n    @Nullable\n    lateinit var selectedCurrency: String\n\n    companion object {\n        var currencySelectedForCheck: String = \"\"\n    }\n\n    private var fee: BigDecimal? = BigDecimal.ZERO\n    val provider: IPaymentDataProvider = PaymentDataProvider()\n    private var webPaymentOptions: java.util.ArrayList<PaymentOption> = ArrayList()\n    @JvmField\n    var currentCurrency: String = \"\"\n\n    @JvmField\n    var currentCurrencySymbol: String = \"\"\n\n\n    @JvmField\n    var finalCurrencySymbol: String = \"\"\n\n    @JvmField\n    var currentAmount: String = \"\"\n    private lateinit var adapter: CardTypeAdapterUIKIT\n    private lateinit var itemAdapter: ItemAdapter\n    private lateinit var otpViewHolder: OTPViewHolder\n\n    @SuppressLint(\"StaticFieldLeak\")\n    private lateinit var webFrameLayout: FrameLayout\n\n    @SuppressLint(\"StaticFieldLeak\")\n    private lateinit var frameLayout: FrameLayout\n\n    @SuppressLint(\"StaticFieldLeak\")\n    private lateinit var inLineCardLayout: FrameLayout\n\n    @SuppressLint(\"StaticFieldLeak\")\n    private lateinit var headerLayout: LinearLayout\n\n    @SuppressLint(\"StaticFieldLeak\")\n    private lateinit var sdkLayout: LinearLayout\n    private lateinit var checkoutFragment: CheckoutFragment\n    private lateinit var itemList: List<ItemsModel>\n    private lateinit var unModifiedItemList: List<ItemsModel>\n    private lateinit var selectedPaymentOption: PaymentOption\n\n    @SuppressLint(\"StaticFieldLeak\")\n    private lateinit var context: Context\n    private lateinit var cardViewModel: CardViewModel\n    private var otpTypeString: PaymentTypeEnum = PaymentTypeEnum.SAVEDCARD\n    private lateinit var paymentActionType: PaymentType\n    private val nfcFragment = NFCFragment()\n\n\n    //  private val inlineViewFragment = InlineViewFragment()\n    private val inlineCamerFragment = CameraFragment()\n    private var isInlineOpened = false\n\n    @JvmField\n    var isNFCOpened = false\n    private var textRecognitionML: TapTextRecognitionML? = null\n    private lateinit var intent: Intent\n    private lateinit var inlineViewCallback: InlineViewCallback\n    lateinit var tapCardPhoneListDataSource: ArrayList<TapCardPhoneListDataSource>\n    lateinit var paymentOptionsResponse: PaymentOptionsResponse\n    lateinit var initResponseModel: InitResponseModel\n    lateinit var redirectURL: String\n    lateinit var cardId: String\n    var currencyOldRate: BigDecimal? = null\n    var currentCalculatedAmount: BigDecimal? = null\n    var lastSelectedCurrency: String? = null\n    var loyatFlag: Boolean? = false\n\n    @JvmField\n    var isSavedCardSelected: Boolean? = false\n\n    @JvmField\n    var globalChargeResponse: Charge? = null\n\n    @JvmField\n    var selectedTotalAmount: String? = null\n\n    @JvmField\n    var selectedAmountPos: BigDecimal? = null\n\n    @JvmField\n    var selectedCurrencyPos: String? = null\n\n    lateinit var paymentOptionsWorker: java.util.ArrayList<PaymentOption>\n\n\n    val appId: String = \"4530082749\"\n    val merchantId: String = \"00000101\"\n    val seceret: String = \"3l5e0cstdim11skgwoha8x9vx9zo0kxxi4droryjp4eqd\"\n    val countrycode: String = \"1001\"\n    val mcc: String = \"4816\"\n\n    @JvmField\n    var incrementalCount: Int = 0\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun initLayoutManager(\n        bottomSheetDialog: BottomSheetDialog,\n        context: Context,\n        fragmentManager: FragmentManager,\n        sdkLayout: LinearLayout,\n        frameLayout: FrameLayout,\n        webFrameLayout: FrameLayout,\n        inLineCardLayout: FrameLayout,\n        inlineViewCallback: InlineViewCallback,\n        intent: Intent,\n        cardViewModel: CardViewModel,\n        checkoutFragment: CheckoutFragment,\n        headerLayout: LinearLayout\n    ) {\n        this.context = context\n        this.fragmentManager = fragmentManager\n        this.sdkLayout = sdkLayout\n        this.frameLayout = frameLayout\n        this.webFrameLayout = webFrameLayout\n        this.bottomSheetDialog = bottomSheetDialog\n        this.inLineCardLayout = inLineCardLayout\n        this.inlineViewCallback = inlineViewCallback\n        this.intent = intent\n        this.cardViewModel = cardViewModel\n        this.checkoutFragment = checkoutFragment\n        this.headerLayout = headerLayout\n\n        val aScene: Scene? = Scene.getCurrentScene(sdkLayout)\n        aScene?.setEnterAction {\n            AnimationUtils.loadAnimation(context, R.anim.slide_down)\n        }\n        initializeScanner(this)\n        initViewHolders()\n        initAmountAction()\n        initSwitchAction()\n        initOtpActionButton()\n        setAllSeparatorTheme()\n\n\n    }\n\n    init {\n        powerdByTapAnimationFinished.value = false\n    }\n\n    private fun initLoyaltyView() {\n        if (SDKSession.enableLoyalty == true) {\n            /*removeViews(saveCardSwitchHolder)\n            addViews(loyaltyViewHolder,saveCardSwitchHolder)*/\n            removeAllViews()\n            addViews(\n                businessViewHolder,\n                amountViewHolder,\n                cardViewHolder,\n                paymentInlineViewHolder,\n                loyaltyViewHolder,\n                saveCardSwitchHolder\n            )\n            loyaltyViewHolder.view.loyaltyView.constraintLayout?.visibility = View.VISIBLE\n\n        } else\n            loyaltyViewHolder.view.loyaltyView.constraintLayout?.visibility = GONE\n    }\n\n    private fun initializeScanner(checkoutViewModel: CheckoutViewModel) {\n        textRecognitionML = TapTextRecognitionML(checkoutViewModel)\n        textRecognitionML?.addTapScannerCallback(checkoutViewModel)\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun initOtpActionButton() {\n\n        otpViewHolder.otpView.otpViewActionButton.setOnClickListener {\n            //Added to hide keyboard if open\n            CustomUtils.hideKeyboardFrom(context as Activity, otpViewHolder.view)\n            when (otpTypeString) {\n                PaymentTypeEnum.GOPAY ->\n                    goPayViewsHolder.onOtpButtonConfirmationClick(otpViewHolder.otpView.otpViewInput1.text.toString())\n\n\n                PaymentTypeEnum.SAVEDCARD -> confirmOTPCode(otpViewHolder.otpView.otpViewInput1.text.toString())\n                else -> {\n\n                    removeViews(\n                        businessViewHolder,\n                        amountViewHolder,\n                        paymentInlineViewHolder,\n                        cardViewHolder,\n                        saveCardSwitchHolder,\n                        otpViewHolder\n                    )\n                    addViews(\n                        businessViewHolder,\n                        amountViewHolder,\n                        cardViewHolder,\n                        paymentInlineViewHolder,\n                        saveCardSwitchHolder\n                    )\n                    saveCardSwitchHolder?.view?.mainSwitch?.switchSaveMobile?.visibility =\n                        GONE\n                    val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n                    val nowString: String = LocalizationManager.getValue(\"now\", \"ActionButton\")\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n                        false,\n                        \"en\",\n                        if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                            payString + \" \" + nowString\n                        } else {\n                            payString + \" \" + nowString\n                        },\n                        Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.paymentBackgroundColor\")),\n                        Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.titleLabelColor\")),\n                    )\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = View.VISIBLE\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                        ActionButtonState.IDLE\n                    )\n                    paymentInlineViewHolder.tapMobileInputView.clearNumber()\n\n                }\n            }\n        }\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun confirmOTPCode(otpCode: String) {\n        otpViewHolder.view.otpView.otpViewActionButton.setDisplayMetrics(\n            CustomUtils.getDeviceDisplayMetrics(\n                context as Activity\n            )\n        )\n        otpViewHolder.view.otpView.otpViewActionButton.changeButtonState(ActionButtonState.LOADING)\n        when (PaymentDataSource.getTransactionMode()) {\n            TransactionMode.PURCHASE -> sendChargeOTPCode(otpCode)\n            TransactionMode.AUTHORIZE_CAPTURE -> sendAuthorizeOTPCode(otpCode)\n            else -> sendChargeOTPCode(otpCode)\n        }\n\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun sendAuthorizeOTPCode(otpCode: String) {\n        cardViewModel.processEvent(\n            CardViewEvent.AuthenticateAuthorizeTransaction,\n            this,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            otpCode\n        )\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun sendChargeOTPCode(otpCode: String) {\n        cardViewModel.processEvent(\n            CardViewEvent.AuthenticateChargeTransaction,\n            this,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            otpCode\n        )\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun initViewHolders() {\n        businessViewHolder = BusinessViewHolder(context, this)\n        amountViewHolder = AmountViewHolder(context, this,this)\n        tabAnimatedActionButtonViewHolder = TabAnimatedActionButtonViewHolder(context)\n        cardViewHolder = CardViewHolder(context, this)\n        goPaySavedCardHolder = GoPaySavedCardHolder(context, this, this)\n        saveCardSwitchHolder = SwitchViewHolder(context, this)\n        loyaltyViewHolder = LoyaltyViewHolder(context, this, this)\n\n        headerLayout.let { it1 ->\n            setTopBorders(\n                view = it1,\n                cornerRadius = 35f,\n                strokeWidth = 0.0f,\n                strokeColor = loadAppThemManagerFromPath(AppColorTheme.PoweredByTapBackgroundColor),// stroke color\n                tintColor = loadAppThemManagerFromPath(AppColorTheme.PoweredByTapBackgroundColor),// tint color\n                shadowColor = loadAppThemManagerFromPath(AppColorTheme.PoweredByTapBackgroundColor)\n            )\n\n        }//\n        paymentInlineViewHolder = PaymentInlineViewHolder(\n            context, this,\n            this,\n            this,\n            saveCardSwitchHolder,\n            this,\n            cardViewModel, checkoutFragment, loyaltyViewHolder\n        )\n\n        itemsViewHolder = ItemsViewHolder(context, this)\n        otpViewHolder = OTPViewHolder(context)\n        otpViewHolder.otpView.visibility = GONE\n        otpViewHolder.otpView.requestFocus()\n        otpViewHolder.otpView.otpViewInput1.cursorColor =\n            Color.parseColor(ThemeManager.getValue(\"TapOtpView.OtpController.activeBottomColor\"))\n        otpViewHolder.otpView.otpViewInput1.setLineColorInactive(\n            Color.parseColor(\n                ThemeManager.getValue(\n                    \"TapOtpView.OtpController.bottomLineColor\"\n                )\n            )\n        )\n        otpViewHolder.otpView.otpViewInput1.setLineColorActive(\n            Color.parseColor(\n                ThemeManager.getValue(\n                    \"TapOtpView.OtpController.activeBottomColor\"\n                )\n            )\n        )\n        otpViewHolder.otpView.otpViewInput1.isCursorVisible = true\n        goPayViewsHolder = GoPayViewsHolder(context, this, otpViewHolder)\n        asynchronousPaymentViewHolder = AsynchronousPaymentViewHolder(context, this)\n        logicForLoyaltyProgram()\n\n       amountViewHolder.view.amount_section.tapChipPopup.setOnClickListener {\n            amountViewHolder.view.amount_section.tapChipPopup.slideFromLeftToRight()\n            with(SharedPrefManager.getUserSupportedLocaleForTransactions(context)!!) {\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n                    submitNewLocalCurrency(\n                        currencySelected = currency.toString(),\n                        currencyRate = rate?.toBigDecimal()!!,\n                        totalSelectedAmount = amount,\n                        selectedCurrencySymbol = symbol ?: \"\"\n                    )\n                }\n            }\n\n\n        }\n    }\n\n    private fun showCountryFlag(): String? {\n        val currency = SharedPrefManager.getUserSupportedLocaleForTransactions(context)\n        Log.e(\"localNeeded\", currency.toString())\n        if (ThemeManager.currentTheme.contains(\"dark\")) {\n            return currency?.logos?.dark?.png\n        } else {\n            return currency?.logos?.light?.png\n        }\n    }\n\n    private fun initSwitchAction() {\n        saveCardSwitchHolder?.view?.mainSwitch?.mainSwitch?.visibility = GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.switchGoPayCheckout?.isChecked = false\n        saveCardSwitchHolder?.view?.cardSwitch?.switchGoPayCheckout?.visibility = GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.saveGoPay?.visibility = GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.alertGoPaySignUp?.visibility = GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.switchSeparator?.visibility = GONE\n    }\n\n    private fun initAmountAction() {\n        amountViewHolder.setOnItemsClickListener()\n        amountViewHolder.view.amount_section.mainKDAmountValue.visibility = GONE\n    }\n\n\n    override fun displayStartupLayout(enabledSections: ArrayList<SectionType>) {\n        //Todo based on api response logic for switch case\n        when (PaymentDataSource.getTransactionMode()) {\n\n            TransactionMode.TOKENIZE_CARD -> {\n                addViews(\n                    businessViewHolder,\n                    paymentInlineViewHolder,\n                    saveCardSwitchHolder\n                )\n\n            }\n            TransactionMode.SAVE_CARD -> {\n                addViews(\n                    businessViewHolder,\n                    paymentInlineViewHolder,\n                    saveCardSwitchHolder\n                )\n            }\n            else -> {\n\n\n                if (PaymentDataSource.getPaymentDataType() == \"WEB\") {\n                    addViews(\n                        businessViewHolder,\n                        amountViewHolder,\n                        cardViewHolder,\n                        saveCardSwitchHolder\n                    )\n                    cardViewHolder.cardInfoHeaderText?.visibility = GONE\n                } else if (PaymentDataSource.getPaymentDataType() == \"CARD\") {\n                    addViews(\n                        businessViewHolder,\n                        paymentInlineViewHolder, saveCardSwitchHolder\n                    )\n                    cardViewHolder.cardInfoHeaderText.visibility = View.VISIBLE\n                } else\n                //Checkimg to be removed once loyalty enabled form api level onluy else will be there\n                    if (SDKSession.enableLoyalty == true) {\n                        addViews(\n                            businessViewHolder,\n                            amountViewHolder,\n                            cardViewHolder,\n                            paymentInlineViewHolder,\n                            loyaltyViewHolder,\n                            saveCardSwitchHolder\n                        )\n                    } else {\n                        addViews(\n                            businessViewHolder,\n                            amountViewHolder,\n                            cardViewHolder,\n                            paymentInlineViewHolder,\n                            saveCardSwitchHolder\n                        )\n                    }\n\n\n            }\n        }\n\n        saveCardSwitchHolder?.view?.mainSwitch?.mainSwitchLinear?.setBackgroundColor(\n            Color.parseColor(\n                ThemeManager.getValue(\n                    \"TapSwitchView.main.backgroundColor\"\n                )\n            )\n        )\n        inLineCardLayout.visibility = GONE\n        amountViewHolder.readyToScanVisibility(false)\n        saveCardSwitchHolder?.view?.cardviewSwitch?.cardElevation = 0f\n        SDKSession.activity?.let {\n            CustomUtils.getDeviceDisplayMetrics(\n                it\n            )\n        }?.let { saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setDisplayMetrics(it) }\n\n\n    }\n\n    fun setBottomSheetLayout(bottomSheetLayout: FrameLayout) {\n        this.bottomSheetLayout = bottomSheetLayout\n        bottomSheetLayout.clipToOutline = true\n        bottomSheetLayout.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"horizontalList.backgroundColor\")))\n        // bottomSheetLayout.setBackgroundColor(Color.RED)\n        bottomSheetLayout.let { it1 ->\n            setTopBorders(\n                it1,\n                40f,// corner raduis\n                0.0f,\n                Color.parseColor(ThemeManager.getValue(\"horizontalList.backgroundColor\")),// stroke color\n                Color.parseColor(ThemeManager.getValue(\"horizontalList.backgroundColor\")),// tint color\n                Color.parseColor(ThemeManager.getValue(\"horizontalList.backgroundColor\"))\n            )\n\n\n        }\n    }\n\n    override fun displayGoPayLogin() {\n        saveCardSwitchHolder?.let {\n            removeViews(\n                businessViewHolder, amountViewHolder,\n                cardViewHolder, paymentInlineViewHolder,\n                it, otpViewHolder,\n                goPayViewsHolder\n            )\n        }\n\n        addViews(businessViewHolder, amountViewHolder, goPayViewsHolder)\n        if (goPayViewsHolder.goPayopened) {\n            goPayViewsHolder.goPayLoginInput.inputType = GoPayLoginMethod.PHONE\n            goPayViewsHolder.goPayLoginInput.visibility = View.VISIBLE\n            saveCardSwitchHolder?.view?.cardSwitch?.switchGoPayCheckout?.visibility = View.VISIBLE\n        }\n        //TODO goPayAdapter.updateAdapterData(goPayCardList.value as List<GoPaySavedCards>)\n        amountViewHolder.changeGroupAction(false)\n        goPayViewsHolder.goPayopened = true\n    }\n\n\n    override fun displayGoPay() {\n\n        saveCardSwitchHolder?.let {\n            removeViews(\n                businessViewHolder,\n                amountViewHolder,\n                goPayViewsHolder,\n                cardViewHolder,\n                paymentInlineViewHolder,\n                it,\n                otpViewHolder\n            )\n        }\n\n        saveCardSwitchHolder?.let {\n            addViews(\n                businessViewHolder,\n                amountViewHolder,\n                goPaySavedCardHolder,\n                cardViewHolder,\n                paymentInlineViewHolder,\n                it\n            )\n        }\n\n        cardViewHolder.view.mainChipgroup.groupAction.visibility = View.INVISIBLE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = View.VISIBLE\n        saveCardSwitchHolder?.goPayisLoggedin = true\n        adapter.goPayOpenedfromMain(true)\n        adapter.removeItems()\n    }\n\n    override fun controlCurrency(display: Boolean) {\n        if (display) caseDisplayControlCurrency()\n        else caseNotDisplayControlCurrency()\n\n        displayItemsOpen = !display\n        amountViewHolder.changeGroupAction(!display)\n        // if (this::currentAmount.isInitialized)\n        if (this::selectedAmount.isInitialized && this::selectedCurrency.isInitialized) {\n            if (selectedAmount == currentAmount && selectedCurrency == currentCurrency) {\n                amountViewHolder.view.amount_section.mainKDAmountValue.visibility = GONE\n\n\n            } else {\n                amountViewHolder.updateSelectedCurrency(\n                    displayItemsOpen,\n                    selectedAmount, selectedCurrency,\n                    currentAmount, finalCurrencySymbol, currentCurrencySymbol\n                )\n\n            }\n//            if (display) {\n//                if (selectedCurrency != SharedPrefManager.getUserSupportedLocaleForTransactions(\n//                        context\n//                    )?.currency\n//                ) {\n//                    amountViewHolder.view.amount_section?.tapChipPopup?.addFadeInAnimation()\n//                } else {\n//                    amountViewHolder.view.amount_section?.tapChipPopup?.visibility = View.GONE\n//\n//                }\n//            }\n\n        }\n        if (otpViewHolder.otpView.isVisible) {\n            removeViews(otpViewHolder)\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.RESET)\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isClickable = true\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.stateListAnimator = null\n            val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n            val nowString: String = LocalizationManager.getValue(\"now\", \"ActionButton\")\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n                false,\n                \"en\",\n                if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                    payString + \" \" + nowString\n                } else {\n                    payString + \" \" + nowString\n                },\n                Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n                Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n            )\n//            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isActivated = false\n        }\n        if (PaymentDataSource.getPaymentDataType() != null && PaymentDataSource.getPaymentDataType() == \"WEB\") {\n            removeViews(paymentInlineViewHolder)\n        }\n        removeInlineScanner()\n        removeNFCViewFragment()\n\n        /*  Handler().postDelayed({\n              translateViewToNewHeight(bottomSheetLayout.measuredHeight,false)\n          },400)*/\n    }\n\n    override fun reOpenSDKState() {\n        //todo add back to sdk functionality\n\n        removeViews(otpViewHolder, amountViewHolder, paymentInlineViewHolder, saveCardSwitchHolder)\n        doAfterSpecificTime(time = 500L) {\n            with(cardViewHolder.view.mainChipgroup) {\n                mutableListOf<View>(\n                    chipsRecycler,\n                    groupAction,\n                    groupName\n                ).addFadeInAnimationToViews()\n            }\n\n        }\n\n        businessViewHolder.setDataFromAPI(\n            PaymentDataSource.getMerchantData()?.logo,\n            PaymentDataSource.getMerchantData()?.name\n        )\n        addViews(\n            amountViewHolder,\n            paymentInlineViewHolder,\n            saveCardSwitchHolder\n        )\n        amountViewHolder.view.amount_section.itemAmountLayout?.visibility = View.VISIBLE\n        amountViewHolder.view.amount_section.itemPopupLayout?.visibility = View.VISIBLE\n        amountViewHolder.view.amount_section.tapChipAmount?.visibility = View.VISIBLE\n        checkSelectedAmountInitiated()\n        amountViewHolder.changeGroupAction(false)\n        amountViewHolder.setOnItemsClickListener()\n        amountViewHolder.view.amount_section.flagImageView?.visibility = View.VISIBLE\n\n\n        saveCardSwitchHolder?.view?.visibility = View.VISIBLE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.RESET)\n        val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n        val nowString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n            false,\n            \"en\",\n            if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                payString + \" \" + nowString\n            } else {\n                payString + \" \" + nowString\n            },\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n        )\n\n    }\n\n\n    fun addTitlePaymentAndFlag() {\n        addDataToAmountView()\n        amountViewHolder.view.amount_section.tapChipPopup.slidefromRightToLeft()\n        amountViewHolder.view.amount_section.itemPopupLayout.applyGlowingEffect(getCurrencyColors())\n\n    }\n\n    fun addDataToAmountView() {\n        val currencyAlert: String = LocalizationManager.getValue(\"currencyAlert\", \"Common\")\n        amountViewHolder.view.amount_section.popupTextView.text =\n            currencyAlert + \" \" + checkoutFragment.getSimIsoCountryCurrency()\n        Glide.with(context).load(showCountryFlag())\n            .into(amountViewHolder.view.amount_section.flagImageView);\n        amountViewHolder.view.amount_section.tapChipAmount.bringToFront()\n\n    }\n\n    fun removevisibiltyCurrency() {\n        amountViewHolder.view.amount_section.tapChipPopup.visibility = GONE\n    }\n\n    fun getCurrencyColors(): Pair<Int, Int> {\n        var pair: Pair<Int, Int>? = null\n        if (ThemeManager.currentTheme.contains(\"dark\")) {\n            /**\n             * dark theme colors\n             */\n            pair = Pair(Color.parseColor(\"#211F1F\"), Color.parseColor(\"#343232\"))\n        } else {\n            /**\n             * light theme colors\n             */\n\n            pair = Pair(Color.parseColor(\"#F4F4F4\"), Color.parseColor(\"#E1E1E1\"))\n        }\n        return pair\n    }\n\n\n    /**\n     * case displaying @TODO:EGP /\n     */\n\n    private fun caseDisplayControlCurrency() {\n        /*  val newHeight = (context as Activity).window?.decorView?.measuredHeight\n          val viewGroupLayoutParams = bottomSheetLayout.layoutParams\n          viewGroupLayoutParams.height = newHeight ?: 0\n          bottomSheetLayout.layoutParams = viewGroupLayoutParams\n    */\n        val originalHeight: Int = sdkLayout.height\n\n        removeViews(\n            //  businessViewHolder,\n            // amountViewHolder,\n            cardViewHolder,\n            paymentInlineViewHolder,\n        )\n        addViews(\n            itemsViewHolder\n        )\n        //replaced original height with bottomSheetLayout height\n        Handler().postDelayed({\n            if (::bottomSheetLayout.isInitialized)\n                translateViewToNewHeight(bottomSheetLayout.measuredHeight, true)\n\n        }, animationSpeed)\n\n\n        /**\n         * will be replaced by itemList coming from the API**/\n        if (PaymentDataSource.getItems() != null) {\n            itemsViewHolder.view.itemRecylerView.adapter = itemAdapter\n            itemAdapter.updateAdapterData(itemList)\n        }\n        currencyAdapter.updateAdapterData(allCurrencies.value as List<SupportedCurrencies>)\n\n        frameLayout.visibility = View.VISIBLE\n        itemsViewHolder.itemsdisplayed = true\n\n        removeViews(\n            saveCardSwitchHolder,\n            goPayViewsHolder,\n            otpViewHolder,\n            // itemsViewHolder\n        )\n        //Hide keyboard of any open\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n            CustomUtils.hideKeyboardFrom(\n                paymentInlineViewHolder.view.context,\n                paymentInlineViewHolder.view\n            )\n        }\n    }\n\n    private fun caseNotDisplayControlCurrency() {\n        if (goPayViewsHolder.goPayopened || itemsViewHolder.itemsdisplayed) setActionGoPayOpenedItemsDisplayed()\n        else setActionNotGoPayOpenedNotItemsDisplayed()\n        Handler().postDelayed({\n            if (::bottomSheetLayout.isInitialized)\n                translateViewToNewHeight(bottomSheetLayout.measuredHeight, false)\n        }, animationSpeed)\n\n    }\n\n     fun translateViewToNewHeight(originalHeight: Int, expandHeightBool: Boolean) {\n        val sdkLayoutHeight = sdkLayout.height\n        val bottomSheetLayoutHeight = bottomSheetLayout.height\n        println(\"sdkLayoutHeight>>\" + sdkLayoutHeight)\n        println(\"originalHeight>>\" + originalHeight)\n        val resizeAnimation = ResizeAnimation(\n            bottomSheetLayout,\n            sdkLayoutHeight,\n            originalHeight, expandHeightBool\n        )\n        resizeAnimation.duration = 350\n        bottomSheetLayout.startAnimation(resizeAnimation)\n\n\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun setActionGoPayOpenedItemsDisplayed() {\n        removeViews(\n\n            cardViewHolder,\n            paymentInlineViewHolder,\n            saveCardSwitchHolder,\n            goPayViewsHolder,\n\n            otpViewHolder,\n            itemsViewHolder\n        )\n        if (::webViewHolder.isInitialized) {\n            removeViews(webViewHolder)\n        }\n        addViews(\n            cardViewHolder,\n            paymentInlineViewHolder,\n            saveCardSwitchHolder\n        )\n\n\n        paymentInlineViewHolder.resetPaymentCardView()\n        //itemsViewHolder.resetView()\n        //I comment   itemsViewHolder.setItemsRecylerView()\n        //  itemsViewHolder?.view?.itemRecylerView?.adapter = itemAdapter\n        frameLayout.visibility = GONE\n    }\n\n    private fun setActionNotGoPayOpenedNotItemsDisplayed() {\n        val originalHeight: Int = sdkLayout.height\n        saveCardSwitchHolder?.let {\n            removeViews(\n                cardViewHolder,\n                paymentInlineViewHolder,\n                it,\n                itemsViewHolder\n            )\n        }\n\n        if (::webViewHolder.isInitialized) removeViews(webViewHolder)\n\n        saveCardSwitchHolder?.let {\n            addViews(\n\n                cardViewHolder,\n                paymentInlineViewHolder,\n                it\n            )\n        }\n\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.IDLE)\n        // itemsViewHolder.resetView()\n        //  itemsViewHolder.setItemsRecylerView()\n        //   itemsViewHolder.setCurrencyRecylerView()\n        itemsViewHolder.view.mainCurrencyChip.chipsRecycler.adapter = currencyAdapter\n        //  itemsViewHolder.view.itemRecylerView.adapter =itemAdapter\n        frameLayout.visibility = GONE\n\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    @SuppressLint(\"SetTextI18n\")\n    override fun displayOTPView(\n        phoneNumber: PhoneNumber?,\n        otpType: String,\n        chargeResponse: Charge?\n    ) {\n\n\n        // amountViewHolder.changeGroupAction(false)\n        amountViewHolder.view.amount_section.itemCountButton.text = LocalizationManager.getValue(\n            \"close\",\n            \"Common\"\n        )\n        // amountViewHolder.view.amount_section.itemAmountLayout?.visibility = View.GONE\n        //  amountViewHolder.view.amount_section.itemPopupLayout?.visibility = View.GONE\n        amountViewHolder.view.amount_section.flagImageView?.visibility = GONE\n        amountViewHolder.view.amount_section.popupTextView.text = LocalizationManager.getValue(\n            \"close\",\n            \"Common\"\n        )\n\n\n        //  amountViewHolder.view.amount_section.itemCountButton?.visibility = View.GONE\n\n        displayOtpIsOpen = true\n        displayItemsOpen = false\n        when (otpType) {\n            PaymentTypeEnum.GOPAY.name -> {\n                displayOtpGoPay(phoneNumber)\n            }\n            PaymentTypeEnum.telecom.name -> {\n                displayOtpTelecoms(phoneNumber)\n            }\n            PaymentTypeEnum.SAVEDCARD.name -> {\n                displayOtpCharge(phoneNumber, chargeResponse)\n            }\n            else -> {\n                displayOtpCharge(phoneNumber, chargeResponse)\n            }\n        }\n    }\n\n    private fun displayOtpGoPay(phoneNumber: PhoneNumber?) {\n        // otpTypeString = PaymentTypeEnum.GOPAY //temporray\n        removeViews(\n            cardViewHolder,\n            paymentInlineViewHolder, saveCardSwitchHolder, amountViewHolder\n        )\n        addViews(amountViewHolder, otpViewHolder)\n\n        otpViewHolder.otpView.visibility = View.VISIBLE\n        setOtpPhoneNumber(phoneNumber)\n        otpViewHolder.otpView.changePhone.setOnClickListener {\n            goPayViewsHolder.onChangePhoneClicked()\n        }\n    }\n\n    @SuppressLint(\"SetTextI18n\")\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun displayOtpCharge(phoneNumber: PhoneNumber?, chargeResponse: Charge?) {\n        // otpTypeString = PaymentTypeEnum.GOPAY //temporray\n        println(\"mmmmmmmm\" + amountViewHolder?.originalAmount)\n        /*if(::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n            amountViewHolder.updateSelectedCurrency(\n                false,\n                selectedAmount,\n                selectedCurrency,\n                currentAmount,\n                currentCurrency\n            )\n            println(\"selectedAmount>>>>\" + selectedAmount)\n        }*/\n        removeViews(\n            cardViewHolder,\n            paymentInlineViewHolder, saveCardSwitchHolder, otpViewHolder\n        )\n        paymentInlineViewHolder.paymentInputContainer.applyBluryToView(showOriginalView = true)\n        // bottomSheetDialog.dismissWithAnimation\n        //start counter on open otpview\n        otpViewHolder?.otpView?.startCounter()\n        addViews(otpViewHolder)\n        otpViewHolder.otpView.visibility = View.VISIBLE\n        //Added to hide the Items-Amount button when OTP is opened\n        // amountViewHolder.view.amount_section.itemAmountLayout?.visibility = View.GONE\n        amountViewHolder.view.amount_section.tapChipAmount?.visibility = GONE\n        CustomUtils.showKeyboard(context)\n        setOtpPhoneNumber(phoneNumber)\n        otpViewHolder.otpView.changePhone.visibility = View.INVISIBLE\n        otpViewHolder.otpView.timerText.setOnClickListener {\n            resendOTPCode(chargeResponse)\n            otpViewHolder.otpView.restartTimer()\n        }\n        amountViewHolder.view.amount_section.mainKDAmountValue.visibility = GONE\n    }\n\n    private fun setOtpPhoneNumber(phoneNumber: PhoneNumber?) {\n\n        var replaced = \"\"\n        var countryCodeReplaced = \"\"\n        countryCodeReplaced = phoneNumber?.countryCode?.replace(\"0\", \"\").toString()\n        if (phoneNumber?.number?.length!! > 7)\n            replaced = (phoneNumber.number.toString()).replaceRange(1, 6, \"â¢â¢â¢â¢\")\n        otpViewHolder.otpView.mobileNumberText.text = \"+$countryCodeReplaced $replaced\"\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun resendOTPCode(chargeResponse: Charge?) {\n        if (chargeResponse != null) {\n            if (chargeResponse is Authorize) resendAuthorizeOTPCode(chargeResponse as Authorize?)\n            else resendChargeOTPCode(chargeResponse as Charge?)\n        }\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun resendAuthorizeOTPCode(authorize: Authorize?) {\n        cardViewModel.requestAuthenticateForAuthorizeTransaction(this, authorize)\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun resendChargeOTPCode(charge: Charge?) {\n        if (charge != null) {\n            cardViewModel.requestAuthenticateForChargeTransaction(this, charge)\n        }\n    }\n\n    private fun displayOtpTelecoms(phoneNumber: PhoneNumber?) {\n        otpTypeString = PaymentTypeEnum.telecom\n        removeViews(\n            businessViewHolder,\n            amountViewHolder,\n            paymentInlineViewHolder,\n            cardViewHolder,\n            saveCardSwitchHolder,\n            otpViewHolder\n        )\n        addViews(\n            businessViewHolder,\n            amountViewHolder,\n            cardViewHolder,\n            paymentInlineViewHolder,\n            saveCardSwitchHolder,\n            otpViewHolder\n        )\n        //Added check change listener to handle showing of extra save options\n        saveCardSwitchHolder?.view?.mainSwitch?.switchSaveMobile?.visibility = GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = GONE\n        saveCardSwitchHolder?.view?.mainSwitch?.switchSaveMobile?.setOnCheckedChangeListener { buttonView, isChecked ->\n            if (isChecked) saveCardSwitchHolder?.view?.cardSwitch?.switchesLayout?.visibility =\n                GONE\n        }\n        saveCardSwitchHolder?.setSwitchToggleData(PaymentType.telecom)\n        otpViewHolder.setMobileOtpView()\n        var replaced = \"\"\n        var countryCodeReplaced = \"\"\n        if (phoneNumber?.number?.length!! > 7)\n            replaced = (phoneNumber.number.toString()).replaceRange(1, 6, \"....\")\n        countryCodeReplaced =\n            goPayViewsHolder.goPayLoginInput.countryCodePicker.selectedCountryCode.replace(\n                \"+\",\n                \" \"\n            )\n        otpViewHolder.otpView.mobileNumberTextNormalPay.text = \"+$countryCodeReplaced$replaced\"\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.P)\n    override fun displayRedirect(url: String, authenticate: Charge?) {\n        this.redirectURL = url\n\n        println(\"redirectURL before display>>\" + url)\n        if (::redirectURL.isInitialized && ::fragmentManager.isInitialized) {\n            if (otpViewHolder.otpView.isVisible) {\n                removeViews(\n                    // businessViewHolder,\n                    cardViewHolder,\n                    paymentInlineViewHolder,\n                    otpViewHolder\n                )\n            }\n            // setSlideAnimation()\n            if (PaymentDataSource?.getWebViewType() != null && PaymentDataSource.getWebViewType() == WebViewType.REDIRECT) {\n                businessViewHolder.view.headerView.constraint.visibility = GONE\n                businessViewHolder.view.topSeparatorLinear.visibility = GONE\n                //Stopped showing closetext as requested\n                // checkoutFragment.closeText.visibility = View.VISIBLE\n                removeViews(\n                    // businessViewHolder,\n                    amountViewHolder,\n                    cardViewHolder,\n                    // saveCardSwitchHolder,\n                    paymentInlineViewHolder,\n                    otpViewHolder,\n                    goPaySavedCardHolder,\n                    goPayViewsHolder\n                )\n\n                /**\n                 * apply Background Drawable to switchView\n                 */\n                saveCardSwitchHolder?.view?.background = getViewShapeDrawable()\n\n\n\n                saveCardSwitchHolder?.view?.mainSwitch?.visibility = GONE\n                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                    ActionButtonState.LOADING\n                )\n                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = GONE\n                saveCardSwitchHolder?.view?.cardSwitch?.tapLogoImage?.visibility = GONE\n\n                Handler(Looper.getMainLooper()).postDelayed({\n\n                    val fragment = WebFragment.newInstance(\n                        redirectURL,\n                        this, cardViewModel, authenticate, this\n                    )\n\n                    fragmentManager.beginTransaction()\n                        .replace(R.id.webFrameLayout, fragment, \"webFragment\")\n                        .addToBackStack(\"webFragment\")\n                        .commit()\n                    //  checkoutFragment.closeText.visibility = View.VISIBLE\n                    webFrameLayout.visibility = View.VISIBLE\n                    println(\"fragment hh\" + Resources.getSystem().displayMetrics.heightPixels)\n                    if (::bottomSheetLayout.isInitialized)\n                        translateHeightRedirect(sdkLayout)\n\n                }, 500)\n\n\n            } else if (PaymentDataSource?.getWebViewType() != null && PaymentDataSource.getWebViewType() == WebViewType.THREE_DS_WEBVIEW) {\n\n                webViewHolder = WebViewHolder(\n                    context,\n                    url,\n                    this,\n                    cardViewModel,\n                    authenticate,\n                    this,\n                    bottomSheetLayout,\n                    sdkLayout,\n                    saveCardSwitchHolder,\n                    paymentInlineViewHolder,\n                    cardViewHolder\n                )\n                removeViews(\n                    //  businessViewHolder,\n                    amountViewHolder,\n                    //  cardViewHolder,\n                    //  saveCardSwitchHolder,\n                    // paymentInlineViewHolder,\n                    otpViewHolder,\n                    goPaySavedCardHolder,\n                    goPayViewsHolder\n                )\n\n                //Added to hide the Items-Amount button when 3ds is opened within\n                addViews(webViewHolder)\n                saveCardSwitchHolder?.view?.mainSwitch?.visibility = GONE\n                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                    ActionButtonState.LOADING\n                )\n\n                saveCardSwitchHolder?.view?.cardSwitch?.tapLogoImage?.visibility = GONE\n                checkoutFragment.closeText.visibility = GONE\n\n\n            }\n\n\n        }\n\n        // removeViews(amountViewHolder, businessViewHolder)\n        // tabAnimatedActionButtonViewHolder?.view?.actionButton?.visibility = View.INVISIBLE\n    }\n\n    private fun translateHeightRedirect(sdkLayout: LinearLayout) {\n        val resizeAnimation = ResizeAnimation(\n            bottomSheetLayout,\n            Resources.getSystem().displayMetrics.heightPixels,\n            sdkLayout.height, true\n        )\n        resizeAnimation.duration = 350\n        bottomSheetLayout.startAnimation(resizeAnimation)\n    }\n\n    override fun displaySaveCardOptions() {\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun setBinLookupData(\n        binLookupResponse: BINLookupResponse,\n        context: Context,\n        cardViewModel: CardViewModel\n    ) {\n        paymentInlineViewHolder = PaymentInlineViewHolder(\n            context,\n            this,\n            this,\n            this,\n            saveCardSwitchHolder,\n            this,\n            cardViewModel,\n            checkoutFragment, loyaltyViewHolder\n        )\n        //  paymentInlineViewHolder.tabLayout.setUnselectedAlphaLevel(1.0f)\n        if (::paymentInlineViewHolder.isInitialized)\n            paymentInlineViewHolder.setCurrentBinData(binLookupResponse)\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun getDatasfromAPIs(\n        merchantData: MerchantData?,\n        paymentOptionsResponse: PaymentOptionsResponse?\n    ) {\n        println(\"if(::businessViewHolder.isInitialized getpay\" + ::businessViewHolder.isInitialized)\n        println(\"merchantData name>>\" + merchantData?.name)\n        println(\"merchantData logo>>\" + merchantData?.logo)\n        if (paymentOptionsResponse != null) {\n            this.paymentOptionsResponse = paymentOptionsResponse\n        }\n        if (::businessViewHolder.isInitialized && PaymentDataSource.getTransactionMode() != TransactionMode.TOKENIZE_CARD) {\n            businessViewHolder.setDataFromAPI(\n                merchantData?.logo,\n                merchantData?.name\n            )\n            // TODO check\n            if (merchantData?.verifiedApplication == true) {\n\n            }\n        }\n        // println(\"PaymentOptionsResponse on get$paymentOptionsResponse\")\n        allCurrencies.value =\n            (paymentOptionsResponse?.supportedCurrencies as List<SupportedCurrencies>).sortedBy { it.orderBy }\n        Log.e(\n            \"supportedCurrencyUser\",\n            SharedPrefManager.getUserLocalCurrency(context).toString()\n        )\n        cacheUserLocalCurrency()\n\n\n\n\n        savedCardList = paymentOptionsResponse?.cards\n        currencyAdapter = CurrencyTypeAdapter(this)\n        if (paymentOptionsResponse.supportedCurrencies != null && ::amountViewHolder.isInitialized) {\n            currentCurrency = paymentOptionsResponse.currency\n            val sortedList: List<SupportedCurrencies> =\n                (paymentOptionsResponse.supportedCurrencies).sortedBy { it.orderBy }\n            for (i in sortedList.indices) {\n\n                if (sortedList[i].currency == currentCurrency) {\n                    currentAmount =\n                        CurrencyFormatter.currencyFormat(sortedList[i].amount.toString())\n                    currentCurrency =\n                        sortedList[i].symbol.toString()\n\n                    currentCurrency =\n                        sortedList[i].currency.toString()\n                    currentCurrencySymbol =\n                        sortedList[i].symbol.toString()\n                    finalCurrencySymbol =\n                        sortedList[i].symbol.toString()\n\n                    currencyAdapter.updateSelectedPosition(i)\n                }\n\n            }\n            /**\n             *Note replacing all currency to be currency symbol as per ali 17jan23\n             * **/\n            amountViewHolder.setDataFromAPI(\n                currentAmount,\n                currentCurrencySymbol,\n                PaymentDataSource.getItems()?.size.toString()\n            )\n        }\n        /**\n         * <<<<<<< This items list is going to come from API response later now for loading the view we are taking the List from\n         * PaymentDatasource.getItems()  >>>>>>>> */\n        if (PaymentDataSource.getItems() != null) {\n            itemList = PaymentDataSource.getItems()!!\n            //  unModifiedItemList = itemList\n            unModifiedItemList = itemList.map { it.copy() }\n        }\n\n\n\n\n        if (::itemsViewHolder.isInitialized) {\n            paymentOptionsResponse?.supportedCurrencies?.let {\n                itemsViewHolder.setDataFromAPI(\n                    it,\n                    PaymentDataSource.getItems()\n                )\n            }\n            //  itemsViewHolder.setItemsRecylerView()\n            //  itemsViewHolder.setCurrencyRecylerView()\n\n\n        }\n\n        merchantData?.name?.let {\n            saveCardSwitchHolder?.setDataFromAPI(\n                it,\n                paymentInlineViewHolder.selectedType\n            )\n        }\n        paymentOptionsList.value = paymentOptionsResponse?.paymentOptions\n        //println(\"paymentOptions value\" + paymentOptionsResponse?.paymentOptions)\n        if (::context.isInitialized)\n            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.N) {\n                val divider = DividerItemDecoration(\n                    context,\n                    DividerItemDecoration.HORIZONTAL\n                )\n                divider.setDrawable(ShapeDrawable().apply {\n                    intrinsicWidth = 10\n                    paint.color = Color.TRANSPARENT\n                }) // note: currently (support version 28.0.0), we can not use tranparent color here, if we use transparent, we still see a small divider line. So if we want to display transparent space, we can set color = background color or we can create a custom ItemDecoration instead of DividerItemDecoration.\n                cardViewHolder.view.mainChipgroup.chipsRecycler.addItemDecoration(divider)\n                initAdaptersAction()\n\n            }\n\n        //PaymentDataSource.setSelectedCurrency(currentCurrency, null)\n        PaymentDataSource.setSelectedCurrency(currentCurrency, currentCurrencySymbol)\n        PaymentDataSource.setSelectedAmount(currentAmount.toBigDecimal())\n\n        if (::loyaltyViewHolder.isInitialized) {\n            val objectMapper = ObjectMapper()\n            val tapLoyaltyModel: TapLoyaltyModel =\n                objectMapper.readValue(\n                    context.resources.openRawResource(R.raw.loyalty),\n                    TapLoyaltyModel::class.java\n                )\n            supportedLoyalCards.value =\n                tapLoyaltyModel.supportedCurrencies as List<LoyaltySupportedCurrency>\n            //println(\"tapLoyaltyModel>>>\" + tapLoyaltyModel.bankLogo)\n            tapLoyaltyModel.bankLogo?.let {\n                tapLoyaltyModel.bankName?.let { it1 ->\n                    loyaltyViewHolder.setDataFromAPI(\n                        it,\n                        it1,\n                        tapLoyaltyModel,\n                        supportedLoyalCards.value as List<LoyaltySupportedCurrency>\n                    )\n                }\n            }\n\n        }\n        val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n        val nowString: String = LocalizationManager.getValue(\"now\", \"ActionButton\")\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n            false,\n            LocalizationManager.getLocale(context).toString(),\n            if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                payString + \" \" + nowString\n            } else {\n                payString + \" \" + nowString\n            },\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n        )\n\n    }\n\n    fun cacheUserLocalCurrency(): Boolean {\n        val suportedCurrencyForUser = allCurrencies.value?.find {\n            it.symbol == SharedPrefManager.getUserLocalCurrency(context)?.symbol\n        }\n        return SharedPrefManager.saveModelLocally(\n            context = context,\n            dataToBeSaved = suportedCurrencyForUser,\n            keyValueToBeSaved = UserSupportedLocaleForTransactions\n        )\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun initAdaptersAction() {\n        adapter = CardTypeAdapterUIKIT(this)\n        goPayAdapter = GoPayCardAdapterUIKIT(this)\n        itemAdapter = ItemAdapter(this,bottomSheetLayout)\n        // adapter?.possiblyShowGooglePayButton()\n        // val arrayList = ArrayList<String>()//Creating an empty arraylist\n        //  arrayList.add(\"Google Pay\")//Adding object in arraylist\n\n\n        //adapter.updateAdapterGooglePay(arrayList)\n        //  goPayAdapter.updateAdapterData(goPayCardList.value as List<GoPaySavedCards>)\n        if (allCurrencies.value?.isNotEmpty() == true) {\n            currencyAdapter.updateAdapterData(allCurrencies.value as List<SupportedCurrencies>)\n        }\n        if (savedCardList?.isNotEmpty() == true) {\n            println(\"savedCardList.value\" + PaymentDataSource.getCardType())\n            if (PaymentDataSource.getCardType() != null && PaymentDataSource.getCardType() != CardType.ALL) {\n                filterSavedCardTypes(savedCardList as List<SavedCard>)\n            } else adapter.updateAdapterDataSavedCard(savedCardList as List<SavedCard>)\n        } else {\n            cardViewHolder.view.mainChipgroup.groupAction?.visibility = GONE\n        }\n        //  itemsViewHolder.view.itemRecylerView.adapter = itemAdapter\n        itemsViewHolder.view.mainCurrencyChip.chipsRecycler.adapter = currencyAdapter\n        if (PaymentDataSource.getItems() != null) {\n            PaymentDataSource.getItems()?.let { itemAdapter.updateAdapterData(it) }\n        }\n        cardViewHolder.view.mainChipgroup.chipsRecycler.adapter = adapter\n        cardViewHolder.view.mainChipgroup.chipsRecycler.animation =\n            AnimationUtils.loadAnimation(context, R.anim.fall_down_animation)\n\n        cardViewHolder.view.mainChipgroup.groupAction?.setOnClickListener {\n            setMainChipGroupActionListener()\n            paymentInlineViewHolder.tapCardInputView?.clear()\n            paymentInlineViewHolder.onFocusChange(\"\")\n            paymentInlineViewHolder.tapCardInputView.setSingleCardInput(\n                CardBrandSingle.Unknown, null\n            )\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n        }\n\n        paymentOptionsWorker =\n            java.util.ArrayList<PaymentOption>(paymentOptionsResponse.paymentOptions)\n\n        filterViewModels(currentCurrency)\n        // filterModels(PaymentDataSource.getCurrency()?.isoCode.toString())\n        //  filterCardTypes(PaymentDataSource.getCurrency()?.isoCode.toString(),paymentOptionsWorker)\n\n        //    goPaySavedCardHolder.view.goPayLoginView.groupAction.setOnClickListener {\n        //       setGoPayLoginViewGroupActionListener()\n        //   }\n        //paymentInlineViewHolder.tabLayout.setOnTouchListener { v, _ ->\n        touchHandlingForCardView()\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    @SuppressLint(\"ClickableViewAccessibility\")\n    private fun touchHandlingForCardView() {\n        saveCardSwitchHolder?.view?.setOnTouchListener { v, _ ->\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n            paymentInlineViewHolder.resetView = true\n            paymentInlineViewHolder.resetTouchView()\n\n            true\n        }\n        cardViewHolder.view.cardLinearLayout.setOnTouchListener { v, _ ->\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n            paymentInlineViewHolder.resetView = true\n            paymentInlineViewHolder.resetTouchView()\n\n            true\n        }\n        amountViewHolder.view.setOnTouchListener { v, _ ->\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n            paymentInlineViewHolder.resetView = true\n            paymentInlineViewHolder.resetTouchView()\n\n            true\n        }\n        paymentInlineViewHolder.tapAlertView?.setOnTouchListener { v, _ ->\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n            paymentInlineViewHolder.resetView = true\n            paymentInlineViewHolder.resetTouchView()\n\n            true\n        }\n        paymentInlineViewHolder.tabLayout.setOnTouchListener { v, _ ->\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n            paymentInlineViewHolder.resetView = true\n            paymentInlineViewHolder.resetTouchView()\n\n            true\n        }\n        businessViewHolder.view.setOnTouchListener { v, _ ->\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n            paymentInlineViewHolder.resetView = true\n            paymentInlineViewHolder.resetTouchView()\n\n            true\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun filterCardTypes(list: ArrayList<PaymentOption>) {\n        var filteredCardList: List<PaymentOption> =\n            list.filter { items -> items.paymentType == PaymentType.CARD }\n\n        // println(\"filteredCardList value \" + filteredCardList.size)\n        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.N) {\n            paymentInlineViewHolder.setDataFromAPI(filteredCardList)\n        }\n    }\n\n    private fun filterSavedCardTypes(savedCardList: List<SavedCard>) {\n        val filteredSavedCardList: List<SavedCard> =\n            savedCardList.filter { items ->\n                items.funding == PaymentDataSource?.getCardType().toString()\n            }\n\n        adapter.updateAdapterDataSavedCard(filteredSavedCardList)\n    }\n\n\n    private fun setMainChipGroupActionListener() {\n        if (cardViewHolder.view.mainChipgroup.groupAction?.text == LocalizationManager.getValue(\n                \"close\",\n                \"Common\"\n            )\n        ) {\n            isShaking.value = false\n            adapter.updateShaking(isShaking.value ?: false)\n            goPayAdapter.updateShaking(isShaking.value ?: false)\n            cardViewHolder.view.mainChipgroup.groupAction?.text =\n                LocalizationManager.getValue(\"edit\", \"Common\")\n        } else {\n            isShaking.value = true\n            adapter.updateShaking(isShaking.value ?: true)\n            goPayAdapter.updateShaking(isShaking.value ?: true)\n            goPayAdapter.updateShaking(false)\n            cardViewHolder.view.mainChipgroup.groupAction?.text =\n                LocalizationManager.getValue(\"close\", \"Common\")\n        }\n    }\n\n    private fun setGoPayLoginViewGroupActionListener() {\n        if (goPaySavedCardHolder.view.goPayLoginView.groupAction?.text == LocalizationManager.getValue(\n                \"close\",\n                \"Common\"\n            )\n        ) {\n            isShaking.value = false\n            adapter.updateShaking(isShaking.value ?: false)\n            goPayAdapter.updateShaking(isShaking.value ?: false)\n            goPaySavedCardHolder.view.goPayLoginView.groupAction?.text =\n                LocalizationManager.getValue(\"edit\", \"Common\")\n            goPayAdapter.updateSignOut(goPayCardList.value as List<GoPaySavedCards>, false)\n\n        } else {\n            isShaking.value = true\n            adapter.updateShaking(isShaking.value ?: true)\n            Log.d(\"isShaking.value\", isShaking.value.toString())\n            goPayAdapter.updateShaking(false)\n            goPaySavedCardHolder.view.goPayLoginView.groupAction?.text =\n                LocalizationManager.getValue(\"close\", \"Common\")\n            goPayAdapter.updateSignOut(goPayCardList.value as List<GoPaySavedCards>, true)\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    @SuppressLint(\"WrongConstant\")\n    override fun didDialogueExecute(response: String, cardTypeDialog: Boolean?) {\n        // println(\"response are$response\")\n        if (response == \"YES\") {\n            if (deleteCard) {\n                selectedViewToBeDeletedFromCardViewHolder?.addLoaderWithBlurryToView(invokeAfterLoad = {\n                    cardViewModel.processEvent(\n                        CardViewEvent.DeleteSaveCardEvent,\n                        this,\n                        null,\n                        null,\n                        null,\n                        null,\n                        PaymentDataSource.getCustomer().identifier,\n                        cardId\n                    )\n                }, viewToBeBLur = viewToBeBlurCardViewHolder)\n\n\n            } else {\n                // println(\"else block is calle are\")\n                removeViews(goPaySavedCardHolder)\n                //  adapter.updateAdapterDataSavedCard(savedCardList.value as List<SavedCard>)\n                goPayViewsHolder.goPayopened = false\n                adapter.goPayOpenedfromMain(true)\n                adapter.updateShaking(false)\n                //cardViewHolder.view.mainChipgroup.groupAction.visibility = View.VISIBLE\n            }\n        } else if (response == \"NO\") {\n            adapter.updateShaking(false)\n            deleteCard = false\n\n        } else if (response == \"OK\") {\n            if (cardTypeDialog == true) {\n                paymentInlineViewHolder.tapCardInputView.clear()\n                paymentInlineViewHolder.tabLayout.resetBehaviour()\n                paymentInlineViewHolder.resetPaymentCardView()\n            } else {\n                bottomSheetDialog.dismissWithAnimation\n                bottomSheetDialog.dismiss()\n            }\n        }\n    }\n\n\n    override fun deleteSelectedCardListener(delSelectedCard: DeleteCardResponse) {\n        if (delSelectedCard.deleted) {\n            savedCardList?.removeAt(selectedItemsDel)\n            savedCardList?.let { adapter.updateAdapterDataSavedCard(it) }\n            cardViewHolder.view.mainChipgroup.chipsRecycler.adapter = adapter\n            deleteCard = false\n            adapter.updateShaking(false)\n            if(savedCardList.isNullOrEmpty()) cardViewHolder.view.mainChipgroup?.groupAction?.visibility =\n                GONE\n\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun handleSuccessFailureResponseButton(\n        response: String,\n        authenticate: Authenticate?,\n        chargeResponse: Charge?,\n        tabAnimatedActionButton: TabAnimatedActionButton?,\n        contextSDK: Context?\n    ) {\n        SessionManager.setActiveSession(false)\n        println(\"response val>>\" + response)\n        println(\"tabAnimatedActionButton val>>\" + tabAnimatedActionButton)\n        println(\"save val>>\" + saveCardSwitchHolder)\n        /* if(chargeResponse?.status == null && response == \"tokenized\"){\n             //todo replaced authorized with chargeresponse\n             SDKSession.getListener()?.getStatusSDK(response,chargeResponse)\n         }else{\n             SDKSession.getListener()?.getStatusSDK(response,chargeResponse)\n         }*/\n\n        /*saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setDisplayMetrics(\n            CustomUtils.getDeviceDisplayMetrics(\n                contextSDK as Activity\n            )\n        )*/\n        saveCardSwitchHolder?.view?.mainSwitch?.visibility = GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = View.VISIBLE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setDisplayMetrics(\n            CustomUtils.getDeviceDisplayMetrics(\n                context as Activity\n            )\n        )\n\n        //  addViews(saveCardSwitchHolder)\n        /***\n         * This function is  working fine as expected in case when 3ds is false\n         * i.e.  sdkSession.isRequires3DSecure(false) as no loading of url occurs direct response\n         * from the API is available.\n         * WRONG OTP scenario also handled here as similar to old sdk show user error button and\n         * close the sdk.\n         * **/\n\n        // tabAnimatedActionButton?.clearAnimation()\n        if (::webFrameLayout.isInitialized) {\n            if (fragmentManager.findFragmentById(R.id.webFrameLayout) != null)\n                fragmentManager.beginTransaction()\n                    .hide(fragmentManager.findFragmentById(R.id.webFrameLayout)!!)\n                    .commitNow()\n            webFrameLayout.visibility = GONE\n            supportFragmentManager?.popBackStack()\n        }\n        if (::webViewHolder.isInitialized) {\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                ActionButtonState.LOADING, 100\n            )\n            removeViews(webViewHolder)\n        }\n        doAfterSpecificTime(250) {\n            if (::bottomSheetLayout.isInitialized) {\n                bottomSheetLayout.resizeAnimation(\n                    startHeight = bottomSheetLayout.measuredHeight,\n                    endHeight = sdkLayout.height,\n                    durationTime = 250, isExpanding = false\n                )\n            }\n        }\n\n\n\n        if (::otpViewHolder.isInitialized)\n            if (otpViewHolder.otpView.isVisible) {\n                removeViews(\n                    businessViewHolder,\n                    amountViewHolder,\n                    cardViewHolder,\n                    paymentInlineViewHolder,\n                    otpViewHolder\n                )\n            }\n        if (saveCardSwitchHolder != null) {\n            // removeAllViews()\n            //   addViews(saveCardSwitchHolder)\n            saveCardSwitchHolder?.view?.visibility = View.VISIBLE\n            saveCardSwitchHolder?.view?.mainSwitch?.visibility = GONE\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = View.VISIBLE\n        }\n\n        if (::checkoutFragment.isInitialized)\n            checkoutFragment.closeText.visibility = GONE\n        println(\"chargeResponse are>>>>\" + chargeResponse?.status)\n        // println(\"saveCardSwitchHolder are>>>>\"+saveCardSwitchHolder)\n        if (response.contains(\"failure\") && chargeResponse == null) {\n\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(\n                false,\n                Color.MAGENTA\n            )\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n                false,\n                \"en\",\n                null,\n                Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n                Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n            )\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.ERROR)\n        }\n        println(\"chargeResponse to handle\" + chargeResponse?.status)\n        when (chargeResponse?.status) {\n            ChargeStatus.CAPTURED, ChargeStatus.AUTHORIZED, ChargeStatus.VALID, ChargeStatus.IN_PROGRESS -> {\n                doAfterSpecificTime(2000) {\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                        ActionButtonState.SUCCESS\n                    )\n                }\n//                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n//                    true,\n//                    \"en\", \"\",\n//                    loadAppThemManagerFromPath(AppColorTheme.ActionButtonBackgroundColor),\n//                    loadAppThemManagerFromPath(AppColorTheme.ActionButtonValidTitleLabelColor),\n//                )\n\n            }\n            ChargeStatus.CANCELLED, ChargeStatus.TIMEDOUT, ChargeStatus.FAILED, ChargeStatus.DECLINED, ChargeStatus.UNKNOWN,\n            ChargeStatus.RESTRICTED, ChargeStatus.ABANDONED, ChargeStatus.VOID, ChargeStatus.INVALID -> {\n                println(\"CANCELLED 2>>>\" + saveCardSwitchHolder?.view?.cardSwitch?.payButton)\n                Handler().postDelayed({\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                        ActionButtonState.ERROR\n                    )\n                }, 400)\n\n                tabAnimatedActionButton?.changeButtonState(\n                    ActionButtonState.ERROR\n                )\n\n                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n                    false,\n                    \"en\",\n                    \"\",\n                    Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n                    Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n                )\n\n            }\n            else -> {\n\n                if (response == \"tokenized\") {\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                        ActionButtonState.SUCCESS\n                    )\n                } else {\n                    println(\"is this called>>>\")\n                    removeAllViews()\n                    if (ThemeManager.currentTheme != null && chargeResponse != null)\n                        tabAnimatedActionButton?.setInValidBackground(\n                            false,\n                            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\"))\n                        )\n                    else\n                        tabAnimatedActionButton?.changeButtonState(\n                            ActionButtonState.ERROR\n                        )\n\n                    if (::businessViewHolder.isInitialized && saveCardSwitchHolder != null) {\n                        addViews(businessViewHolder, saveCardSwitchHolder)\n                        businessViewHolder.view.headerView.constraint.visibility = GONE\n                        businessViewHolder.view.topSeparatorLinear.visibility = GONE\n                        saveCardSwitchHolder?.view?.visibility = View.VISIBLE\n                        saveCardSwitchHolder?.view?.mainSwitch?.visibility = GONE\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(\n                            false,\n                            Color.RED\n                        )\n\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n                            false,\n                            \"en\",\n                            null,\n                            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n                            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n\n                            )\n\n                        /*tabAnimatedActionButton?.setButtonDataSource(\n                             false,\n                             \"en\",\n                             null,\n                             Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n                             Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n\n                             )*/\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                            ActionButtonState.ERROR\n                        )\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isEnabled = true\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isClickable = true\n                    }\n                }\n            }\n        }\n\n        doAfterSpecificTime(4000) {\n            if (chargeResponse != null)\n                tabAnimatedActionButton?.setButtonDataSource(\n                    true,\n                    \"en\",\n                    null,\n                    loadAppThemManagerFromPath(AppColorTheme.ActionButtonBackgroundColor),\n                    loadAppThemManagerFromPath(AppColorTheme.ActionButtonValidTitleLabelColor),\n                )\n            SDKSession.sessionActive = false\n        }\n        SessionManager.setActiveSession(false)\n        tabAnimatedActionButton?.setOnClickListener {\n            // if(::fragmentManager.isInitialized)\n            tabAnimatedActionButton.changeButtonState(ActionButtonState.LOADING)\n            SDKSession.startSDK(\n                (tabAnimatedActionButton.context as AppCompatActivity).supportFragmentManager,\n                tabAnimatedActionButton.context,\n                tabAnimatedActionButton.context as AppCompatActivity\n            )\n        }\n        //removeAllViews()\n        doAfterSpecificTime(4500) {\n            if (::bottomSheetDialog.isInitialized)\n                bottomSheetDialog.dismiss()\n        }\n\n\n    }\n\n\n    override fun displayAsynchronousPaymentView(chargeResponse: Charge) {\n        if (chargeResponse != null) {\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n            removeViews(\n                // businessViewHolder,\n                amountViewHolder,\n                cardViewHolder,\n                paymentInlineViewHolder,\n                saveCardSwitchHolder\n            )\n            /*  businessViewHolder.setDataFromAPI(\n                  selectedPaymentOption.image,\n                  selectedPaymentOption.brand?.name\n              )*/\n            addViews(asynchronousPaymentViewHolder)\n            Handler().postDelayed({\n                translateViewToNewHeight(bottomSheetLayout.measuredHeight, true)\n            }, animationSpeed)\n            asynchronousPaymentViewHolder.setDataFromAPI(chargeResponse)\n        }\n    }\n\n    override fun resetViewHolder() {\n        adapter.resetSelection()\n        unActivateActionButton()\n    }\n\n    private fun removeViews(vararg viewHolders: TapBaseViewHolder?) {\n\n        viewHolders.forEach {\n            Handler(Looper.getMainLooper()).postDelayed(Runnable {\n                //  it?.view?.visibility =View.INVISIBLE\n                if (::context.isInitialized) {\n                    val animation = AnimationUtils.loadAnimation(context, R.anim.fade_out)\n                    it?.view?.startAnimation(animation)\n\n                }\n\n              //  Handler().postDelayed({\n                    if (::sdkLayout.isInitialized) {\n                        //it?.view?.visibility = View.INVISIBLE\n                  //          sdkLayout.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"horizontalList.backgroundColor\")))\n                        sdkLayout.removeView(it?.view)\n\n                    }\n              //  }, 150)\n\n\n            }, 0)\n        }\n\n    }\n\n\n    private fun addViews(vararg viewHolders: TapBaseViewHolder?) {\n\n        viewHolders.forEach {\n            Handler(Looper.getMainLooper()).postDelayed(Runnable {\n                // it?.view?.visibility =View.VISIBLE\n                if (::context.isInitialized) {\n                    val animation = AnimationUtils.loadAnimation(context, R.anim.fade_in)\n                    it?.view?.startAnimation(animation)\n                }\n\n             //   Handler().postDelayed({\n                    if (::sdkLayout.isInitialized) {\n                        // it?.view?.visibility = View.VISIBLE\n             //           sdkLayout.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"horizontalList.backgroundColor\")))\n                        sdkLayout.removeView(it?.view)\n                        sdkLayout.addView(it?.view)\n\n                    }\n              //  }, 200)\n\n\n            }, 0)\n            BottomSheetBehavior.STATE_HALF_EXPANDED\n        }\n\n\n    }\n\n\n     fun unActivateActionButton() {\n        val payNowString: String\n\n        when (PaymentDataSource.getTransactionMode()) {\n            TransactionMode.TOKENIZE_CARD -> payNowString = LocalizationManager.getValue(\n                \"pay\",\n                \"ActionButton\"\n            )\n            //TODO stopped since checkout won't have SAVE_CARD -so not available in Localization\n            /*TransactionMode.SAVE_CARD -> payString = LocalizationManager.getValue(\n                \"savecard\",\n                \"ActionButton\"\n            )*/\n            TransactionMode.SAVE_CARD -> payNowString = \"SAVE CARD\"\n            else -> {\n                val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n                val nowString: String = LocalizationManager.getValue(\"now\", \"ActionButton\")\n                payNowString = payString + \" \" + nowString\n            }\n        }\n\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n            false,\n            LocalizationManager.getLocale(context).toString(),\n            if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                //payString + \" \" + currentCurrencySymbol + \" \" + selectedAmount\n                payNowString\n            } else {\n                // payString + \" \" + currentCurrencySymbol + \" \" + currentAmount\n                payNowString\n            },\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n        )\n\n        // saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.IDLE)\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isActivated = false\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isClickable = false\n    }\n\n\n    fun resetCardSelection() {\n        adapter.resetSelection()\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onCardSelectedAction(isSelected: Boolean, savedCardsModel: Any?) {\n\n        /**\n         * Clear card input text\n         */\n        println(\"focussss\" + paymentInlineViewHolder.tapCardInputView.hasFocus())\n        println(\"isSelected\" + isSelected)\n        paymentInlineViewHolder.tapCardInputView.clear()\n        paymentInlineViewHolder.clearCardInputAction()\n\n        println(\"savedCardsModel\" + savedCardsModel)\n        unActivateActionButton()\n        when (savedCardsModel) {\n            is SavedCard -> {\n                Bugfender.d(\n                    CustomUtils.tagEvent,\n                    \"Saved card selected :\" + savedCardsModel.lastFour + \"&\" + savedCardsModel.id\n                )\n                paymentInlineViewHolder.setDataForSavedCard(\n                    savedCardsModel,\n                    CardInputUIStatus.SavedCard\n                )\n\n                isSavedCardSelected = true\n                Bugfender.d(\n                    CustomUtils.tagEvent,\n                    \"Payment scheme selected: title :\" + savedCardsModel?.brand + \"& ID :\" + savedCardsModel.paymentOptionIdentifier\n                )\n                unActivateActionButton()\n            }\n            else -> {\n                if (savedCardsModel != null) {\n\n                    if ((savedCardsModel as PaymentOption).paymentType == PaymentType.WEB) {\n                        //  paymentInlineViewHolder.view.alpha = 0.95f\n\n                        PaymentDataSource.setWebViewType(WebViewType.REDIRECT)\n                        activateActionButton((savedCardsModel as PaymentOption))\n                        setPayButtonAction(PaymentType.WEB, savedCardsModel)\n                    } else if ((savedCardsModel as PaymentOption).paymentType == PaymentType.GOOGLE_PAY) {\n                        removeViews(amountViewHolder, cardViewHolder, paymentInlineViewHolder)\n                        checkoutFragment.checkOutActivity?.handleGooglePayApiCall()\n                        activateActionButtonForGPay()\n                        //setPayButtonAction(PaymentType.WEB, savedCardsModel)\n                        PaymentDataSource.setWebViewType(WebViewType.REDIRECT)\n                    }\n                    Bugfender.d(\n                        CustomUtils.tagEvent,\n                        \"Payment scheme selected: title :\" + (savedCardsModel as PaymentOption).brand + \"& ID :\" + (savedCardsModel as PaymentOption).id\n                    )\n\n\n                } else\n\n                    displayGoPayLogin()\n            }\n        }\n    }\n\n    private fun activateActionButtonForGPay() {\n        val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isActivated\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n            true,\n            \"en\",\n            \"\",\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.paymentBackgroundColor\")),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.titleLabelColor\")),\n        )\n\n        saveCardSwitchHolder?.view?.cardSwitch?.showOnlyPayButton()\n\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isActivated\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n    }\n\n\n    private fun activateActionButton(\n        paymentOptObject: PaymentOption? = null,\n        cardBrandString: String? = null\n    ) {\n        val payStringButton: String\n\n        when (PaymentDataSource.getTransactionMode()) {\n            TransactionMode.TOKENIZE_CARD -> payStringButton = LocalizationManager.getValue(\n                \"pay\",\n                \"ActionButton\"\n            )\n            //TODO stopped since checkout won't have SAVE_CARD -so not available in Localization\n            /* TransactionMode.SAVE_CARD -> payString = LocalizationManager.getValue(\n                 \"savecard\",\n                 \"ActionButton\"\n             )*/  TransactionMode.SAVE_CARD -> payStringButton = \"SAVE CARD\"\n            else -> {\n                val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n                val nowString: String = LocalizationManager.getValue(\"now\", \"ActionButton\")\n\n                payStringButton = payString + \" \" + nowString\n            }\n        }\n\n\n\n        println(\"cardBrandString before \" + cardBrandString)\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n            logicTogetButtonStyle(paymentOptObject, payStringButton, cardBrandString)\n        }\n\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun logicTogetButtonStyle(\n        paymentOptObject: PaymentOption?,\n        payString: String,\n        cardBrandString: String?\n    ) {\n\n        var selectedPayOpt: PaymentOption? = null\n        var colorBackGround: String? = null\n        var intColorArray: IntArray? = null\n\n\n        if (cardBrandString != null) {\n            selectedPayOpt = logicTogetPayOptions(cardBrandString)\n\n        } else selectedPayOpt = paymentOptObject\n\n\n        if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains(\"dark\")) {\n            if (selectedPayOpt?.buttonStyle?.background?.darkModel?.backgroundColors?.size == 1) {\n                colorBackGround = selectedPayOpt.buttonStyle?.background?.darkModel?.backgroundColors?.get(0)\n            }\n            intColorArray = null\n\n        } else {\n            if (selectedPayOpt?.buttonStyle?.background?.lightModel?.backgroundColors?.size == 1) {\n                colorBackGround =\n                    selectedPayOpt.buttonStyle?.background?.lightModel?.backgroundColors?.get(0)\n                intColorArray = null\n            } else {\n\n                if (selectedPayOpt?.buttonStyle?.background?.lightModel?.backgroundColors?.size == 2) {\n                    val startColor =\n                        selectedPayOpt?.buttonStyle?.background?.lightModel?.backgroundColors?.get(1)\n                            ?.replace(\"0x\", \"#\")\n\n                    val endColor =\n                        selectedPayOpt?.buttonStyle?.background?.lightModel?.backgroundColors?.get(0)\n                            ?.replace(\"0x\", \"#\")\n\n                    intColorArray =\n                        intArrayOf(Color.parseColor(startColor), Color.parseColor(endColor))\n                    colorBackGround = \"0\"\n\n                } else if (paymentOptObject?.buttonStyle?.background?.lightModel?.backgroundColors?.size == 3) {\n                    val startColor =\n                        selectedPayOpt?.buttonStyle?.background?.lightModel?.backgroundColors?.get(2)\n                            ?.replace(\"0x\", \"#\")\n\n                    val middleColor =\n                        selectedPayOpt?.buttonStyle?.background?.lightModel?.backgroundColors?.get(1)\n                            ?.replace(\"0x\", \"#\")\n                    val endColor =\n                        selectedPayOpt?.buttonStyle?.background?.lightModel?.backgroundColors?.get(0)\n                            ?.replace(\"0x\", \"#\")\n\n                    intColorArray = intArrayOf(\n                        Color.parseColor(startColor),\n                        Color.parseColor(middleColor),\n                        Color.parseColor(endColor)\n                    )\n                    colorBackGround = \"0\"\n\n                }\n\n            }\n\n\n        }\n\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n            true,\n            LocalizationManager.getLocale(context).language,\n            payString,\n            if (colorBackGround.equals(\"0\") || colorBackGround == null) 0 else Color.parseColor(\n                colorBackGround\n            ),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.titleLabelColor\")),\n            intColorArray\n        )\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.removeAllViews()\n\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.getImageViewUrl(\n                getAssetName(\n                    selectedPayOpt\n                )\n            )\n                ?.let { saveCardSwitchHolder?.view?.cardSwitch?.payButton?.addChildView(it) }\n            saveCardSwitchHolder?.view?.cardSwitch?.showOnlyPayButton()\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isActivated\n\n\n\n    }\n\n    private fun logicTogetPayOptions(cardBrandString: String?): PaymentOption? {\n        var selectedPayOption: PaymentOption? = null\n\n        for (i in 0 until paymentOptionsResponse.paymentOptions.size) {\n            if (paymentOptionsResponse.paymentOptions[i].brand == cardBrandString?.toUpperCase()) {\n                selectedPayOption = paymentOptionsResponse.paymentOptions[i]\n            }\n        }\n\n        return selectedPayOption\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    @SuppressLint(\"WrongConstant\")\n    private fun onClickRedirect(savedCardsModel: Any) {\n        /**\n         * on Click Redirect for Knet Redirection\n         */\n        amountViewHolder.view.amount_section?.tapChipPopup?.slideFromLeftToRight()\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n\n        doAfterSpecificTime {\n            selectedPaymentOption = savedCardsModel as PaymentOption\n            cardViewModel.processEvent(\n                CardViewEvent.ChargeEvent,\n                this,\n                selectedPaymentOption,\n                null,\n                null,\n                null\n            )\n\n\n\n\n\n\n            if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains(\"dark\")) {\n                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(\n                    backgroundColor = Color.parseColor(\n                        savedCardsModel.buttonStyle?.background?.darkModel?.baseColor\n                    )\n                )\n\n            } else saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(\n                backgroundColor = Color.parseColor(savedCardsModel.buttonStyle?.background?.lightModel?.baseColor)\n            )\n\n            saveCardSwitchHolder?.view?.mainSwitch?.mainTextSave?.visibility = View.INVISIBLE\n\n            //Commented to try the flow of redirect\n            removeViews(\n                //    businessViewHolder,\n                amountViewHolder,\n                cardViewHolder,\n                paymentInlineViewHolder,\n                tabAnimatedActionButtonViewHolder\n            )\n            businessViewHolder.view.headerView.constraint.visibility = GONE\n            Handler().postDelayed({\n                if (::bottomSheetLayout.isInitialized)\n                    translateViewToNewHeight(bottomSheetLayout.measuredHeight, true)\n            }, animationSpeed)\n\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun onClickCardPayment(savedCardsModel: Any?) {\n        println(\"onClickCardPayment\" + savedCardsModel)\n        amountViewHolder.view.amount_section?.tapChipPopup?.slideFromLeftToRight()\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n        doAfterSpecificTime {\n            savedCardsModel as PaymentOption\n            CustomUtils.hideKeyboardFrom(context, paymentInlineViewHolder.view)\n            if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains(\"dark\")) {\n                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(\n                    backgroundColor = Color.parseColor(\n                        savedCardsModel.buttonStyle?.background?.darkModel?.baseColor\n                    )\n                )\n\n            } else saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(\n                backgroundColor = Color.parseColor(savedCardsModel.buttonStyle?.background?.lightModel?.baseColor)\n            )\n\n            saveCardSwitchHolder?.view?.mainSwitch?.visibility = GONE\n\n\n            with(cardViewHolder.view.mainChipgroup) {\n                val viewsToFadeOut = mutableListOf<View>(chipsRecycler, groupAction, groupName)\n                if (paymentInlineViewHolder.cardInputUIStatus == CardInputUIStatus.NormalCard) {\n                    viewsToFadeOut.add(amountViewHolder.view)\n                }\n                doAfterSpecificTime(time = 500L) {\n                    viewsToFadeOut.addFadeOutAnimationToViews(onAnimationEnd = {})\n                    paymentInlineViewHolder.paymentInputContainer.applyBluryToView()\n                }\n\n            }\n\n\n            if (paymentInlineViewHolder.cardInputUIStatus == CardInputUIStatus.SavedCard) {\n                cardViewHolder.view.cardInfoHeaderText.visibility = View.VISIBLE\n                cardViewHolder.view.cardInfoHeaderText.text =\n                    LocalizationManager.getValue(\"savedCardSectionTitle\", \"TapCardInputKit\")\n            }\n\n\n            if (isSavedCardSelected == true) {\n                cardViewModel.processEvent(\n                    CardViewEvent.CreateTokenExistingCardEvent,\n                    this,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    paymentInlineViewHolder.getSavedCardData()\n                )\n\n            } else {\n                cardViewModel.processEvent(\n                    CardViewEvent.CreateTokenEvent,\n                    this,\n\n                    null,\n                    null,\n                    paymentInlineViewHolder.getCard(),\n                    null\n                )\n            }\n\n\n        }\n\n\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onDeleteIconClicked(\n        stopAnimation: Boolean,\n        itemId: Int,\n        cardId: String,\n        maskedCardNumber: String,\n        arrayListSavedCardSize: ArrayList<SavedCard>,\n        selectedViewToBeDeleted: ViewGroup,\n        viewtoBeBlur: View,\n        position: Int\n    ) {\n        this.cardId = cardId\n        selectedViewToBeDeletedFromCardViewHolder = selectedViewToBeDeleted\n        viewToBeBlurCardViewHolder = viewtoBeBlur\n        selectedItemsDel = itemId\n        cardIDToBeDeleted = position\n        if (stopAnimation) {\n            stopDeleteActionAnimation(itemId, maskedCardNumber, arrayListSavedCardSize)\n        } else {\n            cardViewHolder.view.mainChipgroup.groupAction?.text = LocalizationManager.getValue(\n                \"close\",\n                \"Common\"\n            )\n            deleteCard = false\n        }\n\n    }\n\n    private fun stopDeleteActionAnimation(\n        itemId: Int,\n        maskedCardNumber: String,\n        arrayListSavedCardSizes: ArrayList<SavedCard>\n    ) {\n        isShaking.value = false\n        cardViewHolder.view.mainChipgroup.groupAction?.text = LocalizationManager.getValue(\n            \"GatewayHeader\",\n            \"HorizontalHeaders\",\n            \"rightTitle\"\n        )\n        val title: String = LocalizationManager.getValue(\"title\", \"DeleteCard\")\n        val message: String = LocalizationManager.getValue(\n            \"message\",\n            \"DeleteCard\"\n        )\n        CustomUtils.showDialog(\n            \"$title\",\n            \"${message.replace(\"%@\", maskedCardNumber)} \",\n            context,\n            4,\n            this, null, null, false\n        )\n\n        selectedItemsDel = itemId\n        deleteCard = true\n        this.arrayListSavedCardSize = arrayListSavedCardSizes\n\n    }\n\n    override fun onGoPayLogoutClicked(isClicked: Boolean) {\n        if (isClicked) CustomUtils.showDialog(\n            LocalizationManager.getValue(\"goPaySignOut\", \"GoPay\"), LocalizationManager.getValue(\n                \"goPaySaveCards\",\n                \"GoPay\"\n            ), context, 2, this, null, null, false\n        )\n    }\n\n    override fun onEditClicked(isClicked: Boolean) {\n        if (isClicked) {\n            adapter.updateShaking(true)\n            goPayAdapter.updateShaking(true)\n        } else {\n            adapter.updateShaking(false)\n            goPayAdapter.updateShaking(false)\n        }\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onGooglePayClicked(isClicked: Boolean) {\n        println(\"onGooglePayClicked>>>\" + isClicked)\n        checkoutFragment.checkOutActivity?.handleGooglePayApiCall()\n\n    }\n\n\n    override fun onPayCardSwitchAction(\n        isCompleted: Boolean,\n        paymentType: PaymentType,\n        cardBrandString: String?\n    ) {\n        println(\"isCompleted???\" + isCompleted)\n        //todo add validations from api when cvv is valid the only  activate ActionButton\n        if (isCompleted) {\n            businessViewHolder.view?.headerView.constraint.visibility = View.VISIBLE\n            saveCardSwitchHolder?.view?.mainSwitch?.visibility = GONE\n            saveCardSwitchHolder?.view?.mainSwitch?.switchSaveMobile?.visibility = GONE\n            saveCardSwitchHolder?.setSwitchToggleData(paymentType)\n            loyaltyViewHolder.view.loyaltyView?.constraintLayout?.visibility = View.VISIBLE\n            // loyatFlag = true\n            /**\n             * @TODO:  Will be enabled when coming from API directly\n             */\n            //  initLoyaltyView() // Will be enabled when coming from API directly\n            activateActionButton(cardBrandString = cardBrandString)\n            paymentActionType = paymentType\n        } else {\n//            saveCardSwitchHolder11?.view?.mainSwitch?.visibility = View.GONE\n            saveCardSwitchHolder?.view?.mainSwitch?.switchSaveMobile?.visibility = GONE\n            saveCardSwitchHolder?.setSwitchToggleData(paymentType)\n            unActivateActionButton()\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onPayCardCompleteAction(\n        isCompleted: Boolean,\n        paymentType: PaymentType,\n        cardNumber: String?,\n        expiryDate: String?,\n        cvvNumber: String?, holderName: String?, cardBrandString: String?, savedCardsModel: Any?\n\n    ) {\n        println(\"isCompleted aaa\" + isCompleted)\n        println(\"expiryDate aaa\" + expiryDate)\n        if(isCompleted) activateActionButton(cardBrandString = cardBrandString)\n        if (savedCardsModel != null) {\n            setPayButtonAction(paymentType, savedCardsModel)\n        } else {\n            val typedCardModel = logicTogetPayOptions(cardBrandString)\n            setPayButtonAction(paymentType, typedCardModel)\n        }\n\n    }\n\n    override fun onPaymentCardIsLoyaltyCard(isLoyaltyCard: Boolean) {\n        //Todo logic for loyalty card\n    }\n\n    // Override function to open NFC fragment and scan the card via NFC.\n    override fun onClickNFC() {\n\n        removeViews(\n            //businessViewHolder,\n            // amountViewHolder,\n           // cardViewHolder,\n            saveCardSwitchHolder,\n            paymentInlineViewHolder,\n            otpViewHolder,\n            goPaySavedCardHolder,\n            goPayViewsHolder\n        )\n        //  addViews(businessViewHolder, amountViewHolder)\n        frameLayout.visibility = View.VISIBLE\n        cardViewHolder.view.visibility= GONE\n        fragmentManager\n            .beginTransaction()\n            .replace(R.id.fragment_container_nfc_lib, nfcFragment)\n            .commit()\n        /* fragmentManager.beginTransaction().remove(InlineViewFragment()).replace(\n             R.id.fragment_container_nfc_lib,\n             nfcFragment\n         ).commit()*/\n        isNFCOpened = true\n        checkoutFragment.isNfcOpened = true\n        amountViewHolder.changeGroupAction(false)\n        val bottomSheet: FrameLayout? =\n            bottomSheetDialog.findViewById(com.google.android.material.R.id.design_bottom_sheet)\n        BottomSheetBehavior.from(bottomSheet as View).state = BottomSheetBehavior.STATE_EXPANDED\n       /* Handler().postDelayed({\n            if (::bottomSheetLayout.isInitialized)\n                translateViewToNewHeight(bottomSheetLayout.measuredHeight, true)\n        }, 400)*/\n        checkSelectedAmountInitiated()\n    }\n\n\n    // Override function to open card Scanner and scan the card.\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onClickCardScanner(scannerClicked: Boolean) {\n        //setSlideAnimation()\n        removeViews(\n            //businessViewHolder,\n            // amountViewHolder,\n            cardViewHolder,\n            saveCardSwitchHolder,\n            paymentInlineViewHolder,\n            otpViewHolder,\n            goPaySavedCardHolder,\n            goPayViewsHolder\n        )\n        amountViewHolder.readyToScanVisibility(scannerClicked)\n        // addViews(businessViewHolder, amountViewHolder)\n        inLineCardLayout.visibility = View.VISIBLE\n        FrameManager.getInstance().frameColor = Color.WHITE\n        // Use\n        //  val bottomSheet: FrameLayout? = bottomSheetDialog.findViewById(com.google.android.material.R.id.design_bottom_sheet)\n        //  BottomSheetBehavior.from(bottomSheet as View).state = BottomSheetBehavior.STATE_EXPANDED\n        //   bottomSheetDialog.behavior.state = BottomSheetBehavior.STATE_EXPANDED\n\n        fragmentManager\n            .beginTransaction()\n            .replace(R.id.inline_container, inlineCamerFragment)\n            .commit()\n\n        isInlineOpened = true\n        checkoutFragment.isScannerOpened = true\n\n        amountViewHolder.changeGroupAction(false)\n        val bottomSheet: FrameLayout? =\n            bottomSheetDialog.findViewById(com.google.android.material.R.id.design_bottom_sheet)\n        BottomSheetBehavior.from(bottomSheet as View).state = BottomSheetBehavior.STATE_EXPANDED\n        Handler().postDelayed({\n            if (::bottomSheetLayout.isInitialized)\n                translateViewToNewHeight(bottomSheetLayout.measuredHeight, false)\n        }, animationSpeed)\n        checkSelectedAmountInitiated()\n    }\n\n    private fun checkSelectedAmountInitiated() {\n        if (this::selectedAmount.isInitialized && this::selectedCurrency.isInitialized) {\n            amountViewHolder.updateSelectedCurrency(\n                displayItemsOpen,\n                selectedAmount, selectedCurrency,\n                currentAmount, currentCurrency, currentCurrencySymbol\n            )\n        }\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onCurrencyClicked(\n        currencySelected: String,\n        currencyRate: BigDecimal,\n        totalSelectedAmount: BigDecimal,\n        previousSelectedCurrency: String,\n        selectedCurrencySymbol: String\n    ) {\n\n        /**\n         * case currencyClicked @TODO:EGP /\n         */\n\n        currencyOldRate = currencyRate\n        lastSelectedCurrency = previousSelectedCurrency\n        if (::unModifiedItemList.isInitialized)\n            println(\"unModifiedItemList\" + unModifiedItemList)\n        if (::itemList.isInitialized) {\n            for (i in itemList.indices) {\n                itemList[i].amount = unModifiedItemList[i].amount?.times(currencyRate)\n                //itemList[i].totalAmount = currencyOldRate?.div(currencyRate)\n                itemList[i].totalAmount =\n                    unModifiedItemList[i].getPlainAmount()?.times(currencyRate)\n\n\n                println(\"item per unit >>\" + itemList[i].amount)\n\n\n            }\n\n            itemsViewHolder.view.itemRecylerView.adapter = itemAdapter\n            itemAdapter.updateAdapterData(itemList)\n\n        }\n\n        //  itemList[i].amount = (list[i].amount.toLong())\n        //  itemList[i].currency = currencySelected\n\n        selectedAmount = CurrencyFormatter.currencyFormat(totalSelectedAmount.toString())\n        selectedCurrency = currencySelected\n        currencySelectedForCheck = currencySelected\n        selectedTotalAmount = selectedAmount\n        println(\"selectedAmount final>>\" + selectedAmount)\n        println(\"selectedCurrency final>>\" + selectedCurrency.length)\n        println(\"currentAmount final>>\" + currentAmount)\n        println(\"currentCurrency final>>\" + currentCurrency)\n        println(\"selectedCurrencySymbol final>>\" + selectedCurrencySymbol)\n        println(\"currentCurrencySymbol final>>\" + currentCurrencySymbol)\n        if (selectedCurrencySymbol.length == 2) {\n            amountViewHolder.updateSelectedCurrency(\n                displayItemsOpen,\n                selectedAmount, selectedCurrency,\n                currentAmount, currentCurrency, selectedCurrencySymbol\n            )\n            //  PaymentDataSource.setSelectedCurrency(selectedCurrency = selectedCurrency, null) // changed from null to symbol\n            PaymentDataSource.setSelectedCurrency(selectedCurrency, selectedCurrencySymbol)\n            //  PaymentDataSource.setSelectedCurrency(selectedCurrency = selectedCurrencySymbol, selectedCurrencySymbol) //commented\n\n        } else {\n            amountViewHolder.updateSelectedCurrency(\n                displayItemsOpen,\n                selectedAmount, selectedCurrency,\n                currentAmount, finalCurrencySymbol, selectedCurrencySymbol\n            )\n            PaymentDataSource.setSelectedCurrency(selectedCurrency, selectedCurrencySymbol)\n\n        }\n        currentCurrencySymbol = selectedCurrencySymbol\n\n\n        // PaymentDataSource.setSelectedCurrency(selectedCurrency = selectedCurrency)\n        PaymentDataSource.setSelectedAmount(currencyRate)\n        if (paymentInlineViewHolder.tapCardInputView.isNotEmpty()) {\n            paymentInlineViewHolder.tapCardInputView.clear()\n            paymentInlineViewHolder.tapAlertView?.fadeVisibility(GONE, 500)\n            paymentInlineViewHolder.acceptedCardText.visibility = View.VISIBLE\n            paymentInlineViewHolder.tabLayout.resetBehaviour()\n        }\n\n        adapter.resetSelection()\n\n        if (::selectedCurrency.isInitialized) {\n            println(\"selectedCurrency he\"+selectedCurrency)\n            Bugfender.d(CustomUtils.tagEvent, \"Currency changed to : \" + selectedCurrencySymbol)\n            filterViewModels(selectedCurrency)\n        } else {\n            filterViewModels(currentCurrency)\n            //Bugfender.d(\"Currency changed to : \"+currentCurrency ,CustomUtils.tagEvent)\n\n        }\n\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun submitNewLocalCurrency(\n        currencySelected: String,\n        currencyRate: BigDecimal,\n        totalSelectedAmount: BigDecimal,\n        selectedCurrencySymbol: String\n    ) {\n\n\n        currencyOldRate = currencyRate\n        if (::unModifiedItemList.isInitialized)\n            println(\"unModifiedItemList\" + unModifiedItemList)\n        if (::itemList.isInitialized) {\n            for (i in itemList.indices) {\n                itemList[i].amount = unModifiedItemList[i].amount?.times(currencyRate)\n                //itemList[i].totalAmount = currencyOldRate?.div(currencyRate)\n                itemList[i].totalAmount =\n                    unModifiedItemList[i].getPlainAmount()?.times(currencyRate)\n\n\n                println(\"item per unit >>\" + itemList[i].amount)\n\n\n            }\n\n            itemsViewHolder.view.itemRecylerView.adapter = itemAdapter\n            itemAdapter.updateAdapterData(itemList)\n\n        }\n\n        //  itemList[i].amount = (list[i].amount.toLong())\n        //  itemList[i].currency = currencySelected\n\n        selectedAmount = CurrencyFormatter.currencyFormat(totalSelectedAmount.toString())\n        if (currencySelected != null) {\n            selectedCurrency = currencySelected\n        }\n        selectedTotalAmount = selectedAmount\n\n        /**\n         * Why this check present ??!!  :/\n         */\n        if (selectedCurrencySymbol.length == 2) {\n            amountViewHolder.updateSelectedCurrency(\n                displayItemsOpen,\n                selectedAmount,\n                selectedCurrency,\n                currentAmount,\n                currentCurrency,\n                selectedCurrencySymbol,\n                isChangingCurrencyFromOutside = true\n            )\n            //  PaymentDataSource.setSelectedCurrency(selectedCurrency = selectedCurrency, null) // changed from null to symbol\n            PaymentDataSource.setSelectedCurrency(selectedCurrency, selectedCurrencySymbol)\n            //  PaymentDataSource.setSelectedCurrency(selectedCurrency = selectedCurrencySymbol, selectedCurrencySymbol) //commented\n\n        } else {\n            amountViewHolder.updateSelectedCurrency(\n                displayItemsOpen,\n                selectedAmount,\n                selectedCurrency,\n                currentAmount,\n                finalCurrencySymbol,\n                selectedCurrencySymbol,\n                isChangingCurrencyFromOutside = true\n            )\n            PaymentDataSource.setSelectedCurrency(selectedCurrency, selectedCurrencySymbol)\n\n        }\n        currentCurrencySymbol = selectedCurrencySymbol\n\n        PaymentDataSource.setSelectedAmount(currencyRate)\n        if (paymentInlineViewHolder.tapCardInputView.isNotEmpty()) {\n            paymentInlineViewHolder.tapCardInputView.clear()\n            paymentInlineViewHolder.tapAlertView?.fadeVisibility(GONE, 500)\n            paymentInlineViewHolder.acceptedCardText.visibility = View.VISIBLE\n            paymentInlineViewHolder.tabLayout.resetBehaviour()\n        }\n\n        adapter.resetSelection()\n\n        if (::selectedCurrency.isInitialized) {\n            Bugfender.d(CustomUtils.tagEvent, \"Currency changed to : \" + selectedCurrencySymbol)\n            filterViewModels(selectedCurrency)\n        } else {\n            filterViewModels(currentCurrency)\n            //Bugfender.d(\"Currency changed to : \"+currentCurrency ,CustomUtils.tagEvent)\n        }\n\n    }\n\n    fun cancelledCall() {\n        println(\"cancelledCall from webview\")\n    }\n\n    @SuppressLint(\"ResourceType\")\n    override fun redirectLoadingFinished(\n        done: Boolean,\n        charge: Charge?,\n        contextSDK: Context?\n    ) {\n        //  checkoutFragment.dismiss()\n        println(\"done val\" + done + \"chargeResponse status\" + PaymentDataSource.getChargeOrAuthorize())\n        println(\"saveCardSwitchHolder val\" + saveCardSwitchHolder)\n        println(\"redirect val\" + charge?.response)\n        println(\"gatewayResponse val\" + charge?.gatewayResponse)\n\n        businessViewHolder = contextSDK?.let { BusinessViewHolder(it, this) }!!\n        // saveCardSwitchHolder = contextSDK.let { SwitchViewHolder(it,this) }\n        removeViews(businessViewHolder)\n        if (::webFrameLayout.isInitialized) {\n            if (fragmentManager.findFragmentById(R.id.webFrameLayout) != null)\n                fragmentManager.beginTransaction()\n                    .hide(fragmentManager.findFragmentById(R.id.webFrameLayout)!!)\n                    .commit()\n            webFrameLayout.visibility = GONE\n            sdkLayout.visibility = View.VISIBLE\n            supportFragmentManager?.popBackStack()\n\n        }\n        //  sdkLayout.visibility =View.VISIBLE\n        if (::amountViewHolder.isInitialized && ::cardViewHolder.isInitialized && ::cardViewHolder.isInitialized && ::paymentInlineViewHolder.isInitialized)\n            removeViews(\n                businessViewHolder,\n                amountViewHolder,\n                cardViewHolder,\n                paymentInlineViewHolder\n            )\n\n\n        Handler().postDelayed({\n            // checkoutFragment.dismiss()\n            /*if (::bottomSheetDialog.isInitialized)\n                bottomSheetDialog.dismiss()*/\n\n        }, 3000)\n\n\n    }\n\n    override fun resultObtained(done: Boolean, contextSDK: Context?) {\n\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun setPayButtonAction(paymentTypeEnum: PaymentType, savedCardsModel: Any?) {\n\n        /**\n         * payment from onSelectPaymentOptionActionListener\n         */\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setOnClickListener {\n            when (paymentTypeEnum) {\n                PaymentType.SavedCard -> {\n                    /**\n                     * Note PaymentType savedcard is changed to Card for saved card payments for extra fees and payment options*/\n                    if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                        checkForExtraFees(\n                            selectedAmount,\n                            selectedCurrency,\n                            PaymentType.CARD,\n                            savedCardsModel,\n                            PaymentDataProvider().getSelectedCurrency()\n                        )\n\n                    } else checkForExtraFees(\n                        currentAmount,\n                        currentCurrency,\n                        PaymentType.CARD,\n                        savedCardsModel,\n                        PaymentDataProvider().getSelectedCurrency()\n                    )\n\n                    // setDifferentPaymentsAction(paymentTypeEnum,savedCardsModel)\n                }\n                PaymentType.WEB -> {\n                    PaymentDataSource.setWebViewType(WebViewType.REDIRECT)\n                    if (savedCardsModel != null) {\n                        if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                            checkForExtraFees(\n                                selectedAmount,\n                                selectedCurrency,\n                                paymentTypeEnum,\n                                savedCardsModel,\n                                PaymentDataProvider().getSelectedCurrency()\n                            )\n                        } else checkForExtraFees(\n                            currentAmount,\n                            currentCurrency,\n                            paymentTypeEnum,\n                            savedCardsModel,\n                            PaymentDataProvider().getSelectedCurrency()\n                        )\n                    }\n                }\n                PaymentType.CARD -> {\n                    //activateActionButton()\n                    if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                        checkForExtraFees(\n                            selectedAmount,\n                            selectedCurrency,\n                            paymentTypeEnum,\n                            savedCardsModel,\n                            PaymentDataProvider().getSelectedCurrency()\n                        )\n                    } else checkForExtraFees(\n                        currentAmount,\n                        currentCurrency,\n                        paymentTypeEnum,\n                        savedCardsModel,\n                        PaymentDataProvider().getSelectedCurrency()\n                    )\n\n\n                }\n                PaymentType.telecom -> {\n                    checkForExtraFees(\n                        currentAmount,\n                        currentCurrency,\n                        paymentTypeEnum,\n                        savedCardsModel,\n                        PaymentDataProvider().getSelectedCurrency()\n                    )\n                }\n            }\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun checkForExtraFees(\n        selectedAmount: String,\n        selectedCurrency: String,\n        paymentTypeEnum: PaymentType,\n        savedCardsModel: Any?,\n        amountedCurrency: AmountedCurrency?\n    ) {\n        var extraFees: java.util.ArrayList<ExtraFee>? = null\n        var paymentOption: PaymentOption? = null\n\n\n        if (paymentTypeEnum == PaymentType.WEB) {\n            savedCardsModel as PaymentOption\n            extraFees = savedCardsModel.extraFees\n            fee = calculateExtraFeesAmount(savedCardsModel as PaymentOption, amountedCurrency)\n\n        } else {\n            for (i in paymentOptionsResponse.paymentOptions.indices) {\n                if (paymentOptionsResponse.paymentOptions[i].paymentType == paymentTypeEnum) {\n                    extraFees = paymentOptionsResponse.paymentOptions[i].extraFees\n                    paymentOption = paymentOptionsResponse.paymentOptions[i]\n                }\n            }\n            fee = calculateExtraFeesAmount(paymentOption, amountedCurrency)\n\n        }\n        val totalAmount: String\n        if (selectedTotalAmount != null) {\n            println(\"selectedTotalAmount is\" + selectedTotalAmount)\n            if (selectedAmount.contains(\",\")) {\n                totalAmount = CurrencyFormatter.currencyFormat(\n                    fee?.add(BigDecimal(selectedAmount.replace(\",\", \"\").toDouble())).toString()\n                )\n\n            } else\n                totalAmount = CurrencyFormatter.currencyFormat(\n                    fee?.add(\n                        selectedTotalAmount?.toDouble()?.let { BigDecimal.valueOf(it) }).toString()\n                )\n        } else {\n            totalAmount = CurrencyFormatter.currencyFormat(\n                fee?.add(\n                    amountedCurrency?.amount?.toDouble()?.let { BigDecimal.valueOf(it) }).toString()\n            )\n        }\n\n        if (calculateExtraFeesAmount(\n                extraFees,\n                paymentOptionsResponse.supportedCurrencies,\n                PaymentDataProvider().getSelectedCurrency()\n            )!! > BigDecimal.ZERO\n        ) {\n            showExtraFees(\n                totalAmount.toString(),\n                fee.toString(),\n                paymentTypeEnum,\n                savedCardsModel,\n                selectedCurrency\n            )\n        } else if (savedCardsModel != null) {\n            if (paymentTypeEnum == PaymentType.CARD || paymentTypeEnum == PaymentType.SavedCard) {\n                if (paymentInlineViewHolder.cardInputUIStatus == CardInputUIStatus.SavedCard) {\n                    savedCardsModel as SavedCard\n                    if (savedCardsModel.paymentOptionIdentifier.toInt() == 3 || savedCardsModel.paymentOptionIdentifier.toInt() == 4) {\n                        setDifferentPaymentsAction(PaymentType.SavedCard, savedCardsModel)\n                    }\n\n                } else {\n                    savedCardsModel as PaymentOption\n                    setDifferentPaymentsAction(PaymentType.CARD, savedCardsModel)\n\n                }\n\n            } else setDifferentPaymentsAction(paymentTypeEnum, savedCardsModel)\n        } else setDifferentPaymentsAction(paymentTypeEnum, savedCardsModel)\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun payActionSavedCard(savedCardsModel: SavedCard?) {\n        amountViewHolder.view.amount_section?.tapChipPopup?.slideFromLeftToRight()\n\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n            ActionButtonState.LOADING\n        )\n        val selectdSavedCard = logicTogetPayOptions(savedCardsModel?.brand?.rawValue)\n        if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains(\"dark\")) {\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(\n                backgroundColor = Color.parseColor(\n                    selectdSavedCard?.buttonStyle?.background?.darkModel?.baseColor\n                )\n            )\n\n        } else saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(\n            backgroundColor = Color.parseColor(selectdSavedCard?.buttonStyle?.background?.lightModel?.baseColor)\n        )\n\n        startSavedCardPaymentProcess(savedCardsModel as SavedCard)\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.getImageView(\n            R.drawable.loader,\n            8\n        ) {\n\n\n        }?.let { it1 ->\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.addChildView(\n                it1\n            )\n        }\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun startSavedCardPaymentProcess(savedCard: SavedCard?) {\n        val createTokenSavedCard =\n            CreateTokenSavedCard(savedCard?.id, PaymentDataSource.getCustomer().identifier)\n        cardViewModel.processEvent(\n            CardViewEvent.CreateTokenExistingCardEvent,\n            this,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            createTokenSavedCard\n        )\n    }\n\n    private fun removeAllViews() {\n        if (::businessViewHolder.isInitialized && ::amountViewHolder.isInitialized && ::cardViewHolder.isInitialized && ::paymentInlineViewHolder.isInitialized &&\n            ::goPayViewsHolder.isInitialized && ::otpViewHolder.isInitialized\n        )\n            removeViews(\n                businessViewHolder,\n                amountViewHolder,\n                cardViewHolder,\n                paymentInlineViewHolder,\n                saveCardSwitchHolder,\n                goPayViewsHolder,\n                otpViewHolder,\n                tabAnimatedActionButtonViewHolder\n            )\n\n        if (::webViewHolder.isInitialized) removeViews(webViewHolder)\n    }\n\n    private fun setAllSeparatorTheme() {\n\n        val borderColor: String = ThemeManager.getValue(\"poweredByTap.backgroundColor\")\n        var borderOpacityVal: String? = null\n        var newBorderColor: String? = null\n        borderOpacityVal = borderColor.substring(borderColor.length - 2)\n        newBorderColor = \"#\" + borderOpacityVal + borderColor.substring(0, borderColor.length - 2)\n            .replace(\"#\", \"\")\n\n      //  sdkLayout.setBackgroundColor(Color.parseColor(newBorderColor))\n\n        sdkLayout.let { it1 ->\n            setTopBorders(\n                it1,\n                35f,// corner raduis\n                0.0f,\n                Color.parseColor(\n                    newBorderColor\n                ),// stroke color\n                Color.parseColor(\n                    newBorderColor\n                ),// tint color\n                Color.parseColor(\n                    newBorderColor\n                )\n            )\n        }\n        val separatorViewTheme = SeparatorViewTheme()\n        separatorViewTheme.strokeColor =\n            Color.parseColor(ThemeManager.getValue(\"tapSeparationLine.backgroundColor\"))\n        separatorViewTheme.strokeHeight = ThemeManager.getValue(\"tapSeparationLine.height\")\n        businessViewHolder.view.topSeparatorLinear.topSeparator.setTheme(separatorViewTheme)\n\n        if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains(\"dark\")) {\n            amountViewHolder.view.amountView_separator.visibility = GONE\n        } else amountViewHolder.view.amountView_separator.visibility = View.VISIBLE\n        amountViewHolder.view.amountView_separator.setTheme(separatorViewTheme)\n        //  cardViewHolder.view.tapSeparatorViewLinear1.separator_1.setTheme(separatorViewTheme)\n        goPaySavedCardHolder.view.tapSeparatorViewLinear.separator_.setTheme(separatorViewTheme)\n        /**\n         * set separator background\n         */\n        businessViewHolder.view.topSeparatorLinear.setBackgroundColor(\n            (Color.parseColor(\n                ThemeManager.getValue(\n                    \"merchantHeaderView.backgroundColor\"\n                )\n            ))\n        )\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onRecognitionSuccess(card: TapCard?) {\n//to be added for unembossed cards\n        /* if (card != null) {\n             if (card.cardNumber != null && card.cardHolder != null && card.expirationDate != null) {\n                onReadSuccess(card)\n             }\n         }*/\n\n        println(\"are you called here!!\")\n\n\n    }\n\n    override fun onRecognitionFailure(error: String?) {\n\n    }\n\n\n    private fun removeInlineScanner() {\n        if (isInlineOpened) {\n            if (fragmentManager.findFragmentById(R.id.inline_container) != null) {\n                fragmentManager.beginTransaction()\n                    .remove(fragmentManager?.findFragmentById(R.id.inline_container)!!)\n                    .commit()\n            }\n            // inlineCamerFragment.onDestroy()\n            isInlineOpened = false\n            checkoutFragment.isScannerOpened = false\n            inLineCardLayout.visibility = GONE\n            amountViewHolder.readyToScanVisibility(false)\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                ActionButtonState.RESET\n            )\n\n        }\n\n    }\n\n    fun handleScanFailedResult(error: String?) {\n        println(\"handleScanFailedResult card is\")\n        removeInlineScanner()\n        //  removeViews(amountViewHolder, businessViewHolder)\n        addViews(\n            // businessViewHolder,\n            //  amountViewHolder,\n            cardViewHolder,\n            paymentInlineViewHolder,\n            saveCardSwitchHolder\n        )\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun handleScanSuccessResult(card: TapCard) {\n\n        //  removeViews(amountViewHolder, businessViewHolder)\n        addViews(\n            // businessViewHolder,\n            /// amountViewHolder,\n            cardViewHolder,\n            paymentInlineViewHolder,\n            saveCardSwitchHolder\n        )\n\n        if (card != null && card.cardNumber?.trim() != null && card.cardNumber.trim().length == 6) {\n            callBinLookupApi(card.cardNumber.trim().substring(0, 6))\n        }\n\n\n        Handler().postDelayed({\n            val binLookupResponse: BINLookupResponse? = PaymentDataSource.getBinLookupResponse()\n            if (PaymentDataSource.getCardType() != null && PaymentDataSource.getCardType() == CardType.ALL) {\n                setScannedCardDetails(card)\n\n            } else {\n                if (binLookupResponse != null) {\n                    paymentInlineViewHolder.checkAllowedCardTypes(binLookupResponse)\n                    setScannedCardDetails(card)\n                }\n\n            }\n        }, 300)\n\n\n        // inlineCamerFragment.onDestroy()\n        removeInlineScanner()\n\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun setScannedCardDetails(card: TapCard) {\n        /* if(CardUtils.isValidCardNumber(card.cardNumber)){\n             paymentInlineViewHolder.tapCardInputView.onTouchView()\n         }else {\n             paymentInlineViewHolder.tapCardInputView.onTouchCardField()\n         }*/\n        //paymentInlineViewHolder.tapCardInputView.onTouchCardField()\n        println(\"scanned card holder is${card.cardHolder}\")\n        println(\"scanned card number is${card.cardNumber}\")\n\n        paymentInlineViewHolder.tapCardInputView.setCardNumberMasked(\n            paymentInlineViewHolder.maskCardNumber(\n                card.cardNumber\n            )\n        )\n        val dateParts: List<String>? = card.expirationDate?.split(\"/\")\n        val month = dateParts?.get(0)?.toInt()\n        val year = dateParts?.get(1)?.toInt()\n        if (month != null) {\n            if (year != null) {\n                paymentInlineViewHolder.tapCardInputView.setExpiryDate(month, year)\n            }\n        }\n\n\n        // paymentInlineViewHolder.tapCardInputView.setCardHolderName(card.cardHolder)\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun callBinLookupApi(binLookUpStr: String?) {\n        cardViewModel.processEvent(\n            CardViewEvent.RetreiveBinLookupEvent,\n            CheckoutViewModel(), null, binLookUpStr, null, null\n        )\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun handleNFCScannedResult(emvCard: TapEmvCard) {\n        println(\"emvCard>>\" + emvCard)\n        //   removeViews(amountViewHolder, businessViewHolder)\n        addViews(\n            //   businessViewHolder,\n            //   amountViewHolder,\n           // cardViewHolder,\n            paymentInlineViewHolder,\n            saveCardSwitchHolder\n        )\n        callBinLookupApi(emvCard.cardNumber?.substring(0, 6))\n\n        Handler().postDelayed({\n            val binLookupResponse: BINLookupResponse? = PaymentDataSource.getBinLookupResponse()\n            if (PaymentDataSource.getCardType() != null && PaymentDataSource.getCardType() == CardType.ALL) {\n                setNfcCardDetails(emvCard)\n\n            } else {\n                if (binLookupResponse != null) {\n                    paymentInlineViewHolder.checkAllowedCardTypes(binLookupResponse)\n                    setNfcCardDetails(emvCard)\n                }\n\n            }\n        }, 300)\n\n        removeNFCViewFragment()\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun setNfcCardDetails(emvCard: TapEmvCard) {\n        // auto slide added on scan to prevent overlap\n        paymentInlineViewHolder.hideViewONScanNFC()\n        convertDateString(emvCard)\n        paymentInlineViewHolder.onFocusChange(CardInputListener.FocusField.FOCUS_CVC)\n\n\n    }\n\n    private fun removeNFCViewFragment() {\n        if (isNFCOpened)\n            if (fragmentManager.findFragmentById(R.id.fragment_container_nfc_lib) != null)\n                fragmentManager.beginTransaction()\n                    .remove(fragmentManager.findFragmentById(R.id.fragment_container_nfc_lib)!!)\n                    .commit()\n        isNFCOpened = false\n        checkoutFragment.isNfcOpened = false\n        //  webFrameLayout.visibility = View.GONE\n        frameLayout.visibility = GONE\n        cardViewHolder.view.visibility=View.VISIBLE\n    }\n\n\n    private fun convertDateString(emvCard: TapEmvCard) {\n        //  println(\"emvCard.getExpireDate()\"+emvCard.getExpireDate())\n        val dateParts: CharSequence? = DateFormat.format(\"M/y\", emvCard.getExpireDate())\n        println(\"dateparts\" + dateParts?.length)\n        if (dateParts?.contains(\"/\") == true) {\n            if (dateParts.length <= 3) {\n                return\n            } else {\n                if (dateParts.length >= 5 || dateParts.length >= 4) {\n                    val month = (dateParts).substring(0, 1).toInt()\n\n                    val year = (dateParts).substring(2, 4)\n\n                    if (year.contains(\"/\")) {\n                        println(\"retuu>>\" + year)\n                        return\n                    } else {\n                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n                            paymentInlineViewHolder.setNFCCardData(emvCard , month ,year.toInt())\n                        }\n\n\n                    }\n\n                }\n\n            }\n\n\n        }\n\n    }\n\n    private fun filteredByPaymentTypeAndCurrencyAndSortedList(\n        list: java.util.ArrayList<PaymentOption>, paymentType: PaymentType, currency: String\n    ): java.util.ArrayList<PaymentOption> {\n        var currencyFilter: String? = currency.toUpperCase()\n        val filters: java.util.ArrayList<Utils.List.Filter<PaymentOption>> =\n            java.util.ArrayList<Utils.List.Filter<PaymentOption>>()\n\n        /**\n         * if trx currency not included inside supported currencies <i.e Merchant pass transaction currency that he is not allowed for>\n         * set currency to first supported currency\n        </i.e> */\n        var trxCurrencySupported = false\n        for (amountedCurrency in paymentOptionsResponse.supportedCurrencies) {\n            if (amountedCurrency.currency == currencyFilter) {\n                trxCurrencySupported = true\n                break\n            }\n        }\n        if (!trxCurrencySupported) currencyFilter =\n            paymentOptionsResponse.supportedCurrencies[0].currency\n\n\n        if (currencyFilter != null) {\n            this.getCurrenciesFilter<PaymentOption>(currencyFilter)?.let { filters.add(it) }\n        }\n        //  filters.add(getPaymentOptionsFilter(paymentType))\n        //  val filter: CompoundFilter<PaymentOption> = CompoundFilter(filters)\n        //  val filtered: ArrayList<PaymentOption> = Utils.List.filter(list)\n\n        var filtered: ArrayList<PaymentOption> =\n            list.filter { items ->\n                items.paymentType == paymentType && items.getSupportedCurrencies()?.contains(\n                    currencyFilter\n                ) == true\n            } as ArrayList<PaymentOption>\n\n        return list.filter { items ->\n            items.paymentType == paymentType && items.getSupportedCurrencies()?.contains(\n                currencyFilter\n            ) == true\n        } as ArrayList<PaymentOption>\n    }\n\n    private fun <E : CurrenciesSupport?> getCurrenciesFilter(\n        currency: String\n    ): Utils.List.Filter<E>? {\n        return object : Utils.List.Filter<E> {\n            override fun isIncluded(`object`: E): Boolean {\n                return `object`?.getSupportedCurrencies()!!.contains(currency)\n            }\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun filterViewModels(currency: String) {\n        if (paymentOptionsResponse.paymentOptions != null)\n            paymentOptionsWorker =\n                java.util.ArrayList<PaymentOption>(paymentOptionsResponse.paymentOptions)\n        if (paymentOptionsResponse.cards != null) {\n            val savedCardsWorker: java.util.ArrayList<SavedCard> =\n                java.util.ArrayList<SavedCard>(paymentOptionsResponse.cards)\n        }\n         webPaymentOptions =\n            filteredByPaymentTypeAndCurrencyAndSortedList(\n                paymentOptionsWorker, PaymentType.WEB, currency\n            )\n\n        val cardPaymentOptions: java.util.ArrayList<PaymentOption> =\n            filteredByPaymentTypeAndCurrencyAndSortedList(\n                paymentOptionsWorker, PaymentType.CARD, currency\n            )\n\n        val googlePaymentOptions: java.util.ArrayList<PaymentOption> =\n            filteredByPaymentTypeAndCurrencyAndSortedList(\n                paymentOptionsWorker, PaymentType.GOOGLE_PAY, currency\n            )\n        //  println(\"googlePaymentOptions\"+googlePaymentOptions)\n        val hasWebPaymentOptions = webPaymentOptions.size > 0\n        val hasCardPaymentOptions = cardPaymentOptions.size > 0\n        val hasGooglePaymentOptions = googlePaymentOptions.size > 0\n        // println(\"hasGooglePaymentOptions\"+hasGooglePaymentOptions)\n\n        //Added if else to update showing GooglePay button based on api\n        if (hasGooglePaymentOptions && googlePaymentOptions.isNotEmpty()) {\n            adapter.updateAdapterGooglePay(googlePaymentOptions)\n            PaymentDataSource.setGoogleCardPay(googlePaymentOptions)\n        } else {\n            adapter.updateAdapterGooglePay(googlePaymentOptions)\n            PaymentDataSource.setGoogleCardPay(googlePaymentOptions)\n        }\n        println(\"hasWebPaymentOptions\"+webPaymentOptions.size)\n        println(\"hasCardPaymentOptions\"+hasCardPaymentOptions)\n        println(\"savedCardList\"+savedCardList?.isNullOrEmpty())\n        if(webPaymentOptions.size==0) {\n            adapter.updateAdapterData(ArrayList())\n            cardViewHolder.view.mainChipgroup?.groupName?.visibility =View.GONE\n\n\n        }else logicToHandlePaymentDataType(webPaymentOptions, cardPaymentOptions)\n\n\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun logicToHandlePaymentDataType(\n        webPaymentOptions: ArrayList<PaymentOption>,\n        cardPaymentOptions: ArrayList<PaymentOption>\n\n    ) {\n        cardViewHolder.view.mainChipgroup?.groupName?.visibility =View.VISIBLE\n        // println(\"webPaymentOptions in logic >>>>$webPaymentOptions\")\n        //  println(\"cardPaymentOptions in logic >>>>$cardPaymentOptions\")\n\n        if (PaymentDataSource.getPaymentDataType() != null && PaymentDataSource.getPaymentDataType() == \"WEB\" && PaymentDataSource.getTransactionMode() != TransactionMode.AUTHORIZE_CAPTURE) {\n            adapter.updateAdapterDataSavedCard(ArrayList())\n            adapter.updateAdapterData(webPaymentOptions)\n            saveCardSwitchHolder?.view?.cardSwitch?.showOnlyPayButton()\n        } else if (PaymentDataSource.getPaymentDataType() != null && PaymentDataSource.getPaymentDataType() == \"CARD\") {\n            adapter.updateAdapterData(ArrayList())\n            paymentInlineViewHolder.setDataFromAPI(cardPaymentOptions)\n            saveCardSwitchHolder?.view?.cardSwitch?.showOnlyPayButton()\n        } else {\n            /**\n             * If TransactionMode is AUTHORIZE_CAPTURE then don't show webpayment options\n             * **/\n            if (PaymentDataSource.getTransactionMode() == TransactionMode.AUTHORIZE_CAPTURE) {\n                adapter.updateAdapterData(ArrayList())\n                paymentInlineViewHolder.setDataFromAPI(cardPaymentOptions)\n            } else {\n                adapter.updateAdapterData(webPaymentOptions)\n                if (!cardPaymentOptions.isEmpty()) {\n                    paymentInlineViewHolder.setDataFromAPI(cardPaymentOptions)\n\n\n                } else {\n                    saveCardSwitchHolder?.mainTextSave?.visibility = GONE\n                    removeViews(paymentInlineViewHolder)\n                }\n\n            }\n        }\n        if (LocalizationManager.currentLocalized.length() != 0) {\n            title = LocalizationManager.getValue(\"title\", \"ExtraFees\")\n\n        }\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun showExtraFees(\n        totalAmount: String,\n        extraFeesAmount: String,\n        paymentType: PaymentType, savedCardsModel: Any?, selectedCurrency: String\n    ) {\n\n        val extraFeesPart1: String = LocalizationManager.getValue<String>(\n            \"message\",\n            \"ExtraFees\"\n        ).replaceFirst(\"%@\", extraFeesAmount + selectedCurrency)\n        val extraFeesPart2: String = extraFeesPart1.replace(\"%@\", totalAmount + selectedCurrency)\n        // val leftToRight = \"\\u200F\"\n        //  val localizedMessage =\n        // extraFeesPart1 +\" \"+extraFeesAmount+PaymentDataProvider().getSelectedCurrency()?.currency +extraFeesPart2+\" \"+ totalAmount+ PaymentDataProvider().getSelectedCurrency()?.currency\n        //    \"$extraFeesPart1 $extraFeesAmount$selectedCurrency$extraFeesPart2 $totalAmount$selectedCurrency\"\n        CustomUtils.showDialog(\n            title,\n            extraFeesPart2,\n            context,\n            3,\n            this,\n            paymentType,\n            savedCardsModel, true\n        )\n\n\n    }\n\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun dialogueExecuteExtraFees(\n        response: String,\n        paymentType: PaymentType,\n        savedCardsModel: Any?\n    ) {\n        if (response == \"YES\") {\n            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n            println(\"savedCardsModel>>>>\" + savedCardsModel)\n            if (savedCardsModel != null) {\n                if (paymentType == PaymentType.CARD) {\n                    savedCardsModel as SavedCard\n                    if (savedCardsModel.paymentOptionIdentifier.toInt() == 3 || savedCardsModel.paymentOptionIdentifier.toInt() == 4) {\n                        setDifferentPaymentsAction(PaymentType.SavedCard, savedCardsModel)\n                    }\n                } else setDifferentPaymentsAction(paymentType, savedCardsModel)\n            } else setDifferentPaymentsAction(paymentType, savedCardsModel)\n        } else {\n            fee = BigDecimal.ZERO\n\n            when {\n                paymentType === PaymentType.WEB -> {\n                    // fireWebPaymentExtraFeesUserDecision(ExtraFeesStatus.REFUSE_EXTRA_FEES)\n                    selectedCurrencyPos = null\n                    selectedAmountPos = null\n\n\n                }\n                paymentType === PaymentType.CARD -> {\n                    selectedCurrencyPos = null\n                    selectedAmountPos = null\n//                    fireCardPaymentExtraFeesUserDecision(ExtraFeesStatus.REFUSE_EXTRA_FEES)\n                }\n                paymentType === PaymentType.SavedCard -> {\n                    selectedCurrencyPos = null\n                    selectedAmountPos = null\n                    //  fireSavedCardPaymentExtraFeesUserDecision(ExtraFeesStatus.REFUSE_EXTRA_FEES)\n                }\n            }\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    private fun setDifferentPaymentsAction(\n        paymentType: PaymentType,\n        savedCardsModel: Any?\n    ) {\n        when {\n\n            paymentType === PaymentType.WEB -> {\n                if (savedCardsModel != null) {\n                    PaymentDataSource.setWebViewType(WebViewType.REDIRECT)\n                    //Added to disable click when button loading\n                    amountViewHolder.view.amount_section?.itemAmountLayout?.isEnabled = false\n                    amountViewHolder.view.amount_section?.itemAmountLayout?.isClickable = false\n                    onClickRedirect(savedCardsModel)\n                }\n            }\n            paymentType === PaymentType.CARD -> {\n                println(\"savedCardsModel fro card\" + savedCardsModel)\n                PaymentDataSource.setWebViewType(WebViewType.THREE_DS_WEBVIEW)\n                //Added to disable click when button loading\n                amountViewHolder.view.amount_section?.itemAmountLayout?.isEnabled = false\n                amountViewHolder.view.amount_section?.itemAmountLayout?.isClickable = false\n\n                onClickCardPayment(savedCardsModel)\n\n\n            }\n            paymentType === PaymentType.SavedCard -> {\n                if (isSavedCardSelected == true) {\n                    //Added to disable click when button loading\n                    amountViewHolder.view.amount_section?.itemAmountLayout?.isEnabled = false\n                    amountViewHolder.view.amount_section?.itemAmountLayout?.isClickable = false\n                    payActionSavedCard(savedCardsModel as SavedCard)\n\n                }\n            }\n        }\n    }\n\n    /**\n     * Calculate extra fees amount big decimal.\n     *\n     * @param paymentOption the payment option\n     * @return the big decimal\n     */\n    open fun calculateExtraFeesAmount(\n        paymentOption: PaymentOption?,\n        amountedCurrency: AmountedCurrency?\n    ): BigDecimal? {\n        return if (paymentOption != null) {\n\n            // val amount = PaymentDataProvider().getSelectedCurrency()\n            var extraFees: java.util.ArrayList<ExtraFee>? = paymentOption.extraFees\n            if (extraFees == null) extraFees = java.util.ArrayList()\n            val supportedCurrencies: java.util.ArrayList<SupportedCurrencies>? =\n                PaymentDataProvider().getSupportedCurrencies()\n            calculateExtraFeesAmount(extraFees, supportedCurrencies, amountedCurrency)\n        } else BigDecimal.ZERO\n    }\n\n    fun View.fadeVisibility(visibility: Int, duration: Long = 3000) {\n        val transition: Transition = Fade()\n        transition.duration = duration\n        transition.addTarget(this)\n        TransitionManager.beginDelayedTransition(this.parent as ViewGroup, transition)\n        this.visibility = visibility\n    }\n\n    fun closeAsynchView() {\n        /*   removeViews(businessViewHolder, asynchronousPaymentViewHolder)\n           businessViewHolder.setDataFromAPI(\n               PaymentDataSource.getMerchantData()?.logo,\n               PaymentDataSource.getMerchantData()?.name\n           )\n           addViews(\n               businessViewHolder,\n               amountViewHolder,\n               cardViewHolder,\n               paymentInlineViewHolder,\n               saveCardSwitchHolder\n           )\n           saveCardSwitchHolder?.view?.visibility = View.VISIBLE\n           saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.RESET)\n           val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n           saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n               false,\n               \"en\",\n               if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                   payString+\" \"+currentCurrencySymbol+\" \"+selectedAmount\n               }else{ payString+\" \"+currentCurrencySymbol+\" \"+currentAmount},\n               Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n               Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n           )*/\n        //  Stopped reset view and dismiss it.\n        checkoutFragment?.dismissBottomSheetDialog()\n    }\n\n    fun showOnlyButtonView(\n        status: ChargeStatus,\n        checkOutActivity: CheckOutActivity?,\n        _checkoutFragment: CheckoutFragment\n    ) {\n        println(\"checkoutFragment>>>.\" + _checkoutFragment)\n        println(\"checkOutActivity>>>.\" + checkOutActivity)\n        removeAllViews()\n        addViews(saveCardSwitchHolder)\n        val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n        val nowString: String = LocalizationManager.getValue(\"now\", \"ActionButton\")\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n            false,\n            \"en\",\n            if (::selectedAmount.isInitialized && ::selectedCurrency.isInitialized) {\n                payString + \" \" + nowString\n            } else {\n                payString + \" \" + nowString\n            },\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.paymentBackgroundColor\")),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.titleLabelColor\")),\n        )\n\n\n        when (status) {\n            ChargeStatus.CAPTURED, ChargeStatus.AUTHORIZED, ChargeStatus.VALID, ChargeStatus.IN_PROGRESS -> {\n                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setDisplayMetrics(\n                    CustomUtils.getDeviceDisplayMetrics(\n                        context as Activity\n                    )\n                )\n                Handler().postDelayed({\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                        ActionButtonState.SUCCESS\n                    )\n                }, 500)\n            }\n            ChargeStatus.CANCELLED, ChargeStatus.TIMEDOUT, ChargeStatus.FAILED, ChargeStatus.DECLINED, ChargeStatus.UNKNOWN,\n            ChargeStatus.RESTRICTED, ChargeStatus.ABANDONED, ChargeStatus.VOID, ChargeStatus.INVALID -> {\n                Handler().postDelayed({\n                    tabAnimatedActionButton?.setInValidBackground(\n                        false, Color.YELLOW\n                    )\n                    tabAnimatedActionButton?.changeButtonState(ActionButtonState.LOADING)\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(\n                        false, Color.YELLOW\n                    )\n\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n                        false,\n                        \"en\",\n                        null,\n                        Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n                        Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n\n                        )\n                    saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                        ActionButtonState.ERROR\n                    )\n                }, 500)\n                tabAnimatedActionButton?.changeButtonState(ActionButtonState.ERROR)\n            }\n            else -> {\n\n                if (status.equals(\"tokenized\")) {\n                    Handler().postDelayed({\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                            ActionButtonState.SUCCESS\n                        )\n                    }, 500)\n\n                } else {\n                    Handler().postDelayed({\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(\n                            false,\n                            Color.BLUE\n                        )\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setButtonDataSource(\n                            false,\n                            \"en\",\n                            null,\n                            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.backgroundColor\")),\n                            Color.parseColor(ThemeManager.getValue(\"actionButton.Invalid.titleLabelColor\")),\n\n                            )\n                        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(\n                            ActionButtonState.ERROR\n                        )\n                    }, 500)\n\n                }\n            }\n        }\n        /*   Handler().postDelayed({\n               checkOutActivity?.onBackPressed()\n\n               if (::bottomSheetDialog.isInitialized)\n                   bottomSheetDialog.dismiss()\n               _checkoutFragment.activity?.onBackPressed()\n\n           }, 12000)*/\n    }\n\n\n    /**\n     * handlePaymentSuccess handles the payment token obtained from GooglePay API\n     * **/\n    @RequiresApi(Build.VERSION_CODES.N)\n    fun handlePaymentSuccess(paymentData: PaymentData) {\n        removeViews(\n            //businessViewHolder,\n            amountViewHolder,\n            cardViewHolder,\n            // saveCardSwitchHolder,\n            paymentInlineViewHolder,\n            otpViewHolder,\n            goPaySavedCardHolder,\n            goPayViewsHolder\n        )\n        saveCardSwitchHolder?.view?.cardSwitch?.switchesLayout?.visibility = GONE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = View.VISIBLE\n        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(ActionButtonState.LOADING)\n\n        val paymentInformation = paymentData.toJson() ?: return\n\n        try {\n            // Token will be null if PaymentDataRequest was not constructed using fromJson(String).\n            val paymentMethodData =\n                JSONObject(paymentInformation).getJSONObject(\"paymentMethodData\")\n\n            // If the gateway is set to \"example\", no payment information is returned - instead, the\n            // token will only consist of \"examplePaymentMethodToken\".\n            val tokenizationData = paymentMethodData.getJSONObject(\"tokenizationData\")\n\n            val token = tokenizationData.getString(\"token\")\n            Bugfender.d(CustomUtils.tagEvent, \"Google pay raw token :\" + token)\n            val gson = Gson()\n            val jsonToken = gson.fromJson(token, JsonObject::class.java)\n\n\n            /**\n             * At this stage, Passing the googlePaylaod to Tap Backend TokenAPI call followed by chargeAPI.\n             * ***/\n            val createTokenGPayRequest = CreateTokenGPayRequest(\"googlepay\", jsonToken)\n            CardViewModel().processEvent(\n                CardViewEvent.CreateGoogleTokenEvent,\n                this,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                context,\n                createTokenGPayRequest\n            )\n            // Logging token string.\n            /* Log.e(\"GooglePaymentToken\", paymentMethodData\n                     .getJSONObject(\"tokenizationData\")\n                     .getString(\"token\"))\n    */\n        } catch (e: JSONException) {\n            Log.e(\"handlePaymentSuccess\", \"Error: \" + e.toString())\n        }\n\n    }\n\n    /**\n     * handleError handles the payment response obtained from GooglePay API\n     * **/\n    fun handleError(statusCode: Int) {\n        Log.e(\"loadPaymentData failed\", String.format(\"Error code: %d\", statusCode))\n    }\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onReadSuccess(card: TapCard?) {\n        incrementalCount += 1\n\n        println(\"incrementalCount val>>>>>\" + incrementalCount)\n        /*   if (card != null) {\n               if(card.cardNumber!=null)\n              handleScanSuccessResult(card)\n              *//* Log.d(\"checkOutViewModel\", \"onRecognitionSuccess: \" + card.cardNumber)\n            Log.d(\"checkOutViewModel\", \"onRecognitionSuccess: \" + card.expirationDate)\n            Log.d(\"checkOutViewModel\", \"onRecognitionSuccess: \" + card.cardHolder)*//*\n\n        }*/\n        if (card != null && incrementalCount == 3) {\n\n            if (card.cardNumber != null && card.cardHolder != null && card.expirationDate != null) {\n                handleScanSuccessResult(card)\n            }\n            return\n        }\n    }\n\n    override fun onReadFailure(error: String?) {\n        handleScanFailedResult(error)\n    }\n\n    private fun logicForLoyaltyProgram() {\n\n        loyaltyViewHolder.loyaltyView.switchLoyalty?.setOnCheckedChangeListener { buttonView, isChecked ->\n            loyaltyViewHolder.loyaltyView.switchTheme()\n\n            if (isChecked) {\n                loyaltyViewHolder.loyaltyView.linearLayout2?.visibility = View.VISIBLE\n                loyaltyViewHolder.loyaltyView.linearLayout3?.visibility = View.VISIBLE\n\n            } else {\n\n                loyaltyViewHolder.loyaltyView.linearLayout2?.visibility = GONE\n                loyaltyViewHolder.loyaltyView.linearLayout3?.visibility = GONE\n\n            }\n        }\n\n        loyaltyViewHolder.loyaltyView.setLoyaltyHeaderDataSource(\n            LoyaltyHeaderDataSource(\n                \"ADCB\",\n                \"https://is4-ssl.mzstatic.com/image/thumb/Purple112/v4/05/33/67/05336718-a6f6-8ca1-1ea0-0644f5071ce9/AppIcon-0-0-1x_U007emarketing-0-0-0-5-0-0-sRGB-0-0-0-GLES2_U002c0-512MB-85-220-0-0.png/1200x600wa.png\"\n            )\n        )\n\n        loyaltyViewHolder.loyaltyView.textViewClickable?.makeLinks(\n            Pair(\"(T&C)\", View.OnClickListener {\n                val url = \"https://www.adcb.com/en/tools-resources/adcb-privacy-policy/\"\n                val intent = Intent(Intent.ACTION_VIEW)\n                intent.data = Uri.parse(url)\n                context.startActivity(intent)\n\n            })\n        )\n    }\n\n    fun onButtonClicked() {\n        println(\"onButtonClicked\")\n        BenefitInAppCheckout.newInstance(\n            context as Activity,\n            appId,\n            \"448544\",\n            merchantId,\n            seceret,\n            \"20.0\",\n            \"BH\",\n            \"048\",\n            mcc,\n            \"Tap\",\n            \"Manama\",\n            this\n        )\n    }\n\n\n    override fun onTransactionSuccess(p0: Transaction?) {\n        println(\"transaction is success $p0\")\n\n    }\n\n    override fun onTransactionFail(p0: Transaction?) {\n        println(\"onTransactionFail is  $p0\")\n    }\n\n    fun dismissBottomSheet() {\n        checkoutFragment?.dismissBottomSheetDialog()\n    }\n\n    fun setTitleNormalCard() {\n        cardViewHolder.view.cardInfoHeaderText.text =\n            LocalizationManager.getValue(\"cardSectionTitleOr\", \"TapCardInputKit\")\n    }\n\n    fun getAssetName(paymentOptionOb: PaymentOption?): String {\n        println(\"paymentOptionOb\" + paymentOptionOb)\n        var lang: String = \"en\"\n        var theme: String = \"light\"\n        if (LocalizationManager.getLocale(context).language != null) {\n            lang = LocalizationManager.getLocale(context).language\n        } else lang = \"en\"\n        if (ThemeManager.currentTheme != null && ThemeManager.currentTheme.contains(\"dark\")) {\n            theme = \"dark\"\n        } else theme = \"light\"\n        val assetToLoad: String = paymentOptionOb?.buttonStyle?.titleAssets.toString()\n        println(\"oppp\" + assetToLoad.replace(\"{theme}\", theme).replace(\"{lang}\", lang) + \".png\")\n        return assetToLoad.replace(\"{theme}\", theme).replace(\"{lang}\", lang) + \".png\"\n    }\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout/src/main/java/company/tap/checkout/internal/viewmodels/CheckoutViewModel.kt b/checkout/src/main/java/company/tap/checkout/internal/viewmodels/CheckoutViewModel.kt
--- a/checkout/src/main/java/company/tap/checkout/internal/viewmodels/CheckoutViewModel.kt	(revision 84d1fdb570a0bdbc47ab792a42c5e28e5e6f3c5b)
+++ b/checkout/src/main/java/company/tap/checkout/internal/viewmodels/CheckoutViewModel.kt	(date 1683471710392)
@@ -12,9 +12,11 @@
 import android.os.Handler
 import android.os.Looper
 import android.text.format.DateFormat
+import android.util.DisplayMetrics
 import android.util.Log
 import android.view.View
 import android.view.View.GONE
+import android.view.View.VISIBLE
 import android.view.ViewGroup
 import android.view.animation.AnimationUtils
 import android.widget.FrameLayout
@@ -123,6 +125,7 @@
  */
 
 const val animationSpeed = 50L
+
 @RestrictTo(RestrictTo.Scope.LIBRARY)
 open class CheckoutViewModel : ViewModel(), BaseLayoutManager, OnCardSelectedActionListener,
     PaymentCardComplete, onCardNFCCallListener, OnCurrencyChangedActionListener, WebViewContract,
@@ -184,6 +187,7 @@
     private var fee: BigDecimal? = BigDecimal.ZERO
     val provider: IPaymentDataProvider = PaymentDataProvider()
     private var webPaymentOptions: java.util.ArrayList<PaymentOption> = ArrayList()
+
     @JvmField
     var currentCurrency: String = ""
 
@@ -451,7 +455,7 @@
     @RequiresApi(Build.VERSION_CODES.N)
     fun initViewHolders() {
         businessViewHolder = BusinessViewHolder(context, this)
-        amountViewHolder = AmountViewHolder(context, this,this)
+        amountViewHolder = AmountViewHolder(context, this, this)
         tabAnimatedActionButtonViewHolder = TabAnimatedActionButtonViewHolder(context)
         cardViewHolder = CardViewHolder(context, this)
         goPaySavedCardHolder = GoPaySavedCardHolder(context, this, this)
@@ -503,7 +507,7 @@
         asynchronousPaymentViewHolder = AsynchronousPaymentViewHolder(context, this)
         logicForLoyaltyProgram()
 
-       amountViewHolder.view.amount_section.tapChipPopup.setOnClickListener {
+        amountViewHolder.view.amount_section.tapChipPopup.setOnClickListener {
             amountViewHolder.view.amount_section.tapChipPopup.slideFromLeftToRight()
             with(SharedPrefManager.getUserSupportedLocaleForTransactions(context)!!) {
                 if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
@@ -918,7 +922,7 @@
 
     }
 
-     fun translateViewToNewHeight(originalHeight: Int, expandHeightBool: Boolean) {
+    fun translateViewToNewHeight(originalHeight: Int, expandHeightBool: Boolean) {
         val sdkLayoutHeight = sdkLayout.height
         val bottomSheetLayoutHeight = bottomSheetLayout.height
         println("sdkLayoutHeight>>" + sdkLayoutHeight)
@@ -1180,54 +1184,42 @@
             }
             // setSlideAnimation()
             if (PaymentDataSource?.getWebViewType() != null && PaymentDataSource.getWebViewType() == WebViewType.REDIRECT) {
-                businessViewHolder.view.headerView.constraint.visibility = GONE
-                businessViewHolder.view.topSeparatorLinear.visibility = GONE
+
                 //Stopped showing closetext as requested
                 // checkoutFragment.closeText.visibility = View.VISIBLE
+               // businessViewHolder.view.headerView.visibility = View.INVISIBLE
+                businessViewHolder.view.topSeparatorLinear.visibility = VISIBLE
                 removeViews(
-                    // businessViewHolder,
                     amountViewHolder,
+                    paymentInlineViewHolder,
                     cardViewHolder,
-                    // saveCardSwitchHolder,
-                    paymentInlineViewHolder,
                     otpViewHolder,
                     goPaySavedCardHolder,
                     goPayViewsHolder
                 )
 
+
                 /**
                  * apply Background Drawable to switchView
                  */
-                saveCardSwitchHolder?.view?.background = getViewShapeDrawable()
-
-
-
-                saveCardSwitchHolder?.view?.mainSwitch?.visibility = GONE
-                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.changeButtonState(
-                    ActionButtonState.LOADING
-                )
-                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.visibility = GONE
-                saveCardSwitchHolder?.view?.cardSwitch?.tapLogoImage?.visibility = GONE
+                //   saveCardSwitchHolder?.view?.background = getViewShapeDrawable()
 
-                Handler(Looper.getMainLooper()).postDelayed({
-
+                doAfterSpecificTime {
                     val fragment = WebFragment.newInstance(
                         redirectURL,
-                        this, cardViewModel, authenticate, this
+                        this, cardViewModel, authenticate, this,
+                        webFrameLayout, saveCardSwitchHolder, onLoadedWebView = {
+                            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.addFadeOutAnimation()
+                            translateHeightRedirect(sdkLayout)
+                                webFrameLayout.visibility = View.VISIBLE
+                        }
                     )
-
                     fragmentManager.beginTransaction()
                         .replace(R.id.webFrameLayout, fragment, "webFragment")
                         .addToBackStack("webFragment")
                         .commit()
-                    //  checkoutFragment.closeText.visibility = View.VISIBLE
-                    webFrameLayout.visibility = View.VISIBLE
-                    println("fragment hh" + Resources.getSystem().displayMetrics.heightPixels)
-                    if (::bottomSheetLayout.isInitialized)
-                        translateHeightRedirect(sdkLayout)
 
-                }, 500)
-
+                }
 
             } else if (PaymentDataSource?.getWebViewType() != null && PaymentDataSource.getWebViewType() == WebViewType.THREE_DS_WEBVIEW) {
 
@@ -1275,13 +1267,22 @@
         // tabAnimatedActionButtonViewHolder?.view?.actionButton?.visibility = View.INVISIBLE
     }
 
+
+    private fun getWindowHeight(): Int {
+        // Calculate window height for fullscreen use
+        val displayMetrics = DisplayMetrics()
+        (context as Activity).windowManager.defaultDisplay.getMetrics(displayMetrics)
+        return displayMetrics.heightPixels
+    }
+
+
     private fun translateHeightRedirect(sdkLayout: LinearLayout) {
         val resizeAnimation = ResizeAnimation(
             bottomSheetLayout,
             Resources.getSystem().displayMetrics.heightPixels,
             sdkLayout.height, true
         )
-        resizeAnimation.duration = 350
+        resizeAnimation.duration = 400
         bottomSheetLayout.startAnimation(resizeAnimation)
     }
 
@@ -1483,7 +1484,7 @@
     private fun initAdaptersAction() {
         adapter = CardTypeAdapterUIKIT(this)
         goPayAdapter = GoPayCardAdapterUIKIT(this)
-        itemAdapter = ItemAdapter(this,bottomSheetLayout)
+        itemAdapter = ItemAdapter(this, bottomSheetLayout)
         // adapter?.possiblyShowGooglePayButton()
         // val arrayList = ArrayList<String>()//Creating an empty arraylist
         //  arrayList.add("Google Pay")//Adding object in arraylist
@@ -1701,7 +1702,7 @@
             cardViewHolder.view.mainChipgroup.chipsRecycler.adapter = adapter
             deleteCard = false
             adapter.updateShaking(false)
-            if(savedCardList.isNullOrEmpty()) cardViewHolder.view.mainChipgroup?.groupAction?.visibility =
+            if (savedCardList.isNullOrEmpty()) cardViewHolder.view.mainChipgroup?.groupAction?.visibility =
                 GONE
 
         }
@@ -1976,14 +1977,14 @@
 
                 }
 
-              //  Handler().postDelayed({
-                    if (::sdkLayout.isInitialized) {
-                        //it?.view?.visibility = View.INVISIBLE
-                  //          sdkLayout.setBackgroundColor(Color.parseColor(ThemeManager.getValue("horizontalList.backgroundColor")))
-                        sdkLayout.removeView(it?.view)
+                //  Handler().postDelayed({
+                if (::sdkLayout.isInitialized) {
+                    //it?.view?.visibility = View.INVISIBLE
+                    //          sdkLayout.setBackgroundColor(Color.parseColor(ThemeManager.getValue("horizontalList.backgroundColor")))
+                    sdkLayout.removeView(it?.view)
 
-                    }
-              //  }, 150)
+                }
+                //  }, 150)
 
 
             }, 0)
@@ -2002,15 +2003,15 @@
                     it?.view?.startAnimation(animation)
                 }
 
-             //   Handler().postDelayed({
-                    if (::sdkLayout.isInitialized) {
-                        // it?.view?.visibility = View.VISIBLE
-             //           sdkLayout.setBackgroundColor(Color.parseColor(ThemeManager.getValue("horizontalList.backgroundColor")))
-                        sdkLayout.removeView(it?.view)
-                        sdkLayout.addView(it?.view)
+                //   Handler().postDelayed({
+                if (::sdkLayout.isInitialized) {
+                    // it?.view?.visibility = View.VISIBLE
+                    //           sdkLayout.setBackgroundColor(Color.parseColor(ThemeManager.getValue("horizontalList.backgroundColor")))
+                    sdkLayout.removeView(it?.view)
+                    sdkLayout.addView(it?.view)
 
-                    }
-              //  }, 200)
+                }
+                //  }, 200)
 
 
             }, 0)
@@ -2021,7 +2022,7 @@
     }
 
 
-     fun unActivateActionButton() {
+    fun unActivateActionButton() {
         val payNowString: String
 
         when (PaymentDataSource.getTransactionMode()) {
@@ -2199,7 +2200,8 @@
 
         if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains("dark")) {
             if (selectedPayOpt?.buttonStyle?.background?.darkModel?.backgroundColors?.size == 1) {
-                colorBackGround = selectedPayOpt.buttonStyle?.background?.darkModel?.backgroundColors?.get(0)
+                colorBackGround =
+                    selectedPayOpt.buttonStyle?.background?.darkModel?.backgroundColors?.get(0)
             }
             intColorArray = null
 
@@ -2262,16 +2264,15 @@
         saveCardSwitchHolder?.view?.cardSwitch?.payButton?.removeAllViews()
 
         saveCardSwitchHolder?.view?.cardSwitch?.payButton?.getImageViewUrl(
-                getAssetName(
-                    selectedPayOpt
-                )
-            )
-                ?.let { saveCardSwitchHolder?.view?.cardSwitch?.payButton?.addChildView(it) }
-            saveCardSwitchHolder?.view?.cardSwitch?.showOnlyPayButton()
-            saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isActivated
+            getAssetName(
+                selectedPayOpt
+            )
+        )
+            ?.let { saveCardSwitchHolder?.view?.cardSwitch?.payButton?.addChildView(it) }
+        saveCardSwitchHolder?.view?.cardSwitch?.showOnlyPayButton()
+        saveCardSwitchHolder?.view?.cardSwitch?.payButton?.isActivated
 
 
-
     }
 
     private fun logicTogetPayOptions(cardBrandString: String?): PaymentOption? {
@@ -2307,36 +2308,32 @@
             )
 
 
-
-
-
-
-            if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains("dark")) {
-                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(
-                    backgroundColor = Color.parseColor(
-                        savedCardsModel.buttonStyle?.background?.darkModel?.baseColor
-                    )
-                )
-
-            } else saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(
-                backgroundColor = Color.parseColor(savedCardsModel.buttonStyle?.background?.lightModel?.baseColor)
-            )
-
-            saveCardSwitchHolder?.view?.mainSwitch?.mainTextSave?.visibility = View.INVISIBLE
-
-            //Commented to try the flow of redirect
-            removeViews(
-                //    businessViewHolder,
-                amountViewHolder,
-                cardViewHolder,
-                paymentInlineViewHolder,
-                tabAnimatedActionButtonViewHolder
-            )
-            businessViewHolder.view.headerView.constraint.visibility = GONE
-            Handler().postDelayed({
-                if (::bottomSheetLayout.isInitialized)
-                    translateViewToNewHeight(bottomSheetLayout.measuredHeight, true)
-            }, animationSpeed)
+//            if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains("dark")) {
+//                saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(
+//                    backgroundColor = Color.parseColor(
+//                        savedCardsModel.buttonStyle?.background?.darkModel?.baseColor
+//                    )
+//                )
+//
+//            } else saveCardSwitchHolder?.view?.cardSwitch?.payButton?.setInValidBackground(
+//                backgroundColor = Color.parseColor(savedCardsModel.buttonStyle?.background?.lightModel?.baseColor)
+//            )
+//
+//            saveCardSwitchHolder?.view?.mainSwitch?.mainTextSave?.visibility = View.INVISIBLE
+//
+//            //Commented to try the flow of redirect
+//            removeViews(
+//                //    businessViewHolder,
+//                amountViewHolder,
+//                cardViewHolder,
+//                paymentInlineViewHolder,
+//                tabAnimatedActionButtonViewHolder
+//            )
+//            businessViewHolder.view.headerView.constraint.visibility = GONE
+//            Handler().postDelayed({
+//                if (::bottomSheetLayout.isInitialized)
+//                    translateViewToNewHeight(bottomSheetLayout.measuredHeight, true)
+//            }, animationSpeed)
 
         }
     }
@@ -2540,7 +2537,7 @@
     ) {
         println("isCompleted aaa" + isCompleted)
         println("expiryDate aaa" + expiryDate)
-        if(isCompleted) activateActionButton(cardBrandString = cardBrandString)
+        if (isCompleted) activateActionButton(cardBrandString = cardBrandString)
         if (savedCardsModel != null) {
             setPayButtonAction(paymentType, savedCardsModel)
         } else {
@@ -2560,7 +2557,7 @@
         removeViews(
             //businessViewHolder,
             // amountViewHolder,
-           // cardViewHolder,
+            // cardViewHolder,
             saveCardSwitchHolder,
             paymentInlineViewHolder,
             otpViewHolder,
@@ -2569,7 +2566,7 @@
         )
         //  addViews(businessViewHolder, amountViewHolder)
         frameLayout.visibility = View.VISIBLE
-        cardViewHolder.view.visibility= GONE
+        cardViewHolder.view.visibility = GONE
         fragmentManager
             .beginTransaction()
             .replace(R.id.fragment_container_nfc_lib, nfcFragment)
@@ -2584,10 +2581,10 @@
         val bottomSheet: FrameLayout? =
             bottomSheetDialog.findViewById(com.google.android.material.R.id.design_bottom_sheet)
         BottomSheetBehavior.from(bottomSheet as View).state = BottomSheetBehavior.STATE_EXPANDED
-       /* Handler().postDelayed({
-            if (::bottomSheetLayout.isInitialized)
-                translateViewToNewHeight(bottomSheetLayout.measuredHeight, true)
-        }, 400)*/
+        /* Handler().postDelayed({
+             if (::bottomSheetLayout.isInitialized)
+                 translateViewToNewHeight(bottomSheetLayout.measuredHeight, true)
+         }, 400)*/
         checkSelectedAmountInitiated()
     }
 
@@ -2727,7 +2724,7 @@
         adapter.resetSelection()
 
         if (::selectedCurrency.isInitialized) {
-            println("selectedCurrency he"+selectedCurrency)
+            println("selectedCurrency he" + selectedCurrency)
             Bugfender.d(CustomUtils.tagEvent, "Currency changed to : " + selectedCurrencySymbol)
             filterViewModels(selectedCurrency)
         } else {
@@ -3124,7 +3121,7 @@
         newBorderColor = "#" + borderOpacityVal + borderColor.substring(0, borderColor.length - 2)
             .replace("#", "")
 
-      //  sdkLayout.setBackgroundColor(Color.parseColor(newBorderColor))
+        //  sdkLayout.setBackgroundColor(Color.parseColor(newBorderColor))
 
         sdkLayout.let { it1 ->
             setTopBorders(
@@ -3303,7 +3300,7 @@
         addViews(
             //   businessViewHolder,
             //   amountViewHolder,
-           // cardViewHolder,
+            // cardViewHolder,
             paymentInlineViewHolder,
             saveCardSwitchHolder
         )
@@ -3346,7 +3343,7 @@
         checkoutFragment.isNfcOpened = false
         //  webFrameLayout.visibility = View.GONE
         frameLayout.visibility = GONE
-        cardViewHolder.view.visibility=View.VISIBLE
+        cardViewHolder.view.visibility = View.VISIBLE
     }
 
 
@@ -3368,7 +3365,7 @@
                         return
                     } else {
                         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
-                            paymentInlineViewHolder.setNFCCardData(emvCard , month ,year.toInt())
+                            paymentInlineViewHolder.setNFCCardData(emvCard, month, year.toInt())
                         }
 
 
@@ -3445,7 +3442,7 @@
             val savedCardsWorker: java.util.ArrayList<SavedCard> =
                 java.util.ArrayList<SavedCard>(paymentOptionsResponse.cards)
         }
-         webPaymentOptions =
+        webPaymentOptions =
             filteredByPaymentTypeAndCurrencyAndSortedList(
                 paymentOptionsWorker, PaymentType.WEB, currency
             )
@@ -3473,18 +3470,17 @@
             adapter.updateAdapterGooglePay(googlePaymentOptions)
             PaymentDataSource.setGoogleCardPay(googlePaymentOptions)
         }
-        println("hasWebPaymentOptions"+webPaymentOptions.size)
-        println("hasCardPaymentOptions"+hasCardPaymentOptions)
-        println("savedCardList"+savedCardList?.isNullOrEmpty())
-        if(webPaymentOptions.size==0) {
+        println("hasWebPaymentOptions" + webPaymentOptions.size)
+        println("hasCardPaymentOptions" + hasCardPaymentOptions)
+        println("savedCardList" + savedCardList?.isNullOrEmpty())
+        if (webPaymentOptions.size == 0) {
             adapter.updateAdapterData(ArrayList())
-            cardViewHolder.view.mainChipgroup?.groupName?.visibility =View.GONE
+            cardViewHolder.view.mainChipgroup?.groupName?.visibility = View.GONE
 
 
-        }else logicToHandlePaymentDataType(webPaymentOptions, cardPaymentOptions)
+        } else logicToHandlePaymentDataType(webPaymentOptions, cardPaymentOptions)
 
 
-
     }
 
     @RequiresApi(Build.VERSION_CODES.N)
@@ -3493,7 +3489,7 @@
         cardPaymentOptions: ArrayList<PaymentOption>
 
     ) {
-        cardViewHolder.view.mainChipgroup?.groupName?.visibility =View.VISIBLE
+        cardViewHolder.view.mainChipgroup?.groupName?.visibility = View.VISIBLE
         // println("webPaymentOptions in logic >>>>$webPaymentOptions")
         //  println("cardPaymentOptions in logic >>>>$cardPaymentOptions")
 
Index: checkout/src/main/res/anim/bottom_up.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout/src/main/res/anim/bottom_up.xml b/checkout/src/main/res/anim/bottom_up.xml
new file mode 100644
--- /dev/null	(date 1683469929409)
+++ b/checkout/src/main/res/anim/bottom_up.xml	(date 1683469929409)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<set xmlns:android="http://schemas.android.com/apk/res/android">
+    <translate android:fromYDelta="75%p" android:toYDelta="0%p"
+        android:fillAfter="true"
+        android:duration="500"/>
+</set>
\ No newline at end of file
Index: checkout/src/main/java/company/tap/checkout/internal/viewholders/SwitchViewHolder.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package company.tap.checkout.internal.viewholders\n\nimport android.content.Context\nimport android.graphics.Color\nimport android.view.LayoutInflater\nimport android.view.View\nimport company.tap.checkout.R\nimport company.tap.checkout.internal.api.enums.PaymentType\nimport company.tap.checkout.internal.enums.PaymentTypeEnum\nimport company.tap.checkout.internal.enums.SectionType\nimport company.tap.checkout.internal.viewmodels.CheckoutViewModel\nimport company.tap.nfcreader.open.utils.TapNfcUtils\nimport company.tap.taplocalizationkit.LocalizationManager\nimport company.tap.tapuilibrary.themekit.ThemeManager\nimport company.tap.tapuilibrary.uikit.atoms.TapTextView\nimport company.tap.tapuilibrary.uikit.datasource.TapSwitchDataSource\nimport company.tap.tapuilibrary.uikit.ktx.setBorderedView\nimport company.tap.tapuilibrary.uikit.ktx.setBottomBorders\nimport kotlinx.android.synthetic.main.switch_layout.view.*\n\n/**\n *\n * Copyright Â© 2020 Tap Payments. All rights reserved.\n *\n */\nclass SwitchViewHolder(private val context: Context , private val checkoutViewModel: CheckoutViewModel) : TapBaseViewHolder {\n\n    override val view: View = LayoutInflater.from(context).inflate(R.layout.switch_layout, null)\n\n    override val type = SectionType.SAVE_CARD\n\n    private var merchantName: String? = null\n    private var paymentName: PaymentTypeEnum? = null\n    private var switchString: String? = null\n    private var goPayString: String? = null\n    private var savegoPayString: String? = null\n    private var alertgoPaySignupString: String? = null\n    lateinit var mobileString: String\n\n\n    @JvmField\n    var goPayisLoggedin: Boolean = false\n    var mainTextSave: TapTextView\n\n    init {\n        bindViewComponents()\n        mainTextSave = view.findViewById(R.id.mainTextSave)\n    }\n\n    override fun bindViewComponents() {\n        configureSwitch()\n    }\n\n    // Function / Logic is responsible for sett ing the data to switch based on user selection\n    fun setSwitchLocals(payName: PaymentTypeEnum) {\n\n        goPayString = LocalizationManager.getValue( \"goPay\", \"TapSwitchView\", \"notes\")\n        savegoPayString =  LocalizationManager.getValue(\"goPay\", \"TapSwitchView\", \"notes\")\n        alertgoPaySignupString = LocalizationManager.getValue(\"goPay\", \"TapSwitchView\", \"notes\")\n\n        println(\"payname in switch\" + payName.name)\n        if (payName.name == \"card\") {\n            if (TapNfcUtils.isNfcAvailable(context)) {\n                switchString = LocalizationManager.getValue(\"mainCards\", \"TapSwitchView\",\"titleEmpty\")\n\n            } else {\n                //Logic applied to  stop showing NFC on non supported devices\n                if (LocalizationManager.getLocale(context).language == \"en\") {\n                    switchString =\n                        LocalizationManager.getValue<String?>(\"mainCards\", \"TapSwitchView\",\"titleEmpty\")\n                            ?.replace(\" or NFC\", \"\")\n\n                } else {\n                    switchString =\n                        LocalizationManager.getValue<String?>(\"mainCards\", \"TapSwitchView\",\"titleEmpty\")\n                            ?.replace(\"Ø§ÙÙÙ NFC\", \"\")\n\n                }\n            }\n\n            switchString?.let { getMainSwitchDataSource(it) }?.let {\n                view.mainSwitch.setSwitchDataSource(it)\n            }\n            view.cardSwitch.setSwitchDataSource(\n                getTapSwitchDataSourceFromAPI(\n                    switchString,\n                    goPayString,\n                    savegoPayString,\n                    alertgoPaySignupString\n                )\n            )\n\n        } else if (payName.name == \"telecom\") {\n            mobileString = LocalizationManager.getValue(\"mainTelecom\", \"TapSwitchView\",\"titleValid\")\n            view.mainSwitch.setSwitchDataSource(getMainSwitchDataSource(mobileString))\n            view.cardSwitch.setSwitchDataSource(\n                getTapSwitchDataSourceFromAPI(\n                    mobileString,\n                    goPayString,\n                    savegoPayString,\n                    alertgoPaySignupString\n                )\n            )\n\n        }\n    }\n\n    private fun getTapSwitchDataSourceFromAPI(\n        switchString2: String?,\n        goPayString: String?,\n        savegoPayString: String?,\n        alertgoPaySignupString: String?\n    ): TapSwitchDataSource {\n        val saveForString: String = LocalizationManager.getValue(\"cardSaveForTapLabel\", \"TapCardInputKit\")\n        val saveForStringArabic: String = LocalizationManager.getValue(\"cardSaveForTapLabel\", \"TapCardInputKit\")\n        val checkoutsString: String = LocalizationManager.getValue(\"cardSaveForTapLabel\", \"TapCardInputKit\")\n        val switchSaveMerchantCheckout: String\n        if (LocalizationManager.getLocale(context).language == \"ar\") {\n            switchSaveMerchantCheckout = \"$saveForStringArabic $merchantName\"\n        } else {\n            switchSaveMerchantCheckout = \"$saveForString$merchantName  $checkoutsString\"\n        }\n\n        return TapSwitchDataSource(\n            switchSave = switchString2,\n            switchSaveMerchantCheckout = switchSaveMerchantCheckout,\n            switchSavegoPayCheckout = goPayString,\n            savegoPayText = savegoPayString,\n            alertgoPaySignup = alertgoPaySignupString\n        )\n    }\n\n    /**\n     * Sets data from API through LayoutManager\n     * @param merchantNameApi represents the merchant name.\n     * @param paymentType represents the type is card or mobile payment.Based on it will decide the\n     * text of switches.\n     * */\n    fun setDataFromAPI(merchantNameApi: String, paymentType: PaymentTypeEnum) {\n        merchantName = merchantNameApi\n        paymentName = paymentType\n        // bindViewComponents()\n        paymentName?.let {\n            setSwitchLocals(it)\n        }\n    }\n\n    /**\n     * We will change tap card switch background if main switch checked or not\n     */\n    private fun configureSwitch() {\n        view.mainSwitch.mainSwitchLinear.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"TapSwitchView.main.backgroundColor\")))\n        view.mainSwitch.mainTextSave.visibility = View.VISIBLE\n        view.cardviewSwitch.cardElevation = 0f\n        setBottomBorders(\n            view.cardviewSwitch,\n            30f,// corner raduis\n            0.0f,\n            Color.parseColor(ThemeManager.getValue(\"TapSwitchView.backgroundColor\")),// stroke color\n            Color.parseColor(ThemeManager.getValue(\"TapSwitchView.backgroundColor\")),// tint color\n            Color.parseColor(ThemeManager.getValue(\"TapSwitchView.backgroundColor\"))\n        )//\n        setBottomBorders(\n            view.cardviewSwitch,\n            30f,// corner raduis\n            0.0f,\n            Color.parseColor(ThemeManager.getValue(\"TapSwitchView.backgroundColor\")),// stroke color\n            Color.parseColor(ThemeManager.getValue(\"TapSwitchView.backgroundColor\")),// tint color\n            Color.parseColor(ThemeManager.getValue(\"TapSwitchView.backgroundColor\"))\n        )\n\n        /**\n         * Logic for Main switch\n         * **/\n        view.mainSwitch.switchSaveMobile?.setOnCheckedChangeListener { buttonView, isChecked ->\n            if (isChecked) {\n                view.cardSwitch.payButton.isActivated\n                val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n                val nowString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n                view?.cardSwitch?.payButton?.setButtonDataSource(\n                    false,\n                    \"en\",\n                    payString+\" \"+nowString,\n                    Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.paymentBackgroundColor\")),\n                    Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.titleLabelColor\")),\n                )\n                /**\n                 * Here we will check if there is saving options if NOT ----> We will just activate action button\n                 * view.cardSwitch.payButton.isActivated\n                 * if YES -----> we will set Logic of function mainSwitchCheckedAction()\n                 */\n                mainSwitchCheckedAction()\n            } else mainSwitchUncheckedAction()\n        }\n\n        /**\n         * Logic for save merchant switch\n         * **/\n        view.cardSwitch.switchSaveMerchant?.setOnCheckedChangeListener { _, _ ->\n            switchMerchantCheckoutChangeCheckedAction()\n        }\n        /**\n         * Logic for save goPay Checkout switch\n         * **/\n        if (goPayisLoggedin) {\n            view.cardSwitch.switchGoPayCheckout.visibility = View.VISIBLE\n            view.cardSwitch.switchGoPayCheckout?.setOnCheckedChangeListener { _, _ ->\n                switchGoPayCheckoutChangeCheckedAction()\n            }\n        }\n\n\n    }\n\n    //Setting data to TapMainSwitchDataSource\n    private fun getMainSwitchDataSource(switchText: String): TapSwitchDataSource {\n        return TapSwitchDataSource(\n            switchSave = switchText\n        )\n    }\n\n    fun setSwitchToggleData(paymentType: PaymentType) {\n        if (paymentType == PaymentType.CARD) {\n            view.mainSwitch.setSwitchDataSource(\n                getMainSwitchDataSource(\n                    LocalizationManager.getValue(\n                        \"mainCards\",\n                        \"TapSwitchView\",\"titleValid\"\n                    )\n                )\n            )\n        } else {\n            view.mainSwitch.setSwitchDataSource(\n                getMainSwitchDataSource(\n                    LocalizationManager.getValue(\n                        \"mainTelecom\",\n                        \"TapSwitchView\",\"titleValid\"\n                    )\n                )\n            )\n\n        }\n\n    }\n\n    private fun mainSwitchUncheckedAction() {\n        setBorderedView(\n            view.mainSwitch.card,\n            0f,// corner raduis\n            0.0f,\n            Color.parseColor(ThemeManager.getValue(\"TapSwitchView.main.backgroundColor\")),// stroke color\n            Color.parseColor(ThemeManager.getValue(\"TapSwitchView.main.backgroundColor\")),// tint color\n            Color.parseColor(ThemeManager.getValue(\"TapSwitchView.main.backgroundColor\"))\n        )//\n        view.cardSwitch.tapCardSwitchLinear.setBackgroundColor(\n            Color.parseColor(\n                ThemeManager.getValue(\n                    \"TapSwitchView.main.backgroundColor\"\n                )\n            )\n        )\n        view.cardviewSwitch.cardElevation = 0f\n        view.mainSwitch.switchSaveMobile?.isChecked = false\n        view.cardSwitch.switchesLayout?.visibility = View.GONE\n        view.cardSwitch.switchSaveMerchant?.visibility = View.GONE\n        view.cardSwitch.switchSaveMerchant?.isChecked = false\n        view.cardSwitch.switchGoPayCheckout?.isChecked = false\n        view.cardSwitch.switchGoPayCheckout?.visibility = View.GONE\n        view.cardSwitch.saveGoPay?.visibility = View.GONE\n        view.cardSwitch.alertGoPaySignUp?.visibility = View.GONE\n        view.cardSwitch.switchSeparator?.visibility = View.GONE\n\n\n    }\n\n    private fun mainSwitchCheckedAction() {\n        if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains(\"dark\")) {\n            view.cardSwitch.tapCardSwitchLinear.setBackgroundResource(R.drawable.ic_blurbackgroundblack)\n        } else {\n            view.cardSwitch.tapCardSwitchLinear.setBackgroundResource(R.drawable.blurbackground)\n        }\n        view.cardviewSwitch.cardElevation = 2.5f\n\n        setBorderedView(\n            view.mainSwitch.card,\n            40f,// corner raduis\n            0.0f,\n            Color.parseColor(ThemeManager.getValue(\"TapSwitchView.main.backgroundColor\")),// stroke color\n            Color.parseColor(ThemeManager.getValue(\"TapSwitchView.main.backgroundColor\")),// tint color\n            Color.parseColor(ThemeManager.getValue(\"TapSwitchView.main.backgroundColor\"))\n        )//\n        view.cardSwitch.payButton.stateListAnimator = null\n        view.cardSwitch.payButton.isActivated\n        val payString: String = LocalizationManager.getValue(\"pay\", \"ActionButton\")\n        val nowString: String = LocalizationManager.getValue(\"now\", \"ActionButton\")\n        view?.cardSwitch?.payButton?.setButtonDataSource(\n            false,\n            \"en\",\n            payString+\" \"+nowString,\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.paymentBackgroundColor\")),\n            Color.parseColor(ThemeManager.getValue(\"actionButton.Valid.titleLabelColor\")),\n        )\n        view.cardSwitch.switchesLayout?.visibility = View.VISIBLE\n        view.cardSwitch.switchSaveMerchant?.visibility = View.VISIBLE\n        view.cardSwitch.switchSaveMerchant?.isChecked = true\n        /**\n         * Here we will check if goPay is Loggedin if NOT ----> We will just hide the switches\n         *\n         * if YES -----> we will show the switches also\n         * Please NOTE : @paramgoPayisLoggedin is false for now will update when api is added\n         */\n        if (goPayisLoggedin) {\n            view.cardSwitch.switchGoPayCheckout?.isChecked = true\n            view.cardSwitch.switchGoPayCheckout?.visibility = View.VISIBLE\n            view.cardSwitch.saveGoPay?.visibility = View.VISIBLE\n            view.cardSwitch.alertGoPaySignUp?.visibility = View.VISIBLE\n            view.cardSwitch.switchSeparator?.visibility = View.VISIBLE\n        }\n\n    }\n\n    private fun switchGoPayCheckoutChangeCheckedAction() {\n        if (!view.cardSwitch.switchSaveMerchant?.isChecked!! && !view.cardSwitch.switchGoPayCheckout?.isChecked!!) {\n            view.mainSwitch.switchSaveMobile?.isChecked = false\n            view.cardSwitch.switchesLayout?.visibility = View.GONE\n            view.cardSwitch.switchSaveMerchant?.visibility = View.GONE\n            view.cardSwitch.switchSaveMerchant?.isChecked = false\n            view.cardSwitch.switchGoPayCheckout?.isChecked = false\n            view.cardSwitch.switchGoPayCheckout?.visibility = View.GONE\n            view.cardSwitch.saveGoPay?.visibility = View.GONE\n            view.cardSwitch.alertGoPaySignUp?.visibility = View.GONE\n            view.cardSwitch.switchSeparator?.visibility = View.GONE\n        }\n    }\n\n    private fun switchMerchantCheckoutChangeCheckedAction() {\n        if (!view.cardSwitch.switchSaveMerchant?.isChecked!! && !view.cardSwitch.switchGoPayCheckout?.isChecked!!) {\n            view.mainSwitch.switchSaveMobile?.isChecked = false\n            view.cardSwitch.switchesLayout?.visibility = View.GONE\n            view.cardSwitch.switchSaveMerchant?.visibility = View.GONE\n            view.cardSwitch.switchSaveMerchant?.isChecked = false\n            view.cardSwitch.switchGoPayCheckout?.isChecked = false\n            view.cardSwitch.switchGoPayCheckout?.visibility = View.GONE\n            view.cardSwitch.saveGoPay?.visibility = View.GONE\n            view.cardSwitch.alertGoPaySignUp?.visibility = View.GONE\n            view.cardSwitch.switchSeparator?.visibility = View.GONE\n        }\n    }\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout/src/main/java/company/tap/checkout/internal/viewholders/SwitchViewHolder.kt b/checkout/src/main/java/company/tap/checkout/internal/viewholders/SwitchViewHolder.kt
--- a/checkout/src/main/java/company/tap/checkout/internal/viewholders/SwitchViewHolder.kt	(revision 84d1fdb570a0bdbc47ab792a42c5e28e5e6f3c5b)
+++ b/checkout/src/main/java/company/tap/checkout/internal/viewholders/SwitchViewHolder.kt	(date 1683464804901)
@@ -25,7 +25,7 @@
  */
 class SwitchViewHolder(private val context: Context , private val checkoutViewModel: CheckoutViewModel) : TapBaseViewHolder {
 
-    override val view: View = LayoutInflater.from(context).inflate(R.layout.switch_layout, null)
+    override var view: View = LayoutInflater.from(context).inflate(R.layout.switch_layout, null)
 
     override val type = SectionType.SAVE_CARD
 
Index: checkout/src/main/java/company/tap/checkout/internal/utils/ViewsExtension.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package company.tap.checkout.internal.utils\n\nimport android.animation.ArgbEvaluator\nimport android.animation.ObjectAnimator\nimport android.animation.ValueAnimator\nimport android.annotation.SuppressLint\nimport android.app.Activity\nimport android.content.Context\nimport android.graphics.BlendMode\nimport android.graphics.BlendModeColorFilter\nimport android.graphics.drawable.*\nimport android.graphics.drawable.shapes.RoundRectShape\nimport android.os.Build\nimport android.os.Handler\nimport android.os.Looper\nimport android.transition.Fade\nimport android.transition.Transition\nimport android.transition.TransitionManager\nimport android.util.DisplayMetrics\nimport android.util.TypedValue\nimport android.view.*\nimport android.view.animation.Animation\nimport android.view.animation.Animation.AnimationListener\nimport android.view.animation.AnimationUtils\nimport android.view.animation.TranslateAnimation\nimport android.webkit.WebChromeClient\nimport android.webkit.WebSettings\nimport android.webkit.WebView\nimport android.widget.FrameLayout\nimport android.widget.ImageView\nimport android.widget.Toast\nimport androidx.annotation.DrawableRes\nimport androidx.core.os.postDelayed\nimport androidx.core.view.ViewCompat\nimport androidx.core.view.isVisible\nimport com.bumptech.glide.Glide\nimport company.tap.checkout.R\nimport company.tap.checkout.internal.cache.SharedPrefManager\nimport company.tap.checkout.open.data_managers.PaymentDataSource\nimport company.tap.tapuilibrary.themekit.ThemeManager\nimport company.tap.tapuilibrary.uikit.ktx.loadAppThemManagerFromPath\nimport jp.wasabeef.blurry.Blurry\nimport kotlinx.android.synthetic.main.amountview_layout.view.*\nimport kotlinx.android.synthetic.main.switch_layout.view.*\nimport java.util.*\n\n\nprivate var targetHeight: Int? = 0\nprivate var animationDelayForResizeAnimation = 2000L\nprivate var topLeftCorner = 16f\nprivate var topRightCorner = 16f\nprivate var bottomRightCorner = 0f\nprivate var bottomLeftCorner = 0f\nconst val progressBarSize = 45\n\nfun View.startPoweredByAnimation(\n    delayTime: Long,\n    poweredByLogo: View?,\n    onAnimationEnd: () -> Unit?\n) {\n    Handler(Looper.getMainLooper()).postDelayed({\n        poweredByLogo?.visibility = View.GONE\n        this.visibility = View.VISIBLE\n        this.addSlideUpAnimation(onAnimationEnd = onAnimationEnd)\n        doAfterSpecificTime(execute = {\n            poweredByLogo?.addFadeInAnimation()\n        })\n    }, delayTime)\n\n}\n\nfun Context?.getDimensionsInDp(dimension: Int): Int {\n    return TypedValue.applyDimension(\n        TypedValue.COMPLEX_UNIT_DIP,\n        dimension.toFloat(),\n        this?.resources?.displayMetrics\n    ).toInt()\n\n}\n\nfun doAfterSpecificTime(time: Long = 1000L, execute: () -> Unit) =\n    Handler(Looper.getMainLooper()).postDelayed(time) {\n        execute.invoke()\n    }\n\n\nfun View.setMargins(left: Int, top: Int, right: Int, bottom: Int) {\n    if (this.layoutParams is ViewGroup.MarginLayoutParams) {\n        val p = this.layoutParams as ViewGroup.MarginLayoutParams\n        p.setMargins(left, top, right, bottom)\n        this.requestLayout()\n    }\n}\n\nfun View.applyGlowingEffect(colorPairs: Pair<Int, Int>, durationTime: Long = 1000L) {\n    val backgroundColor = \"BackgroundColor\"\n    val animator: ObjectAnimator =\n        ObjectAnimator.ofInt(\n            this,\n            backgroundColor,\n            colorPairs.first,\n            colorPairs.second\n        ).setDuration(durationTime)\n\n    this.setMargins(0, 0, 0, 0)\n    animator.setEvaluator(ArgbEvaluator())\n    animator.repeatMode = ValueAnimator.REVERSE\n    animator.repeatCount = Animation.INFINITE\n    animator.start()\n\n\n}\n\nfun View.addFadeInAnimation(durationTime: Long = 1000L) {\n    this.visibility = View.VISIBLE\n    val animation = AnimationUtils.loadAnimation(context, R.anim.fade_in)\n    animation.duration = durationTime\n    this.startAnimation(animation)\n}\n\nfun View.addSlideUpAnimation( durationTime: Long = 1000L,onAnimationEnd: () -> Unit?) {\n    val animation = AnimationUtils.loadAnimation(context, R.anim.slide_up)\n    animation.duration = durationTime\n    this.startAnimation(animation)\n    this.animation.setAnimationListener(object : AnimationListener {\n        override fun onAnimationStart(p0: Animation?) {\n        }\n\n        override fun onAnimationEnd(p0: Animation?) {\n            onAnimationEnd.invoke()\n        }\n\n        override fun onAnimationRepeat(p0: Animation?) {\n        }\n\n    })\n}\n\nfun Context.isUserCurrencySameToMainCurrency(): Boolean {\n    val userCurrency = SharedPrefManager.getUserSupportedLocaleForTransactions(this)?.currency\n    val paymentCurrency = PaymentDataSource.getCurrency()?.isoCode\n    return userCurrency.equals(paymentCurrency, ignoreCase = true)\n}\n\nfun View.slidefromRightToLeft() {\n    val animate = TranslateAnimation(\n        if (isRTL()) -this.width.toFloat() else this.width.toFloat(),\n        0f,\n        0f,\n        0f\n    ) // View for animation\n    animate.duration = 1000\n    animate.fillAfter = true\n    this.startAnimation(animate)\n    this.visibility = View.VISIBLE // Change visibility VISIBLE or GONE\n\n}\n\nfun View.slideFromLeftToRight() {\n\n    if (this.isVisible) {\n        val animate =\n            TranslateAnimation(\n                0f,\n                if (isRTL()) -this.width.toFloat() else this.width.toFloat(),\n                0f,\n                0f\n            ) // View for animation\n        animate.duration = 1000\n        animate.fillAfter = false\n        this.startAnimation(animate)\n        this.visibility = View.GONE // Change visibility VISIBLE or GONE\n    }\n\n}\n\nfun View.isRTL() = ViewCompat.getLayoutDirection(this) == ViewCompat.LAYOUT_DIRECTION_RTL\n\n\n\n\nfun MutableList<View>.addFadeInAnimationForViews(durationTime: Long = 1000L) {\n    this.forEachIndexed { index, view ->\n        view.visibility = View.VISIBLE\n        val animation = AnimationUtils.loadAnimation(view.context, R.anim.fade_in)\n        animation.duration = durationTime\n        view.startAnimation(animation)\n    }\n\n}\n\nfun Context.twoThirdHeightView(): Double {\n    return getDeviceSpecs().first.times(2.3) / 3\n}\n\n@SuppressLint(\"SetJavaScriptEnabled\")\nfun WebView.applyConfigurationForWebView(\n    url: String,\n    onProgressWebViewFinishedLoading: () -> Unit\n) {\n    with(this) {\n        settings.javaScriptEnabled = true\n        settings.mixedContentMode = WebSettings.MIXED_CONTENT_ALWAYS_ALLOW\n        settings.loadWithOverviewMode = true\n        isVerticalScrollBarEnabled = true\n        isHorizontalScrollBarEnabled = true\n        setInitialScale(1)\n        settings.defaultZoom = WebSettings.ZoomDensity.FAR;\n        settings.useWideViewPort = true\n        loadUrl(url)\n        setOnKeyListener { _, keyCode, event ->\n            if (event.action == KeyEvent.ACTION_UP && keyCode == KeyEvent.KEYCODE_BACK) {\n                if (this.canGoBack()) {\n                    this.goBack()\n                    /**\n                     * put here listener or delegate thT process cancelled **/\n                    return@setOnKeyListener true\n                }\n                return@setOnKeyListener false\n            }\n            false\n        }\n\n        this.webChromeClient = object : WebChromeClient() {\n            override fun onProgressChanged(view: WebView?, newProgress: Int) {\n                if (newProgress == 100) {\n                    onProgressWebViewFinishedLoading.invoke()\n                }\n\n            }\n        }\n    }\n\n\n}\n\nfun View.resizeAnimation(\n    durationTime: Long = 1000L,\n    startHeight: Int = 1000,\n    endHeight: Int = 1000, isExpanding: Boolean = false\n) {\n    val resizeAnimation = ResizeAnimation(\n        this,\n        endHeight,\n        startHeight, isExpanding\n    )\n    resizeAnimation.duration = durationTime\n    this.startAnimation(resizeAnimation)\n}\n\n\n/**\n * This function return specs of device height && width\n */\nfun Context.getDeviceSpecs(): Pair<Int, Int> {\n    val displayMetrics = DisplayMetrics()\n    (this as Activity).windowManager.defaultDisplay.getMetrics(displayMetrics)\n    val height = displayMetrics.heightPixels\n    val width = displayMetrics.widthPixels\n    val pair: Pair<Int, Int> = Pair(height, width)\n    return pair\n}\n\nfun getViewShapeDrawable(\n    isRoundedCorners: Boolean = false,\n    shapeColor: String = AppColorTheme.MerchantHeaderViewColor\n): Drawable {\n    val shape = when (isRoundedCorners) {\n        true ->\n            ShapeDrawable(\n                RoundRectShape(\n                    floatArrayOf(\n                        topLeftCorner, topLeftCorner,\n                        topRightCorner, topRightCorner,\n                        bottomRightCorner, bottomRightCorner,\n                        bottomLeftCorner, bottomLeftCorner\n                    ),\n                    null, null\n                )\n            )\n        false ->\n            ShapeDrawable()\n    }\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {\n        shape.colorFilter = BlendModeColorFilter(\n            loadAppThemManagerFromPath(shapeColor),\n            BlendMode.SRC_ATOP\n        )\n    }\n\n\n    return shape\n}\n\nfun View.addFadeOutAnimation(durationTime: Long = 500L) {\n    if (this.isVisible) {\n        val animation = AnimationUtils.loadAnimation(context, R.anim.fade_out)\n        animation.duration = durationTime\n        this.startAnimation(animation)\n        this.animation.setAnimationListener(object : AnimationListener {\n            override fun onAnimationStart(p0: Animation?) {\n            }\n\n            override fun onAnimationEnd(p0: Animation?) {\n                this@addFadeOutAnimation.visibility = View.GONE\n            }\n\n            override fun onAnimationRepeat(p0: Animation?) {\n            }\n\n        })\n    }\n}\n\nfun MutableList<View>.addFadeOutAnimationToViews(\n    durationTime: Long = 500L,\n    onAnimationEnd: () -> Unit?\n) {\n    this.forEachIndexed { index, view ->\n//        val animation = AnimationUtils.loadAnimation(view.context, R.anim.fade_out)\n//        animation.duration = durationTime\n//        view.startAnimation(animation)\n        view.visibility = View.GONE\n//        view.animation.setAnimationListener(object : AnimationListener {\n//            override fun onAnimationStart(p0: Animation?) {\n//            }\n//\n//            override fun onAnimationEnd(p0: Animation?) {\n//                view.visibility = View.GONE\n//                onAnimationEnd.invoke()\n//\n//            }\n//\n//            override fun onAnimationRepeat(p0: Animation?) {\n//            }\n//\n//        })\n    }\n\n\n}\n\nfun MutableList<View>.addFadeInAnimationToViews(durationTime: Long = 500L) {\n    this.forEachIndexed { index, view ->\n\n        val animation = AnimationUtils.loadAnimation(view.context, R.anim.fade_in)\n        animation.duration = durationTime\n        view.startAnimation(animation)\n        view.animation.setAnimationListener(object : AnimationListener {\n            override fun onAnimationStart(p0: Animation?) {\n            }\n\n            override fun onAnimationEnd(p0: Animation?) {\n                view.visibility = View.VISIBLE\n\n\n            }\n\n            override fun onAnimationRepeat(p0: Animation?) {\n            }\n\n        })\n    }\n\n\n}\n\n\nfun View.applyBluryToView(\n    radiusNeeded: Int = 8,\n    sampling: Int = 2,\n    animationDuration: Int = 1000,\n    showOriginalView: Boolean = false\n) {\n    Blurry.with(context).radius(radiusNeeded).sampling(sampling).animate(animationDuration)\n        .onto(this as ViewGroup).apply {\n            when (showOriginalView) {\n                true -> this@applyBluryToView.getChildAt(0).visibility = View.VISIBLE\n                false -> this@applyBluryToView.getChildAt(0).visibility = View.GONE\n            }\n\n        }\n\n\n}\n\n\nfun ViewGroup.addLoaderWithBlurryToView(invokeAfterLoad: () -> Unit, viewToBeBLur: View?) {\n\n    @DrawableRes\n    val loaderGif: Int =\n        if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains(\"dark\")) {\n            R.drawable.loader\n        } else if (ThemeManager.currentTheme.isNotEmpty() && !ThemeManager.currentTheme.contains(\n                \"dark\"\n            )\n        ) {\n            R.drawable.output_black_loader_nobg\n        } else R.drawable.loader\n\n\n\n    viewToBeBLur?.applyBluryToView()\n    val progressImage = ImageView(context)\n    val params = FrameLayout.LayoutParams(progressBarSize, progressBarSize)\n    params.gravity = Gravity.CENTER\n    progressImage.layoutParams = params\n    Glide.with(context).asGif().load(loaderGif).into(progressImage)\n    this.addView(progressImage)\n    doAfterSpecificTime(2000) {\n        invokeAfterLoad.invoke()\n    }\n\n}\n\nfun Context.showToast(message: String) {\n    return Toast.makeText(this, message, Toast.LENGTH_SHORT).show()\n}\n\nfun adjustHeightAccToDensity(displayMetrics: Int?) {\n    if (displayMetrics == DisplayMetrics.DENSITY_260 || displayMetrics == DisplayMetrics.DENSITY_280 || displayMetrics == DisplayMetrics.DENSITY_300 || displayMetrics == DisplayMetrics.DENSITY_XHIGH || displayMetrics == DisplayMetrics.DENSITY_340 || displayMetrics == DisplayMetrics.DENSITY_360) {\n        targetHeight = 90\n    } else if (displayMetrics == DisplayMetrics.DENSITY_450 || displayMetrics == DisplayMetrics.DENSITY_420 || displayMetrics == DisplayMetrics.DENSITY_400) {\n        targetHeight = 120\n    } else targetHeight = 140\n}\n\n\nfun createDrawableGradientForBlurry(colorsArrayList: IntArray): GradientDrawable {\n    val gradientDrawable = GradientDrawable(\n        GradientDrawable.Orientation.BL_TR,\n        colorsArrayList\n    )\n    gradientDrawable.gradientRadius = 100f\n    gradientDrawable.cornerRadii = floatArrayOf(\n        topLeftCorner, topLeftCorner,\n        topRightCorner, topRightCorner,\n        bottomRightCorner, bottomRightCorner,\n        bottomLeftCorner, bottomLeftCorner\n    )\n    return gradientDrawable\n}\nfun View.fadeVisibility(visibility: Int, duration: Long = 400) {\n    val transition: Transition = Fade()\n    transition.duration = duration\n    transition.addTarget(this)\n    TransitionManager.beginDelayedTransition(this.parent as ViewGroup, transition)\n    this.visibility = visibility\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout/src/main/java/company/tap/checkout/internal/utils/ViewsExtension.kt b/checkout/src/main/java/company/tap/checkout/internal/utils/ViewsExtension.kt
--- a/checkout/src/main/java/company/tap/checkout/internal/utils/ViewsExtension.kt	(revision 84d1fdb570a0bdbc47ab792a42c5e28e5e6f3c5b)
+++ b/checkout/src/main/java/company/tap/checkout/internal/utils/ViewsExtension.kt	(date 1683464158986)
@@ -36,6 +36,7 @@
 import com.bumptech.glide.Glide
 import company.tap.checkout.R
 import company.tap.checkout.internal.cache.SharedPrefManager
+import company.tap.checkout.internal.viewholders.TapBaseViewHolder
 import company.tap.checkout.open.data_managers.PaymentDataSource
 import company.tap.tapuilibrary.themekit.ThemeManager
 import company.tap.tapuilibrary.uikit.ktx.loadAppThemManagerFromPath
@@ -251,6 +252,8 @@
 
 /**
  * This function return specs of device height && width
+ * first -> height
+ * second -> width
  */
 fun Context.getDeviceSpecs(): Pair<Int, Int> {
     val displayMetrics = DisplayMetrics()
@@ -314,27 +317,28 @@
 
 fun MutableList<View>.addFadeOutAnimationToViews(
     durationTime: Long = 500L,
-    onAnimationEnd: () -> Unit?
+    onAnimationEnd: (View) -> Unit
 ) {
     this.forEachIndexed { index, view ->
-//        val animation = AnimationUtils.loadAnimation(view.context, R.anim.fade_out)
-//        animation.duration = durationTime
-//        view.startAnimation(animation)
-        view.visibility = View.GONE
-//        view.animation.setAnimationListener(object : AnimationListener {
-//            override fun onAnimationStart(p0: Animation?) {
-//            }
-//
-//            override fun onAnimationEnd(p0: Animation?) {
-//                view.visibility = View.GONE
-//                onAnimationEnd.invoke()
-//
-//            }
-//
-//            override fun onAnimationRepeat(p0: Animation?) {
-//            }
-//
-//        })
+        val animation = AnimationUtils.loadAnimation(view.context, R.anim.fade_out)
+        animation.duration = durationTime
+        view.startAnimation(animation)
+        animation.setAnimationListener(object : AnimationListener {
+            override fun onAnimationStart(p0: Animation?) {
+            }
+
+            override fun onAnimationEnd(p0: Animation?) {
+               // view.visibility = View.GONE
+                onAnimationEnd.invoke(view)
+            }
+
+            override fun onAnimationRepeat(p0: Animation?) {
+            }
+
+        })
+
+//        view.visibility = View.GONE
+
     }
 
 
Index: checkout/src/main/java/company/tap/checkout/internal/webview/WebFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package company.tap.checkout.internal.webview\n\n/**\n * Created by OlaMonir on 7/27/20.\nCopyright (c) 2020    Tap Payments.\nAll rights reserved.\n **/\nimport android.annotation.SuppressLint\nimport android.app.Activity\nimport android.content.Context\nimport android.content.res.ColorStateList\nimport android.graphics.Color\nimport android.os.Bundle\nimport android.text.TextUtils\nimport android.util.DisplayMetrics\nimport android.view.KeyEvent\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.webkit.WebChromeClient\nimport android.webkit.WebSettings\nimport android.webkit.WebView\nimport android.widget.ProgressBar\nimport androidx.annotation.DrawableRes\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.fragment.app.DialogFragment\nimport company.tap.checkout.R\nimport company.tap.checkout.internal.api.models.Charge\nimport company.tap.checkout.internal.apiresponse.CardViewModel\nimport company.tap.checkout.internal.utils.CustomUtils\nimport company.tap.checkout.internal.viewmodels.CheckoutViewModel\nimport company.tap.checkout.open.CheckoutFragment\nimport company.tap.checkout.open.controller.SDKSession.contextSDK\nimport company.tap.checkout.open.data_managers.PaymentDataSource\nimport company.tap.tapuilibrary.themekit.ThemeManager\nimport company.tap.tapuilibrary.uikit.ktx.setBorderedView\nimport company.tap.tapuilibrary.uikit.ktx.setTopBorders\nimport kotlinx.android.synthetic.main.fragment_web.*\nimport kotlinx.android.synthetic.main.fragment_web.web_view\nimport kotlinx.android.synthetic.main.web_view_layout.*\n\n\nclass WebFragment(\n    private val webViewContract: WebViewContract?,\n    private val cardViewModel: CardViewModel?,\n    private val checkoutViewModel: CheckoutViewModel\n) : DialogFragment(),\n    CustomWebViewClientContract {\n\n    private var webViewUrl: String? = null\n    private var chargeResponse: Charge? = null\n    val progressBar by lazy { view?.findViewById<ProgressBar>(R.id.progressBar) }\n    private var displayMetrics: Int? = 0\n    @DrawableRes\n    val loaderGif: Int =\n        if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains(\"dark\")) R.drawable.reduced_loader_white else R.drawable.reduced_loader_black\n\n    override fun getTheme(): Int = R.style.DialogTheme\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        return inflater.inflate(R.layout.fragment_web, container, false)\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        setTopDraggerView()\n\n        progressBar?.setBackgroundColor(Color.parseColor(ThemeManager.getValue(\"merchantHeaderView.backgroundColor\")))\n        progressBar?.progressDrawable?.setColorFilter(\n            Color.RED, android.graphics.PorterDuff.Mode.SRC_IN\n        );\n        progressBar?.progressTintList = ColorStateList.valueOf(Color.RED);\n\n        webViewUrl = arguments?.getString(KEY_URL)\n        chargeResponse = arguments?.getSerializable(CHARGE) as Charge?\n        progressBar?.max = 100\n        progressBar?.progress = 10\n        displayMetrics = CustomUtils.getDeviceDisplayMetrics(context as Activity)\n        if (TextUtils.isEmpty(webViewUrl)) {\n            throw IllegalArgumentException(\"Empty URL passed to WebViewFragment!\")\n        }\n        if (displayMetrics == DisplayMetrics.DENSITY_400 ||displayMetrics == DisplayMetrics.DENSITY_XXHIGH || displayMetrics == DisplayMetrics.DENSITY_450 || displayMetrics == DisplayMetrics.DENSITY_440) {\n            progressBar?.indeterminateDrawable = (context as Activity).resources.getDrawable(loaderGif)\n        }else  progressBar?.indeterminateDrawable = (context as Activity).resources.getDrawable(loaderGif)\n\n        progressBar?.visibility = View.VISIBLE\n        web_view?.visibility = View.GONE\n        webViewUrl?.let { setUpWebView(it) }\n\n    }\n\n    private fun setTopDraggerView() {\n        setTopBorders(\n            topLinear,\n            40f,// corner raduis\n            0.0f,\n            Color.parseColor(ThemeManager.getValue(\"merchantHeaderView.backgroundColor\")),// stroke color\n            Color.parseColor(ThemeManager.getValue(\"merchantHeaderView.backgroundColor\")),// tint color\n            Color.parseColor(ThemeManager.getValue(\"merchantHeaderView.backgroundColor\"))\n        )//\n\n        if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains(\"dark\")) {\n            setBorderedView(\n                draggerView,\n                40f,// corner raduis\n                0.0f,\n                Color.parseColor(\"#3b3b3c\"),// stroke color\n                Color.parseColor(\"#3b3b3c\"),// tint color\n                Color.parseColor(\"#3b3b3c\")\n            )//\n        } else {\n            setBorderedView(\n                draggerView,\n                40f,// corner raduis\n                0.0f,\n                Color.parseColor(\"#e0e0e0\"),// stroke color\n                Color.parseColor(\"#e0e0e0\"),// tint color\n                Color.parseColor(\"#e0e0e0\")\n            )//\n        }\n    }\n\n\n    @SuppressLint(\"SetJavaScriptEnabled\")\n    private fun setUpWebView(mUrl: String) {\n        web_view.settings.javaScriptEnabled = true\n        web_view.webChromeClient = WebChromeClient()\n        web_view.settings.mixedContentMode = WebSettings.MIXED_CONTENT_ALWAYS_ALLOW\n        web_view.webViewClient = cardViewModel?.let { TapCustomWebViewClient(this, it,checkoutViewModel) }!!\n      //  web_view.webViewClient = cardViewModel?.let { TapCustomWebViewClient2(this, it) }!!\n        web_view.settings.loadWithOverviewMode = true\n        web_view.settings.layoutAlgorithm = WebSettings.LayoutAlgorithm.NORMAL\n        web_view.settings.useWideViewPort = true\n        webViewUrl?.let { web_view.loadUrl(it) }\n\n        web_view.setOnKeyListener { _, keyCode, event ->\n            if (event.action == KeyEvent.ACTION_UP && keyCode == KeyEvent.KEYCODE_BACK) {\n\n                //if (web_view.canGoBack()) {\n                    web_view.goBack()\n                    CheckoutViewModel().cancelledCall()\n                    /**\n                     * put here listener or delegate thT process cancelled **/\n                    return@setOnKeyListener true\n              //  }\n                return@setOnKeyListener false\n            }\n            false\n        }\n\n\n\n        web_view.webChromeClient = object : WebChromeClient() {\n            /*\n                    public void onProgressChanged (WebView view, int newProgress)\n                        Tell the host application the current progress of loading a page.\n\n                    Parameters\n                        view : The WebView that initiated the callback.\n                        newProgress : Current page loading progress, represented by an integer\n                            between 0 and 100.\n                */\n            override fun onProgressChanged(view: WebView?, newProgress: Int) {\n                // Update the progress bar with page loading progress\n                progressBar?.progress = newProgress\n                if (newProgress == 100) {\n                    // Hide the progressbar\n                    progressBar?.visibility = View.GONE\n                      web_view?.visibility = View.VISIBLE\n                }\n            }\n        }\n    }\n\n\n    override fun showLoading(showLoading: Boolean) {\n        // show tap loading until we receive success or failed\n//        if(showLoading) progressBar?.progress = 100\n//        else progressBar?.visibility = View.GONE\n    }\n\n    /**\n     * change action button status with success or failed\n    if success == true show success gif of action button\n    if success == false show error gif of action button\n     */\n    override fun submitResponseStatus(success: Boolean) {\n        /*  val intent = Intent(activity, CheckoutFragment::class.java)\n          startActivity(intent)*/\n    //    webViewContract?.redirectLoadingFinished(success, chargeResponse, contextSDK)\n    }\n\n    override fun getRedirectedURL(url: String) {\n        println(\"url are>>\"+PaymentDataSource.getChargeOrAuthorize())\n        // webViewContract.redirectLoadingFinished(url.contains(\"https://www.google.com/search?\"))\n        if (url.contains(\"gosellsdk://return_url\")) {\n           // webViewContract?.resultObtained(true, contextSDK)\n\n        webViewContract?.redirectLoadingFinished(url.contains(\"gosellsdk://return_url\"), chargeResponse,\n            contextSDK)\n        } else {\n\n//            webViewContract.directLoadingFinished(true)\n        }\n    }\n\n\n    companion object {\n        const val KEY_URL = \"key:url\"\n        const val CHARGE = \"charge_response\"\n\n        fun newInstance(\n            url: String,\n            webViewContract: WebViewContract,\n            cardViewModel: CardViewModel,\n            chargeResponse: Charge?,\n            checkoutViewModel: CheckoutViewModel\n        ): WebFragment {\n            val fragment = WebFragment(webViewContract, cardViewModel,checkoutViewModel)\n            val args = Bundle()\n            args.putString(KEY_URL, url)\n            args.putSerializable(CHARGE, chargeResponse)\n            fragment.arguments = args\n            println(\"fragment is\"+fragment)\n            return fragment\n        }\n    }\n\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout/src/main/java/company/tap/checkout/internal/webview/WebFragment.kt b/checkout/src/main/java/company/tap/checkout/internal/webview/WebFragment.kt
--- a/checkout/src/main/java/company/tap/checkout/internal/webview/WebFragment.kt	(revision 84d1fdb570a0bdbc47ab792a42c5e28e5e6f3c5b)
+++ b/checkout/src/main/java/company/tap/checkout/internal/webview/WebFragment.kt	(date 1683471649471)
@@ -7,7 +7,6 @@
  **/
 import android.annotation.SuppressLint
 import android.app.Activity
-import android.content.Context
 import android.content.res.ColorStateList
 import android.graphics.Color
 import android.os.Bundle
@@ -17,19 +16,25 @@
 import android.view.LayoutInflater
 import android.view.View
 import android.view.ViewGroup
+import android.view.animation.AnimationUtils
 import android.webkit.WebChromeClient
 import android.webkit.WebSettings
 import android.webkit.WebView
+import android.widget.FrameLayout
+import android.widget.LinearLayout
 import android.widget.ProgressBar
+import android.widget.RelativeLayout
 import androidx.annotation.DrawableRes
-import androidx.appcompat.app.AppCompatActivity
 import androidx.fragment.app.DialogFragment
 import company.tap.checkout.R
 import company.tap.checkout.internal.api.models.Charge
 import company.tap.checkout.internal.apiresponse.CardViewModel
 import company.tap.checkout.internal.utils.CustomUtils
+import company.tap.checkout.internal.utils.addFadeOutAnimation
+import company.tap.checkout.internal.utils.showToast
+import company.tap.checkout.internal.utils.twoThirdHeightView
+import company.tap.checkout.internal.viewholders.SwitchViewHolder
 import company.tap.checkout.internal.viewmodels.CheckoutViewModel
-import company.tap.checkout.open.CheckoutFragment
 import company.tap.checkout.open.controller.SDKSession.contextSDK
 import company.tap.checkout.open.data_managers.PaymentDataSource
 import company.tap.tapuilibrary.themekit.ThemeManager
@@ -37,13 +42,18 @@
 import company.tap.tapuilibrary.uikit.ktx.setTopBorders
 import kotlinx.android.synthetic.main.fragment_web.*
 import kotlinx.android.synthetic.main.fragment_web.web_view
+import kotlinx.android.synthetic.main.switch_layout.view.*
 import kotlinx.android.synthetic.main.web_view_layout.*
+import kotlin.math.roundToInt
 
 
 class WebFragment(
     private val webViewContract: WebViewContract?,
     private val cardViewModel: CardViewModel?,
-    private val checkoutViewModel: CheckoutViewModel
+    private val checkoutViewModel: CheckoutViewModel,
+    private val webFrameLayout: FrameLayout,
+    private val saveCardSwitchHolder: SwitchViewHolder?,
+    private val onLoadedWebView: () -> Unit
 ) : DialogFragment(),
     CustomWebViewClientContract {
 
@@ -51,9 +61,10 @@
     private var chargeResponse: Charge? = null
     val progressBar by lazy { view?.findViewById<ProgressBar>(R.id.progressBar) }
     private var displayMetrics: Int? = 0
+
     @DrawableRes
     val loaderGif: Int =
-        if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains("dark")) R.drawable.reduced_loader_white else R.drawable.reduced_loader_black
+        if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains("dark")) R.drawable.reduced_loader_white else R.drawable.loader_black
 
     override fun getTheme(): Int = R.style.DialogTheme
     override fun onCreateView(
@@ -81,9 +92,11 @@
         if (TextUtils.isEmpty(webViewUrl)) {
             throw IllegalArgumentException("Empty URL passed to WebViewFragment!")
         }
-        if (displayMetrics == DisplayMetrics.DENSITY_400 ||displayMetrics == DisplayMetrics.DENSITY_XXHIGH || displayMetrics == DisplayMetrics.DENSITY_450 || displayMetrics == DisplayMetrics.DENSITY_440) {
-            progressBar?.indeterminateDrawable = (context as Activity).resources.getDrawable(loaderGif)
-        }else  progressBar?.indeterminateDrawable = (context as Activity).resources.getDrawable(loaderGif)
+        if (displayMetrics == DisplayMetrics.DENSITY_400 || displayMetrics == DisplayMetrics.DENSITY_XXHIGH || displayMetrics == DisplayMetrics.DENSITY_450 || displayMetrics == DisplayMetrics.DENSITY_440) {
+            progressBar?.indeterminateDrawable =
+                (context as Activity).resources.getDrawable(loaderGif)
+        } else progressBar?.indeterminateDrawable =
+            (context as Activity).resources.getDrawable(loaderGif)
 
         progressBar?.visibility = View.VISIBLE
         web_view?.visibility = View.GONE
@@ -94,7 +107,7 @@
     private fun setTopDraggerView() {
         setTopBorders(
             topLinear,
-            40f,// corner raduis
+            80f,// corner raduis
             0.0f,
             Color.parseColor(ThemeManager.getValue("merchantHeaderView.backgroundColor")),// stroke color
             Color.parseColor(ThemeManager.getValue("merchantHeaderView.backgroundColor")),// tint color
@@ -104,7 +117,7 @@
         if (ThemeManager.currentTheme.isNotEmpty() && ThemeManager.currentTheme.contains("dark")) {
             setBorderedView(
                 draggerView,
-                40f,// corner raduis
+                80f,// corner raduis
                 0.0f,
                 Color.parseColor("#3b3b3c"),// stroke color
                 Color.parseColor("#3b3b3c"),// tint color
@@ -113,7 +126,7 @@
         } else {
             setBorderedView(
                 draggerView,
-                40f,// corner raduis
+                80f,// corner raduis
                 0.0f,
                 Color.parseColor("#e0e0e0"),// stroke color
                 Color.parseColor("#e0e0e0"),// tint color
@@ -127,9 +140,13 @@
     private fun setUpWebView(mUrl: String) {
         web_view.settings.javaScriptEnabled = true
         web_view.webChromeClient = WebChromeClient()
+        web_view.isVerticalScrollBarEnabled = true
+        web_view.isHorizontalScrollBarEnabled = true
+
         web_view.settings.mixedContentMode = WebSettings.MIXED_CONTENT_ALWAYS_ALLOW
-        web_view.webViewClient = cardViewModel?.let { TapCustomWebViewClient(this, it,checkoutViewModel) }!!
-      //  web_view.webViewClient = cardViewModel?.let { TapCustomWebViewClient2(this, it) }!!
+        web_view.webViewClient =
+            cardViewModel?.let { TapCustomWebViewClient(this, it, checkoutViewModel) }!!
+        //  web_view.webViewClient = cardViewModel?.let { TapCustomWebViewClient2(this, it) }!!
         web_view.settings.loadWithOverviewMode = true
         web_view.settings.layoutAlgorithm = WebSettings.LayoutAlgorithm.NORMAL
         web_view.settings.useWideViewPort = true
@@ -139,12 +156,12 @@
             if (event.action == KeyEvent.ACTION_UP && keyCode == KeyEvent.KEYCODE_BACK) {
 
                 //if (web_view.canGoBack()) {
-                    web_view.goBack()
-                    CheckoutViewModel().cancelledCall()
-                    /**
-                     * put here listener or delegate thT process cancelled **/
-                    return@setOnKeyListener true
-              //  }
+                web_view.goBack()
+                CheckoutViewModel().cancelledCall()
+                /**
+                 * put here listener or delegate thT process cancelled **/
+                return@setOnKeyListener true
+                //  }
                 return@setOnKeyListener false
             }
             false
@@ -166,9 +183,9 @@
                 // Update the progress bar with page loading progress
                 progressBar?.progress = newProgress
                 if (newProgress == 100) {
-                    // Hide the progressbar
+                    onLoadedWebView.invoke()
                     progressBar?.visibility = View.GONE
-                      web_view?.visibility = View.VISIBLE
+                    web_view.visibility = View.VISIBLE
                 }
             }
         }
@@ -189,17 +206,19 @@
     override fun submitResponseStatus(success: Boolean) {
         /*  val intent = Intent(activity, CheckoutFragment::class.java)
           startActivity(intent)*/
-    //    webViewContract?.redirectLoadingFinished(success, chargeResponse, contextSDK)
+        //    webViewContract?.redirectLoadingFinished(success, chargeResponse, contextSDK)
     }
 
     override fun getRedirectedURL(url: String) {
-        println("url are>>"+PaymentDataSource.getChargeOrAuthorize())
+        println("url are>>" + PaymentDataSource.getChargeOrAuthorize())
         // webViewContract.redirectLoadingFinished(url.contains("https://www.google.com/search?"))
         if (url.contains("gosellsdk://return_url")) {
-           // webViewContract?.resultObtained(true, contextSDK)
+            // webViewContract?.resultObtained(true, contextSDK)
 
-        webViewContract?.redirectLoadingFinished(url.contains("gosellsdk://return_url"), chargeResponse,
-            contextSDK)
+            webViewContract?.redirectLoadingFinished(
+                url.contains("gosellsdk://return_url"), chargeResponse,
+                contextSDK
+            )
         } else {
 
 //            webViewContract.directLoadingFinished(true)
@@ -216,18 +235,27 @@
             webViewContract: WebViewContract,
             cardViewModel: CardViewModel,
             chargeResponse: Charge?,
-            checkoutViewModel: CheckoutViewModel
+            checkoutViewModel: CheckoutViewModel,
+            webFrameLayout: FrameLayout,
+            saveCardSwitchHolder: SwitchViewHolder?,
+            onLoadedWebView: () -> Unit
         ): WebFragment {
-            val fragment = WebFragment(webViewContract, cardViewModel,checkoutViewModel)
+            val fragment = WebFragment(
+                webViewContract,
+                cardViewModel,
+                checkoutViewModel,
+                webFrameLayout,
+                saveCardSwitchHolder,
+                onLoadedWebView
+            )
             val args = Bundle()
             args.putString(KEY_URL, url)
             args.putSerializable(CHARGE, chargeResponse)
             fragment.arguments = args
-            println("fragment is"+fragment)
+            println("fragment is" + fragment)
             return fragment
         }
     }
 
 
-
 }
\ No newline at end of file
Index: checkout/src/main/res/anim/slide_out_up.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout/src/main/res/anim/slide_out_up.xml b/checkout/src/main/res/anim/slide_out_up.xml
new file mode 100644
--- /dev/null	(date 1683463538574)
+++ b/checkout/src/main/res/anim/slide_out_up.xml	(date 1683463538574)
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<translate xmlns:android="http://schemas.android.com/apk/res/android"
+    android:duration="@android:integer/config_longAnimTime"
+    android:fromYDelta="0%p"
+    android:toYDelta="-100%p" />
\ No newline at end of file
Index: checkout/src/main/res/anim/slide_in_up.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout/src/main/res/anim/slide_in_up.xml b/checkout/src/main/res/anim/slide_in_up.xml
new file mode 100644
--- /dev/null	(date 1683463519825)
+++ b/checkout/src/main/res/anim/slide_in_up.xml	(date 1683463519825)
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<translate xmlns:android="http://schemas.android.com/apk/res/android"
+    android:duration="@android:integer/config_longAnimTime"
+    android:fromYDelta="100%p"
+    android:toYDelta="0%p" />
\ No newline at end of file
